#	typemap.dat
#
#	Use this file to define namespace prefix and type bindings for
#	the generated header files by the 'wsdl2h' tool.  typemap.dat is the
#	default file processed by 'wsdl2h' to customize its output. You can use
#	wsdl2h option -t to specify an alternate file.
#
#	XML namespace prefix bindings can be provided to override the default
#	choice of the ns1, ns2, ... prefixes generated by wsdl2h.  It is highly
#	recommended to provide namespace prefixes for your project's XML
#	namespaces. In this way, changes to the WSDL (or newer releases of
#	wsdl2h) will have a minimal impact on coding.
#	Bindings for namespace prefixes are of the form:
#		prefix = "URI"
#
#	Type bindings can be provided to bind XML schema types to C/C++ types
#	for your project.
#	Type bindings are of the form:
#		prefix__type = declaration | use | ptr-use
#	where 'declaration' introduces the type in the header file, 'use'
#	specifies how the type is used directly, 'ptr-use' specifies how the
#	type is used as a pointer type.
#	For example:
#		xsd__string = | char* | char*
#	or using wide strings:
#		xsd__string = | wchar_t* | wchar_t*
#	or using C++ strings, which need a pointer (added by default):
#		xsd__string = | std::string
#	or using C++ wstrings:
#		xsd__string = | std::wstring
#	After enabling this line, all XSD strings will be mapped to char* or
#	std::wstring, respectively to support Unicode. Note that the
#	'declaration' part is empty in this case.
#
#	Member data and functions can be provided to extend a generated struct
#	or class.
#	Class and struct extensions are of the form:
#		prefix__type = $ member-declaration
#	For example, to add a constructor and destructor to class myns__record:
#		myns__record = $ myns__record();
#		myns__record = $ ~myns__record();
#	
#	Any other material to be included in the generated header file can be
#	provided by enclosing the text within brackets [ and ]. Brackets MUST
#	appear at the start of a new line.
#	For example, to include a note:
#[
#// TODO: Don't forget to bind the namespace prefixes!
#]
#	This comment appears as the first line in the generated header file.
#
#-------------------------------------------------------------------------------
#gSOAP XML Web services tools
#Copyright (C) 2004-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
#This software is released under one of the following two licenses:
#GPL or Genivia's license for commercial use.
#-------------------------------------------------------------------------------
#GPL license.
#
#This program is free software; you can redistribute it and/or modify it under
#the terms of the GNU General Public License as published by the Free Software
#Foundation; either version 2 of the License, or (at your option) any later
#version.
#
#This program is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
#PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License along with
#this program; if not, write to the Free Software Foundation, Inc., 59 Temple
#Place, Suite 330, Boston, MA 02111-1307 USA
#
#Author contact information:
#engelen@genivia.com / engelen@acm.org
#-------------------------------------------------------------------------------
#A commercial use license is available from Genivia, Inc., contact@genivia.com
#-------------------------------------------------------------------------------

[
]

#	Uncomment the line below to use struct tm instead of time_t xsd:dateTime
#	Must compile and link custom/struct_tm.c with the project
#
#xsd__dateTime = #import "custom/struct_tm.h" | xsd__dateTime

#	Uncomment the line below to use timeval with usec precision xsd:dateTime
#	Must compile and link custom/struct_timeval.c with the project
#
#xsd__dateTime = #import "custom/struct_timeval.h" | xsd__dateTime

#	Uncomment the line below to use LONG64 int for xsd:duration
#	(with high ms precision)
#	Must compile and link custom/duration.c with the project

#xsd__duration = #import "custom/duration.h" | xsd__duration
#xsd__duration = #import "import/xsd.h" | xsd__duration

#	Prefix binding for local INSPIRE schema:

plu = "http://inspire.ec.europa.eu/schemas/plu/3.0"
base = "http://inspire.ec.europa.eu/schemas/base/3.3"
base2 = "http://inspire.ec.europa.eu/schemas/base2/1.0"
lunom = "http://inspire.ec.europa.eu/schemas/lunom/3.0"
sc = "http://www.interactive-instruments.de/ShapeChange/AppInfo"
gml = "http://www.opengis.net/gml/3.2"
gmd = "http://www.isotc211.org/2005/gmd"
gco = "http://www.isotc211.org/2005/gco"
gss = "http://www.isotc211.org/2005/gss"
gts = "http://www.isotc211.org/2005/gts"
gsr = "http://www.isotc211.org/2005/gsr"
idls = "http://inspire.ec.europa.eu/schemas/inspire_dls/1.0"
icommon = "http://inspire.ec.europa.eu/schemas/common/1.0"

#	OGC prefix binding
f2i-plu = "http://plu.fit2inspire.eu/plu3"
wfs = "http://www.opengis.net/wfs/2.0"
util = "http://www.opengis.net/wfs-util/2.0"
ows = "http://www.opengis.net/ows/1.1"
fes = "http://www.opengis.net/fes/2.0"

#	xlink
xlink = "http://www.w3.org/1999/xlink"

_xlink__actuate		= | char*
_xlink__arcrole		= | char*
_xlink__from		= | char*
_xlink__href		= | char*
_xlink__label		= | char*
_xlink__role		= | char*
_xlink__show		= | char*
_xlink__to		= | char*
_xlink__title		= | char*
_xlink__type		= | char*

#	Remember: type bindings are given on a single line (use \ when needed).
#	Here is an example binding for the XSD int type:

xsd__int	= | int
xsd__integer	= | long

#	To use regular char* strings instead of std::string, use:

# xsd__string	= | char* | char*

#	For char* serialized with xsi:type when using soapcpp2 option -t, use:

# xsd__string	= typedef char *xsd__string; | xsd__string | xsd__string

#	More examples:

# xsd__boolean = enum xsd__boolean { false_, true_ }; | enum xsd__boolean

# xsd__base64Binary = class xsd__base64Binary { unsigned char *__ptr; int __size; }; | xsd__base64Binary | xsd__base64Binary
