/* soapH.h
   Generated by gSOAP 2.8.92 for ws-inspire-wfs2.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_xsd__byte_DEFINED
#define SOAP_TYPE_xsd__byte_DEFINED

inline void soap_default_xsd__byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__byte
	*a = SOAP_DEFAULT_xsd__byte;
#else
	*a = (char)0;
#endif
}

#define soap_xsd__byte2s soap_byte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);

#define soap_s2xsd__byte soap_s2byte

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);

#define soap_instantiate_xsd__byte soap_instantiate_byte


#define soap_new_xsd__byte soap_new_byte

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_xsd__byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

inline int soap_read_xsd__byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__byte(struct soap *soap, char *p)
{
	if (::soap_read_xsd__byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__short_DEFINED
#define SOAP_TYPE_xsd__short_DEFINED

inline void soap_default_xsd__short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__short
	*a = SOAP_DEFAULT_xsd__short;
#else
	*a = (short)0;
#endif
}

#define soap_xsd__short2s soap_short2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const short *, const char*);

#define soap_s2xsd__short soap_s2short

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, short *, const char*);

#define soap_instantiate_xsd__short soap_instantiate_short


#define soap_new_xsd__short soap_new_short

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__short(struct soap*, const short *, const char*, const char*);

inline int soap_write_xsd__short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__short(soap, p, "xsd:short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__short(soap, p, "xsd:short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__short(soap, p, "xsd:short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__short(soap, p, "xsd:short", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, short *, const char*, const char*);

inline int soap_read_xsd__short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__short(struct soap *soap, short *p)
{
	if (::soap_read_xsd__short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_short(struct soap *soap, short *p)
{
	if (::soap_read_short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _SOAP_ENC__mustUnderstand is a typedef synonym of int */

#ifndef SOAP_TYPE__SOAP_ENC__mustUnderstand_DEFINED
#define SOAP_TYPE__SOAP_ENC__mustUnderstand_DEFINED

#define soap_default__SOAP_ENC__mustUnderstand soap_default_int


#define soap__SOAP_ENC__mustUnderstand2s soap_int2s


#define soap_out__SOAP_ENC__mustUnderstand soap_out_int


#define soap_s2_SOAP_ENC__mustUnderstand soap_s2int


#define soap_in__SOAP_ENC__mustUnderstand soap_in_int


#define soap_instantiate__SOAP_ENC__mustUnderstand soap_instantiate_int


#define soap_new__SOAP_ENC__mustUnderstand soap_new_int

SOAP_FMAC3 int SOAP_FMAC4 soap_put__SOAP_ENC__mustUnderstand(struct soap*, const int *, const char*, const char*);

inline int soap_write__SOAP_ENC__mustUnderstand(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__SOAP_ENC__mustUnderstand(soap, p, "SOAP-ENC:mustUnderstand", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__SOAP_ENC__mustUnderstand(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__SOAP_ENC__mustUnderstand(soap, p, "SOAP-ENC:mustUnderstand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__SOAP_ENC__mustUnderstand(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__SOAP_ENC__mustUnderstand(soap, p, "SOAP-ENC:mustUnderstand", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__SOAP_ENC__mustUnderstand(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__SOAP_ENC__mustUnderstand(soap, p, "SOAP-ENC:mustUnderstand", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__SOAP_ENC__mustUnderstand soap_get_int


#define soap_read__SOAP_ENC__mustUnderstand soap_read_int


#define soap_GET__SOAP_ENC__mustUnderstand soap_GET_int


#define soap_POST_recv__SOAP_ENC__mustUnderstand soap_POST_recv_int

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_long_DEFINED
#define SOAP_TYPE_long_DEFINED

inline void soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);

SOAP_FMAC3 long * SOAP_FMAC4 soap_new_long(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

inline int soap_write_long(struct soap *soap, long const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_long(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_long(struct soap *soap, const char *URL, long const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_long(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_long(struct soap *soap, const char *URL, long const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_long(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_long(struct soap *soap, const char *URL, long const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_long(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

inline int soap_read_long(struct soap *soap, long *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_long(struct soap *soap, const char *URL, long *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_long(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_long(struct soap *soap, long *p)
{
	if (::soap_read_long(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__nonPositiveInteger_DEFINED
#define SOAP_TYPE_xsd__nonPositiveInteger_DEFINED

inline void soap_default_xsd__nonPositiveInteger(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__nonPositiveInteger
	*a = SOAP_DEFAULT_xsd__nonPositiveInteger;
#else
	*a = (LONG64)0;
#endif
}

#define soap_xsd__nonPositiveInteger2s soap_LONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonPositiveInteger(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__nonPositiveInteger(struct soap*, const char*, LONG64 *);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__nonPositiveInteger(struct soap*, const char*, LONG64 *, const char*);

#define soap_instantiate_xsd__nonPositiveInteger soap_instantiate_LONG64


#define soap_new_xsd__nonPositiveInteger soap_new_LONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonPositiveInteger(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__nonPositiveInteger(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__nonPositiveInteger(soap, p, "xsd:nonPositiveInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonPositiveInteger(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonPositiveInteger(soap, p, "xsd:nonPositiveInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__nonPositiveInteger(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonPositiveInteger(soap, p, "xsd:nonPositiveInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonPositiveInteger(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonPositiveInteger(soap, p, "xsd:nonPositiveInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__nonPositiveInteger(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__nonPositiveInteger(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__nonPositiveInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonPositiveInteger(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__nonPositiveInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__nonPositiveInteger(struct soap *soap, LONG64 *p)
{
	if (::soap_read_xsd__nonPositiveInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__negativeInteger_DEFINED
#define SOAP_TYPE_xsd__negativeInteger_DEFINED

inline void soap_default_xsd__negativeInteger(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__negativeInteger
	*a = SOAP_DEFAULT_xsd__negativeInteger;
#else
	*a = (LONG64)0;
#endif
}

#define soap_xsd__negativeInteger2s soap_LONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__negativeInteger(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__negativeInteger(struct soap*, const char*, LONG64 *);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__negativeInteger(struct soap*, const char*, LONG64 *, const char*);

#define soap_instantiate_xsd__negativeInteger soap_instantiate_LONG64


#define soap_new_xsd__negativeInteger soap_new_LONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__negativeInteger(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__negativeInteger(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__negativeInteger(soap, p, "xsd:negativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__negativeInteger(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__negativeInteger(soap, p, "xsd:negativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__negativeInteger(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__negativeInteger(soap, p, "xsd:negativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__negativeInteger(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__negativeInteger(soap, p, "xsd:negativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__negativeInteger(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__negativeInteger(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__negativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__negativeInteger(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__negativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__negativeInteger(struct soap *soap, LONG64 *p)
{
	if (::soap_read_xsd__negativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__long_DEFINED
#define SOAP_TYPE_xsd__long_DEFINED

inline void soap_default_xsd__long(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__long
	*a = SOAP_DEFAULT_xsd__long;
#else
	*a = (LONG64)0;
#endif
}

#define soap_xsd__long2s soap_LONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const LONG64 *, const char*);

#define soap_s2xsd__long soap_s2LONG64

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, LONG64 *, const char*);

#define soap_instantiate_xsd__long soap_instantiate_LONG64


#define soap_new_xsd__long soap_new_LONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__long(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__long(soap, p, "xsd:long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__long(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__long(soap, p, "xsd:long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__long(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__long(soap, p, "xsd:long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__long(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__long(soap, p, "xsd:long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__long(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__long(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__long(struct soap *soap, LONG64 *p)
{
	if (::soap_read_xsd__long(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__integer
	*a = SOAP_DEFAULT_xsd__integer;
#else
	*a = (LONG64)0;
#endif
}

#define soap_xsd__integer2s soap_LONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__integer(struct soap*, const char*, LONG64 *);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, LONG64 *, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_LONG64


#define soap_new_xsd__integer soap_new_LONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__integer(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, LONG64 *p)
{
	if (::soap_read_xsd__integer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__float_DEFINED
#define SOAP_TYPE_xsd__float_DEFINED

inline void soap_default_xsd__float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__float
	*a = SOAP_DEFAULT_xsd__float;
#else
	*a = (float)0;
#endif
}

#define soap_xsd__float2s soap_float2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const float *, const char*);

#define soap_s2xsd__float soap_s2float

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, float *, const char*);

#define soap_instantiate_xsd__float soap_instantiate_float


#define soap_new_xsd__float soap_new_float

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap*, const float *, const char*, const char*);

inline int soap_write_xsd__float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__float(soap, p, "xsd:float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__float(soap, p, "xsd:float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__float(soap, p, "xsd:float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__float(soap, p, "xsd:float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, float *, const char*, const char*);

inline int soap_read_xsd__float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__float(struct soap *soap, float *p)
{
	if (::soap_read_xsd__float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__double_DEFINED
#define SOAP_TYPE_xsd__double_DEFINED

inline void soap_default_xsd__double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__double
	*a = SOAP_DEFAULT_xsd__double;
#else
	*a = (double)0;
#endif
}

#define soap_xsd__double2s soap_double2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const double *, const char*);

#define soap_s2xsd__double soap_s2double

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, double *, const char*);

#define soap_instantiate_xsd__double soap_instantiate_double


#define soap_new_xsd__double soap_new_double

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap*, const double *, const char*, const char*);

inline int soap_write_xsd__double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__double(soap, p, "xsd:double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__double(soap, p, "xsd:double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__double(soap, p, "xsd:double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__double(soap, p, "xsd:double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, double *, const char*, const char*);

inline int soap_read_xsd__double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__double(struct soap *soap, double *p)
{
	if (::soap_read_xsd__double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__decimal
	*a = SOAP_DEFAULT_xsd__decimal;
#else
	*a = (double)0;
#endif
}

#define soap_xsd__decimal2s soap_double2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__decimal(struct soap*, const char*, double *);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, double *, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_double


#define soap_new_xsd__decimal soap_new_double

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const double *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, double *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, double *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_DEFINED
#define SOAP_TYPE_xsd__unsignedByte_DEFINED

inline void soap_default_xsd__unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedByte
	*a = SOAP_DEFAULT_xsd__unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

#define soap_xsd__unsignedByte2s soap_unsignedByte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);

#define soap_s2xsd__unsignedByte soap_s2unsignedByte

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

#define soap_instantiate_xsd__unsignedByte soap_instantiate_unsignedByte


#define soap_new_xsd__unsignedByte soap_new_unsignedByte

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_xsd__unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_xsd__unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort_DEFINED
#define SOAP_TYPE_xsd__unsignedShort_DEFINED

inline void soap_default_xsd__unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedShort
	*a = SOAP_DEFAULT_xsd__unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

#define soap_xsd__unsignedShort2s soap_unsignedShort2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);

#define soap_s2xsd__unsignedShort soap_s2unsignedShort

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, unsigned short *, const char*);

#define soap_instantiate_xsd__unsignedShort soap_instantiate_unsignedShort


#define soap_new_xsd__unsignedShort soap_new_unsignedShort

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

inline int soap_write_xsd__unsignedShort(struct soap *soap, unsigned short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__unsignedShort(soap, p, "xsd:unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedShort(soap, p, "xsd:unsignedShort", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedShort(soap, p, "xsd:unsignedShort", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedShort(soap, p, "xsd:unsignedShort", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, unsigned short *, const char*, const char*);

inline int soap_read_xsd__unsignedShort(struct soap *soap, unsigned short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedShort(struct soap *soap, const char *URL, unsigned short *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__unsignedShort(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__unsignedShort(struct soap *soap, unsigned short *p)
{
	if (::soap_read_xsd__unsignedShort(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedShort_DEFINED
#define SOAP_TYPE_unsignedShort_DEFINED

inline void soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_new_unsignedShort(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

inline int soap_write_unsignedShort(struct soap *soap, unsigned short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

inline int soap_read_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedShort(struct soap *soap, const char *URL, unsigned short *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedShort(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (::soap_read_unsignedShort(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt_DEFINED
#define SOAP_TYPE_xsd__unsignedInt_DEFINED

inline void soap_default_xsd__unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedInt
	*a = SOAP_DEFAULT_xsd__unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

#define soap_xsd__unsignedInt2s soap_unsignedInt2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);

#define soap_s2xsd__unsignedInt soap_s2unsignedInt

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, unsigned int *, const char*);

#define soap_instantiate_xsd__unsignedInt soap_instantiate_unsignedInt


#define soap_new_xsd__unsignedInt soap_new_unsignedInt

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_xsd__unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__unsignedInt(soap, p, "xsd:unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedInt(soap, p, "xsd:unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedInt(soap, p, "xsd:unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedInt(soap, p, "xsd:unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_xsd__unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_xsd__unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong_DEFINED
#define SOAP_TYPE_xsd__unsignedLong_DEFINED

inline void soap_default_xsd__unsignedLong(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedLong
	*a = SOAP_DEFAULT_xsd__unsignedLong;
#else
	*a = (ULONG64)0;
#endif
}

#define soap_xsd__unsignedLong2s soap_ULONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const ULONG64 *, const char*);

#define soap_s2xsd__unsignedLong soap_s2ULONG64

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, ULONG64 *, const char*);

#define soap_instantiate_xsd__unsignedLong soap_instantiate_ULONG64


#define soap_new_xsd__unsignedLong soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedLong(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_xsd__unsignedLong(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__unsignedLong(soap, p, "xsd:unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedLong(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedLong(soap, p, "xsd:unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__unsignedLong(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedLong(soap, p, "xsd:unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedLong(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedLong(soap, p, "xsd:unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_xsd__unsignedLong(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__unsignedLong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedLong(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__unsignedLong(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__unsignedLong(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_xsd__unsignedLong(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger_DEFINED
#define SOAP_TYPE_xsd__positiveInteger_DEFINED

inline void soap_default_xsd__positiveInteger(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__positiveInteger
	*a = SOAP_DEFAULT_xsd__positiveInteger;
#else
	*a = (ULONG64)0;
#endif
}

#define soap_xsd__positiveInteger2s soap_ULONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__positiveInteger(struct soap*, const char*, ULONG64 *);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap*, const char*, ULONG64 *, const char*);

#define soap_instantiate_xsd__positiveInteger soap_instantiate_ULONG64


#define soap_new_xsd__positiveInteger soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_xsd__positiveInteger(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_xsd__positiveInteger(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__positiveInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__positiveInteger(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__positiveInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__positiveInteger(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_xsd__positiveInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_xsd__nonNegativeInteger_DEFINED

inline void soap_default_xsd__nonNegativeInteger(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__nonNegativeInteger
	*a = SOAP_DEFAULT_xsd__nonNegativeInteger;
#else
	*a = (ULONG64)0;
#endif
}

#define soap_xsd__nonNegativeInteger2s soap_ULONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__nonNegativeInteger(struct soap*, const char*, ULONG64 *);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, ULONG64 *, const char*);

#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_ULONG64


#define soap_new_xsd__nonNegativeInteger soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_xsd__nonNegativeInteger(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__nonNegativeInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__nonNegativeInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__nonNegativeInteger(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__nonNegativeInteger(soap, p, "xsd:nonNegativeInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_xsd__nonNegativeInteger(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__nonNegativeInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__nonNegativeInteger(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__nonNegativeInteger(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_xsd__nonNegativeInteger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _icommon__SpatialDataServiceType is a typedef synonym of icommon__spatialDataServiceType */

#ifndef SOAP_TYPE__icommon__SpatialDataServiceType_DEFINED
#define SOAP_TYPE__icommon__SpatialDataServiceType_DEFINED

#define soap_default__icommon__SpatialDataServiceType soap_default_icommon__spatialDataServiceType


#define soap__icommon__SpatialDataServiceType2s soap_icommon__spatialDataServiceType2s


#define soap_out__icommon__SpatialDataServiceType soap_out_icommon__spatialDataServiceType


#define soap_s2_icommon__SpatialDataServiceType soap_s2icommon__spatialDataServiceType


#define soap_in__icommon__SpatialDataServiceType soap_in_icommon__spatialDataServiceType


#define soap_instantiate__icommon__SpatialDataServiceType soap_instantiate_icommon__spatialDataServiceType


#define soap_new__icommon__SpatialDataServiceType soap_new_icommon__spatialDataServiceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__SpatialDataServiceType(struct soap*, const enum icommon__spatialDataServiceType *, const char*, const char*);

inline int soap_write__icommon__SpatialDataServiceType(struct soap *soap, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__SpatialDataServiceType(soap, p, "icommon:SpatialDataServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__SpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__SpatialDataServiceType(soap, p, "icommon:SpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__SpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__SpatialDataServiceType(soap, p, "icommon:SpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__SpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__SpatialDataServiceType(soap, p, "icommon:SpatialDataServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__SpatialDataServiceType soap_get_icommon__spatialDataServiceType


#define soap_read__icommon__SpatialDataServiceType soap_read_icommon__spatialDataServiceType


#define soap_GET__icommon__SpatialDataServiceType soap_GET_icommon__spatialDataServiceType


#define soap_POST_recv__icommon__SpatialDataServiceType soap_POST_recv_icommon__spatialDataServiceType

#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_swe-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fswe_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fswe_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fswe_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fswe_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fswe_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fswe_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fswe_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fswe_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fswe_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fswe_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fswe_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fswe_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fswe_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fswe_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fswe_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fswe_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fswe_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fswe_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fswe_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fswe_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fswe_KeywordValue(soap, p, "icommon:inspireTheme_swe-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fswe_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fswe_KeywordValue(soap, p, "icommon:inspireTheme_swe-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fswe_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fswe_KeywordValue(soap, p, "icommon:inspireTheme_swe-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fswe_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fswe_KeywordValue(soap, p, "icommon:inspireTheme_swe-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fswe_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fswe_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fswe_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fswe_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fswe_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fswe_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fswe_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fswe_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fswe_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fswe_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_spa-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fspa_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fspa_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fspa_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fspa_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fspa_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fspa_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fspa_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fspa_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fspa_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fspa_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fspa_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fspa_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fspa_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fspa_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fspa_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fspa_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fspa_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fspa_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fspa_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fspa_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fspa_KeywordValue(soap, p, "icommon:inspireTheme_spa-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fspa_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fspa_KeywordValue(soap, p, "icommon:inspireTheme_spa-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fspa_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fspa_KeywordValue(soap, p, "icommon:inspireTheme_spa-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fspa_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fspa_KeywordValue(soap, p, "icommon:inspireTheme_spa-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fspa_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fspa_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fspa_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fspa_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fspa_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fspa_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fspa_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fspa_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fspa_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fspa_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slv-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslv_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fslv_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fslv_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslv_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fslv_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fslv_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fslv_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fslv_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fslv_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fslv_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fslv_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fslv_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fslv_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fslv_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fslv_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fslv_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fslv_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fslv_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fslv_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslv_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fslv_KeywordValue(soap, p, "icommon:inspireTheme_slv-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslv_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fslv_KeywordValue(soap, p, "icommon:inspireTheme_slv-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslv_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fslv_KeywordValue(soap, p, "icommon:inspireTheme_slv-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslv_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fslv_KeywordValue(soap, p, "icommon:inspireTheme_slv-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fslv_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fslv_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fslv_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslv_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fslv_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslv_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fslv_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fslv_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslv_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fslv_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_slo-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fslo_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fslo_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fslo_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslo_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fslo_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fslo_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fslo_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fslo_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fslo_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fslo_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fslo_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fslo_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fslo_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fslo_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fslo_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fslo_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fslo_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fslo_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fslo_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslo_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fslo_KeywordValue(soap, p, "icommon:inspireTheme_slo-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslo_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fslo_KeywordValue(soap, p, "icommon:inspireTheme_slo-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslo_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fslo_KeywordValue(soap, p, "icommon:inspireTheme_slo-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslo_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fslo_KeywordValue(soap, p, "icommon:inspireTheme_slo-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fslo_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fslo_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fslo_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslo_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fslo_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fslo_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fslo_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fslo_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fslo_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fslo_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005frum_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005frum_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005frum_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005frum_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005frum_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005frum_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005frum_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005frum_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005frum_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005frum_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_rum-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005frum_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005frum_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005frum_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005frum_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005frum_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005frum_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005frum_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005frum_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005frum_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005frum_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005frum_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005frum_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005frum_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005frum_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005frum_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005frum_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005frum_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005frum_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005frum_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005frum_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005frum_KeywordValue(soap, p, "icommon:inspireTheme_rum-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005frum_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005frum_KeywordValue(soap, p, "icommon:inspireTheme_rum-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005frum_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005frum_KeywordValue(soap, p, "icommon:inspireTheme_rum-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005frum_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005frum_KeywordValue(soap, p, "icommon:inspireTheme_rum-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005frum_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005frum_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005frum_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005frum_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005frum_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005frum_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005frum_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005frum_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005frum_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005frum_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_por-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpor_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fpor_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fpor_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpor_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fpor_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fpor_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fpor_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fpor_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fpor_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fpor_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fpor_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fpor_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fpor_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fpor_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fpor_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fpor_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fpor_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fpor_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fpor_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpor_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fpor_KeywordValue(soap, p, "icommon:inspireTheme_por-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpor_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fpor_KeywordValue(soap, p, "icommon:inspireTheme_por-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpor_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fpor_KeywordValue(soap, p, "icommon:inspireTheme_por-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpor_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fpor_KeywordValue(soap, p, "icommon:inspireTheme_por-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fpor_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fpor_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fpor_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpor_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fpor_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpor_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fpor_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fpor_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpor_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fpor_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_pol-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fpol_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fpol_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fpol_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpol_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fpol_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fpol_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fpol_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fpol_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fpol_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fpol_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fpol_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fpol_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fpol_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fpol_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fpol_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fpol_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fpol_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fpol_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fpol_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpol_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fpol_KeywordValue(soap, p, "icommon:inspireTheme_pol-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpol_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fpol_KeywordValue(soap, p, "icommon:inspireTheme_pol-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpol_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fpol_KeywordValue(soap, p, "icommon:inspireTheme_pol-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpol_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fpol_KeywordValue(soap, p, "icommon:inspireTheme_pol-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fpol_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fpol_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fpol_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpol_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fpol_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fpol_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fpol_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fpol_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fpol_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fpol_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_mlt-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fmlt_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fmlt_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fmlt_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fmlt_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fmlt_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fmlt_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fmlt_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fmlt_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fmlt_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fmlt_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fmlt_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fmlt_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fmlt_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fmlt_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fmlt_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fmlt_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fmlt_KeywordValue(soap, p, "icommon:inspireTheme_mlt-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fmlt_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fmlt_KeywordValue(soap, p, "icommon:inspireTheme_mlt-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fmlt_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fmlt_KeywordValue(soap, p, "icommon:inspireTheme_mlt-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fmlt_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fmlt_KeywordValue(soap, p, "icommon:inspireTheme_mlt-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fmlt_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fmlt_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fmlt_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fmlt_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fmlt_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fmlt_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fmlt_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fmlt_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fmlt_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flit_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flit_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flit_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flit_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005flit_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flit_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flit_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flit_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flit_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005flit_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lit-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flit_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005flit_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005flit_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flit_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005flit_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005flit_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005flit_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005flit_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005flit_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005flit_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005flit_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005flit_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005flit_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005flit_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005flit_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005flit_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005flit_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005flit_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005flit_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flit_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005flit_KeywordValue(soap, p, "icommon:inspireTheme_lit-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flit_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005flit_KeywordValue(soap, p, "icommon:inspireTheme_lit-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flit_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005flit_KeywordValue(soap, p, "icommon:inspireTheme_lit-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flit_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005flit_KeywordValue(soap, p, "icommon:inspireTheme_lit-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005flit_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005flit_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005flit_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flit_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005flit_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flit_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005flit_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005flit_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flit_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005flit_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flav_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flav_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flav_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flav_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005flav_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flav_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005flav_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flav_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005flav_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005flav_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_lav-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005flav_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005flav_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005flav_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flav_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005flav_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005flav_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005flav_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005flav_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005flav_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005flav_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005flav_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005flav_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005flav_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005flav_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005flav_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005flav_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005flav_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005flav_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005flav_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flav_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005flav_KeywordValue(soap, p, "icommon:inspireTheme_lav-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flav_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005flav_KeywordValue(soap, p, "icommon:inspireTheme_lav-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flav_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005flav_KeywordValue(soap, p, "icommon:inspireTheme_lav-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flav_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005flav_KeywordValue(soap, p, "icommon:inspireTheme_lav-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005flav_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005flav_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005flav_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flav_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005flav_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005flav_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005flav_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005flav_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005flav_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005flav_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fita_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fita_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fita_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fita_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fita_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fita_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fita_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fita_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fita_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fita_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ita-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fita_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fita_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fita_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fita_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fita_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fita_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fita_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fita_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fita_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fita_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fita_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fita_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fita_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fita_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fita_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fita_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fita_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fita_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fita_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fita_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fita_KeywordValue(soap, p, "icommon:inspireTheme_ita-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fita_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fita_KeywordValue(soap, p, "icommon:inspireTheme_ita-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fita_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fita_KeywordValue(soap, p, "icommon:inspireTheme_ita-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fita_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fita_KeywordValue(soap, p, "icommon:inspireTheme_ita-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fita_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fita_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fita_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fita_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fita_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fita_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fita_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fita_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fita_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fita_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_hun-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fhun_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fhun_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fhun_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fhun_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fhun_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fhun_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fhun_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fhun_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fhun_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fhun_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fhun_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fhun_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fhun_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fhun_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fhun_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fhun_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fhun_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fhun_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fhun_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fhun_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fhun_KeywordValue(soap, p, "icommon:inspireTheme_hun-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fhun_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fhun_KeywordValue(soap, p, "icommon:inspireTheme_hun-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fhun_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fhun_KeywordValue(soap, p, "icommon:inspireTheme_hun-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fhun_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fhun_KeywordValue(soap, p, "icommon:inspireTheme_hun-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fhun_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fhun_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fhun_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fhun_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fhun_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fhun_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fhun_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fhun_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fhun_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fhun_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gre-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgre_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fgre_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fgre_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgre_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fgre_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fgre_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fgre_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fgre_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fgre_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fgre_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fgre_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fgre_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fgre_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fgre_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fgre_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fgre_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fgre_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fgre_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fgre_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fgre_KeywordValue(soap, p, "icommon:inspireTheme_gre-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fgre_KeywordValue(soap, p, "icommon:inspireTheme_gre-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fgre_KeywordValue(soap, p, "icommon:inspireTheme_gre-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fgre_KeywordValue(soap, p, "icommon:inspireTheme_gre-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fgre_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fgre_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fgre_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgre_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fgre_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgre_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fgre_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fgre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgre_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fgre_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_gle-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fgle_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fgle_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fgle_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgle_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fgle_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fgle_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fgle_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fgle_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fgle_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fgle_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fgle_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fgle_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fgle_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fgle_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fgle_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fgle_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fgle_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fgle_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fgle_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgle_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fgle_KeywordValue(soap, p, "icommon:inspireTheme_gle-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgle_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fgle_KeywordValue(soap, p, "icommon:inspireTheme_gle-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgle_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fgle_KeywordValue(soap, p, "icommon:inspireTheme_gle-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgle_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fgle_KeywordValue(soap, p, "icommon:inspireTheme_gle-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fgle_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fgle_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fgle_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgle_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fgle_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fgle_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fgle_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fgle_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fgle_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fgle_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fger_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fger_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fger_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fger_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fger_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fger_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fger_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fger_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fger_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fger_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_ger-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fger_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fger_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fger_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fger_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fger_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fger_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fger_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fger_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fger_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fger_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fger_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fger_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fger_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fger_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fger_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fger_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fger_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fger_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fger_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fger_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fger_KeywordValue(soap, p, "icommon:inspireTheme_ger-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fger_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fger_KeywordValue(soap, p, "icommon:inspireTheme_ger-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fger_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fger_KeywordValue(soap, p, "icommon:inspireTheme_ger-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fger_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fger_KeywordValue(soap, p, "icommon:inspireTheme_ger-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fger_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fger_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fger_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fger_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fger_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fger_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fger_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fger_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fger_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fger_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fre-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffre_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005ffre_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005ffre_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffre_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005ffre_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005ffre_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005ffre_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005ffre_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005ffre_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005ffre_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005ffre_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005ffre_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005ffre_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005ffre_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005ffre_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005ffre_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005ffre_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005ffre_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005ffre_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005ffre_KeywordValue(soap, p, "icommon:inspireTheme_fre-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005ffre_KeywordValue(soap, p, "icommon:inspireTheme_fre-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005ffre_KeywordValue(soap, p, "icommon:inspireTheme_fre-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffre_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005ffre_KeywordValue(soap, p, "icommon:inspireTheme_fre-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005ffre_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005ffre_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005ffre_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffre_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005ffre_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffre_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005ffre_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005ffre_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffre_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005ffre_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_fin-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005ffin_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005ffin_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005ffin_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffin_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005ffin_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005ffin_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005ffin_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005ffin_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005ffin_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005ffin_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005ffin_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005ffin_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005ffin_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005ffin_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005ffin_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005ffin_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005ffin_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005ffin_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005ffin_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffin_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005ffin_KeywordValue(soap, p, "icommon:inspireTheme_fin-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffin_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005ffin_KeywordValue(soap, p, "icommon:inspireTheme_fin-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffin_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005ffin_KeywordValue(soap, p, "icommon:inspireTheme_fin-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffin_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005ffin_KeywordValue(soap, p, "icommon:inspireTheme_fin-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005ffin_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005ffin_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005ffin_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffin_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005ffin_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005ffin_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005ffin_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005ffin_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005ffin_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005ffin_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fest_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fest_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fest_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fest_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fest_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fest_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fest_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fest_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fest_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fest_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_est-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fest_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fest_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fest_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fest_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fest_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fest_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fest_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fest_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fest_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fest_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fest_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fest_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fest_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fest_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fest_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fest_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fest_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fest_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fest_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fest_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fest_KeywordValue(soap, p, "icommon:inspireTheme_est-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fest_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fest_KeywordValue(soap, p, "icommon:inspireTheme_est-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fest_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fest_KeywordValue(soap, p, "icommon:inspireTheme_est-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fest_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fest_KeywordValue(soap, p, "icommon:inspireTheme_est-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fest_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fest_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fest_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fest_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fest_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fest_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fest_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fest_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fest_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fest_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005feng_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005feng_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005feng_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005feng_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005feng_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005feng_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005feng_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005feng_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005feng_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005feng_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_eng-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005feng_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005feng_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005feng_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005feng_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005feng_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005feng_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005feng_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005feng_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005feng_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005feng_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005feng_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005feng_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005feng_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005feng_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005feng_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005feng_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005feng_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005feng_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005feng_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005feng_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005feng_KeywordValue(soap, p, "icommon:inspireTheme_eng-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005feng_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005feng_KeywordValue(soap, p, "icommon:inspireTheme_eng-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005feng_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005feng_KeywordValue(soap, p, "icommon:inspireTheme_eng-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005feng_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005feng_KeywordValue(soap, p, "icommon:inspireTheme_eng-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005feng_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005feng_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005feng_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005feng_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005feng_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005feng_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005feng_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005feng_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005feng_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005feng_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dut-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdut_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fdut_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fdut_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdut_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fdut_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fdut_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fdut_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fdut_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fdut_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fdut_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fdut_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fdut_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fdut_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fdut_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fdut_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fdut_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fdut_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fdut_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fdut_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdut_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fdut_KeywordValue(soap, p, "icommon:inspireTheme_dut-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdut_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fdut_KeywordValue(soap, p, "icommon:inspireTheme_dut-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdut_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fdut_KeywordValue(soap, p, "icommon:inspireTheme_dut-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdut_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fdut_KeywordValue(soap, p, "icommon:inspireTheme_dut-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fdut_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fdut_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fdut_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdut_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fdut_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdut_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fdut_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fdut_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdut_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fdut_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_dan-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fdan_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fdan_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fdan_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdan_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fdan_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fdan_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fdan_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fdan_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fdan_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fdan_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fdan_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fdan_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fdan_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fdan_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fdan_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fdan_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fdan_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fdan_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fdan_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdan_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fdan_KeywordValue(soap, p, "icommon:inspireTheme_dan-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdan_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fdan_KeywordValue(soap, p, "icommon:inspireTheme_dan-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdan_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fdan_KeywordValue(soap, p, "icommon:inspireTheme_dan-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdan_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fdan_KeywordValue(soap, p, "icommon:inspireTheme_dan-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fdan_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fdan_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fdan_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdan_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fdan_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fdan_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fdan_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fdan_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fdan_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fdan_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_cze-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fcze_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fcze_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fcze_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fcze_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fcze_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fcze_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fcze_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fcze_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fcze_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fcze_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fcze_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fcze_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fcze_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fcze_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fcze_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fcze_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fcze_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fcze_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fcze_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fcze_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fcze_KeywordValue(soap, p, "icommon:inspireTheme_cze-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fcze_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fcze_KeywordValue(soap, p, "icommon:inspireTheme_cze-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fcze_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fcze_KeywordValue(soap, p, "icommon:inspireTheme_cze-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fcze_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fcze_KeywordValue(soap, p, "icommon:inspireTheme_cze-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fcze_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fcze_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fcze_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fcze_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fcze_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fcze_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fcze_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fcze_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fcze_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fcze_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-URI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-URI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-URI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_URI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title_DEFINED
#define SOAP_TYPE__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title_DEFINED

inline void soap_default__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title
	*a = SOAP_DEFAULT__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title;
#else
	*a = (enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap*, const char*, int, const enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title2s(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title * SOAP_FMAC4 soap_in__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *);

SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title * SOAP_FMAC4 soap_new__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap*, const enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *, const char*, const char*);

inline int soap_write__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(soap, p, "icommon:citationInspireInteroperabilityRegulation_bul-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title * SOAP_FMAC4 soap_get__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *, const char*, const char*);

inline int soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, const char *URL, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(struct soap *soap, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title *p)
{
	if (::soap_read__icommon__citationInspireInteroperabilityRegulation_x005fbul_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__inspireTheme_x005fbul_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__inspireTheme_x005fbul_KeywordValue_DEFINED

inline void soap_default__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fbul_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__inspireTheme_x005fbul_KeywordValue
	*a = SOAP_DEFAULT__icommon__inspireTheme_x005fbul_KeywordValue;
#else
	*a = (enum _icommon__inspireTheme_x005fbul_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__inspireTheme_x005fbul_KeywordValue(struct soap*, const char*, int, const enum _icommon__inspireTheme_x005fbul_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__inspireTheme_x005fbul_KeywordValue2s(struct soap*, enum _icommon__inspireTheme_x005fbul_KeywordValue);
SOAP_FMAC3 enum _icommon__inspireTheme_x005fbul_KeywordValue * SOAP_FMAC4 soap_in__icommon__inspireTheme_x005fbul_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fbul_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__inspireTheme_x005fbul_KeywordValue(struct soap*, const char*, enum _icommon__inspireTheme_x005fbul_KeywordValue *);

SOAP_FMAC3 enum _icommon__inspireTheme_x005fbul_KeywordValue * SOAP_FMAC4 soap_new__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__inspireTheme_x005fbul_KeywordValue(struct soap*, const enum _icommon__inspireTheme_x005fbul_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fbul_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__inspireTheme_x005fbul_KeywordValue(soap, p, "icommon:inspireTheme_bul-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fbul_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fbul_KeywordValue(soap, p, "icommon:inspireTheme_bul-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fbul_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fbul_KeywordValue(soap, p, "icommon:inspireTheme_bul-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fbul_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__inspireTheme_x005fbul_KeywordValue(soap, p, "icommon:inspireTheme_bul-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__inspireTheme_x005fbul_KeywordValue * SOAP_FMAC4 soap_get__icommon__inspireTheme_x005fbul_KeywordValue(struct soap*, enum _icommon__inspireTheme_x005fbul_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fbul_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__inspireTheme_x005fbul_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, const char *URL, enum _icommon__inspireTheme_x005fbul_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__inspireTheme_x005fbul_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__inspireTheme_x005fbul_KeywordValue(struct soap *soap, enum _icommon__inspireTheme_x005fbul_KeywordValue *p)
{
	if (::soap_read__icommon__inspireTheme_x005fbul_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__originatingControlledVocabularyMD_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__originatingControlledVocabularyMD_DateOfPublication_DEFINED

inline void soap_default__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__originatingControlledVocabularyMD_DateOfPublication
	*a = SOAP_DEFAULT__icommon__originatingControlledVocabularyMD_DateOfPublication;
#else
	*a = (enum _icommon__originatingControlledVocabularyMD_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, const char*, int, const enum _icommon__originatingControlledVocabularyMD_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__originatingControlledVocabularyMD_DateOfPublication2s(struct soap*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_DateOfPublication * SOAP_FMAC4 soap_in__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, const char*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, const char*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *);

SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_DateOfPublication * SOAP_FMAC4 soap_new__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, const enum _icommon__originatingControlledVocabularyMD_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__originatingControlledVocabularyMD_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyMD-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyMD_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyMD-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyMD_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyMD-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyMD_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyMD-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_DateOfPublication * SOAP_FMAC4 soap_get__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__originatingControlledVocabularyMD_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__originatingControlledVocabularyMD_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *p)
{
	if (::soap_read__icommon__originatingControlledVocabularyMD_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__originatingControlledVocabularyMD_Title_DEFINED
#define SOAP_TYPE__icommon__originatingControlledVocabularyMD_Title_DEFINED

inline void soap_default__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__originatingControlledVocabularyMD_Title
	*a = SOAP_DEFAULT__icommon__originatingControlledVocabularyMD_Title;
#else
	*a = (enum _icommon__originatingControlledVocabularyMD_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__originatingControlledVocabularyMD_Title(struct soap*, const char*, int, const enum _icommon__originatingControlledVocabularyMD_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__originatingControlledVocabularyMD_Title2s(struct soap*, enum _icommon__originatingControlledVocabularyMD_Title);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_Title * SOAP_FMAC4 soap_in__icommon__originatingControlledVocabularyMD_Title(struct soap*, const char*, enum _icommon__originatingControlledVocabularyMD_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__originatingControlledVocabularyMD_Title(struct soap*, const char*, enum _icommon__originatingControlledVocabularyMD_Title *);

SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_Title * SOAP_FMAC4 soap_new__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__originatingControlledVocabularyMD_Title(struct soap*, const enum _icommon__originatingControlledVocabularyMD_Title *, const char*, const char*);

inline int soap_write__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__originatingControlledVocabularyMD_Title(soap, p, "icommon:originatingControlledVocabularyMD-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyMD_Title(soap, p, "icommon:originatingControlledVocabularyMD-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyMD_Title(soap, p, "icommon:originatingControlledVocabularyMD-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyMD_Title(soap, p, "icommon:originatingControlledVocabularyMD-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_Title * SOAP_FMAC4 soap_get__icommon__originatingControlledVocabularyMD_Title(struct soap*, enum _icommon__originatingControlledVocabularyMD_Title *, const char*, const char*);

inline int soap_read__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__originatingControlledVocabularyMD_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyMD_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__originatingControlledVocabularyMD_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__originatingControlledVocabularyMD_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyMD_Title *p)
{
	if (::soap_read__icommon__originatingControlledVocabularyMD_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication_DEFINED

inline void soap_default__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication
	*a = SOAP_DEFAULT__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication;
#else
	*a = (enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, const char*, int, const enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication2s(struct soap*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication * SOAP_FMAC4 soap_in__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, const char*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, const char*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *);

SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication * SOAP_FMAC4 soap_new__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, const enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication * SOAP_FMAC4 soap_get__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *p)
{
	if (::soap_read__icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__originatingControlledVocabularyGemetInspireThemes_Title_DEFINED
#define SOAP_TYPE__icommon__originatingControlledVocabularyGemetInspireThemes_Title_DEFINED

inline void soap_default__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__originatingControlledVocabularyGemetInspireThemes_Title
	*a = SOAP_DEFAULT__icommon__originatingControlledVocabularyGemetInspireThemes_Title;
#else
	*a = (enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap*, const char*, int, const enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__originatingControlledVocabularyGemetInspireThemes_Title2s(struct soap*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title * SOAP_FMAC4 soap_in__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap*, const char*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap*, const char*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *);

SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title * SOAP_FMAC4 soap_new__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap*, const enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *, const char*, const char*);

inline int soap_write__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_Title(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_Title(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_Title(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__originatingControlledVocabularyGemetInspireThemes_Title(soap, p, "icommon:originatingControlledVocabularyGemetInspireThemes-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title * SOAP_FMAC4 soap_get__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *, const char*, const char*);

inline int soap_read__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__originatingControlledVocabularyGemetInspireThemes_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, const char *URL, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__originatingControlledVocabularyGemetInspireThemes_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__originatingControlledVocabularyGemetInspireThemes_Title(struct soap *soap, enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title *p)
{
	if (::soap_read__icommon__originatingControlledVocabularyGemetInspireThemes_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__series_ResourceType_DEFINED
#define SOAP_TYPE__icommon__series_ResourceType_DEFINED

inline void soap_default__icommon__series_ResourceType(struct soap *soap, enum _icommon__series_ResourceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__series_ResourceType
	*a = SOAP_DEFAULT__icommon__series_ResourceType;
#else
	*a = (enum _icommon__series_ResourceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__series_ResourceType(struct soap*, const char*, int, const enum _icommon__series_ResourceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__series_ResourceType2s(struct soap*, enum _icommon__series_ResourceType);
SOAP_FMAC3 enum _icommon__series_ResourceType * SOAP_FMAC4 soap_in__icommon__series_ResourceType(struct soap*, const char*, enum _icommon__series_ResourceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__series_ResourceType(struct soap*, const char*, enum _icommon__series_ResourceType *);

SOAP_FMAC3 enum _icommon__series_ResourceType * SOAP_FMAC4 soap_new__icommon__series_ResourceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__series_ResourceType(struct soap*, const enum _icommon__series_ResourceType *, const char*, const char*);

inline int soap_write__icommon__series_ResourceType(struct soap *soap, enum _icommon__series_ResourceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__series_ResourceType(soap, p, "icommon:series-ResourceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__series_ResourceType(struct soap *soap, const char *URL, enum _icommon__series_ResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__series_ResourceType(soap, p, "icommon:series-ResourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__series_ResourceType(struct soap *soap, const char *URL, enum _icommon__series_ResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__series_ResourceType(soap, p, "icommon:series-ResourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__series_ResourceType(struct soap *soap, const char *URL, enum _icommon__series_ResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__series_ResourceType(soap, p, "icommon:series-ResourceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__series_ResourceType * SOAP_FMAC4 soap_get__icommon__series_ResourceType(struct soap*, enum _icommon__series_ResourceType *, const char*, const char*);

inline int soap_read__icommon__series_ResourceType(struct soap *soap, enum _icommon__series_ResourceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__series_ResourceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__series_ResourceType(struct soap *soap, const char *URL, enum _icommon__series_ResourceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__series_ResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__series_ResourceType(struct soap *soap, enum _icommon__series_ResourceType *p)
{
	if (::soap_read__icommon__series_ResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__dataset_ResourceType_DEFINED
#define SOAP_TYPE__icommon__dataset_ResourceType_DEFINED

inline void soap_default__icommon__dataset_ResourceType(struct soap *soap, enum _icommon__dataset_ResourceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__dataset_ResourceType
	*a = SOAP_DEFAULT__icommon__dataset_ResourceType;
#else
	*a = (enum _icommon__dataset_ResourceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__dataset_ResourceType(struct soap*, const char*, int, const enum _icommon__dataset_ResourceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__dataset_ResourceType2s(struct soap*, enum _icommon__dataset_ResourceType);
SOAP_FMAC3 enum _icommon__dataset_ResourceType * SOAP_FMAC4 soap_in__icommon__dataset_ResourceType(struct soap*, const char*, enum _icommon__dataset_ResourceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__dataset_ResourceType(struct soap*, const char*, enum _icommon__dataset_ResourceType *);

SOAP_FMAC3 enum _icommon__dataset_ResourceType * SOAP_FMAC4 soap_new__icommon__dataset_ResourceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__dataset_ResourceType(struct soap*, const enum _icommon__dataset_ResourceType *, const char*, const char*);

inline int soap_write__icommon__dataset_ResourceType(struct soap *soap, enum _icommon__dataset_ResourceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__dataset_ResourceType(soap, p, "icommon:dataset-ResourceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__dataset_ResourceType(struct soap *soap, const char *URL, enum _icommon__dataset_ResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__dataset_ResourceType(soap, p, "icommon:dataset-ResourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__dataset_ResourceType(struct soap *soap, const char *URL, enum _icommon__dataset_ResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__dataset_ResourceType(soap, p, "icommon:dataset-ResourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__dataset_ResourceType(struct soap *soap, const char *URL, enum _icommon__dataset_ResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__dataset_ResourceType(soap, p, "icommon:dataset-ResourceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__dataset_ResourceType * SOAP_FMAC4 soap_get__icommon__dataset_ResourceType(struct soap*, enum _icommon__dataset_ResourceType *, const char*, const char*);

inline int soap_read__icommon__dataset_ResourceType(struct soap *soap, enum _icommon__dataset_ResourceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__dataset_ResourceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__dataset_ResourceType(struct soap *soap, const char *URL, enum _icommon__dataset_ResourceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__dataset_ResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__dataset_ResourceType(struct soap *soap, enum _icommon__dataset_ResourceType *p)
{
	if (::soap_read__icommon__dataset_ResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_swe-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_spa-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slv-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_slo-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_rum-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005frum_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_por-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_pol-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_mlt-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lit-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flit_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_lav-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005flav_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ita-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fita_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_hun-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gre-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_gle-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_ger-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fger_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fre-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_fin-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_est-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fest_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_eng-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005feng_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication_DEFINED
#define SOAP_TYPE__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication_DEFINED

inline void soap_default__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication
	*a = SOAP_DEFAULT__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication;
#else
	*a = (enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, const char*, int, const enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication2s(struct soap*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication);
SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication * SOAP_FMAC4 soap_in__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, const char*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, const char*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *);

SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication * SOAP_FMAC4 soap_new__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, const enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *, const char*, const char*);

inline int soap_write__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(soap, p, "icommon:citationGEMETInspireThemes_eng-DateOfPublication", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(soap, p, "icommon:citationGEMETInspireThemes_eng-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(soap, p, "icommon:citationGEMETInspireThemes_eng-DateOfPublication", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(soap, p, "icommon:citationGEMETInspireThemes_eng-DateOfPublication", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication * SOAP_FMAC4 soap_get__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *, const char*, const char*);

inline int soap_read__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *p)
{
	if (::soap_read__icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__citationGEMETInspireThemes_x005feng_Title_DEFINED
#define SOAP_TYPE__icommon__citationGEMETInspireThemes_x005feng_Title_DEFINED

inline void soap_default__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_Title *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__citationGEMETInspireThemes_x005feng_Title
	*a = SOAP_DEFAULT__icommon__citationGEMETInspireThemes_x005feng_Title;
#else
	*a = (enum _icommon__citationGEMETInspireThemes_x005feng_Title)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap*, const char*, int, const enum _icommon__citationGEMETInspireThemes_x005feng_Title *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__citationGEMETInspireThemes_x005feng_Title2s(struct soap*, enum _icommon__citationGEMETInspireThemes_x005feng_Title);
SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_Title * SOAP_FMAC4 soap_in__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap*, const char*, enum _icommon__citationGEMETInspireThemes_x005feng_Title *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__citationGEMETInspireThemes_x005feng_Title(struct soap*, const char*, enum _icommon__citationGEMETInspireThemes_x005feng_Title *);

SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_Title * SOAP_FMAC4 soap_new__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap*, const enum _icommon__citationGEMETInspireThemes_x005feng_Title *, const char*, const char*);

inline int soap_write__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_Title(soap, p, "icommon:citationGEMETInspireThemes_eng-Title", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_Title(soap, p, "icommon:citationGEMETInspireThemes_eng-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_Title(soap, p, "icommon:citationGEMETInspireThemes_eng-Title", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__citationGEMETInspireThemes_x005feng_Title(soap, p, "icommon:citationGEMETInspireThemes_eng-Title", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_Title * SOAP_FMAC4 soap_get__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap*, enum _icommon__citationGEMETInspireThemes_x005feng_Title *, const char*, const char*);

inline int soap_read__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_Title *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__citationGEMETInspireThemes_x005feng_Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, const char *URL, enum _icommon__citationGEMETInspireThemes_x005feng_Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__citationGEMETInspireThemes_x005feng_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__citationGEMETInspireThemes_x005feng_Title(struct soap *soap, enum _icommon__citationGEMETInspireThemes_x005feng_Title *p)
{
	if (::soap_read__icommon__citationGEMETInspireThemes_x005feng_Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocGEMETInspireThemes_x005feng_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocGEMETInspireThemes_x005feng_MediaType_DEFINED

inline void soap_default__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocGEMETInspireThemes_x005feng_MediaType
	*a = SOAP_DEFAULT__icommon__resLocGEMETInspireThemes_x005feng_MediaType;
#else
	*a = (enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap*, const char*, int, const enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocGEMETInspireThemes_x005feng_MediaType2s(struct soap*, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType);
SOAP_FMAC3 enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType * SOAP_FMAC4 soap_in__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap*, const char*, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap*, const char*, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *);

SOAP_FMAC3 enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType * SOAP_FMAC4 soap_new__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap*, const enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_MediaType(soap, p, "icommon:resLocGEMETInspireThemes_eng-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_MediaType(soap, p, "icommon:resLocGEMETInspireThemes_eng-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_MediaType(soap, p, "icommon:resLocGEMETInspireThemes_eng-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_MediaType(soap, p, "icommon:resLocGEMETInspireThemes_eng-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType * SOAP_FMAC4 soap_get__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap*, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocGEMETInspireThemes_x005feng_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocGEMETInspireThemes_x005feng_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocGEMETInspireThemes_x005feng_MediaType(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType *p)
{
	if (::soap_read__icommon__resLocGEMETInspireThemes_x005feng_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocGEMETInspireThemes_x005feng_URL_DEFINED
#define SOAP_TYPE__icommon__resLocGEMETInspireThemes_x005feng_URL_DEFINED

inline void soap_default__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocGEMETInspireThemes_x005feng_URL
	*a = SOAP_DEFAULT__icommon__resLocGEMETInspireThemes_x005feng_URL;
#else
	*a = (enum _icommon__resLocGEMETInspireThemes_x005feng_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap*, const char*, int, const enum _icommon__resLocGEMETInspireThemes_x005feng_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocGEMETInspireThemes_x005feng_URL2s(struct soap*, enum _icommon__resLocGEMETInspireThemes_x005feng_URL);
SOAP_FMAC3 enum _icommon__resLocGEMETInspireThemes_x005feng_URL * SOAP_FMAC4 soap_in__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap*, const char*, enum _icommon__resLocGEMETInspireThemes_x005feng_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap*, const char*, enum _icommon__resLocGEMETInspireThemes_x005feng_URL *);

SOAP_FMAC3 enum _icommon__resLocGEMETInspireThemes_x005feng_URL * SOAP_FMAC4 soap_new__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap*, const enum _icommon__resLocGEMETInspireThemes_x005feng_URL *, const char*, const char*);

inline int soap_write__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_URL(soap, p, "icommon:resLocGEMETInspireThemes_eng-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_URL(soap, p, "icommon:resLocGEMETInspireThemes_eng-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_URL(soap, p, "icommon:resLocGEMETInspireThemes_eng-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocGEMETInspireThemes_x005feng_URL(soap, p, "icommon:resLocGEMETInspireThemes_eng-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocGEMETInspireThemes_x005feng_URL * SOAP_FMAC4 soap_get__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap*, enum _icommon__resLocGEMETInspireThemes_x005feng_URL *, const char*, const char*);

inline int soap_read__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocGEMETInspireThemes_x005feng_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, const char *URL, enum _icommon__resLocGEMETInspireThemes_x005feng_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocGEMETInspireThemes_x005feng_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocGEMETInspireThemes_x005feng_URL(struct soap *soap, enum _icommon__resLocGEMETInspireThemes_x005feng_URL *p)
{
	if (::soap_read__icommon__resLocGEMETInspireThemes_x005feng_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dut-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_dan-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_cze-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-MediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-MediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-MediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL_DEFINED
#define SOAP_TYPE__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL_DEFINED

inline void soap_default__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL
	*a = SOAP_DEFAULT__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL;
#else
	*a = (enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap*, const char*, int, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL2s(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL);
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL * SOAP_FMAC4 soap_in__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap*, const char*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *);

SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL * SOAP_FMAC4 soap_new__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap*, const enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *, const char*, const char*);

inline int soap_write__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-URL", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-URL", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(soap, p, "icommon:resLocInspireInteroperabilityRegulation_bul-URL", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL * SOAP_FMAC4 soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap*, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *, const char*, const char*);

inline int soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, const char *URL, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(struct soap *soap, enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL *p)
{
	if (::soap_read__icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__classificationOfSpatialDataService_KeywordValue_DEFINED
#define SOAP_TYPE__icommon__classificationOfSpatialDataService_KeywordValue_DEFINED

inline void soap_default__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, enum _icommon__classificationOfSpatialDataService_KeywordValue *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__icommon__classificationOfSpatialDataService_KeywordValue
	*a = SOAP_DEFAULT__icommon__classificationOfSpatialDataService_KeywordValue;
#else
	*a = (enum _icommon__classificationOfSpatialDataService_KeywordValue)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__classificationOfSpatialDataService_KeywordValue(struct soap*, const char*, int, const enum _icommon__classificationOfSpatialDataService_KeywordValue *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__icommon__classificationOfSpatialDataService_KeywordValue2s(struct soap*, enum _icommon__classificationOfSpatialDataService_KeywordValue);
SOAP_FMAC3 enum _icommon__classificationOfSpatialDataService_KeywordValue * SOAP_FMAC4 soap_in__icommon__classificationOfSpatialDataService_KeywordValue(struct soap*, const char*, enum _icommon__classificationOfSpatialDataService_KeywordValue *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_icommon__classificationOfSpatialDataService_KeywordValue(struct soap*, const char*, enum _icommon__classificationOfSpatialDataService_KeywordValue *);

SOAP_FMAC3 enum _icommon__classificationOfSpatialDataService_KeywordValue * SOAP_FMAC4 soap_new__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__classificationOfSpatialDataService_KeywordValue(struct soap*, const enum _icommon__classificationOfSpatialDataService_KeywordValue *, const char*, const char*);

inline int soap_write__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, enum _icommon__classificationOfSpatialDataService_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__icommon__classificationOfSpatialDataService_KeywordValue(soap, p, "icommon:classificationOfSpatialDataService-KeywordValue", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, const char *URL, enum _icommon__classificationOfSpatialDataService_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__classificationOfSpatialDataService_KeywordValue(soap, p, "icommon:classificationOfSpatialDataService-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, const char *URL, enum _icommon__classificationOfSpatialDataService_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__classificationOfSpatialDataService_KeywordValue(soap, p, "icommon:classificationOfSpatialDataService-KeywordValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, const char *URL, enum _icommon__classificationOfSpatialDataService_KeywordValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__icommon__classificationOfSpatialDataService_KeywordValue(soap, p, "icommon:classificationOfSpatialDataService-KeywordValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _icommon__classificationOfSpatialDataService_KeywordValue * SOAP_FMAC4 soap_get__icommon__classificationOfSpatialDataService_KeywordValue(struct soap*, enum _icommon__classificationOfSpatialDataService_KeywordValue *, const char*, const char*);

inline int soap_read__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, enum _icommon__classificationOfSpatialDataService_KeywordValue *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__icommon__classificationOfSpatialDataService_KeywordValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, const char *URL, enum _icommon__classificationOfSpatialDataService_KeywordValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__classificationOfSpatialDataService_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__classificationOfSpatialDataService_KeywordValue(struct soap *soap, enum _icommon__classificationOfSpatialDataService_KeywordValue *p)
{
	if (::soap_read__icommon__classificationOfSpatialDataService_KeywordValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__euLanguageIETF_DEFINED
#define SOAP_TYPE_icommon__euLanguageIETF_DEFINED

inline void soap_default_icommon__euLanguageIETF(struct soap *soap, enum icommon__euLanguageIETF *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__euLanguageIETF
	*a = SOAP_DEFAULT_icommon__euLanguageIETF;
#else
	*a = (enum icommon__euLanguageIETF)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__euLanguageIETF(struct soap*, const char*, int, const enum icommon__euLanguageIETF *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__euLanguageIETF2s(struct soap*, enum icommon__euLanguageIETF);
SOAP_FMAC3 enum icommon__euLanguageIETF * SOAP_FMAC4 soap_in_icommon__euLanguageIETF(struct soap*, const char*, enum icommon__euLanguageIETF *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__euLanguageIETF(struct soap*, const char*, enum icommon__euLanguageIETF *);

SOAP_FMAC3 enum icommon__euLanguageIETF * SOAP_FMAC4 soap_new_icommon__euLanguageIETF(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__euLanguageIETF(struct soap*, const enum icommon__euLanguageIETF *, const char*, const char*);

inline int soap_write_icommon__euLanguageIETF(struct soap *soap, enum icommon__euLanguageIETF const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__euLanguageIETF(soap, p, "icommon:euLanguageIETF", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__euLanguageIETF(struct soap *soap, const char *URL, enum icommon__euLanguageIETF const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__euLanguageIETF(soap, p, "icommon:euLanguageIETF", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__euLanguageIETF(struct soap *soap, const char *URL, enum icommon__euLanguageIETF const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__euLanguageIETF(soap, p, "icommon:euLanguageIETF", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__euLanguageIETF(struct soap *soap, const char *URL, enum icommon__euLanguageIETF const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__euLanguageIETF(soap, p, "icommon:euLanguageIETF", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__euLanguageIETF * SOAP_FMAC4 soap_get_icommon__euLanguageIETF(struct soap*, enum icommon__euLanguageIETF *, const char*, const char*);

inline int soap_read_icommon__euLanguageIETF(struct soap *soap, enum icommon__euLanguageIETF *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__euLanguageIETF(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__euLanguageIETF(struct soap *soap, const char *URL, enum icommon__euLanguageIETF *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__euLanguageIETF(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__euLanguageIETF(struct soap *soap, enum icommon__euLanguageIETF *p)
{
	if (::soap_read_icommon__euLanguageIETF(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__euLanguageISO6392B_DEFINED
#define SOAP_TYPE_icommon__euLanguageISO6392B_DEFINED

inline void soap_default_icommon__euLanguageISO6392B(struct soap *soap, enum icommon__euLanguageISO6392B *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__euLanguageISO6392B
	*a = SOAP_DEFAULT_icommon__euLanguageISO6392B;
#else
	*a = (enum icommon__euLanguageISO6392B)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__euLanguageISO6392B(struct soap*, const char*, int, const enum icommon__euLanguageISO6392B *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__euLanguageISO6392B2s(struct soap*, enum icommon__euLanguageISO6392B);
SOAP_FMAC3 enum icommon__euLanguageISO6392B * SOAP_FMAC4 soap_in_icommon__euLanguageISO6392B(struct soap*, const char*, enum icommon__euLanguageISO6392B *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__euLanguageISO6392B(struct soap*, const char*, enum icommon__euLanguageISO6392B *);

SOAP_FMAC3 enum icommon__euLanguageISO6392B * SOAP_FMAC4 soap_new_icommon__euLanguageISO6392B(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__euLanguageISO6392B(struct soap*, const enum icommon__euLanguageISO6392B *, const char*, const char*);

inline int soap_write_icommon__euLanguageISO6392B(struct soap *soap, enum icommon__euLanguageISO6392B const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__euLanguageISO6392B(soap, p, "icommon:euLanguageISO6392B", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__euLanguageISO6392B(struct soap *soap, const char *URL, enum icommon__euLanguageISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__euLanguageISO6392B(soap, p, "icommon:euLanguageISO6392B", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__euLanguageISO6392B(struct soap *soap, const char *URL, enum icommon__euLanguageISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__euLanguageISO6392B(soap, p, "icommon:euLanguageISO6392B", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__euLanguageISO6392B(struct soap *soap, const char *URL, enum icommon__euLanguageISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__euLanguageISO6392B(soap, p, "icommon:euLanguageISO6392B", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__euLanguageISO6392B * SOAP_FMAC4 soap_get_icommon__euLanguageISO6392B(struct soap*, enum icommon__euLanguageISO6392B *, const char*, const char*);

inline int soap_read_icommon__euLanguageISO6392B(struct soap *soap, enum icommon__euLanguageISO6392B *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__euLanguageISO6392B(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__euLanguageISO6392B(struct soap *soap, const char *URL, enum icommon__euLanguageISO6392B *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__euLanguageISO6392B(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__euLanguageISO6392B(struct soap *soap, enum icommon__euLanguageISO6392B *p)
{
	if (::soap_read_icommon__euLanguageISO6392B(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__otherSpatialDataServiceType_DEFINED
#define SOAP_TYPE_icommon__otherSpatialDataServiceType_DEFINED

inline void soap_default_icommon__otherSpatialDataServiceType(struct soap *soap, enum icommon__otherSpatialDataServiceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__otherSpatialDataServiceType
	*a = SOAP_DEFAULT_icommon__otherSpatialDataServiceType;
#else
	*a = (enum icommon__otherSpatialDataServiceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__otherSpatialDataServiceType(struct soap*, const char*, int, const enum icommon__otherSpatialDataServiceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__otherSpatialDataServiceType2s(struct soap*, enum icommon__otherSpatialDataServiceType);
SOAP_FMAC3 enum icommon__otherSpatialDataServiceType * SOAP_FMAC4 soap_in_icommon__otherSpatialDataServiceType(struct soap*, const char*, enum icommon__otherSpatialDataServiceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__otherSpatialDataServiceType(struct soap*, const char*, enum icommon__otherSpatialDataServiceType *);

SOAP_FMAC3 enum icommon__otherSpatialDataServiceType * SOAP_FMAC4 soap_new_icommon__otherSpatialDataServiceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__otherSpatialDataServiceType(struct soap*, const enum icommon__otherSpatialDataServiceType *, const char*, const char*);

inline int soap_write_icommon__otherSpatialDataServiceType(struct soap *soap, enum icommon__otherSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__otherSpatialDataServiceType(soap, p, "icommon:otherSpatialDataServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__otherSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__otherSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__otherSpatialDataServiceType(soap, p, "icommon:otherSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__otherSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__otherSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__otherSpatialDataServiceType(soap, p, "icommon:otherSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__otherSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__otherSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__otherSpatialDataServiceType(soap, p, "icommon:otherSpatialDataServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__otherSpatialDataServiceType * SOAP_FMAC4 soap_get_icommon__otherSpatialDataServiceType(struct soap*, enum icommon__otherSpatialDataServiceType *, const char*, const char*);

inline int soap_read_icommon__otherSpatialDataServiceType(struct soap *soap, enum icommon__otherSpatialDataServiceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__otherSpatialDataServiceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__otherSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__otherSpatialDataServiceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__otherSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__otherSpatialDataServiceType(struct soap *soap, enum icommon__otherSpatialDataServiceType *p)
{
	if (::soap_read_icommon__otherSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__invokeSpatialDataServiceType_DEFINED
#define SOAP_TYPE_icommon__invokeSpatialDataServiceType_DEFINED

inline void soap_default_icommon__invokeSpatialDataServiceType(struct soap *soap, enum icommon__invokeSpatialDataServiceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__invokeSpatialDataServiceType
	*a = SOAP_DEFAULT_icommon__invokeSpatialDataServiceType;
#else
	*a = (enum icommon__invokeSpatialDataServiceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__invokeSpatialDataServiceType(struct soap*, const char*, int, const enum icommon__invokeSpatialDataServiceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__invokeSpatialDataServiceType2s(struct soap*, enum icommon__invokeSpatialDataServiceType);
SOAP_FMAC3 enum icommon__invokeSpatialDataServiceType * SOAP_FMAC4 soap_in_icommon__invokeSpatialDataServiceType(struct soap*, const char*, enum icommon__invokeSpatialDataServiceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__invokeSpatialDataServiceType(struct soap*, const char*, enum icommon__invokeSpatialDataServiceType *);

SOAP_FMAC3 enum icommon__invokeSpatialDataServiceType * SOAP_FMAC4 soap_new_icommon__invokeSpatialDataServiceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__invokeSpatialDataServiceType(struct soap*, const enum icommon__invokeSpatialDataServiceType *, const char*, const char*);

inline int soap_write_icommon__invokeSpatialDataServiceType(struct soap *soap, enum icommon__invokeSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__invokeSpatialDataServiceType(soap, p, "icommon:invokeSpatialDataServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__invokeSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__invokeSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__invokeSpatialDataServiceType(soap, p, "icommon:invokeSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__invokeSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__invokeSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__invokeSpatialDataServiceType(soap, p, "icommon:invokeSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__invokeSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__invokeSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__invokeSpatialDataServiceType(soap, p, "icommon:invokeSpatialDataServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__invokeSpatialDataServiceType * SOAP_FMAC4 soap_get_icommon__invokeSpatialDataServiceType(struct soap*, enum icommon__invokeSpatialDataServiceType *, const char*, const char*);

inline int soap_read_icommon__invokeSpatialDataServiceType(struct soap *soap, enum icommon__invokeSpatialDataServiceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__invokeSpatialDataServiceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__invokeSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__invokeSpatialDataServiceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__invokeSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__invokeSpatialDataServiceType(struct soap *soap, enum icommon__invokeSpatialDataServiceType *p)
{
	if (::soap_read_icommon__invokeSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__transformationSpatialDataServiceType_DEFINED
#define SOAP_TYPE_icommon__transformationSpatialDataServiceType_DEFINED

inline void soap_default_icommon__transformationSpatialDataServiceType(struct soap *soap, enum icommon__transformationSpatialDataServiceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__transformationSpatialDataServiceType
	*a = SOAP_DEFAULT_icommon__transformationSpatialDataServiceType;
#else
	*a = (enum icommon__transformationSpatialDataServiceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__transformationSpatialDataServiceType(struct soap*, const char*, int, const enum icommon__transformationSpatialDataServiceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__transformationSpatialDataServiceType2s(struct soap*, enum icommon__transformationSpatialDataServiceType);
SOAP_FMAC3 enum icommon__transformationSpatialDataServiceType * SOAP_FMAC4 soap_in_icommon__transformationSpatialDataServiceType(struct soap*, const char*, enum icommon__transformationSpatialDataServiceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__transformationSpatialDataServiceType(struct soap*, const char*, enum icommon__transformationSpatialDataServiceType *);

SOAP_FMAC3 enum icommon__transformationSpatialDataServiceType * SOAP_FMAC4 soap_new_icommon__transformationSpatialDataServiceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__transformationSpatialDataServiceType(struct soap*, const enum icommon__transformationSpatialDataServiceType *, const char*, const char*);

inline int soap_write_icommon__transformationSpatialDataServiceType(struct soap *soap, enum icommon__transformationSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__transformationSpatialDataServiceType(soap, p, "icommon:transformationSpatialDataServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__transformationSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__transformationSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__transformationSpatialDataServiceType(soap, p, "icommon:transformationSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__transformationSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__transformationSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__transformationSpatialDataServiceType(soap, p, "icommon:transformationSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__transformationSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__transformationSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__transformationSpatialDataServiceType(soap, p, "icommon:transformationSpatialDataServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__transformationSpatialDataServiceType * SOAP_FMAC4 soap_get_icommon__transformationSpatialDataServiceType(struct soap*, enum icommon__transformationSpatialDataServiceType *, const char*, const char*);

inline int soap_read_icommon__transformationSpatialDataServiceType(struct soap *soap, enum icommon__transformationSpatialDataServiceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__transformationSpatialDataServiceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__transformationSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__transformationSpatialDataServiceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__transformationSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__transformationSpatialDataServiceType(struct soap *soap, enum icommon__transformationSpatialDataServiceType *p)
{
	if (::soap_read_icommon__transformationSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__discoverySpatialDataServiceType_DEFINED
#define SOAP_TYPE_icommon__discoverySpatialDataServiceType_DEFINED

inline void soap_default_icommon__discoverySpatialDataServiceType(struct soap *soap, enum icommon__discoverySpatialDataServiceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__discoverySpatialDataServiceType
	*a = SOAP_DEFAULT_icommon__discoverySpatialDataServiceType;
#else
	*a = (enum icommon__discoverySpatialDataServiceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__discoverySpatialDataServiceType(struct soap*, const char*, int, const enum icommon__discoverySpatialDataServiceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__discoverySpatialDataServiceType2s(struct soap*, enum icommon__discoverySpatialDataServiceType);
SOAP_FMAC3 enum icommon__discoverySpatialDataServiceType * SOAP_FMAC4 soap_in_icommon__discoverySpatialDataServiceType(struct soap*, const char*, enum icommon__discoverySpatialDataServiceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__discoverySpatialDataServiceType(struct soap*, const char*, enum icommon__discoverySpatialDataServiceType *);

SOAP_FMAC3 enum icommon__discoverySpatialDataServiceType * SOAP_FMAC4 soap_new_icommon__discoverySpatialDataServiceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__discoverySpatialDataServiceType(struct soap*, const enum icommon__discoverySpatialDataServiceType *, const char*, const char*);

inline int soap_write_icommon__discoverySpatialDataServiceType(struct soap *soap, enum icommon__discoverySpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__discoverySpatialDataServiceType(soap, p, "icommon:discoverySpatialDataServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__discoverySpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__discoverySpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__discoverySpatialDataServiceType(soap, p, "icommon:discoverySpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__discoverySpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__discoverySpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__discoverySpatialDataServiceType(soap, p, "icommon:discoverySpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__discoverySpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__discoverySpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__discoverySpatialDataServiceType(soap, p, "icommon:discoverySpatialDataServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__discoverySpatialDataServiceType * SOAP_FMAC4 soap_get_icommon__discoverySpatialDataServiceType(struct soap*, enum icommon__discoverySpatialDataServiceType *, const char*, const char*);

inline int soap_read_icommon__discoverySpatialDataServiceType(struct soap *soap, enum icommon__discoverySpatialDataServiceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__discoverySpatialDataServiceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__discoverySpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__discoverySpatialDataServiceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__discoverySpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__discoverySpatialDataServiceType(struct soap *soap, enum icommon__discoverySpatialDataServiceType *p)
{
	if (::soap_read_icommon__discoverySpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__viewSpatialDataServiceType_DEFINED
#define SOAP_TYPE_icommon__viewSpatialDataServiceType_DEFINED

inline void soap_default_icommon__viewSpatialDataServiceType(struct soap *soap, enum icommon__viewSpatialDataServiceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__viewSpatialDataServiceType
	*a = SOAP_DEFAULT_icommon__viewSpatialDataServiceType;
#else
	*a = (enum icommon__viewSpatialDataServiceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__viewSpatialDataServiceType(struct soap*, const char*, int, const enum icommon__viewSpatialDataServiceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__viewSpatialDataServiceType2s(struct soap*, enum icommon__viewSpatialDataServiceType);
SOAP_FMAC3 enum icommon__viewSpatialDataServiceType * SOAP_FMAC4 soap_in_icommon__viewSpatialDataServiceType(struct soap*, const char*, enum icommon__viewSpatialDataServiceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__viewSpatialDataServiceType(struct soap*, const char*, enum icommon__viewSpatialDataServiceType *);

SOAP_FMAC3 enum icommon__viewSpatialDataServiceType * SOAP_FMAC4 soap_new_icommon__viewSpatialDataServiceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__viewSpatialDataServiceType(struct soap*, const enum icommon__viewSpatialDataServiceType *, const char*, const char*);

inline int soap_write_icommon__viewSpatialDataServiceType(struct soap *soap, enum icommon__viewSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__viewSpatialDataServiceType(soap, p, "icommon:viewSpatialDataServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__viewSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__viewSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__viewSpatialDataServiceType(soap, p, "icommon:viewSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__viewSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__viewSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__viewSpatialDataServiceType(soap, p, "icommon:viewSpatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__viewSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__viewSpatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__viewSpatialDataServiceType(soap, p, "icommon:viewSpatialDataServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__viewSpatialDataServiceType * SOAP_FMAC4 soap_get_icommon__viewSpatialDataServiceType(struct soap*, enum icommon__viewSpatialDataServiceType *, const char*, const char*);

inline int soap_read_icommon__viewSpatialDataServiceType(struct soap *soap, enum icommon__viewSpatialDataServiceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__viewSpatialDataServiceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__viewSpatialDataServiceType(struct soap *soap, const char *URL, enum icommon__viewSpatialDataServiceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__viewSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__viewSpatialDataServiceType(struct soap *soap, enum icommon__viewSpatialDataServiceType *p)
{
	if (::soap_read_icommon__viewSpatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__serviceSpatialDataResourceType_DEFINED
#define SOAP_TYPE_icommon__serviceSpatialDataResourceType_DEFINED

inline void soap_default_icommon__serviceSpatialDataResourceType(struct soap *soap, enum icommon__serviceSpatialDataResourceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__serviceSpatialDataResourceType
	*a = SOAP_DEFAULT_icommon__serviceSpatialDataResourceType;
#else
	*a = (enum icommon__serviceSpatialDataResourceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__serviceSpatialDataResourceType(struct soap*, const char*, int, const enum icommon__serviceSpatialDataResourceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__serviceSpatialDataResourceType2s(struct soap*, enum icommon__serviceSpatialDataResourceType);
SOAP_FMAC3 enum icommon__serviceSpatialDataResourceType * SOAP_FMAC4 soap_in_icommon__serviceSpatialDataResourceType(struct soap*, const char*, enum icommon__serviceSpatialDataResourceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__serviceSpatialDataResourceType(struct soap*, const char*, enum icommon__serviceSpatialDataResourceType *);

SOAP_FMAC3 enum icommon__serviceSpatialDataResourceType * SOAP_FMAC4 soap_new_icommon__serviceSpatialDataResourceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__serviceSpatialDataResourceType(struct soap*, const enum icommon__serviceSpatialDataResourceType *, const char*, const char*);

inline int soap_write_icommon__serviceSpatialDataResourceType(struct soap *soap, enum icommon__serviceSpatialDataResourceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__serviceSpatialDataResourceType(soap, p, "icommon:serviceSpatialDataResourceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__serviceSpatialDataResourceType(struct soap *soap, const char *URL, enum icommon__serviceSpatialDataResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__serviceSpatialDataResourceType(soap, p, "icommon:serviceSpatialDataResourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__serviceSpatialDataResourceType(struct soap *soap, const char *URL, enum icommon__serviceSpatialDataResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__serviceSpatialDataResourceType(soap, p, "icommon:serviceSpatialDataResourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__serviceSpatialDataResourceType(struct soap *soap, const char *URL, enum icommon__serviceSpatialDataResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__serviceSpatialDataResourceType(soap, p, "icommon:serviceSpatialDataResourceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__serviceSpatialDataResourceType * SOAP_FMAC4 soap_get_icommon__serviceSpatialDataResourceType(struct soap*, enum icommon__serviceSpatialDataResourceType *, const char*, const char*);

inline int soap_read_icommon__serviceSpatialDataResourceType(struct soap *soap, enum icommon__serviceSpatialDataResourceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__serviceSpatialDataResourceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__serviceSpatialDataResourceType(struct soap *soap, const char *URL, enum icommon__serviceSpatialDataResourceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__serviceSpatialDataResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__serviceSpatialDataResourceType(struct soap *soap, enum icommon__serviceSpatialDataResourceType *p)
{
	if (::soap_read_icommon__serviceSpatialDataResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__responsiblePartyRole_DEFINED
#define SOAP_TYPE_icommon__responsiblePartyRole_DEFINED

inline void soap_default_icommon__responsiblePartyRole(struct soap *soap, enum icommon__responsiblePartyRole *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__responsiblePartyRole
	*a = SOAP_DEFAULT_icommon__responsiblePartyRole;
#else
	*a = (enum icommon__responsiblePartyRole)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__responsiblePartyRole(struct soap*, const char*, int, const enum icommon__responsiblePartyRole *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__responsiblePartyRole2s(struct soap*, enum icommon__responsiblePartyRole);
SOAP_FMAC3 enum icommon__responsiblePartyRole * SOAP_FMAC4 soap_in_icommon__responsiblePartyRole(struct soap*, const char*, enum icommon__responsiblePartyRole *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__responsiblePartyRole(struct soap*, const char*, enum icommon__responsiblePartyRole *);

SOAP_FMAC3 enum icommon__responsiblePartyRole * SOAP_FMAC4 soap_new_icommon__responsiblePartyRole(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__responsiblePartyRole(struct soap*, const enum icommon__responsiblePartyRole *, const char*, const char*);

inline int soap_write_icommon__responsiblePartyRole(struct soap *soap, enum icommon__responsiblePartyRole const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__responsiblePartyRole(soap, p, "icommon:responsiblePartyRole", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__responsiblePartyRole(struct soap *soap, const char *URL, enum icommon__responsiblePartyRole const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__responsiblePartyRole(soap, p, "icommon:responsiblePartyRole", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__responsiblePartyRole(struct soap *soap, const char *URL, enum icommon__responsiblePartyRole const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__responsiblePartyRole(soap, p, "icommon:responsiblePartyRole", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__responsiblePartyRole(struct soap *soap, const char *URL, enum icommon__responsiblePartyRole const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__responsiblePartyRole(soap, p, "icommon:responsiblePartyRole", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__responsiblePartyRole * SOAP_FMAC4 soap_get_icommon__responsiblePartyRole(struct soap*, enum icommon__responsiblePartyRole *, const char*, const char*);

inline int soap_read_icommon__responsiblePartyRole(struct soap *soap, enum icommon__responsiblePartyRole *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__responsiblePartyRole(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__responsiblePartyRole(struct soap *soap, const char *URL, enum icommon__responsiblePartyRole *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__responsiblePartyRole(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__responsiblePartyRole(struct soap *soap, enum icommon__responsiblePartyRole *p)
{
	if (::soap_read_icommon__responsiblePartyRole(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__languageISO6392B_DEFINED
#define SOAP_TYPE_icommon__languageISO6392B_DEFINED

inline void soap_default_icommon__languageISO6392B(struct soap *soap, enum icommon__languageISO6392B *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__languageISO6392B
	*a = SOAP_DEFAULT_icommon__languageISO6392B;
#else
	*a = (enum icommon__languageISO6392B)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__languageISO6392B(struct soap*, const char*, int, const enum icommon__languageISO6392B *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__languageISO6392B2s(struct soap*, enum icommon__languageISO6392B);
SOAP_FMAC3 enum icommon__languageISO6392B * SOAP_FMAC4 soap_in_icommon__languageISO6392B(struct soap*, const char*, enum icommon__languageISO6392B *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__languageISO6392B(struct soap*, const char*, enum icommon__languageISO6392B *);

SOAP_FMAC3 enum icommon__languageISO6392B * SOAP_FMAC4 soap_new_icommon__languageISO6392B(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__languageISO6392B(struct soap*, const enum icommon__languageISO6392B *, const char*, const char*);

inline int soap_write_icommon__languageISO6392B(struct soap *soap, enum icommon__languageISO6392B const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__languageISO6392B(soap, p, "icommon:languageISO6392B", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__languageISO6392B(struct soap *soap, const char *URL, enum icommon__languageISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__languageISO6392B(soap, p, "icommon:languageISO6392B", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__languageISO6392B(struct soap *soap, const char *URL, enum icommon__languageISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__languageISO6392B(soap, p, "icommon:languageISO6392B", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__languageISO6392B(struct soap *soap, const char *URL, enum icommon__languageISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__languageISO6392B(soap, p, "icommon:languageISO6392B", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__languageISO6392B * SOAP_FMAC4 soap_get_icommon__languageISO6392B(struct soap*, enum icommon__languageISO6392B *, const char*, const char*);

inline int soap_read_icommon__languageISO6392B(struct soap *soap, enum icommon__languageISO6392B *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__languageISO6392B(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__languageISO6392B(struct soap *soap, const char *URL, enum icommon__languageISO6392B *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__languageISO6392B(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__languageISO6392B(struct soap *soap, enum icommon__languageISO6392B *p)
{
	if (::soap_read_icommon__languageISO6392B(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__degreeOfConformity_DEFINED
#define SOAP_TYPE_icommon__degreeOfConformity_DEFINED

inline void soap_default_icommon__degreeOfConformity(struct soap *soap, enum icommon__degreeOfConformity *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__degreeOfConformity
	*a = SOAP_DEFAULT_icommon__degreeOfConformity;
#else
	*a = (enum icommon__degreeOfConformity)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__degreeOfConformity(struct soap*, const char*, int, const enum icommon__degreeOfConformity *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__degreeOfConformity2s(struct soap*, enum icommon__degreeOfConformity);
SOAP_FMAC3 enum icommon__degreeOfConformity * SOAP_FMAC4 soap_in_icommon__degreeOfConformity(struct soap*, const char*, enum icommon__degreeOfConformity *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__degreeOfConformity(struct soap*, const char*, enum icommon__degreeOfConformity *);

SOAP_FMAC3 enum icommon__degreeOfConformity * SOAP_FMAC4 soap_new_icommon__degreeOfConformity(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__degreeOfConformity(struct soap*, const enum icommon__degreeOfConformity *, const char*, const char*);

inline int soap_write_icommon__degreeOfConformity(struct soap *soap, enum icommon__degreeOfConformity const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__degreeOfConformity(soap, p, "icommon:degreeOfConformity", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__degreeOfConformity(struct soap *soap, const char *URL, enum icommon__degreeOfConformity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__degreeOfConformity(soap, p, "icommon:degreeOfConformity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__degreeOfConformity(struct soap *soap, const char *URL, enum icommon__degreeOfConformity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__degreeOfConformity(soap, p, "icommon:degreeOfConformity", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__degreeOfConformity(struct soap *soap, const char *URL, enum icommon__degreeOfConformity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__degreeOfConformity(soap, p, "icommon:degreeOfConformity", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__degreeOfConformity * SOAP_FMAC4 soap_get_icommon__degreeOfConformity(struct soap*, enum icommon__degreeOfConformity *, const char*, const char*);

inline int soap_read_icommon__degreeOfConformity(struct soap *soap, enum icommon__degreeOfConformity *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__degreeOfConformity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__degreeOfConformity(struct soap *soap, const char *URL, enum icommon__degreeOfConformity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__degreeOfConformity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__degreeOfConformity(struct soap *soap, enum icommon__degreeOfConformity *p)
{
	if (::soap_read_icommon__degreeOfConformity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__spatialDataServiceType_DEFINED
#define SOAP_TYPE_icommon__spatialDataServiceType_DEFINED

inline void soap_default_icommon__spatialDataServiceType(struct soap *soap, enum icommon__spatialDataServiceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__spatialDataServiceType
	*a = SOAP_DEFAULT_icommon__spatialDataServiceType;
#else
	*a = (enum icommon__spatialDataServiceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__spatialDataServiceType(struct soap*, const char*, int, const enum icommon__spatialDataServiceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__spatialDataServiceType2s(struct soap*, enum icommon__spatialDataServiceType);
SOAP_FMAC3 enum icommon__spatialDataServiceType * SOAP_FMAC4 soap_in_icommon__spatialDataServiceType(struct soap*, const char*, enum icommon__spatialDataServiceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__spatialDataServiceType(struct soap*, const char*, enum icommon__spatialDataServiceType *);

SOAP_FMAC3 enum icommon__spatialDataServiceType * SOAP_FMAC4 soap_new_icommon__spatialDataServiceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__spatialDataServiceType(struct soap*, const enum icommon__spatialDataServiceType *, const char*, const char*);

inline int soap_write_icommon__spatialDataServiceType(struct soap *soap, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__spatialDataServiceType(soap, p, "icommon:spatialDataServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__spatialDataServiceType(struct soap *soap, const char *URL, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__spatialDataServiceType(soap, p, "icommon:spatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__spatialDataServiceType(struct soap *soap, const char *URL, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__spatialDataServiceType(soap, p, "icommon:spatialDataServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__spatialDataServiceType(struct soap *soap, const char *URL, enum icommon__spatialDataServiceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__spatialDataServiceType(soap, p, "icommon:spatialDataServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__spatialDataServiceType * SOAP_FMAC4 soap_get_icommon__spatialDataServiceType(struct soap*, enum icommon__spatialDataServiceType *, const char*, const char*);

inline int soap_read_icommon__spatialDataServiceType(struct soap *soap, enum icommon__spatialDataServiceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__spatialDataServiceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__spatialDataServiceType(struct soap *soap, const char *URL, enum icommon__spatialDataServiceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__spatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__spatialDataServiceType(struct soap *soap, enum icommon__spatialDataServiceType *p)
{
	if (::soap_read_icommon__spatialDataServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resourceType_DEFINED
#define SOAP_TYPE_icommon__resourceType_DEFINED

inline void soap_default_icommon__resourceType(struct soap *soap, enum icommon__resourceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__resourceType
	*a = SOAP_DEFAULT_icommon__resourceType;
#else
	*a = (enum icommon__resourceType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resourceType(struct soap*, const char*, int, const enum icommon__resourceType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__resourceType2s(struct soap*, enum icommon__resourceType);
SOAP_FMAC3 enum icommon__resourceType * SOAP_FMAC4 soap_in_icommon__resourceType(struct soap*, const char*, enum icommon__resourceType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__resourceType(struct soap*, const char*, enum icommon__resourceType *);

SOAP_FMAC3 enum icommon__resourceType * SOAP_FMAC4 soap_new_icommon__resourceType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__resourceType(struct soap*, const enum icommon__resourceType *, const char*, const char*);

inline int soap_write_icommon__resourceType(struct soap *soap, enum icommon__resourceType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__resourceType(soap, p, "icommon:resourceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__resourceType(struct soap *soap, const char *URL, enum icommon__resourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__resourceType(soap, p, "icommon:resourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resourceType(struct soap *soap, const char *URL, enum icommon__resourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__resourceType(soap, p, "icommon:resourceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resourceType(struct soap *soap, const char *URL, enum icommon__resourceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__resourceType(soap, p, "icommon:resourceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__resourceType * SOAP_FMAC4 soap_get_icommon__resourceType(struct soap*, enum icommon__resourceType *, const char*, const char*);

inline int soap_read_icommon__resourceType(struct soap *soap, enum icommon__resourceType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__resourceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resourceType(struct soap *soap, const char *URL, enum icommon__resourceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resourceType(struct soap *soap, enum icommon__resourceType *p)
{
	if (::soap_read_icommon__resourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__mediaType_DEFINED
#define SOAP_TYPE_icommon__mediaType_DEFINED

inline void soap_default_icommon__mediaType(struct soap *soap, enum icommon__mediaType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__mediaType
	*a = SOAP_DEFAULT_icommon__mediaType;
#else
	*a = (enum icommon__mediaType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__mediaType(struct soap*, const char*, int, const enum icommon__mediaType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__mediaType2s(struct soap*, enum icommon__mediaType);
SOAP_FMAC3 enum icommon__mediaType * SOAP_FMAC4 soap_in_icommon__mediaType(struct soap*, const char*, enum icommon__mediaType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__mediaType(struct soap*, const char*, enum icommon__mediaType *);

SOAP_FMAC3 enum icommon__mediaType * SOAP_FMAC4 soap_new_icommon__mediaType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__mediaType(struct soap*, const enum icommon__mediaType *, const char*, const char*);

inline int soap_write_icommon__mediaType(struct soap *soap, enum icommon__mediaType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__mediaType(soap, p, "icommon:mediaType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__mediaType(struct soap *soap, const char *URL, enum icommon__mediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__mediaType(soap, p, "icommon:mediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__mediaType(struct soap *soap, const char *URL, enum icommon__mediaType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__mediaType(soap, p, "icommon:mediaType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__mediaType(struct soap *soap, const char *URL, enum icommon__mediaType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__mediaType(soap, p, "icommon:mediaType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__mediaType * SOAP_FMAC4 soap_get_icommon__mediaType(struct soap*, enum icommon__mediaType *, const char*, const char*);

inline int soap_read_icommon__mediaType(struct soap *soap, enum icommon__mediaType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__mediaType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__mediaType(struct soap *soap, const char *URL, enum icommon__mediaType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__mediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__mediaType(struct soap *soap, enum icommon__mediaType *p)
{
	if (::soap_read_icommon__mediaType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__topicCategory_DEFINED
#define SOAP_TYPE_icommon__topicCategory_DEFINED

inline void soap_default_icommon__topicCategory(struct soap *soap, enum icommon__topicCategory *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_icommon__topicCategory
	*a = SOAP_DEFAULT_icommon__topicCategory;
#else
	*a = (enum icommon__topicCategory)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__topicCategory(struct soap*, const char*, int, const enum icommon__topicCategory *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_icommon__topicCategory2s(struct soap*, enum icommon__topicCategory);
SOAP_FMAC3 enum icommon__topicCategory * SOAP_FMAC4 soap_in_icommon__topicCategory(struct soap*, const char*, enum icommon__topicCategory *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2icommon__topicCategory(struct soap*, const char*, enum icommon__topicCategory *);

SOAP_FMAC3 enum icommon__topicCategory * SOAP_FMAC4 soap_new_icommon__topicCategory(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__topicCategory(struct soap*, const enum icommon__topicCategory *, const char*, const char*);

inline int soap_write_icommon__topicCategory(struct soap *soap, enum icommon__topicCategory const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__topicCategory(soap, p, "icommon:topicCategory", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__topicCategory(struct soap *soap, const char *URL, enum icommon__topicCategory const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__topicCategory(soap, p, "icommon:topicCategory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__topicCategory(struct soap *soap, const char *URL, enum icommon__topicCategory const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__topicCategory(soap, p, "icommon:topicCategory", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__topicCategory(struct soap *soap, const char *URL, enum icommon__topicCategory const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__topicCategory(soap, p, "icommon:topicCategory", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum icommon__topicCategory * SOAP_FMAC4 soap_get_icommon__topicCategory(struct soap*, enum icommon__topicCategory *, const char*, const char*);

inline int soap_read_icommon__topicCategory(struct soap *soap, enum icommon__topicCategory *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__topicCategory(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__topicCategory(struct soap *soap, const char *URL, enum icommon__topicCategory *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__topicCategory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__topicCategory(struct soap *soap, enum icommon__topicCategory *p)
{
	if (::soap_read_icommon__topicCategory(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SortOrderType_DEFINED
#define SOAP_TYPE_fes__SortOrderType_DEFINED

inline void soap_default_fes__SortOrderType(struct soap *soap, enum fes__SortOrderType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fes__SortOrderType
	*a = SOAP_DEFAULT_fes__SortOrderType;
#else
	*a = (enum fes__SortOrderType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SortOrderType(struct soap*, const char*, int, const enum fes__SortOrderType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_fes__SortOrderType2s(struct soap*, enum fes__SortOrderType);
SOAP_FMAC3 enum fes__SortOrderType * SOAP_FMAC4 soap_in_fes__SortOrderType(struct soap*, const char*, enum fes__SortOrderType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2fes__SortOrderType(struct soap*, const char*, enum fes__SortOrderType *);

SOAP_FMAC3 enum fes__SortOrderType * SOAP_FMAC4 soap_new_fes__SortOrderType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__SortOrderType(struct soap*, const enum fes__SortOrderType *, const char*, const char*);

inline int soap_write_fes__SortOrderType(struct soap *soap, enum fes__SortOrderType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__SortOrderType(soap, p, "fes:SortOrderType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__SortOrderType(struct soap *soap, const char *URL, enum fes__SortOrderType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SortOrderType(soap, p, "fes:SortOrderType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SortOrderType(struct soap *soap, const char *URL, enum fes__SortOrderType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SortOrderType(soap, p, "fes:SortOrderType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SortOrderType(struct soap *soap, const char *URL, enum fes__SortOrderType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SortOrderType(soap, p, "fes:SortOrderType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum fes__SortOrderType * SOAP_FMAC4 soap_get_fes__SortOrderType(struct soap*, enum fes__SortOrderType *, const char*, const char*);

inline int soap_read_fes__SortOrderType(struct soap *soap, enum fes__SortOrderType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__SortOrderType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SortOrderType(struct soap *soap, const char *URL, enum fes__SortOrderType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SortOrderType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SortOrderType(struct soap *soap, enum fes__SortOrderType *p)
{
	if (::soap_read_fes__SortOrderType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__MatchActionType_DEFINED
#define SOAP_TYPE_fes__MatchActionType_DEFINED

inline void soap_default_fes__MatchActionType(struct soap *soap, enum fes__MatchActionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fes__MatchActionType
	*a = SOAP_DEFAULT_fes__MatchActionType;
#else
	*a = (enum fes__MatchActionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__MatchActionType(struct soap*, const char*, int, const enum fes__MatchActionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_fes__MatchActionType2s(struct soap*, enum fes__MatchActionType);
SOAP_FMAC3 enum fes__MatchActionType * SOAP_FMAC4 soap_in_fes__MatchActionType(struct soap*, const char*, enum fes__MatchActionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2fes__MatchActionType(struct soap*, const char*, enum fes__MatchActionType *);

SOAP_FMAC3 enum fes__MatchActionType * SOAP_FMAC4 soap_new_fes__MatchActionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__MatchActionType(struct soap*, const enum fes__MatchActionType *, const char*, const char*);

inline int soap_write_fes__MatchActionType(struct soap *soap, enum fes__MatchActionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__MatchActionType(soap, p, "fes:MatchActionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__MatchActionType(struct soap *soap, const char *URL, enum fes__MatchActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__MatchActionType(soap, p, "fes:MatchActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__MatchActionType(struct soap *soap, const char *URL, enum fes__MatchActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__MatchActionType(soap, p, "fes:MatchActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__MatchActionType(struct soap *soap, const char *URL, enum fes__MatchActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__MatchActionType(soap, p, "fes:MatchActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum fes__MatchActionType * SOAP_FMAC4 soap_get_fes__MatchActionType(struct soap*, enum fes__MatchActionType *, const char*, const char*);

inline int soap_read_fes__MatchActionType(struct soap *soap, enum fes__MatchActionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__MatchActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__MatchActionType(struct soap *soap, const char *URL, enum fes__MatchActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__MatchActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__MatchActionType(struct soap *soap, enum fes__MatchActionType *p)
{
	if (::soap_read_fes__MatchActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__VersionActionTokens_DEFINED
#define SOAP_TYPE_fes__VersionActionTokens_DEFINED

inline void soap_default_fes__VersionActionTokens(struct soap *soap, enum fes__VersionActionTokens *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_fes__VersionActionTokens
	*a = SOAP_DEFAULT_fes__VersionActionTokens;
#else
	*a = (enum fes__VersionActionTokens)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__VersionActionTokens(struct soap*, const char*, int, const enum fes__VersionActionTokens *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_fes__VersionActionTokens2s(struct soap*, enum fes__VersionActionTokens);
SOAP_FMAC3 enum fes__VersionActionTokens * SOAP_FMAC4 soap_in_fes__VersionActionTokens(struct soap*, const char*, enum fes__VersionActionTokens *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2fes__VersionActionTokens(struct soap*, const char*, enum fes__VersionActionTokens *);

SOAP_FMAC3 enum fes__VersionActionTokens * SOAP_FMAC4 soap_new_fes__VersionActionTokens(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__VersionActionTokens(struct soap*, const enum fes__VersionActionTokens *, const char*, const char*);

inline int soap_write_fes__VersionActionTokens(struct soap *soap, enum fes__VersionActionTokens const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__VersionActionTokens(soap, p, "fes:VersionActionTokens", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__VersionActionTokens(struct soap *soap, const char *URL, enum fes__VersionActionTokens const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__VersionActionTokens(soap, p, "fes:VersionActionTokens", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__VersionActionTokens(struct soap *soap, const char *URL, enum fes__VersionActionTokens const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__VersionActionTokens(soap, p, "fes:VersionActionTokens", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__VersionActionTokens(struct soap *soap, const char *URL, enum fes__VersionActionTokens const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__VersionActionTokens(soap, p, "fes:VersionActionTokens", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum fes__VersionActionTokens * SOAP_FMAC4 soap_get_fes__VersionActionTokens(struct soap*, enum fes__VersionActionTokens *, const char*, const char*);

inline int soap_read_fes__VersionActionTokens(struct soap *soap, enum fes__VersionActionTokens *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__VersionActionTokens(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__VersionActionTokens(struct soap *soap, const char *URL, enum fes__VersionActionTokens *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__VersionActionTokens(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__VersionActionTokens(struct soap *soap, enum fes__VersionActionTokens *p)
{
	if (::soap_read_fes__VersionActionTokens(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__actuateType_DEFINED
#define SOAP_TYPE_xlink__actuateType_DEFINED

inline void soap_default_xlink__actuateType(struct soap *soap, enum xlink__actuateType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xlink__actuateType
	*a = SOAP_DEFAULT_xlink__actuateType;
#else
	*a = (enum xlink__actuateType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__actuateType(struct soap*, const char*, int, const enum xlink__actuateType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xlink__actuateType2s(struct soap*, enum xlink__actuateType);
SOAP_FMAC3 enum xlink__actuateType * SOAP_FMAC4 soap_in_xlink__actuateType(struct soap*, const char*, enum xlink__actuateType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xlink__actuateType(struct soap*, const char*, enum xlink__actuateType *);

SOAP_FMAC3 enum xlink__actuateType * SOAP_FMAC4 soap_new_xlink__actuateType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xlink__actuateType(struct soap*, const enum xlink__actuateType *, const char*, const char*);

inline int soap_write_xlink__actuateType(struct soap *soap, enum xlink__actuateType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xlink__actuateType(soap, p, "xlink:actuateType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xlink__actuateType(struct soap *soap, const char *URL, enum xlink__actuateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__actuateType(soap, p, "xlink:actuateType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__actuateType(struct soap *soap, const char *URL, enum xlink__actuateType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__actuateType(soap, p, "xlink:actuateType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__actuateType(struct soap *soap, const char *URL, enum xlink__actuateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__actuateType(soap, p, "xlink:actuateType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum xlink__actuateType * SOAP_FMAC4 soap_get_xlink__actuateType(struct soap*, enum xlink__actuateType *, const char*, const char*);

inline int soap_read_xlink__actuateType(struct soap *soap, enum xlink__actuateType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xlink__actuateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__actuateType(struct soap *soap, const char *URL, enum xlink__actuateType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__actuateType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__actuateType(struct soap *soap, enum xlink__actuateType *p)
{
	if (::soap_read_xlink__actuateType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__showType_DEFINED
#define SOAP_TYPE_xlink__showType_DEFINED

inline void soap_default_xlink__showType(struct soap *soap, enum xlink__showType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xlink__showType
	*a = SOAP_DEFAULT_xlink__showType;
#else
	*a = (enum xlink__showType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__showType(struct soap*, const char*, int, const enum xlink__showType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xlink__showType2s(struct soap*, enum xlink__showType);
SOAP_FMAC3 enum xlink__showType * SOAP_FMAC4 soap_in_xlink__showType(struct soap*, const char*, enum xlink__showType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xlink__showType(struct soap*, const char*, enum xlink__showType *);

SOAP_FMAC3 enum xlink__showType * SOAP_FMAC4 soap_new_xlink__showType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xlink__showType(struct soap*, const enum xlink__showType *, const char*, const char*);

inline int soap_write_xlink__showType(struct soap *soap, enum xlink__showType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xlink__showType(soap, p, "xlink:showType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xlink__showType(struct soap *soap, const char *URL, enum xlink__showType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__showType(soap, p, "xlink:showType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__showType(struct soap *soap, const char *URL, enum xlink__showType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__showType(soap, p, "xlink:showType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__showType(struct soap *soap, const char *URL, enum xlink__showType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__showType(soap, p, "xlink:showType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum xlink__showType * SOAP_FMAC4 soap_get_xlink__showType(struct soap*, enum xlink__showType *, const char*, const char*);

inline int soap_read_xlink__showType(struct soap *soap, enum xlink__showType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xlink__showType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__showType(struct soap *soap, const char *URL, enum xlink__showType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__showType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__showType(struct soap *soap, enum xlink__showType *p)
{
	if (::soap_read_xlink__showType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__typeType_DEFINED
#define SOAP_TYPE_xlink__typeType_DEFINED

inline void soap_default_xlink__typeType(struct soap *soap, enum xlink__typeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xlink__typeType
	*a = SOAP_DEFAULT_xlink__typeType;
#else
	*a = (enum xlink__typeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__typeType(struct soap*, const char*, int, const enum xlink__typeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xlink__typeType2s(struct soap*, enum xlink__typeType);
SOAP_FMAC3 enum xlink__typeType * SOAP_FMAC4 soap_in_xlink__typeType(struct soap*, const char*, enum xlink__typeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xlink__typeType(struct soap*, const char*, enum xlink__typeType *);

SOAP_FMAC3 enum xlink__typeType * SOAP_FMAC4 soap_new_xlink__typeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xlink__typeType(struct soap*, const enum xlink__typeType *, const char*, const char*);

inline int soap_write_xlink__typeType(struct soap *soap, enum xlink__typeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xlink__typeType(soap, p, "xlink:typeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xlink__typeType(struct soap *soap, const char *URL, enum xlink__typeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__typeType(soap, p, "xlink:typeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__typeType(struct soap *soap, const char *URL, enum xlink__typeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__typeType(soap, p, "xlink:typeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__typeType(struct soap *soap, const char *URL, enum xlink__typeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__typeType(soap, p, "xlink:typeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum xlink__typeType * SOAP_FMAC4 soap_get_xlink__typeType(struct soap*, enum xlink__typeType *, const char*, const char*);

inline int soap_read_xlink__typeType(struct soap *soap, enum xlink__typeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xlink__typeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__typeType(struct soap *soap, const char *URL, enum xlink__typeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__typeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__typeType(struct soap *soap, enum xlink__typeType *p)
{
	if (::soap_read_xlink__typeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__rangeClosure_DEFINED
#define SOAP_TYPE__ows__rangeClosure_DEFINED

inline void soap_default__ows__rangeClosure(struct soap *soap, enum _ows__rangeClosure *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__ows__rangeClosure
	*a = SOAP_DEFAULT__ows__rangeClosure;
#else
	*a = (enum _ows__rangeClosure)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__rangeClosure(struct soap*, const char*, int, const enum _ows__rangeClosure *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__ows__rangeClosure2s(struct soap*, enum _ows__rangeClosure);
SOAP_FMAC3 enum _ows__rangeClosure * SOAP_FMAC4 soap_in__ows__rangeClosure(struct soap*, const char*, enum _ows__rangeClosure *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_ows__rangeClosure(struct soap*, const char*, enum _ows__rangeClosure *);

SOAP_FMAC3 enum _ows__rangeClosure * SOAP_FMAC4 soap_new__ows__rangeClosure(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__rangeClosure(struct soap*, const enum _ows__rangeClosure *, const char*, const char*);

inline int soap_write__ows__rangeClosure(struct soap *soap, enum _ows__rangeClosure const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ows__rangeClosure(soap, p, "ows:rangeClosure", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ows__rangeClosure(struct soap *soap, const char *URL, enum _ows__rangeClosure const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__rangeClosure(soap, p, "ows:rangeClosure", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__rangeClosure(struct soap *soap, const char *URL, enum _ows__rangeClosure const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__rangeClosure(soap, p, "ows:rangeClosure", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__rangeClosure(struct soap *soap, const char *URL, enum _ows__rangeClosure const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__rangeClosure(soap, p, "ows:rangeClosure", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _ows__rangeClosure * SOAP_FMAC4 soap_get__ows__rangeClosure(struct soap*, enum _ows__rangeClosure *, const char*, const char*);

inline int soap_read__ows__rangeClosure(struct soap *soap, enum _ows__rangeClosure *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__ows__rangeClosure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__rangeClosure(struct soap *soap, const char *URL, enum _ows__rangeClosure *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__rangeClosure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__rangeClosure(struct soap *soap, enum _ows__rangeClosure *p)
{
	if (::soap_read__ows__rangeClosure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__UpdateActionType_DEFINED
#define SOAP_TYPE_wfs__UpdateActionType_DEFINED

inline void soap_default_wfs__UpdateActionType(struct soap *soap, enum wfs__UpdateActionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wfs__UpdateActionType
	*a = SOAP_DEFAULT_wfs__UpdateActionType;
#else
	*a = (enum wfs__UpdateActionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__UpdateActionType(struct soap*, const char*, int, const enum wfs__UpdateActionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wfs__UpdateActionType2s(struct soap*, enum wfs__UpdateActionType);
SOAP_FMAC3 enum wfs__UpdateActionType * SOAP_FMAC4 soap_in_wfs__UpdateActionType(struct soap*, const char*, enum wfs__UpdateActionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wfs__UpdateActionType(struct soap*, const char*, enum wfs__UpdateActionType *);

SOAP_FMAC3 enum wfs__UpdateActionType * SOAP_FMAC4 soap_new_wfs__UpdateActionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__UpdateActionType(struct soap*, const enum wfs__UpdateActionType *, const char*, const char*);

inline int soap_write_wfs__UpdateActionType(struct soap *soap, enum wfs__UpdateActionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__UpdateActionType(soap, p, "wfs:UpdateActionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__UpdateActionType(struct soap *soap, const char *URL, enum wfs__UpdateActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__UpdateActionType(soap, p, "wfs:UpdateActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__UpdateActionType(struct soap *soap, const char *URL, enum wfs__UpdateActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__UpdateActionType(soap, p, "wfs:UpdateActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__UpdateActionType(struct soap *soap, const char *URL, enum wfs__UpdateActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__UpdateActionType(soap, p, "wfs:UpdateActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wfs__UpdateActionType * SOAP_FMAC4 soap_get_wfs__UpdateActionType(struct soap*, enum wfs__UpdateActionType *, const char*, const char*);

inline int soap_read_wfs__UpdateActionType(struct soap *soap, enum wfs__UpdateActionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__UpdateActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__UpdateActionType(struct soap *soap, const char *URL, enum wfs__UpdateActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__UpdateActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__UpdateActionType(struct soap *soap, enum wfs__UpdateActionType *p)
{
	if (::soap_read_wfs__UpdateActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__AllSomeType_DEFINED
#define SOAP_TYPE_wfs__AllSomeType_DEFINED

inline void soap_default_wfs__AllSomeType(struct soap *soap, enum wfs__AllSomeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wfs__AllSomeType
	*a = SOAP_DEFAULT_wfs__AllSomeType;
#else
	*a = (enum wfs__AllSomeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__AllSomeType(struct soap*, const char*, int, const enum wfs__AllSomeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wfs__AllSomeType2s(struct soap*, enum wfs__AllSomeType);
SOAP_FMAC3 enum wfs__AllSomeType * SOAP_FMAC4 soap_in_wfs__AllSomeType(struct soap*, const char*, enum wfs__AllSomeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wfs__AllSomeType(struct soap*, const char*, enum wfs__AllSomeType *);

SOAP_FMAC3 enum wfs__AllSomeType * SOAP_FMAC4 soap_new_wfs__AllSomeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__AllSomeType(struct soap*, const enum wfs__AllSomeType *, const char*, const char*);

inline int soap_write_wfs__AllSomeType(struct soap *soap, enum wfs__AllSomeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__AllSomeType(soap, p, "wfs:AllSomeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__AllSomeType(struct soap *soap, const char *URL, enum wfs__AllSomeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__AllSomeType(soap, p, "wfs:AllSomeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__AllSomeType(struct soap *soap, const char *URL, enum wfs__AllSomeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__AllSomeType(soap, p, "wfs:AllSomeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__AllSomeType(struct soap *soap, const char *URL, enum wfs__AllSomeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__AllSomeType(soap, p, "wfs:AllSomeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wfs__AllSomeType * SOAP_FMAC4 soap_get_wfs__AllSomeType(struct soap*, enum wfs__AllSomeType *, const char*, const char*);

inline int soap_read_wfs__AllSomeType(struct soap *soap, enum wfs__AllSomeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__AllSomeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__AllSomeType(struct soap *soap, const char *URL, enum wfs__AllSomeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__AllSomeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__AllSomeType(struct soap *soap, enum wfs__AllSomeType *p)
{
	if (::soap_read_wfs__AllSomeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__StarStringType_DEFINED
#define SOAP_TYPE_wfs__StarStringType_DEFINED

inline void soap_default_wfs__StarStringType(struct soap *soap, enum wfs__StarStringType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wfs__StarStringType
	*a = SOAP_DEFAULT_wfs__StarStringType;
#else
	*a = (enum wfs__StarStringType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__StarStringType(struct soap*, const char*, int, const enum wfs__StarStringType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wfs__StarStringType2s(struct soap*, enum wfs__StarStringType);
SOAP_FMAC3 enum wfs__StarStringType * SOAP_FMAC4 soap_in_wfs__StarStringType(struct soap*, const char*, enum wfs__StarStringType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wfs__StarStringType(struct soap*, const char*, enum wfs__StarStringType *);

SOAP_FMAC3 enum wfs__StarStringType * SOAP_FMAC4 soap_new_wfs__StarStringType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__StarStringType(struct soap*, const enum wfs__StarStringType *, const char*, const char*);

inline int soap_write_wfs__StarStringType(struct soap *soap, enum wfs__StarStringType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__StarStringType(soap, p, "wfs:StarStringType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__StarStringType(struct soap *soap, const char *URL, enum wfs__StarStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__StarStringType(soap, p, "wfs:StarStringType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__StarStringType(struct soap *soap, const char *URL, enum wfs__StarStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__StarStringType(soap, p, "wfs:StarStringType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__StarStringType(struct soap *soap, const char *URL, enum wfs__StarStringType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__StarStringType(soap, p, "wfs:StarStringType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wfs__StarStringType * SOAP_FMAC4 soap_get_wfs__StarStringType(struct soap*, enum wfs__StarStringType *, const char*, const char*);

inline int soap_read_wfs__StarStringType(struct soap *soap, enum wfs__StarStringType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__StarStringType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__StarStringType(struct soap *soap, const char *URL, enum wfs__StarStringType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__StarStringType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__StarStringType(struct soap *soap, enum wfs__StarStringType *p)
{
	if (::soap_read_wfs__StarStringType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ResolveValueType_DEFINED
#define SOAP_TYPE_wfs__ResolveValueType_DEFINED

inline void soap_default_wfs__ResolveValueType(struct soap *soap, enum wfs__ResolveValueType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wfs__ResolveValueType
	*a = SOAP_DEFAULT_wfs__ResolveValueType;
#else
	*a = (enum wfs__ResolveValueType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ResolveValueType(struct soap*, const char*, int, const enum wfs__ResolveValueType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wfs__ResolveValueType2s(struct soap*, enum wfs__ResolveValueType);
SOAP_FMAC3 enum wfs__ResolveValueType * SOAP_FMAC4 soap_in_wfs__ResolveValueType(struct soap*, const char*, enum wfs__ResolveValueType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wfs__ResolveValueType(struct soap*, const char*, enum wfs__ResolveValueType *);

SOAP_FMAC3 enum wfs__ResolveValueType * SOAP_FMAC4 soap_new_wfs__ResolveValueType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__ResolveValueType(struct soap*, const enum wfs__ResolveValueType *, const char*, const char*);

inline int soap_write_wfs__ResolveValueType(struct soap *soap, enum wfs__ResolveValueType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__ResolveValueType(soap, p, "wfs:ResolveValueType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__ResolveValueType(struct soap *soap, const char *URL, enum wfs__ResolveValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__ResolveValueType(soap, p, "wfs:ResolveValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ResolveValueType(struct soap *soap, const char *URL, enum wfs__ResolveValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__ResolveValueType(soap, p, "wfs:ResolveValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ResolveValueType(struct soap *soap, const char *URL, enum wfs__ResolveValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__ResolveValueType(soap, p, "wfs:ResolveValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wfs__ResolveValueType * SOAP_FMAC4 soap_get_wfs__ResolveValueType(struct soap*, enum wfs__ResolveValueType *, const char*, const char*);

inline int soap_read_wfs__ResolveValueType(struct soap *soap, enum wfs__ResolveValueType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__ResolveValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ResolveValueType(struct soap *soap, const char *URL, enum wfs__ResolveValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ResolveValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ResolveValueType(struct soap *soap, enum wfs__ResolveValueType *p)
{
	if (::soap_read_wfs__ResolveValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ResultTypeType_DEFINED
#define SOAP_TYPE_wfs__ResultTypeType_DEFINED

inline void soap_default_wfs__ResultTypeType(struct soap *soap, enum wfs__ResultTypeType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wfs__ResultTypeType
	*a = SOAP_DEFAULT_wfs__ResultTypeType;
#else
	*a = (enum wfs__ResultTypeType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ResultTypeType(struct soap*, const char*, int, const enum wfs__ResultTypeType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wfs__ResultTypeType2s(struct soap*, enum wfs__ResultTypeType);
SOAP_FMAC3 enum wfs__ResultTypeType * SOAP_FMAC4 soap_in_wfs__ResultTypeType(struct soap*, const char*, enum wfs__ResultTypeType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wfs__ResultTypeType(struct soap*, const char*, enum wfs__ResultTypeType *);

SOAP_FMAC3 enum wfs__ResultTypeType * SOAP_FMAC4 soap_new_wfs__ResultTypeType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__ResultTypeType(struct soap*, const enum wfs__ResultTypeType *, const char*, const char*);

inline int soap_write_wfs__ResultTypeType(struct soap *soap, enum wfs__ResultTypeType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__ResultTypeType(soap, p, "wfs:ResultTypeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__ResultTypeType(struct soap *soap, const char *URL, enum wfs__ResultTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__ResultTypeType(soap, p, "wfs:ResultTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ResultTypeType(struct soap *soap, const char *URL, enum wfs__ResultTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__ResultTypeType(soap, p, "wfs:ResultTypeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ResultTypeType(struct soap *soap, const char *URL, enum wfs__ResultTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__ResultTypeType(soap, p, "wfs:ResultTypeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wfs__ResultTypeType * SOAP_FMAC4 soap_get_wfs__ResultTypeType(struct soap*, enum wfs__ResultTypeType *, const char*, const char*);

inline int soap_read_wfs__ResultTypeType(struct soap *soap, enum wfs__ResultTypeType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__ResultTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ResultTypeType(struct soap *soap, const char *URL, enum wfs__ResultTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ResultTypeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ResultTypeType(struct soap *soap, enum wfs__ResultTypeType *p)
{
	if (::soap_read_wfs__ResultTypeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _icommon__OtherService is a typedef synonym of icommon__otherService */

#ifndef SOAP_TYPE__icommon__OtherService_DEFINED
#define SOAP_TYPE__icommon__OtherService_DEFINED

#define soap_default__icommon__OtherService(soap, a) (a)->icommon__otherService::soap_default(soap)


#define soap_serialize__icommon__OtherService(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__OtherService2s soap_icommon__otherService2s


#define soap_out__icommon__OtherService soap_out_icommon__otherService


#define soap_s2_icommon__OtherService soap_s2icommon__otherService


#define soap_in__icommon__OtherService soap_in_icommon__otherService


#define soap_instantiate__icommon__OtherService soap_instantiate_icommon__otherService


#define soap_new__icommon__OtherService soap_new_icommon__otherService


#define soap_new_req__icommon__OtherService soap_new_req_icommon__otherService


#define soap_new_set__icommon__OtherService soap_new_set_icommon__otherService

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__OtherService(struct soap*, const icommon__otherService *, const char*, const char*);

inline int soap_write__icommon__OtherService(struct soap *soap, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:OtherService", p->soap_type() == SOAP_TYPE__icommon__OtherService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__OtherService(struct soap *soap, const char *URL, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:OtherService", p->soap_type() == SOAP_TYPE__icommon__OtherService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__OtherService(struct soap *soap, const char *URL, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:OtherService", p->soap_type() == SOAP_TYPE__icommon__OtherService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__OtherService(struct soap *soap, const char *URL, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:OtherService", p->soap_type() == SOAP_TYPE__icommon__OtherService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__OtherService soap_get_icommon__otherService


#define soap_read__icommon__OtherService soap_read_icommon__otherService


#define soap_GET__icommon__OtherService soap_GET_icommon__otherService


#define soap_POST_recv__icommon__OtherService soap_POST_recv_icommon__otherService

#endif
/* _icommon__InvokeService is a typedef synonym of icommon__invokeService */

#ifndef SOAP_TYPE__icommon__InvokeService_DEFINED
#define SOAP_TYPE__icommon__InvokeService_DEFINED

#define soap_default__icommon__InvokeService(soap, a) (a)->icommon__invokeService::soap_default(soap)


#define soap_serialize__icommon__InvokeService(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__InvokeService2s soap_icommon__invokeService2s


#define soap_out__icommon__InvokeService soap_out_icommon__invokeService


#define soap_s2_icommon__InvokeService soap_s2icommon__invokeService


#define soap_in__icommon__InvokeService soap_in_icommon__invokeService


#define soap_instantiate__icommon__InvokeService soap_instantiate_icommon__invokeService


#define soap_new__icommon__InvokeService soap_new_icommon__invokeService


#define soap_new_req__icommon__InvokeService soap_new_req_icommon__invokeService


#define soap_new_set__icommon__InvokeService soap_new_set_icommon__invokeService

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__InvokeService(struct soap*, const icommon__invokeService *, const char*, const char*);

inline int soap_write__icommon__InvokeService(struct soap *soap, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:InvokeService", p->soap_type() == SOAP_TYPE__icommon__InvokeService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__InvokeService(struct soap *soap, const char *URL, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:InvokeService", p->soap_type() == SOAP_TYPE__icommon__InvokeService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__InvokeService(struct soap *soap, const char *URL, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:InvokeService", p->soap_type() == SOAP_TYPE__icommon__InvokeService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__InvokeService(struct soap *soap, const char *URL, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:InvokeService", p->soap_type() == SOAP_TYPE__icommon__InvokeService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__InvokeService soap_get_icommon__invokeService


#define soap_read__icommon__InvokeService soap_read_icommon__invokeService


#define soap_GET__icommon__InvokeService soap_GET_icommon__invokeService


#define soap_POST_recv__icommon__InvokeService soap_POST_recv_icommon__invokeService

#endif
/* _icommon__TransformationService is a typedef synonym of icommon__transformationService */

#ifndef SOAP_TYPE__icommon__TransformationService_DEFINED
#define SOAP_TYPE__icommon__TransformationService_DEFINED

#define soap_default__icommon__TransformationService(soap, a) (a)->icommon__transformationService::soap_default(soap)


#define soap_serialize__icommon__TransformationService(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__TransformationService2s soap_icommon__transformationService2s


#define soap_out__icommon__TransformationService soap_out_icommon__transformationService


#define soap_s2_icommon__TransformationService soap_s2icommon__transformationService


#define soap_in__icommon__TransformationService soap_in_icommon__transformationService


#define soap_instantiate__icommon__TransformationService soap_instantiate_icommon__transformationService


#define soap_new__icommon__TransformationService soap_new_icommon__transformationService


#define soap_new_req__icommon__TransformationService soap_new_req_icommon__transformationService


#define soap_new_set__icommon__TransformationService soap_new_set_icommon__transformationService

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__TransformationService(struct soap*, const icommon__transformationService *, const char*, const char*);

inline int soap_write__icommon__TransformationService(struct soap *soap, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:TransformationService", p->soap_type() == SOAP_TYPE__icommon__TransformationService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__TransformationService(struct soap *soap, const char *URL, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:TransformationService", p->soap_type() == SOAP_TYPE__icommon__TransformationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__TransformationService(struct soap *soap, const char *URL, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:TransformationService", p->soap_type() == SOAP_TYPE__icommon__TransformationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__TransformationService(struct soap *soap, const char *URL, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:TransformationService", p->soap_type() == SOAP_TYPE__icommon__TransformationService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__TransformationService soap_get_icommon__transformationService


#define soap_read__icommon__TransformationService soap_read_icommon__transformationService


#define soap_GET__icommon__TransformationService soap_GET_icommon__transformationService


#define soap_POST_recv__icommon__TransformationService soap_POST_recv_icommon__transformationService

#endif
/* _icommon__DownloadService is a typedef synonym of icommon__downloadService */

#ifndef SOAP_TYPE__icommon__DownloadService_DEFINED
#define SOAP_TYPE__icommon__DownloadService_DEFINED

#define soap_default__icommon__DownloadService(soap, a) (a)->icommon__downloadService::soap_default(soap)


#define soap_serialize__icommon__DownloadService(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__DownloadService2s soap_icommon__downloadService2s


#define soap_out__icommon__DownloadService soap_out_icommon__downloadService


#define soap_s2_icommon__DownloadService soap_s2icommon__downloadService


#define soap_in__icommon__DownloadService soap_in_icommon__downloadService


#define soap_instantiate__icommon__DownloadService soap_instantiate_icommon__downloadService


#define soap_new__icommon__DownloadService soap_new_icommon__downloadService


#define soap_new_req__icommon__DownloadService soap_new_req_icommon__downloadService


#define soap_new_set__icommon__DownloadService soap_new_set_icommon__downloadService

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__DownloadService(struct soap*, const icommon__downloadService *, const char*, const char*);

inline int soap_write__icommon__DownloadService(struct soap *soap, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DownloadService", p->soap_type() == SOAP_TYPE__icommon__DownloadService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__DownloadService(struct soap *soap, const char *URL, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DownloadService", p->soap_type() == SOAP_TYPE__icommon__DownloadService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__DownloadService(struct soap *soap, const char *URL, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DownloadService", p->soap_type() == SOAP_TYPE__icommon__DownloadService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__DownloadService(struct soap *soap, const char *URL, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DownloadService", p->soap_type() == SOAP_TYPE__icommon__DownloadService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__DownloadService soap_get_icommon__downloadService


#define soap_read__icommon__DownloadService soap_read_icommon__downloadService


#define soap_GET__icommon__DownloadService soap_GET_icommon__downloadService


#define soap_POST_recv__icommon__DownloadService soap_POST_recv_icommon__downloadService

#endif
/* _icommon__ViewService is a typedef synonym of icommon__viewService */

#ifndef SOAP_TYPE__icommon__ViewService_DEFINED
#define SOAP_TYPE__icommon__ViewService_DEFINED

#define soap_default__icommon__ViewService(soap, a) (a)->icommon__viewService::soap_default(soap)


#define soap_serialize__icommon__ViewService(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__ViewService2s soap_icommon__viewService2s


#define soap_out__icommon__ViewService soap_out_icommon__viewService


#define soap_s2_icommon__ViewService soap_s2icommon__viewService


#define soap_in__icommon__ViewService soap_in_icommon__viewService


#define soap_instantiate__icommon__ViewService soap_instantiate_icommon__viewService


#define soap_new__icommon__ViewService soap_new_icommon__viewService


#define soap_new_req__icommon__ViewService soap_new_req_icommon__viewService


#define soap_new_set__icommon__ViewService soap_new_set_icommon__viewService

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__ViewService(struct soap*, const icommon__viewService *, const char*, const char*);

inline int soap_write__icommon__ViewService(struct soap *soap, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ViewService", p->soap_type() == SOAP_TYPE__icommon__ViewService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__ViewService(struct soap *soap, const char *URL, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ViewService", p->soap_type() == SOAP_TYPE__icommon__ViewService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__ViewService(struct soap *soap, const char *URL, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ViewService", p->soap_type() == SOAP_TYPE__icommon__ViewService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__ViewService(struct soap *soap, const char *URL, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ViewService", p->soap_type() == SOAP_TYPE__icommon__ViewService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__ViewService soap_get_icommon__viewService


#define soap_read__icommon__ViewService soap_read_icommon__viewService


#define soap_GET__icommon__ViewService soap_GET_icommon__viewService


#define soap_POST_recv__icommon__ViewService soap_POST_recv_icommon__viewService

#endif
/* _icommon__DiscoveryService is a typedef synonym of icommon__discoveryService */

#ifndef SOAP_TYPE__icommon__DiscoveryService_DEFINED
#define SOAP_TYPE__icommon__DiscoveryService_DEFINED

#define soap_default__icommon__DiscoveryService(soap, a) (a)->icommon__discoveryService::soap_default(soap)


#define soap_serialize__icommon__DiscoveryService(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__DiscoveryService2s soap_icommon__discoveryService2s


#define soap_out__icommon__DiscoveryService soap_out_icommon__discoveryService


#define soap_s2_icommon__DiscoveryService soap_s2icommon__discoveryService


#define soap_in__icommon__DiscoveryService soap_in_icommon__discoveryService


#define soap_instantiate__icommon__DiscoveryService soap_instantiate_icommon__discoveryService


#define soap_new__icommon__DiscoveryService soap_new_icommon__discoveryService


#define soap_new_req__icommon__DiscoveryService soap_new_req_icommon__discoveryService


#define soap_new_set__icommon__DiscoveryService soap_new_set_icommon__discoveryService

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__DiscoveryService(struct soap*, const icommon__discoveryService *, const char*, const char*);

inline int soap_write__icommon__DiscoveryService(struct soap *soap, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DiscoveryService", p->soap_type() == SOAP_TYPE__icommon__DiscoveryService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__DiscoveryService(struct soap *soap, const char *URL, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DiscoveryService", p->soap_type() == SOAP_TYPE__icommon__DiscoveryService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__DiscoveryService(struct soap *soap, const char *URL, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DiscoveryService", p->soap_type() == SOAP_TYPE__icommon__DiscoveryService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__DiscoveryService(struct soap *soap, const char *URL, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:DiscoveryService", p->soap_type() == SOAP_TYPE__icommon__DiscoveryService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__DiscoveryService soap_get_icommon__discoveryService


#define soap_read__icommon__DiscoveryService soap_read_icommon__discoveryService


#define soap_GET__icommon__DiscoveryService soap_GET_icommon__discoveryService


#define soap_POST_recv__icommon__DiscoveryService soap_POST_recv_icommon__discoveryService

#endif
/* _icommon__IndividualDate is a typedef synonym of icommon__iso8601Date */

#ifndef SOAP_TYPE__icommon__IndividualDate_DEFINED
#define SOAP_TYPE__icommon__IndividualDate_DEFINED

#define soap_default__icommon__IndividualDate soap_default_icommon__iso8601Date


#define soap_serialize__icommon__IndividualDate soap_serialize_icommon__iso8601Date


#define soap__icommon__IndividualDate2s(soap, a) ((a).c_str())

#define soap_out__icommon__IndividualDate soap_out_icommon__iso8601Date


#define soap_s2_icommon__IndividualDate(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "\\d{4}-(1[0-2]|0[1-9])-(3[0-1]|0[1-9]|[1-2][0-9])(T(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?)?(Z|([+|-](2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9])?)?)?")

#define soap_in__icommon__IndividualDate soap_in_icommon__iso8601Date


#define soap_instantiate__icommon__IndividualDate soap_instantiate_icommon__iso8601Date


#define soap_new__icommon__IndividualDate soap_new_icommon__iso8601Date


#define soap_put__icommon__IndividualDate soap_put_icommon__iso8601Date


#define soap_write__icommon__IndividualDate soap_write_icommon__iso8601Date


#define soap_PUT__icommon__IndividualDate soap_PUT_icommon__iso8601Date


#define soap_PATCH__icommon__IndividualDate soap_PATCH_icommon__iso8601Date


#define soap_POST_send__icommon__IndividualDate soap_POST_send_icommon__iso8601Date


#define soap_get__icommon__IndividualDate soap_get_icommon__iso8601Date


#define soap_read__icommon__IndividualDate soap_read_icommon__iso8601Date


#define soap_GET__icommon__IndividualDate soap_GET_icommon__iso8601Date


#define soap_POST_recv__icommon__IndividualDate soap_POST_recv_icommon__iso8601Date

#endif
/* _icommon__SpatialDataSetSeries is a typedef synonym of icommon__series */

#ifndef SOAP_TYPE__icommon__SpatialDataSetSeries_DEFINED
#define SOAP_TYPE__icommon__SpatialDataSetSeries_DEFINED

#define soap_default__icommon__SpatialDataSetSeries(soap, a) (a)->icommon__series::soap_default(soap)


#define soap_serialize__icommon__SpatialDataSetSeries(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__SpatialDataSetSeries2s soap_icommon__series2s


#define soap_out__icommon__SpatialDataSetSeries soap_out_icommon__series


#define soap_s2_icommon__SpatialDataSetSeries soap_s2icommon__series


#define soap_in__icommon__SpatialDataSetSeries soap_in_icommon__series


#define soap_instantiate__icommon__SpatialDataSetSeries soap_instantiate_icommon__series


#define soap_new__icommon__SpatialDataSetSeries soap_new_icommon__series


#define soap_new_req__icommon__SpatialDataSetSeries soap_new_req_icommon__series


#define soap_new_set__icommon__SpatialDataSetSeries soap_new_set_icommon__series

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__SpatialDataSetSeries(struct soap*, const icommon__series *, const char*, const char*);

inline int soap_write__icommon__SpatialDataSetSeries(struct soap *soap, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSetSeries", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSetSeries ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__SpatialDataSetSeries(struct soap *soap, const char *URL, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSetSeries", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSetSeries ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__SpatialDataSetSeries(struct soap *soap, const char *URL, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSetSeries", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSetSeries ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__SpatialDataSetSeries(struct soap *soap, const char *URL, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSetSeries", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSetSeries ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__SpatialDataSetSeries soap_get_icommon__series


#define soap_read__icommon__SpatialDataSetSeries soap_read_icommon__series


#define soap_GET__icommon__SpatialDataSetSeries soap_GET_icommon__series


#define soap_POST_recv__icommon__SpatialDataSetSeries soap_POST_recv_icommon__series

#endif
/* _icommon__SpatialDataSet is a typedef synonym of icommon__dataset */

#ifndef SOAP_TYPE__icommon__SpatialDataSet_DEFINED
#define SOAP_TYPE__icommon__SpatialDataSet_DEFINED

#define soap_default__icommon__SpatialDataSet(soap, a) (a)->icommon__dataset::soap_default(soap)


#define soap_serialize__icommon__SpatialDataSet(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__SpatialDataSet2s soap_icommon__dataset2s


#define soap_out__icommon__SpatialDataSet soap_out_icommon__dataset


#define soap_s2_icommon__SpatialDataSet soap_s2icommon__dataset


#define soap_in__icommon__SpatialDataSet soap_in_icommon__dataset


#define soap_instantiate__icommon__SpatialDataSet soap_instantiate_icommon__dataset


#define soap_new__icommon__SpatialDataSet soap_new_icommon__dataset


#define soap_new_req__icommon__SpatialDataSet soap_new_req_icommon__dataset


#define soap_new_set__icommon__SpatialDataSet soap_new_set_icommon__dataset

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__SpatialDataSet(struct soap*, const icommon__dataset *, const char*, const char*);

inline int soap_write__icommon__SpatialDataSet(struct soap *soap, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSet", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__SpatialDataSet(struct soap *soap, const char *URL, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSet", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__SpatialDataSet(struct soap *soap, const char *URL, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSet", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__SpatialDataSet(struct soap *soap, const char *URL, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataSet", p->soap_type() == SOAP_TYPE__icommon__SpatialDataSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__SpatialDataSet soap_get_icommon__dataset


#define soap_read__icommon__SpatialDataSet soap_read_icommon__dataset


#define soap_GET__icommon__SpatialDataSet soap_GET_icommon__dataset


#define soap_POST_recv__icommon__SpatialDataSet soap_POST_recv_icommon__dataset

#endif
/* _icommon__SpatialDataService is a typedef synonym of icommon__service */

#ifndef SOAP_TYPE__icommon__SpatialDataService_DEFINED
#define SOAP_TYPE__icommon__SpatialDataService_DEFINED

#define soap_default__icommon__SpatialDataService(soap, a) (a)->icommon__service::soap_default(soap)


#define soap_serialize__icommon__SpatialDataService(soap, a) (a)->soap_serialize(soap)


#define soap__icommon__SpatialDataService2s soap_icommon__service2s


#define soap_out__icommon__SpatialDataService soap_out_icommon__service


#define soap_s2_icommon__SpatialDataService soap_s2icommon__service


#define soap_in__icommon__SpatialDataService soap_in_icommon__service


#define soap_instantiate__icommon__SpatialDataService soap_instantiate_icommon__service


#define soap_new__icommon__SpatialDataService soap_new_icommon__service


#define soap_new_req__icommon__SpatialDataService soap_new_req_icommon__service


#define soap_new_set__icommon__SpatialDataService soap_new_set_icommon__service

SOAP_FMAC3 int SOAP_FMAC4 soap_put__icommon__SpatialDataService(struct soap*, const icommon__service *, const char*, const char*);

inline int soap_write__icommon__SpatialDataService(struct soap *soap, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataService", p->soap_type() == SOAP_TYPE__icommon__SpatialDataService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__SpatialDataService(struct soap *soap, const char *URL, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataService", p->soap_type() == SOAP_TYPE__icommon__SpatialDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__SpatialDataService(struct soap *soap, const char *URL, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataService", p->soap_type() == SOAP_TYPE__icommon__SpatialDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__SpatialDataService(struct soap *soap, const char *URL, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:SpatialDataService", p->soap_type() == SOAP_TYPE__icommon__SpatialDataService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__icommon__SpatialDataService soap_get_icommon__service


#define soap_read__icommon__SpatialDataService soap_read_icommon__service


#define soap_GET__icommon__SpatialDataService soap_GET_icommon__service


#define soap_POST_recv__icommon__SpatialDataService soap_POST_recv_icommon__service

#endif
/* _fes__SortBy is a typedef synonym of fes__SortByType */

#ifndef SOAP_TYPE__fes__SortBy_DEFINED
#define SOAP_TYPE__fes__SortBy_DEFINED

#define soap_default__fes__SortBy(soap, a) (a)->fes__SortByType::soap_default(soap)


#define soap_serialize__fes__SortBy(soap, a) (a)->soap_serialize(soap)


#define soap__fes__SortBy2s soap_fes__SortByType2s


#define soap_out__fes__SortBy soap_out_fes__SortByType


#define soap_s2_fes__SortBy soap_s2fes__SortByType


#define soap_in__fes__SortBy soap_in_fes__SortByType


#define soap_instantiate__fes__SortBy soap_instantiate_fes__SortByType


#define soap_new__fes__SortBy soap_new_fes__SortByType


#define soap_new_req__fes__SortBy soap_new_req_fes__SortByType


#define soap_new_set__fes__SortBy soap_new_set_fes__SortByType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__SortBy(struct soap*, const fes__SortByType *, const char*, const char*);

inline int soap_write__fes__SortBy(struct soap *soap, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortBy", p->soap_type() == SOAP_TYPE__fes__SortBy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__SortBy(struct soap *soap, const char *URL, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortBy", p->soap_type() == SOAP_TYPE__fes__SortBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__SortBy(struct soap *soap, const char *URL, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortBy", p->soap_type() == SOAP_TYPE__fes__SortBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__SortBy(struct soap *soap, const char *URL, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortBy", p->soap_type() == SOAP_TYPE__fes__SortBy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__SortBy soap_get_fes__SortByType


#define soap_read__fes__SortBy soap_read_fes__SortByType


#define soap_GET__fes__SortBy soap_GET_fes__SortByType


#define soap_POST_recv__fes__SortBy soap_POST_recv_fes__SortByType

#endif
/* _fes__Literal is a typedef synonym of fes__LiteralType */

#ifndef SOAP_TYPE__fes__Literal_DEFINED
#define SOAP_TYPE__fes__Literal_DEFINED

#define soap_default__fes__Literal(soap, a) (a)->fes__LiteralType::soap_default(soap)


#define soap_serialize__fes__Literal(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Literal2s soap_fes__LiteralType2s


#define soap_out__fes__Literal soap_out_fes__LiteralType


#define soap_s2_fes__Literal soap_s2fes__LiteralType


#define soap_in__fes__Literal soap_in_fes__LiteralType


#define soap_instantiate__fes__Literal soap_instantiate_fes__LiteralType


#define soap_new__fes__Literal soap_new_fes__LiteralType


#define soap_new_req__fes__Literal soap_new_req_fes__LiteralType


#define soap_new_set__fes__Literal soap_new_set_fes__LiteralType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Literal(struct soap*, const fes__LiteralType *, const char*, const char*);

inline int soap_write__fes__Literal(struct soap *soap, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Literal", p->soap_type() == SOAP_TYPE__fes__Literal ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Literal(struct soap *soap, const char *URL, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Literal", p->soap_type() == SOAP_TYPE__fes__Literal ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Literal(struct soap *soap, const char *URL, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Literal", p->soap_type() == SOAP_TYPE__fes__Literal ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Literal(struct soap *soap, const char *URL, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Literal", p->soap_type() == SOAP_TYPE__fes__Literal ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Literal soap_get_fes__LiteralType


#define soap_read__fes__Literal soap_read_fes__LiteralType


#define soap_GET__fes__Literal soap_GET_fes__LiteralType


#define soap_POST_recv__fes__Literal soap_POST_recv_fes__LiteralType

#endif
/* _fes__Function is a typedef synonym of fes__FunctionType */

#ifndef SOAP_TYPE__fes__Function_DEFINED
#define SOAP_TYPE__fes__Function_DEFINED

#define soap_default__fes__Function(soap, a) (a)->fes__FunctionType::soap_default(soap)


#define soap_serialize__fes__Function(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Function2s soap_fes__FunctionType2s


#define soap_out__fes__Function soap_out_fes__FunctionType


#define soap_s2_fes__Function soap_s2fes__FunctionType


#define soap_in__fes__Function soap_in_fes__FunctionType


#define soap_instantiate__fes__Function soap_instantiate_fes__FunctionType


#define soap_new__fes__Function soap_new_fes__FunctionType


#define soap_new_req__fes__Function soap_new_req_fes__FunctionType


#define soap_new_set__fes__Function soap_new_set_fes__FunctionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Function(struct soap*, const fes__FunctionType *, const char*, const char*);

inline int soap_write__fes__Function(struct soap *soap, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Function", p->soap_type() == SOAP_TYPE__fes__Function ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Function(struct soap *soap, const char *URL, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Function", p->soap_type() == SOAP_TYPE__fes__Function ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Function(struct soap *soap, const char *URL, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Function", p->soap_type() == SOAP_TYPE__fes__Function ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Function(struct soap *soap, const char *URL, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Function", p->soap_type() == SOAP_TYPE__fes__Function ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Function soap_get_fes__FunctionType


#define soap_read__fes__Function soap_read_fes__FunctionType


#define soap_GET__fes__Function soap_GET_fes__FunctionType


#define soap_POST_recv__fes__Function soap_POST_recv_fes__FunctionType

#endif
/* _fes__ValueReference is a typedef synonym of std__string */

#ifndef SOAP_TYPE__fes__ValueReference_DEFINED
#define SOAP_TYPE__fes__ValueReference_DEFINED

#define soap_default__fes__ValueReference soap_default_std__string


#define soap_serialize__fes__ValueReference soap_serialize_std__string


#define soap__fes__ValueReference2s(soap, a) ((a).c_str())

#define soap_out__fes__ValueReference soap_out_std__string


#define soap_s2_fes__ValueReference(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__fes__ValueReference soap_in_std__string


#define soap_instantiate__fes__ValueReference soap_instantiate_std__string


#define soap_new__fes__ValueReference soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__ValueReference(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__fes__ValueReference(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__fes__ValueReference(soap, p, "fes:ValueReference", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__fes__ValueReference(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__fes__ValueReference(soap, p, "fes:ValueReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__ValueReference(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__fes__ValueReference(soap, p, "fes:ValueReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__ValueReference(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__fes__ValueReference(soap, p, "fes:ValueReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__ValueReference soap_get_std__string


#define soap_read__fes__ValueReference soap_read_std__string


#define soap_GET__fes__ValueReference soap_GET_std__string


#define soap_POST_recv__fes__ValueReference soap_POST_recv_std__string

#endif
/* _fes__ResourceId is a typedef synonym of fes__ResourceIdType */

#ifndef SOAP_TYPE__fes__ResourceId_DEFINED
#define SOAP_TYPE__fes__ResourceId_DEFINED

#define soap_default__fes__ResourceId(soap, a) (a)->fes__ResourceIdType::soap_default(soap)


#define soap_serialize__fes__ResourceId(soap, a) (a)->soap_serialize(soap)


#define soap__fes__ResourceId2s soap_fes__ResourceIdType2s


#define soap_out__fes__ResourceId soap_out_fes__ResourceIdType


#define soap_s2_fes__ResourceId soap_s2fes__ResourceIdType


#define soap_in__fes__ResourceId soap_in_fes__ResourceIdType


#define soap_instantiate__fes__ResourceId soap_instantiate_fes__ResourceIdType


#define soap_new__fes__ResourceId soap_new_fes__ResourceIdType


#define soap_new_req__fes__ResourceId soap_new_req_fes__ResourceIdType


#define soap_new_set__fes__ResourceId soap_new_set_fes__ResourceIdType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__ResourceId(struct soap*, const fes__ResourceIdType *, const char*, const char*);

inline int soap_write__fes__ResourceId(struct soap *soap, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceId", p->soap_type() == SOAP_TYPE__fes__ResourceId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__ResourceId(struct soap *soap, const char *URL, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceId", p->soap_type() == SOAP_TYPE__fes__ResourceId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__ResourceId(struct soap *soap, const char *URL, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceId", p->soap_type() == SOAP_TYPE__fes__ResourceId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__ResourceId(struct soap *soap, const char *URL, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceId", p->soap_type() == SOAP_TYPE__fes__ResourceId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__ResourceId soap_get_fes__ResourceIdType


#define soap_read__fes__ResourceId soap_read_fes__ResourceIdType


#define soap_GET__fes__ResourceId soap_GET_fes__ResourceIdType


#define soap_POST_recv__fes__ResourceId soap_POST_recv_fes__ResourceIdType

#endif
/* _fes__Not is a typedef synonym of fes__UnaryLogicOpType */

#ifndef SOAP_TYPE__fes__Not_DEFINED
#define SOAP_TYPE__fes__Not_DEFINED

#define soap_default__fes__Not(soap, a) (a)->fes__UnaryLogicOpType::soap_default(soap)


#define soap_serialize__fes__Not(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Not2s soap_fes__UnaryLogicOpType2s


#define soap_out__fes__Not soap_out_fes__UnaryLogicOpType


#define soap_s2_fes__Not soap_s2fes__UnaryLogicOpType


#define soap_in__fes__Not soap_in_fes__UnaryLogicOpType


#define soap_instantiate__fes__Not soap_instantiate_fes__UnaryLogicOpType


#define soap_new__fes__Not soap_new_fes__UnaryLogicOpType


#define soap_new_req__fes__Not soap_new_req_fes__UnaryLogicOpType


#define soap_new_set__fes__Not soap_new_set_fes__UnaryLogicOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Not(struct soap*, const fes__UnaryLogicOpType *, const char*, const char*);

inline int soap_write__fes__Not(struct soap *soap, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Not", p->soap_type() == SOAP_TYPE__fes__Not ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Not(struct soap *soap, const char *URL, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Not", p->soap_type() == SOAP_TYPE__fes__Not ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Not(struct soap *soap, const char *URL, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Not", p->soap_type() == SOAP_TYPE__fes__Not ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Not(struct soap *soap, const char *URL, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Not", p->soap_type() == SOAP_TYPE__fes__Not ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Not soap_get_fes__UnaryLogicOpType


#define soap_read__fes__Not soap_read_fes__UnaryLogicOpType


#define soap_GET__fes__Not soap_GET_fes__UnaryLogicOpType


#define soap_POST_recv__fes__Not soap_POST_recv_fes__UnaryLogicOpType

#endif
/* _fes__Or is a typedef synonym of fes__BinaryLogicOpType */

#ifndef SOAP_TYPE__fes__Or_DEFINED
#define SOAP_TYPE__fes__Or_DEFINED

#define soap_default__fes__Or(soap, a) (a)->fes__BinaryLogicOpType::soap_default(soap)


#define soap_serialize__fes__Or(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Or2s soap_fes__BinaryLogicOpType2s


#define soap_out__fes__Or soap_out_fes__BinaryLogicOpType


#define soap_s2_fes__Or soap_s2fes__BinaryLogicOpType


#define soap_in__fes__Or soap_in_fes__BinaryLogicOpType


#define soap_instantiate__fes__Or soap_instantiate_fes__BinaryLogicOpType


#define soap_new__fes__Or soap_new_fes__BinaryLogicOpType


#define soap_new_req__fes__Or soap_new_req_fes__BinaryLogicOpType


#define soap_new_set__fes__Or soap_new_set_fes__BinaryLogicOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Or(struct soap*, const fes__BinaryLogicOpType *, const char*, const char*);

inline int soap_write__fes__Or(struct soap *soap, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Or", p->soap_type() == SOAP_TYPE__fes__Or ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Or(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Or", p->soap_type() == SOAP_TYPE__fes__Or ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Or(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Or", p->soap_type() == SOAP_TYPE__fes__Or ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Or(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Or", p->soap_type() == SOAP_TYPE__fes__Or ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Or soap_get_fes__BinaryLogicOpType


#define soap_read__fes__Or soap_read_fes__BinaryLogicOpType


#define soap_GET__fes__Or soap_GET_fes__BinaryLogicOpType


#define soap_POST_recv__fes__Or soap_POST_recv_fes__BinaryLogicOpType

#endif
/* _fes__And is a typedef synonym of fes__BinaryLogicOpType */

#ifndef SOAP_TYPE__fes__And_DEFINED
#define SOAP_TYPE__fes__And_DEFINED

#define soap_default__fes__And(soap, a) (a)->fes__BinaryLogicOpType::soap_default(soap)


#define soap_serialize__fes__And(soap, a) (a)->soap_serialize(soap)


#define soap__fes__And2s soap_fes__BinaryLogicOpType2s


#define soap_out__fes__And soap_out_fes__BinaryLogicOpType


#define soap_s2_fes__And soap_s2fes__BinaryLogicOpType


#define soap_in__fes__And soap_in_fes__BinaryLogicOpType


#define soap_instantiate__fes__And soap_instantiate_fes__BinaryLogicOpType


#define soap_new__fes__And soap_new_fes__BinaryLogicOpType


#define soap_new_req__fes__And soap_new_req_fes__BinaryLogicOpType


#define soap_new_set__fes__And soap_new_set_fes__BinaryLogicOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__And(struct soap*, const fes__BinaryLogicOpType *, const char*, const char*);

inline int soap_write__fes__And(struct soap *soap, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:And", p->soap_type() == SOAP_TYPE__fes__And ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__And(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:And", p->soap_type() == SOAP_TYPE__fes__And ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__And(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:And", p->soap_type() == SOAP_TYPE__fes__And ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__And(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:And", p->soap_type() == SOAP_TYPE__fes__And ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__And soap_get_fes__BinaryLogicOpType


#define soap_read__fes__And soap_read_fes__BinaryLogicOpType


#define soap_GET__fes__And soap_GET_fes__BinaryLogicOpType


#define soap_POST_recv__fes__And soap_POST_recv_fes__BinaryLogicOpType

#endif
/* _fes__AnyInteracts is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__AnyInteracts_DEFINED
#define SOAP_TYPE__fes__AnyInteracts_DEFINED

#define soap_default__fes__AnyInteracts(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__AnyInteracts(soap, a) (a)->soap_serialize(soap)


#define soap__fes__AnyInteracts2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__AnyInteracts soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__AnyInteracts soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__AnyInteracts soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__AnyInteracts soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__AnyInteracts soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__AnyInteracts soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__AnyInteracts soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__AnyInteracts(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__AnyInteracts(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AnyInteracts", p->soap_type() == SOAP_TYPE__fes__AnyInteracts ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__AnyInteracts(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AnyInteracts", p->soap_type() == SOAP_TYPE__fes__AnyInteracts ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__AnyInteracts(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AnyInteracts", p->soap_type() == SOAP_TYPE__fes__AnyInteracts ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__AnyInteracts(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AnyInteracts", p->soap_type() == SOAP_TYPE__fes__AnyInteracts ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__AnyInteracts soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__AnyInteracts soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__AnyInteracts soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__AnyInteracts soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__OverlappedBy is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__OverlappedBy_DEFINED
#define SOAP_TYPE__fes__OverlappedBy_DEFINED

#define soap_default__fes__OverlappedBy(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__OverlappedBy(soap, a) (a)->soap_serialize(soap)


#define soap__fes__OverlappedBy2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__OverlappedBy soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__OverlappedBy soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__OverlappedBy soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__OverlappedBy soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__OverlappedBy soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__OverlappedBy soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__OverlappedBy soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__OverlappedBy(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__OverlappedBy(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:OverlappedBy", p->soap_type() == SOAP_TYPE__fes__OverlappedBy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__OverlappedBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:OverlappedBy", p->soap_type() == SOAP_TYPE__fes__OverlappedBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__OverlappedBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:OverlappedBy", p->soap_type() == SOAP_TYPE__fes__OverlappedBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__OverlappedBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:OverlappedBy", p->soap_type() == SOAP_TYPE__fes__OverlappedBy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__OverlappedBy soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__OverlappedBy soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__OverlappedBy soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__OverlappedBy soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__TOverlaps is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__TOverlaps_DEFINED
#define SOAP_TYPE__fes__TOverlaps_DEFINED

#define soap_default__fes__TOverlaps(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__TOverlaps(soap, a) (a)->soap_serialize(soap)


#define soap__fes__TOverlaps2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__TOverlaps soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__TOverlaps soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__TOverlaps soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__TOverlaps soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__TOverlaps soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__TOverlaps soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__TOverlaps soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__TOverlaps(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__TOverlaps(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TOverlaps", p->soap_type() == SOAP_TYPE__fes__TOverlaps ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__TOverlaps(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TOverlaps", p->soap_type() == SOAP_TYPE__fes__TOverlaps ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__TOverlaps(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TOverlaps", p->soap_type() == SOAP_TYPE__fes__TOverlaps ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__TOverlaps(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TOverlaps", p->soap_type() == SOAP_TYPE__fes__TOverlaps ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__TOverlaps soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__TOverlaps soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__TOverlaps soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__TOverlaps soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__MetBy is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__MetBy_DEFINED
#define SOAP_TYPE__fes__MetBy_DEFINED

#define soap_default__fes__MetBy(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__MetBy(soap, a) (a)->soap_serialize(soap)


#define soap__fes__MetBy2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__MetBy soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__MetBy soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__MetBy soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__MetBy soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__MetBy soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__MetBy soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__MetBy soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__MetBy(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__MetBy(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MetBy", p->soap_type() == SOAP_TYPE__fes__MetBy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__MetBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MetBy", p->soap_type() == SOAP_TYPE__fes__MetBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__MetBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MetBy", p->soap_type() == SOAP_TYPE__fes__MetBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__MetBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MetBy", p->soap_type() == SOAP_TYPE__fes__MetBy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__MetBy soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__MetBy soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__MetBy soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__MetBy soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__Meets is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__Meets_DEFINED
#define SOAP_TYPE__fes__Meets_DEFINED

#define soap_default__fes__Meets(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__Meets(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Meets2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__Meets soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__Meets soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__Meets soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__Meets soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__Meets soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__Meets soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__Meets soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Meets(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__Meets(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Meets", p->soap_type() == SOAP_TYPE__fes__Meets ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Meets(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Meets", p->soap_type() == SOAP_TYPE__fes__Meets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Meets(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Meets", p->soap_type() == SOAP_TYPE__fes__Meets ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Meets(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Meets", p->soap_type() == SOAP_TYPE__fes__Meets ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Meets soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__Meets soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__Meets soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__Meets soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__TEquals is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__TEquals_DEFINED
#define SOAP_TYPE__fes__TEquals_DEFINED

#define soap_default__fes__TEquals(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__TEquals(soap, a) (a)->soap_serialize(soap)


#define soap__fes__TEquals2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__TEquals soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__TEquals soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__TEquals soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__TEquals soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__TEquals soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__TEquals soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__TEquals soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__TEquals(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__TEquals(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TEquals", p->soap_type() == SOAP_TYPE__fes__TEquals ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__TEquals(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TEquals", p->soap_type() == SOAP_TYPE__fes__TEquals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__TEquals(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TEquals", p->soap_type() == SOAP_TYPE__fes__TEquals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__TEquals(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TEquals", p->soap_type() == SOAP_TYPE__fes__TEquals ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__TEquals soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__TEquals soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__TEquals soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__TEquals soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__Ends is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__Ends_DEFINED
#define SOAP_TYPE__fes__Ends_DEFINED

#define soap_default__fes__Ends(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__Ends(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Ends2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__Ends soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__Ends soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__Ends soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__Ends soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__Ends soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__Ends soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__Ends soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Ends(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__Ends(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Ends", p->soap_type() == SOAP_TYPE__fes__Ends ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Ends(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Ends", p->soap_type() == SOAP_TYPE__fes__Ends ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Ends(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Ends", p->soap_type() == SOAP_TYPE__fes__Ends ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Ends(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Ends", p->soap_type() == SOAP_TYPE__fes__Ends ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Ends soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__Ends soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__Ends soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__Ends soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__EndedBy is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__EndedBy_DEFINED
#define SOAP_TYPE__fes__EndedBy_DEFINED

#define soap_default__fes__EndedBy(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__EndedBy(soap, a) (a)->soap_serialize(soap)


#define soap__fes__EndedBy2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__EndedBy soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__EndedBy soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__EndedBy soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__EndedBy soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__EndedBy soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__EndedBy soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__EndedBy soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__EndedBy(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__EndedBy(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:EndedBy", p->soap_type() == SOAP_TYPE__fes__EndedBy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__EndedBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:EndedBy", p->soap_type() == SOAP_TYPE__fes__EndedBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__EndedBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:EndedBy", p->soap_type() == SOAP_TYPE__fes__EndedBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__EndedBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:EndedBy", p->soap_type() == SOAP_TYPE__fes__EndedBy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__EndedBy soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__EndedBy soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__EndedBy soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__EndedBy soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__During is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__During_DEFINED
#define SOAP_TYPE__fes__During_DEFINED

#define soap_default__fes__During(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__During(soap, a) (a)->soap_serialize(soap)


#define soap__fes__During2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__During soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__During soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__During soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__During soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__During soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__During soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__During soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__During(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__During(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:During", p->soap_type() == SOAP_TYPE__fes__During ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__During(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:During", p->soap_type() == SOAP_TYPE__fes__During ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__During(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:During", p->soap_type() == SOAP_TYPE__fes__During ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__During(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:During", p->soap_type() == SOAP_TYPE__fes__During ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__During soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__During soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__During soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__During soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__TContains is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__TContains_DEFINED
#define SOAP_TYPE__fes__TContains_DEFINED

#define soap_default__fes__TContains(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__TContains(soap, a) (a)->soap_serialize(soap)


#define soap__fes__TContains2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__TContains soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__TContains soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__TContains soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__TContains soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__TContains soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__TContains soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__TContains soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__TContains(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__TContains(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TContains", p->soap_type() == SOAP_TYPE__fes__TContains ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__TContains(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TContains", p->soap_type() == SOAP_TYPE__fes__TContains ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__TContains(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TContains", p->soap_type() == SOAP_TYPE__fes__TContains ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__TContains(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TContains", p->soap_type() == SOAP_TYPE__fes__TContains ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__TContains soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__TContains soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__TContains soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__TContains soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__BegunBy is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__BegunBy_DEFINED
#define SOAP_TYPE__fes__BegunBy_DEFINED

#define soap_default__fes__BegunBy(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__BegunBy(soap, a) (a)->soap_serialize(soap)


#define soap__fes__BegunBy2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__BegunBy soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__BegunBy soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__BegunBy soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__BegunBy soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__BegunBy soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__BegunBy soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__BegunBy soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__BegunBy(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__BegunBy(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BegunBy", p->soap_type() == SOAP_TYPE__fes__BegunBy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__BegunBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BegunBy", p->soap_type() == SOAP_TYPE__fes__BegunBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__BegunBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BegunBy", p->soap_type() == SOAP_TYPE__fes__BegunBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__BegunBy(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BegunBy", p->soap_type() == SOAP_TYPE__fes__BegunBy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__BegunBy soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__BegunBy soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__BegunBy soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__BegunBy soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__Begins is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__Begins_DEFINED
#define SOAP_TYPE__fes__Begins_DEFINED

#define soap_default__fes__Begins(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__Begins(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Begins2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__Begins soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__Begins soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__Begins soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__Begins soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__Begins soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__Begins soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__Begins soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Begins(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__Begins(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Begins", p->soap_type() == SOAP_TYPE__fes__Begins ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Begins(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Begins", p->soap_type() == SOAP_TYPE__fes__Begins ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Begins(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Begins", p->soap_type() == SOAP_TYPE__fes__Begins ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Begins(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Begins", p->soap_type() == SOAP_TYPE__fes__Begins ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Begins soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__Begins soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__Begins soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__Begins soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__Before is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__Before_DEFINED
#define SOAP_TYPE__fes__Before_DEFINED

#define soap_default__fes__Before(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__Before(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Before2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__Before soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__Before soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__Before soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__Before soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__Before soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__Before soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__Before soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Before(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__Before(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Before", p->soap_type() == SOAP_TYPE__fes__Before ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Before(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Before", p->soap_type() == SOAP_TYPE__fes__Before ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Before(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Before", p->soap_type() == SOAP_TYPE__fes__Before ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Before(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Before", p->soap_type() == SOAP_TYPE__fes__Before ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Before soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__Before soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__Before soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__Before soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__After is a typedef synonym of fes__BinaryTemporalOpType */

#ifndef SOAP_TYPE__fes__After_DEFINED
#define SOAP_TYPE__fes__After_DEFINED

#define soap_default__fes__After(soap, a) (a)->fes__BinaryTemporalOpType::soap_default(soap)


#define soap_serialize__fes__After(soap, a) (a)->soap_serialize(soap)


#define soap__fes__After2s soap_fes__BinaryTemporalOpType2s


#define soap_out__fes__After soap_out_fes__BinaryTemporalOpType


#define soap_s2_fes__After soap_s2fes__BinaryTemporalOpType


#define soap_in__fes__After soap_in_fes__BinaryTemporalOpType


#define soap_instantiate__fes__After soap_instantiate_fes__BinaryTemporalOpType


#define soap_new__fes__After soap_new_fes__BinaryTemporalOpType


#define soap_new_req__fes__After soap_new_req_fes__BinaryTemporalOpType


#define soap_new_set__fes__After soap_new_set_fes__BinaryTemporalOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__After(struct soap*, const fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_write__fes__After(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:After", p->soap_type() == SOAP_TYPE__fes__After ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__After(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:After", p->soap_type() == SOAP_TYPE__fes__After ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__After(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:After", p->soap_type() == SOAP_TYPE__fes__After ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__After(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:After", p->soap_type() == SOAP_TYPE__fes__After ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__After soap_get_fes__BinaryTemporalOpType


#define soap_read__fes__After soap_read_fes__BinaryTemporalOpType


#define soap_GET__fes__After soap_GET_fes__BinaryTemporalOpType


#define soap_POST_recv__fes__After soap_POST_recv_fes__BinaryTemporalOpType

#endif
/* _fes__BBOX is a typedef synonym of fes__BBOXType */

#ifndef SOAP_TYPE__fes__BBOX_DEFINED
#define SOAP_TYPE__fes__BBOX_DEFINED

#define soap_default__fes__BBOX(soap, a) (a)->fes__BBOXType::soap_default(soap)


#define soap_serialize__fes__BBOX(soap, a) (a)->soap_serialize(soap)


#define soap__fes__BBOX2s soap_fes__BBOXType2s


#define soap_out__fes__BBOX soap_out_fes__BBOXType


#define soap_s2_fes__BBOX soap_s2fes__BBOXType


#define soap_in__fes__BBOX soap_in_fes__BBOXType


#define soap_instantiate__fes__BBOX soap_instantiate_fes__BBOXType


#define soap_new__fes__BBOX soap_new_fes__BBOXType


#define soap_new_req__fes__BBOX soap_new_req_fes__BBOXType


#define soap_new_set__fes__BBOX soap_new_set_fes__BBOXType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__BBOX(struct soap*, const fes__BBOXType *, const char*, const char*);

inline int soap_write__fes__BBOX(struct soap *soap, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOX", p->soap_type() == SOAP_TYPE__fes__BBOX ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__BBOX(struct soap *soap, const char *URL, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOX", p->soap_type() == SOAP_TYPE__fes__BBOX ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__BBOX(struct soap *soap, const char *URL, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOX", p->soap_type() == SOAP_TYPE__fes__BBOX ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__BBOX(struct soap *soap, const char *URL, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOX", p->soap_type() == SOAP_TYPE__fes__BBOX ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__BBOX soap_get_fes__BBOXType


#define soap_read__fes__BBOX soap_read_fes__BBOXType


#define soap_GET__fes__BBOX soap_GET_fes__BBOXType


#define soap_POST_recv__fes__BBOX soap_POST_recv_fes__BBOXType

#endif
/* _fes__Beyond is a typedef synonym of fes__DistanceBufferType */

#ifndef SOAP_TYPE__fes__Beyond_DEFINED
#define SOAP_TYPE__fes__Beyond_DEFINED

#define soap_default__fes__Beyond(soap, a) (a)->fes__DistanceBufferType::soap_default(soap)


#define soap_serialize__fes__Beyond(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Beyond2s soap_fes__DistanceBufferType2s


#define soap_out__fes__Beyond soap_out_fes__DistanceBufferType


#define soap_s2_fes__Beyond soap_s2fes__DistanceBufferType


#define soap_in__fes__Beyond soap_in_fes__DistanceBufferType


#define soap_instantiate__fes__Beyond soap_instantiate_fes__DistanceBufferType


#define soap_new__fes__Beyond soap_new_fes__DistanceBufferType


#define soap_new_req__fes__Beyond soap_new_req_fes__DistanceBufferType


#define soap_new_set__fes__Beyond soap_new_set_fes__DistanceBufferType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Beyond(struct soap*, const fes__DistanceBufferType *, const char*, const char*);

inline int soap_write__fes__Beyond(struct soap *soap, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Beyond", p->soap_type() == SOAP_TYPE__fes__Beyond ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Beyond(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Beyond", p->soap_type() == SOAP_TYPE__fes__Beyond ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Beyond(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Beyond", p->soap_type() == SOAP_TYPE__fes__Beyond ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Beyond(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Beyond", p->soap_type() == SOAP_TYPE__fes__Beyond ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Beyond soap_get_fes__DistanceBufferType


#define soap_read__fes__Beyond soap_read_fes__DistanceBufferType


#define soap_GET__fes__Beyond soap_GET_fes__DistanceBufferType


#define soap_POST_recv__fes__Beyond soap_POST_recv_fes__DistanceBufferType

#endif
/* _fes__DWithin is a typedef synonym of fes__DistanceBufferType */

#ifndef SOAP_TYPE__fes__DWithin_DEFINED
#define SOAP_TYPE__fes__DWithin_DEFINED

#define soap_default__fes__DWithin(soap, a) (a)->fes__DistanceBufferType::soap_default(soap)


#define soap_serialize__fes__DWithin(soap, a) (a)->soap_serialize(soap)


#define soap__fes__DWithin2s soap_fes__DistanceBufferType2s


#define soap_out__fes__DWithin soap_out_fes__DistanceBufferType


#define soap_s2_fes__DWithin soap_s2fes__DistanceBufferType


#define soap_in__fes__DWithin soap_in_fes__DistanceBufferType


#define soap_instantiate__fes__DWithin soap_instantiate_fes__DistanceBufferType


#define soap_new__fes__DWithin soap_new_fes__DistanceBufferType


#define soap_new_req__fes__DWithin soap_new_req_fes__DistanceBufferType


#define soap_new_set__fes__DWithin soap_new_set_fes__DistanceBufferType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__DWithin(struct soap*, const fes__DistanceBufferType *, const char*, const char*);

inline int soap_write__fes__DWithin(struct soap *soap, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DWithin", p->soap_type() == SOAP_TYPE__fes__DWithin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__DWithin(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DWithin", p->soap_type() == SOAP_TYPE__fes__DWithin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__DWithin(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DWithin", p->soap_type() == SOAP_TYPE__fes__DWithin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__DWithin(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DWithin", p->soap_type() == SOAP_TYPE__fes__DWithin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__DWithin soap_get_fes__DistanceBufferType


#define soap_read__fes__DWithin soap_read_fes__DistanceBufferType


#define soap_GET__fes__DWithin soap_GET_fes__DistanceBufferType


#define soap_POST_recv__fes__DWithin soap_POST_recv_fes__DistanceBufferType

#endif
/* _fes__Contains is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Contains_DEFINED
#define SOAP_TYPE__fes__Contains_DEFINED

#define soap_default__fes__Contains(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Contains(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Contains2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Contains soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Contains soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Contains soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Contains soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Contains soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Contains soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Contains soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Contains(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Contains(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Contains", p->soap_type() == SOAP_TYPE__fes__Contains ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Contains(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Contains", p->soap_type() == SOAP_TYPE__fes__Contains ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Contains(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Contains", p->soap_type() == SOAP_TYPE__fes__Contains ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Contains(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Contains", p->soap_type() == SOAP_TYPE__fes__Contains ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Contains soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Contains soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Contains soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Contains soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__Intersects is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Intersects_DEFINED
#define SOAP_TYPE__fes__Intersects_DEFINED

#define soap_default__fes__Intersects(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Intersects(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Intersects2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Intersects soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Intersects soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Intersects soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Intersects soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Intersects soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Intersects soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Intersects soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Intersects(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Intersects(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Intersects", p->soap_type() == SOAP_TYPE__fes__Intersects ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Intersects(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Intersects", p->soap_type() == SOAP_TYPE__fes__Intersects ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Intersects(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Intersects", p->soap_type() == SOAP_TYPE__fes__Intersects ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Intersects(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Intersects", p->soap_type() == SOAP_TYPE__fes__Intersects ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Intersects soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Intersects soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Intersects soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Intersects soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__Crosses is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Crosses_DEFINED
#define SOAP_TYPE__fes__Crosses_DEFINED

#define soap_default__fes__Crosses(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Crosses(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Crosses2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Crosses soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Crosses soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Crosses soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Crosses soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Crosses soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Crosses soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Crosses soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Crosses(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Crosses(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Crosses", p->soap_type() == SOAP_TYPE__fes__Crosses ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Crosses(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Crosses", p->soap_type() == SOAP_TYPE__fes__Crosses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Crosses(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Crosses", p->soap_type() == SOAP_TYPE__fes__Crosses ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Crosses(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Crosses", p->soap_type() == SOAP_TYPE__fes__Crosses ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Crosses soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Crosses soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Crosses soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Crosses soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__Overlaps is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Overlaps_DEFINED
#define SOAP_TYPE__fes__Overlaps_DEFINED

#define soap_default__fes__Overlaps(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Overlaps(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Overlaps2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Overlaps soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Overlaps soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Overlaps soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Overlaps soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Overlaps soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Overlaps soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Overlaps soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Overlaps(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Overlaps(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Overlaps", p->soap_type() == SOAP_TYPE__fes__Overlaps ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Overlaps(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Overlaps", p->soap_type() == SOAP_TYPE__fes__Overlaps ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Overlaps(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Overlaps", p->soap_type() == SOAP_TYPE__fes__Overlaps ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Overlaps(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Overlaps", p->soap_type() == SOAP_TYPE__fes__Overlaps ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Overlaps soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Overlaps soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Overlaps soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Overlaps soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__Within is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Within_DEFINED
#define SOAP_TYPE__fes__Within_DEFINED

#define soap_default__fes__Within(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Within(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Within2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Within soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Within soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Within soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Within soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Within soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Within soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Within soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Within(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Within(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Within", p->soap_type() == SOAP_TYPE__fes__Within ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Within(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Within", p->soap_type() == SOAP_TYPE__fes__Within ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Within(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Within", p->soap_type() == SOAP_TYPE__fes__Within ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Within(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Within", p->soap_type() == SOAP_TYPE__fes__Within ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Within soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Within soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Within soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Within soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__Touches is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Touches_DEFINED
#define SOAP_TYPE__fes__Touches_DEFINED

#define soap_default__fes__Touches(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Touches(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Touches2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Touches soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Touches soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Touches soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Touches soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Touches soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Touches soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Touches soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Touches(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Touches(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Touches", p->soap_type() == SOAP_TYPE__fes__Touches ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Touches(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Touches", p->soap_type() == SOAP_TYPE__fes__Touches ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Touches(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Touches", p->soap_type() == SOAP_TYPE__fes__Touches ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Touches(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Touches", p->soap_type() == SOAP_TYPE__fes__Touches ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Touches soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Touches soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Touches soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Touches soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__Disjoint is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Disjoint_DEFINED
#define SOAP_TYPE__fes__Disjoint_DEFINED

#define soap_default__fes__Disjoint(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Disjoint(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Disjoint2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Disjoint soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Disjoint soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Disjoint soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Disjoint soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Disjoint soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Disjoint soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Disjoint soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Disjoint(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Disjoint(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Disjoint", p->soap_type() == SOAP_TYPE__fes__Disjoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Disjoint(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Disjoint", p->soap_type() == SOAP_TYPE__fes__Disjoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Disjoint(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Disjoint", p->soap_type() == SOAP_TYPE__fes__Disjoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Disjoint(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Disjoint", p->soap_type() == SOAP_TYPE__fes__Disjoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Disjoint soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Disjoint soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Disjoint soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Disjoint soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__Equals is a typedef synonym of fes__BinarySpatialOpType */

#ifndef SOAP_TYPE__fes__Equals_DEFINED
#define SOAP_TYPE__fes__Equals_DEFINED

#define soap_default__fes__Equals(soap, a) (a)->fes__BinarySpatialOpType::soap_default(soap)


#define soap_serialize__fes__Equals(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Equals2s soap_fes__BinarySpatialOpType2s


#define soap_out__fes__Equals soap_out_fes__BinarySpatialOpType


#define soap_s2_fes__Equals soap_s2fes__BinarySpatialOpType


#define soap_in__fes__Equals soap_in_fes__BinarySpatialOpType


#define soap_instantiate__fes__Equals soap_instantiate_fes__BinarySpatialOpType


#define soap_new__fes__Equals soap_new_fes__BinarySpatialOpType


#define soap_new_req__fes__Equals soap_new_req_fes__BinarySpatialOpType


#define soap_new_set__fes__Equals soap_new_set_fes__BinarySpatialOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Equals(struct soap*, const fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_write__fes__Equals(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Equals", p->soap_type() == SOAP_TYPE__fes__Equals ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Equals(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Equals", p->soap_type() == SOAP_TYPE__fes__Equals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Equals(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Equals", p->soap_type() == SOAP_TYPE__fes__Equals ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Equals(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Equals", p->soap_type() == SOAP_TYPE__fes__Equals ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Equals soap_get_fes__BinarySpatialOpType


#define soap_read__fes__Equals soap_read_fes__BinarySpatialOpType


#define soap_GET__fes__Equals soap_GET_fes__BinarySpatialOpType


#define soap_POST_recv__fes__Equals soap_POST_recv_fes__BinarySpatialOpType

#endif
/* _fes__PropertyIsBetween is a typedef synonym of fes__PropertyIsBetweenType */

#ifndef SOAP_TYPE__fes__PropertyIsBetween_DEFINED
#define SOAP_TYPE__fes__PropertyIsBetween_DEFINED

#define soap_default__fes__PropertyIsBetween(soap, a) (a)->fes__PropertyIsBetweenType::soap_default(soap)


#define soap_serialize__fes__PropertyIsBetween(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsBetween2s soap_fes__PropertyIsBetweenType2s


#define soap_out__fes__PropertyIsBetween soap_out_fes__PropertyIsBetweenType


#define soap_s2_fes__PropertyIsBetween soap_s2fes__PropertyIsBetweenType


#define soap_in__fes__PropertyIsBetween soap_in_fes__PropertyIsBetweenType


#define soap_instantiate__fes__PropertyIsBetween soap_instantiate_fes__PropertyIsBetweenType


#define soap_new__fes__PropertyIsBetween soap_new_fes__PropertyIsBetweenType


#define soap_new_req__fes__PropertyIsBetween soap_new_req_fes__PropertyIsBetweenType


#define soap_new_set__fes__PropertyIsBetween soap_new_set_fes__PropertyIsBetweenType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsBetween(struct soap*, const fes__PropertyIsBetweenType *, const char*, const char*);

inline int soap_write__fes__PropertyIsBetween(struct soap *soap, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetween", p->soap_type() == SOAP_TYPE__fes__PropertyIsBetween ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsBetween(struct soap *soap, const char *URL, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetween", p->soap_type() == SOAP_TYPE__fes__PropertyIsBetween ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsBetween(struct soap *soap, const char *URL, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetween", p->soap_type() == SOAP_TYPE__fes__PropertyIsBetween ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsBetween(struct soap *soap, const char *URL, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetween", p->soap_type() == SOAP_TYPE__fes__PropertyIsBetween ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsBetween soap_get_fes__PropertyIsBetweenType


#define soap_read__fes__PropertyIsBetween soap_read_fes__PropertyIsBetweenType


#define soap_GET__fes__PropertyIsBetween soap_GET_fes__PropertyIsBetweenType


#define soap_POST_recv__fes__PropertyIsBetween soap_POST_recv_fes__PropertyIsBetweenType

#endif
/* _fes__PropertyIsNil is a typedef synonym of fes__PropertyIsNilType */

#ifndef SOAP_TYPE__fes__PropertyIsNil_DEFINED
#define SOAP_TYPE__fes__PropertyIsNil_DEFINED

#define soap_default__fes__PropertyIsNil(soap, a) (a)->fes__PropertyIsNilType::soap_default(soap)


#define soap_serialize__fes__PropertyIsNil(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsNil2s soap_fes__PropertyIsNilType2s


#define soap_out__fes__PropertyIsNil soap_out_fes__PropertyIsNilType


#define soap_s2_fes__PropertyIsNil soap_s2fes__PropertyIsNilType


#define soap_in__fes__PropertyIsNil soap_in_fes__PropertyIsNilType


#define soap_instantiate__fes__PropertyIsNil soap_instantiate_fes__PropertyIsNilType


#define soap_new__fes__PropertyIsNil soap_new_fes__PropertyIsNilType


#define soap_new_req__fes__PropertyIsNil soap_new_req_fes__PropertyIsNilType


#define soap_new_set__fes__PropertyIsNil soap_new_set_fes__PropertyIsNilType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsNil(struct soap*, const fes__PropertyIsNilType *, const char*, const char*);

inline int soap_write__fes__PropertyIsNil(struct soap *soap, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNil", p->soap_type() == SOAP_TYPE__fes__PropertyIsNil ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsNil(struct soap *soap, const char *URL, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNil", p->soap_type() == SOAP_TYPE__fes__PropertyIsNil ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsNil(struct soap *soap, const char *URL, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNil", p->soap_type() == SOAP_TYPE__fes__PropertyIsNil ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsNil(struct soap *soap, const char *URL, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNil", p->soap_type() == SOAP_TYPE__fes__PropertyIsNil ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsNil soap_get_fes__PropertyIsNilType


#define soap_read__fes__PropertyIsNil soap_read_fes__PropertyIsNilType


#define soap_GET__fes__PropertyIsNil soap_GET_fes__PropertyIsNilType


#define soap_POST_recv__fes__PropertyIsNil soap_POST_recv_fes__PropertyIsNilType

#endif
/* _fes__PropertyIsNull is a typedef synonym of fes__PropertyIsNullType */

#ifndef SOAP_TYPE__fes__PropertyIsNull_DEFINED
#define SOAP_TYPE__fes__PropertyIsNull_DEFINED

#define soap_default__fes__PropertyIsNull(soap, a) (a)->fes__PropertyIsNullType::soap_default(soap)


#define soap_serialize__fes__PropertyIsNull(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsNull2s soap_fes__PropertyIsNullType2s


#define soap_out__fes__PropertyIsNull soap_out_fes__PropertyIsNullType


#define soap_s2_fes__PropertyIsNull soap_s2fes__PropertyIsNullType


#define soap_in__fes__PropertyIsNull soap_in_fes__PropertyIsNullType


#define soap_instantiate__fes__PropertyIsNull soap_instantiate_fes__PropertyIsNullType


#define soap_new__fes__PropertyIsNull soap_new_fes__PropertyIsNullType


#define soap_new_req__fes__PropertyIsNull soap_new_req_fes__PropertyIsNullType


#define soap_new_set__fes__PropertyIsNull soap_new_set_fes__PropertyIsNullType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsNull(struct soap*, const fes__PropertyIsNullType *, const char*, const char*);

inline int soap_write__fes__PropertyIsNull(struct soap *soap, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNull", p->soap_type() == SOAP_TYPE__fes__PropertyIsNull ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsNull(struct soap *soap, const char *URL, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNull", p->soap_type() == SOAP_TYPE__fes__PropertyIsNull ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsNull(struct soap *soap, const char *URL, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNull", p->soap_type() == SOAP_TYPE__fes__PropertyIsNull ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsNull(struct soap *soap, const char *URL, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNull", p->soap_type() == SOAP_TYPE__fes__PropertyIsNull ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsNull soap_get_fes__PropertyIsNullType


#define soap_read__fes__PropertyIsNull soap_read_fes__PropertyIsNullType


#define soap_GET__fes__PropertyIsNull soap_GET_fes__PropertyIsNullType


#define soap_POST_recv__fes__PropertyIsNull soap_POST_recv_fes__PropertyIsNullType

#endif
/* _fes__PropertyIsLike is a typedef synonym of fes__PropertyIsLikeType */

#ifndef SOAP_TYPE__fes__PropertyIsLike_DEFINED
#define SOAP_TYPE__fes__PropertyIsLike_DEFINED

#define soap_default__fes__PropertyIsLike(soap, a) (a)->fes__PropertyIsLikeType::soap_default(soap)


#define soap_serialize__fes__PropertyIsLike(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsLike2s soap_fes__PropertyIsLikeType2s


#define soap_out__fes__PropertyIsLike soap_out_fes__PropertyIsLikeType


#define soap_s2_fes__PropertyIsLike soap_s2fes__PropertyIsLikeType


#define soap_in__fes__PropertyIsLike soap_in_fes__PropertyIsLikeType


#define soap_instantiate__fes__PropertyIsLike soap_instantiate_fes__PropertyIsLikeType


#define soap_new__fes__PropertyIsLike soap_new_fes__PropertyIsLikeType


#define soap_new_req__fes__PropertyIsLike soap_new_req_fes__PropertyIsLikeType


#define soap_new_set__fes__PropertyIsLike soap_new_set_fes__PropertyIsLikeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsLike(struct soap*, const fes__PropertyIsLikeType *, const char*, const char*);

inline int soap_write__fes__PropertyIsLike(struct soap *soap, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLike", p->soap_type() == SOAP_TYPE__fes__PropertyIsLike ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsLike(struct soap *soap, const char *URL, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLike", p->soap_type() == SOAP_TYPE__fes__PropertyIsLike ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsLike(struct soap *soap, const char *URL, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLike", p->soap_type() == SOAP_TYPE__fes__PropertyIsLike ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsLike(struct soap *soap, const char *URL, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLike", p->soap_type() == SOAP_TYPE__fes__PropertyIsLike ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsLike soap_get_fes__PropertyIsLikeType


#define soap_read__fes__PropertyIsLike soap_read_fes__PropertyIsLikeType


#define soap_GET__fes__PropertyIsLike soap_GET_fes__PropertyIsLikeType


#define soap_POST_recv__fes__PropertyIsLike soap_POST_recv_fes__PropertyIsLikeType

#endif
/* _fes__PropertyIsGreaterThanOrEqualTo is a typedef synonym of fes__BinaryComparisonOpType */

#ifndef SOAP_TYPE__fes__PropertyIsGreaterThanOrEqualTo_DEFINED
#define SOAP_TYPE__fes__PropertyIsGreaterThanOrEqualTo_DEFINED

#define soap_default__fes__PropertyIsGreaterThanOrEqualTo(soap, a) (a)->fes__BinaryComparisonOpType::soap_default(soap)


#define soap_serialize__fes__PropertyIsGreaterThanOrEqualTo(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsGreaterThanOrEqualTo2s soap_fes__BinaryComparisonOpType2s


#define soap_out__fes__PropertyIsGreaterThanOrEqualTo soap_out_fes__BinaryComparisonOpType


#define soap_s2_fes__PropertyIsGreaterThanOrEqualTo soap_s2fes__BinaryComparisonOpType


#define soap_in__fes__PropertyIsGreaterThanOrEqualTo soap_in_fes__BinaryComparisonOpType


#define soap_instantiate__fes__PropertyIsGreaterThanOrEqualTo soap_instantiate_fes__BinaryComparisonOpType


#define soap_new__fes__PropertyIsGreaterThanOrEqualTo soap_new_fes__BinaryComparisonOpType


#define soap_new_req__fes__PropertyIsGreaterThanOrEqualTo soap_new_req_fes__BinaryComparisonOpType


#define soap_new_set__fes__PropertyIsGreaterThanOrEqualTo soap_new_set_fes__BinaryComparisonOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsGreaterThanOrEqualTo(struct soap*, const fes__BinaryComparisonOpType *, const char*, const char*);

inline int soap_write__fes__PropertyIsGreaterThanOrEqualTo(struct soap *soap, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThanOrEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsGreaterThanOrEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThanOrEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsGreaterThanOrEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThanOrEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsGreaterThanOrEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThanOrEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsGreaterThanOrEqualTo soap_get_fes__BinaryComparisonOpType


#define soap_read__fes__PropertyIsGreaterThanOrEqualTo soap_read_fes__BinaryComparisonOpType


#define soap_GET__fes__PropertyIsGreaterThanOrEqualTo soap_GET_fes__BinaryComparisonOpType


#define soap_POST_recv__fes__PropertyIsGreaterThanOrEqualTo soap_POST_recv_fes__BinaryComparisonOpType

#endif
/* _fes__PropertyIsLessThanOrEqualTo is a typedef synonym of fes__BinaryComparisonOpType */

#ifndef SOAP_TYPE__fes__PropertyIsLessThanOrEqualTo_DEFINED
#define SOAP_TYPE__fes__PropertyIsLessThanOrEqualTo_DEFINED

#define soap_default__fes__PropertyIsLessThanOrEqualTo(soap, a) (a)->fes__BinaryComparisonOpType::soap_default(soap)


#define soap_serialize__fes__PropertyIsLessThanOrEqualTo(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsLessThanOrEqualTo2s soap_fes__BinaryComparisonOpType2s


#define soap_out__fes__PropertyIsLessThanOrEqualTo soap_out_fes__BinaryComparisonOpType


#define soap_s2_fes__PropertyIsLessThanOrEqualTo soap_s2fes__BinaryComparisonOpType


#define soap_in__fes__PropertyIsLessThanOrEqualTo soap_in_fes__BinaryComparisonOpType


#define soap_instantiate__fes__PropertyIsLessThanOrEqualTo soap_instantiate_fes__BinaryComparisonOpType


#define soap_new__fes__PropertyIsLessThanOrEqualTo soap_new_fes__BinaryComparisonOpType


#define soap_new_req__fes__PropertyIsLessThanOrEqualTo soap_new_req_fes__BinaryComparisonOpType


#define soap_new_set__fes__PropertyIsLessThanOrEqualTo soap_new_set_fes__BinaryComparisonOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsLessThanOrEqualTo(struct soap*, const fes__BinaryComparisonOpType *, const char*, const char*);

inline int soap_write__fes__PropertyIsLessThanOrEqualTo(struct soap *soap, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThanOrEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsLessThanOrEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThanOrEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsLessThanOrEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThanOrEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsLessThanOrEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThanOrEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThanOrEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsLessThanOrEqualTo soap_get_fes__BinaryComparisonOpType


#define soap_read__fes__PropertyIsLessThanOrEqualTo soap_read_fes__BinaryComparisonOpType


#define soap_GET__fes__PropertyIsLessThanOrEqualTo soap_GET_fes__BinaryComparisonOpType


#define soap_POST_recv__fes__PropertyIsLessThanOrEqualTo soap_POST_recv_fes__BinaryComparisonOpType

#endif
/* _fes__PropertyIsGreaterThan is a typedef synonym of fes__BinaryComparisonOpType */

#ifndef SOAP_TYPE__fes__PropertyIsGreaterThan_DEFINED
#define SOAP_TYPE__fes__PropertyIsGreaterThan_DEFINED

#define soap_default__fes__PropertyIsGreaterThan(soap, a) (a)->fes__BinaryComparisonOpType::soap_default(soap)


#define soap_serialize__fes__PropertyIsGreaterThan(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsGreaterThan2s soap_fes__BinaryComparisonOpType2s


#define soap_out__fes__PropertyIsGreaterThan soap_out_fes__BinaryComparisonOpType


#define soap_s2_fes__PropertyIsGreaterThan soap_s2fes__BinaryComparisonOpType


#define soap_in__fes__PropertyIsGreaterThan soap_in_fes__BinaryComparisonOpType


#define soap_instantiate__fes__PropertyIsGreaterThan soap_instantiate_fes__BinaryComparisonOpType


#define soap_new__fes__PropertyIsGreaterThan soap_new_fes__BinaryComparisonOpType


#define soap_new_req__fes__PropertyIsGreaterThan soap_new_req_fes__BinaryComparisonOpType


#define soap_new_set__fes__PropertyIsGreaterThan soap_new_set_fes__BinaryComparisonOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsGreaterThan(struct soap*, const fes__BinaryComparisonOpType *, const char*, const char*);

inline int soap_write__fes__PropertyIsGreaterThan(struct soap *soap, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsGreaterThan(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsGreaterThan(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsGreaterThan(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsGreaterThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsGreaterThan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsGreaterThan soap_get_fes__BinaryComparisonOpType


#define soap_read__fes__PropertyIsGreaterThan soap_read_fes__BinaryComparisonOpType


#define soap_GET__fes__PropertyIsGreaterThan soap_GET_fes__BinaryComparisonOpType


#define soap_POST_recv__fes__PropertyIsGreaterThan soap_POST_recv_fes__BinaryComparisonOpType

#endif
/* _fes__PropertyIsLessThan is a typedef synonym of fes__BinaryComparisonOpType */

#ifndef SOAP_TYPE__fes__PropertyIsLessThan_DEFINED
#define SOAP_TYPE__fes__PropertyIsLessThan_DEFINED

#define soap_default__fes__PropertyIsLessThan(soap, a) (a)->fes__BinaryComparisonOpType::soap_default(soap)


#define soap_serialize__fes__PropertyIsLessThan(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsLessThan2s soap_fes__BinaryComparisonOpType2s


#define soap_out__fes__PropertyIsLessThan soap_out_fes__BinaryComparisonOpType


#define soap_s2_fes__PropertyIsLessThan soap_s2fes__BinaryComparisonOpType


#define soap_in__fes__PropertyIsLessThan soap_in_fes__BinaryComparisonOpType


#define soap_instantiate__fes__PropertyIsLessThan soap_instantiate_fes__BinaryComparisonOpType


#define soap_new__fes__PropertyIsLessThan soap_new_fes__BinaryComparisonOpType


#define soap_new_req__fes__PropertyIsLessThan soap_new_req_fes__BinaryComparisonOpType


#define soap_new_set__fes__PropertyIsLessThan soap_new_set_fes__BinaryComparisonOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsLessThan(struct soap*, const fes__BinaryComparisonOpType *, const char*, const char*);

inline int soap_write__fes__PropertyIsLessThan(struct soap *soap, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsLessThan(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsLessThan(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsLessThan(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLessThan", p->soap_type() == SOAP_TYPE__fes__PropertyIsLessThan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsLessThan soap_get_fes__BinaryComparisonOpType


#define soap_read__fes__PropertyIsLessThan soap_read_fes__BinaryComparisonOpType


#define soap_GET__fes__PropertyIsLessThan soap_GET_fes__BinaryComparisonOpType


#define soap_POST_recv__fes__PropertyIsLessThan soap_POST_recv_fes__BinaryComparisonOpType

#endif
/* _fes__PropertyIsNotEqualTo is a typedef synonym of fes__BinaryComparisonOpType */

#ifndef SOAP_TYPE__fes__PropertyIsNotEqualTo_DEFINED
#define SOAP_TYPE__fes__PropertyIsNotEqualTo_DEFINED

#define soap_default__fes__PropertyIsNotEqualTo(soap, a) (a)->fes__BinaryComparisonOpType::soap_default(soap)


#define soap_serialize__fes__PropertyIsNotEqualTo(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsNotEqualTo2s soap_fes__BinaryComparisonOpType2s


#define soap_out__fes__PropertyIsNotEqualTo soap_out_fes__BinaryComparisonOpType


#define soap_s2_fes__PropertyIsNotEqualTo soap_s2fes__BinaryComparisonOpType


#define soap_in__fes__PropertyIsNotEqualTo soap_in_fes__BinaryComparisonOpType


#define soap_instantiate__fes__PropertyIsNotEqualTo soap_instantiate_fes__BinaryComparisonOpType


#define soap_new__fes__PropertyIsNotEqualTo soap_new_fes__BinaryComparisonOpType


#define soap_new_req__fes__PropertyIsNotEqualTo soap_new_req_fes__BinaryComparisonOpType


#define soap_new_set__fes__PropertyIsNotEqualTo soap_new_set_fes__BinaryComparisonOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsNotEqualTo(struct soap*, const fes__BinaryComparisonOpType *, const char*, const char*);

inline int soap_write__fes__PropertyIsNotEqualTo(struct soap *soap, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNotEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsNotEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsNotEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNotEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsNotEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsNotEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNotEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsNotEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsNotEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNotEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsNotEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsNotEqualTo soap_get_fes__BinaryComparisonOpType


#define soap_read__fes__PropertyIsNotEqualTo soap_read_fes__BinaryComparisonOpType


#define soap_GET__fes__PropertyIsNotEqualTo soap_GET_fes__BinaryComparisonOpType


#define soap_POST_recv__fes__PropertyIsNotEqualTo soap_POST_recv_fes__BinaryComparisonOpType

#endif
/* _fes__PropertyIsEqualTo is a typedef synonym of fes__BinaryComparisonOpType */

#ifndef SOAP_TYPE__fes__PropertyIsEqualTo_DEFINED
#define SOAP_TYPE__fes__PropertyIsEqualTo_DEFINED

#define soap_default__fes__PropertyIsEqualTo(soap, a) (a)->fes__BinaryComparisonOpType::soap_default(soap)


#define soap_serialize__fes__PropertyIsEqualTo(soap, a) (a)->soap_serialize(soap)


#define soap__fes__PropertyIsEqualTo2s soap_fes__BinaryComparisonOpType2s


#define soap_out__fes__PropertyIsEqualTo soap_out_fes__BinaryComparisonOpType


#define soap_s2_fes__PropertyIsEqualTo soap_s2fes__BinaryComparisonOpType


#define soap_in__fes__PropertyIsEqualTo soap_in_fes__BinaryComparisonOpType


#define soap_instantiate__fes__PropertyIsEqualTo soap_instantiate_fes__BinaryComparisonOpType


#define soap_new__fes__PropertyIsEqualTo soap_new_fes__BinaryComparisonOpType


#define soap_new_req__fes__PropertyIsEqualTo soap_new_req_fes__BinaryComparisonOpType


#define soap_new_set__fes__PropertyIsEqualTo soap_new_set_fes__BinaryComparisonOpType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__PropertyIsEqualTo(struct soap*, const fes__BinaryComparisonOpType *, const char*, const char*);

inline int soap_write__fes__PropertyIsEqualTo(struct soap *soap, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__PropertyIsEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__PropertyIsEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsEqualTo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__PropertyIsEqualTo(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsEqualTo", p->soap_type() == SOAP_TYPE__fes__PropertyIsEqualTo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__PropertyIsEqualTo soap_get_fes__BinaryComparisonOpType


#define soap_read__fes__PropertyIsEqualTo soap_read_fes__BinaryComparisonOpType


#define soap_GET__fes__PropertyIsEqualTo soap_GET_fes__BinaryComparisonOpType


#define soap_POST_recv__fes__PropertyIsEqualTo soap_POST_recv_fes__BinaryComparisonOpType

#endif
/* _fes__Filter is a typedef synonym of fes__FilterType */

#ifndef SOAP_TYPE__fes__Filter_DEFINED
#define SOAP_TYPE__fes__Filter_DEFINED

#define soap_default__fes__Filter(soap, a) (a)->fes__FilterType::soap_default(soap)


#define soap_serialize__fes__Filter(soap, a) (a)->soap_serialize(soap)


#define soap__fes__Filter2s soap_fes__FilterType2s


#define soap_out__fes__Filter soap_out_fes__FilterType


#define soap_s2_fes__Filter soap_s2fes__FilterType


#define soap_in__fes__Filter soap_in_fes__FilterType


#define soap_instantiate__fes__Filter soap_instantiate_fes__FilterType


#define soap_new__fes__Filter soap_new_fes__FilterType


#define soap_new_req__fes__Filter soap_new_req_fes__FilterType


#define soap_new_set__fes__Filter soap_new_set_fes__FilterType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fes__Filter(struct soap*, const fes__FilterType *, const char*, const char*);

inline int soap_write__fes__Filter(struct soap *soap, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter", p->soap_type() == SOAP_TYPE__fes__Filter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Filter(struct soap *soap, const char *URL, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter", p->soap_type() == SOAP_TYPE__fes__Filter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Filter(struct soap *soap, const char *URL, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter", p->soap_type() == SOAP_TYPE__fes__Filter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Filter(struct soap *soap, const char *URL, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter", p->soap_type() == SOAP_TYPE__fes__Filter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__fes__Filter soap_get_fes__FilterType


#define soap_read__fes__Filter soap_read_fes__FilterType


#define soap_GET__fes__Filter soap_GET_fes__FilterType


#define soap_POST_recv__fes__Filter soap_POST_recv_fes__FilterType

#endif
/* _idls__spatial_x005fdataset_x005fidentifier_x005fcode is a typedef synonym of icommon__notEmptyString */

#ifndef SOAP_TYPE__idls__spatial_x005fdataset_x005fidentifier_x005fcode_DEFINED
#define SOAP_TYPE__idls__spatial_x005fdataset_x005fidentifier_x005fcode_DEFINED

#define soap_default__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_default_icommon__notEmptyString


#define soap_serialize__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_serialize_icommon__notEmptyString


#define soap__idls__spatial_x005fdataset_x005fidentifier_x005fcode2s(soap, a) ((a).c_str())

#define soap_out__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_out_icommon__notEmptyString


#define soap_s2_idls__spatial_x005fdataset_x005fidentifier_x005fcode(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, -1, NULL)

#define soap_in__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_in_icommon__notEmptyString


#define soap_instantiate__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_instantiate_icommon__notEmptyString


#define soap_new__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_new_icommon__notEmptyString


#define soap_put__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_put_icommon__notEmptyString


#define soap_write__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_write_icommon__notEmptyString


#define soap_PUT__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_PUT_icommon__notEmptyString


#define soap_PATCH__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_PATCH_icommon__notEmptyString


#define soap_POST_send__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_POST_send_icommon__notEmptyString


#define soap_get__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_get_icommon__notEmptyString


#define soap_read__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_read_icommon__notEmptyString


#define soap_GET__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_GET_icommon__notEmptyString


#define soap_POST_recv__idls__spatial_x005fdataset_x005fidentifier_x005fcode soap_POST_recv_icommon__notEmptyString

#endif
/* _idls__ExtendedCapabilities is a typedef synonym of idls__ExtendedCapabilitiesType */

#ifndef SOAP_TYPE__idls__ExtendedCapabilities_DEFINED
#define SOAP_TYPE__idls__ExtendedCapabilities_DEFINED

#define soap_default__idls__ExtendedCapabilities(soap, a) (a)->idls__ExtendedCapabilitiesType::soap_default(soap)


#define soap_serialize__idls__ExtendedCapabilities(soap, a) (a)->soap_serialize(soap)


#define soap__idls__ExtendedCapabilities2s soap_idls__ExtendedCapabilitiesType2s


#define soap_out__idls__ExtendedCapabilities soap_out_idls__ExtendedCapabilitiesType


#define soap_s2_idls__ExtendedCapabilities soap_s2idls__ExtendedCapabilitiesType


#define soap_in__idls__ExtendedCapabilities soap_in_idls__ExtendedCapabilitiesType


#define soap_instantiate__idls__ExtendedCapabilities soap_instantiate_idls__ExtendedCapabilitiesType


#define soap_new__idls__ExtendedCapabilities soap_new_idls__ExtendedCapabilitiesType


#define soap_new_req__idls__ExtendedCapabilities soap_new_req_idls__ExtendedCapabilitiesType


#define soap_new_set__idls__ExtendedCapabilities soap_new_set_idls__ExtendedCapabilitiesType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__idls__ExtendedCapabilities(struct soap*, const idls__ExtendedCapabilitiesType *, const char*, const char*);

inline int soap_write__idls__ExtendedCapabilities(struct soap *soap, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__idls__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__idls__ExtendedCapabilities(struct soap *soap, const char *URL, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__idls__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__idls__ExtendedCapabilities(struct soap *soap, const char *URL, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__idls__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__idls__ExtendedCapabilities(struct soap *soap, const char *URL, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__idls__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__idls__ExtendedCapabilities soap_get_idls__ExtendedCapabilitiesType


#define soap_read__idls__ExtendedCapabilities soap_read_idls__ExtendedCapabilitiesType


#define soap_GET__idls__ExtendedCapabilities soap_GET_idls__ExtendedCapabilitiesType


#define soap_POST_recv__idls__ExtendedCapabilities soap_POST_recv_idls__ExtendedCapabilitiesType

#endif
/* _ows__Manifest is a typedef synonym of ows__ManifestType */

#ifndef SOAP_TYPE__ows__Manifest_DEFINED
#define SOAP_TYPE__ows__Manifest_DEFINED

#define soap_default__ows__Manifest(soap, a) (a)->ows__ManifestType::soap_default(soap)


#define soap_serialize__ows__Manifest(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Manifest2s soap_ows__ManifestType2s


#define soap_out__ows__Manifest soap_out_ows__ManifestType


#define soap_s2_ows__Manifest soap_s2ows__ManifestType


#define soap_in__ows__Manifest soap_in_ows__ManifestType


#define soap_instantiate__ows__Manifest soap_instantiate_ows__ManifestType


#define soap_new__ows__Manifest soap_new_ows__ManifestType


#define soap_new_req__ows__Manifest soap_new_req_ows__ManifestType


#define soap_new_set__ows__Manifest soap_new_set_ows__ManifestType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Manifest(struct soap*, const ows__ManifestType *, const char*, const char*);

inline int soap_write__ows__Manifest(struct soap *soap, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Manifest", p->soap_type() == SOAP_TYPE__ows__Manifest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Manifest(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Manifest", p->soap_type() == SOAP_TYPE__ows__Manifest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Manifest(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Manifest", p->soap_type() == SOAP_TYPE__ows__Manifest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Manifest(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Manifest", p->soap_type() == SOAP_TYPE__ows__Manifest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Manifest soap_get_ows__ManifestType


#define soap_read__ows__Manifest soap_read_ows__ManifestType


#define soap_GET__ows__Manifest soap_GET_ows__ManifestType


#define soap_POST_recv__ows__Manifest soap_POST_recv_ows__ManifestType

#endif
/* _ows__ReferenceGroup is a typedef synonym of ows__ReferenceGroupType */

#ifndef SOAP_TYPE__ows__ReferenceGroup_DEFINED
#define SOAP_TYPE__ows__ReferenceGroup_DEFINED

#define soap_default__ows__ReferenceGroup(soap, a) (a)->ows__ReferenceGroupType::soap_default(soap)


#define soap_serialize__ows__ReferenceGroup(soap, a) (a)->soap_serialize(soap)


#define soap__ows__ReferenceGroup2s soap_ows__ReferenceGroupType2s


#define soap_out__ows__ReferenceGroup soap_out_ows__ReferenceGroupType


#define soap_s2_ows__ReferenceGroup soap_s2ows__ReferenceGroupType


#define soap_in__ows__ReferenceGroup soap_in_ows__ReferenceGroupType


#define soap_instantiate__ows__ReferenceGroup soap_instantiate_ows__ReferenceGroupType


#define soap_new__ows__ReferenceGroup soap_new_ows__ReferenceGroupType


#define soap_new_req__ows__ReferenceGroup soap_new_req_ows__ReferenceGroupType


#define soap_new_set__ows__ReferenceGroup soap_new_set_ows__ReferenceGroupType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__ReferenceGroup(struct soap*, const ows__ReferenceGroupType *, const char*, const char*);

inline int soap_write__ows__ReferenceGroup(struct soap *soap, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroup", p->soap_type() == SOAP_TYPE__ows__ReferenceGroup ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ReferenceGroup(struct soap *soap, const char *URL, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroup", p->soap_type() == SOAP_TYPE__ows__ReferenceGroup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ReferenceGroup(struct soap *soap, const char *URL, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroup", p->soap_type() == SOAP_TYPE__ows__ReferenceGroup ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ReferenceGroup(struct soap *soap, const char *URL, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroup", p->soap_type() == SOAP_TYPE__ows__ReferenceGroup ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__ReferenceGroup soap_get_ows__ReferenceGroupType


#define soap_read__ows__ReferenceGroup soap_read_ows__ReferenceGroupType


#define soap_GET__ows__ReferenceGroup soap_GET_ows__ReferenceGroupType


#define soap_POST_recv__ows__ReferenceGroup soap_POST_recv_ows__ReferenceGroupType

#endif
/* _ows__Reference is a typedef synonym of ows__ReferenceType */

#ifndef SOAP_TYPE__ows__Reference_DEFINED
#define SOAP_TYPE__ows__Reference_DEFINED

#define soap_default__ows__Reference(soap, a) (a)->ows__ReferenceType::soap_default(soap)


#define soap_serialize__ows__Reference(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Reference2s soap_ows__ReferenceType2s


#define soap_out__ows__Reference soap_out_ows__ReferenceType


#define soap_s2_ows__Reference soap_s2ows__ReferenceType


#define soap_in__ows__Reference soap_in_ows__ReferenceType


#define soap_instantiate__ows__Reference soap_instantiate_ows__ReferenceType


#define soap_new__ows__Reference soap_new_ows__ReferenceType


#define soap_new_req__ows__Reference soap_new_req_ows__ReferenceType


#define soap_new_set__ows__Reference soap_new_set_ows__ReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Reference(struct soap*, const ows__ReferenceType *, const char*, const char*);

inline int soap_write__ows__Reference(struct soap *soap, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Reference", p->soap_type() == SOAP_TYPE__ows__Reference ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Reference(struct soap *soap, const char *URL, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Reference", p->soap_type() == SOAP_TYPE__ows__Reference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Reference(struct soap *soap, const char *URL, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Reference", p->soap_type() == SOAP_TYPE__ows__Reference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Reference(struct soap *soap, const char *URL, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Reference", p->soap_type() == SOAP_TYPE__ows__Reference ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Reference soap_get_ows__ReferenceType


#define soap_read__ows__Reference soap_read_ows__ReferenceType


#define soap_GET__ows__Reference soap_GET_ows__ReferenceType


#define soap_POST_recv__ows__Reference soap_POST_recv_ows__ReferenceType

#endif
/* _ows__ServiceReference is a typedef synonym of ows__ServiceReferenceType */

#ifndef SOAP_TYPE__ows__ServiceReference_DEFINED
#define SOAP_TYPE__ows__ServiceReference_DEFINED

#define soap_default__ows__ServiceReference(soap, a) (a)->ows__ServiceReferenceType::soap_default(soap)


#define soap_serialize__ows__ServiceReference(soap, a) (a)->soap_serialize(soap)


#define soap__ows__ServiceReference2s soap_ows__ServiceReferenceType2s


#define soap_out__ows__ServiceReference soap_out_ows__ServiceReferenceType


#define soap_s2_ows__ServiceReference soap_s2ows__ServiceReferenceType


#define soap_in__ows__ServiceReference soap_in_ows__ServiceReferenceType


#define soap_instantiate__ows__ServiceReference soap_instantiate_ows__ServiceReferenceType


#define soap_new__ows__ServiceReference soap_new_ows__ServiceReferenceType


#define soap_new_req__ows__ServiceReference soap_new_req_ows__ServiceReferenceType


#define soap_new_set__ows__ServiceReference soap_new_set_ows__ServiceReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__ServiceReference(struct soap*, const ows__ServiceReferenceType *, const char*, const char*);

inline int soap_write__ows__ServiceReference(struct soap *soap, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReference", p->soap_type() == SOAP_TYPE__ows__ServiceReference ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ServiceReference(struct soap *soap, const char *URL, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReference", p->soap_type() == SOAP_TYPE__ows__ServiceReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ServiceReference(struct soap *soap, const char *URL, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReference", p->soap_type() == SOAP_TYPE__ows__ServiceReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ServiceReference(struct soap *soap, const char *URL, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReference", p->soap_type() == SOAP_TYPE__ows__ServiceReference ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__ServiceReference soap_get_ows__ServiceReferenceType


#define soap_read__ows__ServiceReference soap_read_ows__ServiceReferenceType


#define soap_GET__ows__ServiceReference soap_GET_ows__ServiceReferenceType


#define soap_POST_recv__ows__ServiceReference soap_POST_recv_ows__ServiceReferenceType

#endif
/* _ows__InputData is a typedef synonym of ows__ManifestType */

#ifndef SOAP_TYPE__ows__InputData_DEFINED
#define SOAP_TYPE__ows__InputData_DEFINED

#define soap_default__ows__InputData(soap, a) (a)->ows__ManifestType::soap_default(soap)


#define soap_serialize__ows__InputData(soap, a) (a)->soap_serialize(soap)


#define soap__ows__InputData2s soap_ows__ManifestType2s


#define soap_out__ows__InputData soap_out_ows__ManifestType


#define soap_s2_ows__InputData soap_s2ows__ManifestType


#define soap_in__ows__InputData soap_in_ows__ManifestType


#define soap_instantiate__ows__InputData soap_instantiate_ows__ManifestType


#define soap_new__ows__InputData soap_new_ows__ManifestType


#define soap_new_req__ows__InputData soap_new_req_ows__ManifestType


#define soap_new_set__ows__InputData soap_new_set_ows__ManifestType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__InputData(struct soap*, const ows__ManifestType *, const char*, const char*);

inline int soap_write__ows__InputData(struct soap *soap, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:InputData", p->soap_type() == SOAP_TYPE__ows__InputData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__InputData(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:InputData", p->soap_type() == SOAP_TYPE__ows__InputData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__InputData(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:InputData", p->soap_type() == SOAP_TYPE__ows__InputData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__InputData(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:InputData", p->soap_type() == SOAP_TYPE__ows__InputData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__InputData soap_get_ows__ManifestType


#define soap_read__ows__InputData soap_read_ows__ManifestType


#define soap_GET__ows__InputData soap_GET_ows__ManifestType


#define soap_POST_recv__ows__InputData soap_POST_recv_ows__ManifestType

#endif
/* _ows__OperationResponse is a typedef synonym of ows__ManifestType */

#ifndef SOAP_TYPE__ows__OperationResponse_DEFINED
#define SOAP_TYPE__ows__OperationResponse_DEFINED

#define soap_default__ows__OperationResponse(soap, a) (a)->ows__ManifestType::soap_default(soap)


#define soap_serialize__ows__OperationResponse(soap, a) (a)->soap_serialize(soap)


#define soap__ows__OperationResponse2s soap_ows__ManifestType2s


#define soap_out__ows__OperationResponse soap_out_ows__ManifestType


#define soap_s2_ows__OperationResponse soap_s2ows__ManifestType


#define soap_in__ows__OperationResponse soap_in_ows__ManifestType


#define soap_instantiate__ows__OperationResponse soap_instantiate_ows__ManifestType


#define soap_new__ows__OperationResponse soap_new_ows__ManifestType


#define soap_new_req__ows__OperationResponse soap_new_req_ows__ManifestType


#define soap_new_set__ows__OperationResponse soap_new_set_ows__ManifestType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__OperationResponse(struct soap*, const ows__ManifestType *, const char*, const char*);

inline int soap_write__ows__OperationResponse(struct soap *soap, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationResponse", p->soap_type() == SOAP_TYPE__ows__OperationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__OperationResponse(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationResponse", p->soap_type() == SOAP_TYPE__ows__OperationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__OperationResponse(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationResponse", p->soap_type() == SOAP_TYPE__ows__OperationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__OperationResponse(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationResponse", p->soap_type() == SOAP_TYPE__ows__OperationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__OperationResponse soap_get_ows__ManifestType


#define soap_read__ows__OperationResponse soap_read_ows__ManifestType


#define soap_GET__ows__OperationResponse soap_GET_ows__ManifestType


#define soap_POST_recv__ows__OperationResponse soap_POST_recv_ows__ManifestType

#endif
/* _ows__DatasetDescriptionSummary is a typedef synonym of ows__DatasetDescriptionSummaryBaseType */

#ifndef SOAP_TYPE__ows__DatasetDescriptionSummary_DEFINED
#define SOAP_TYPE__ows__DatasetDescriptionSummary_DEFINED

#define soap_default__ows__DatasetDescriptionSummary(soap, a) (a)->ows__DatasetDescriptionSummaryBaseType::soap_default(soap)


#define soap_serialize__ows__DatasetDescriptionSummary(soap, a) (a)->soap_serialize(soap)


#define soap__ows__DatasetDescriptionSummary2s soap_ows__DatasetDescriptionSummaryBaseType2s


#define soap_out__ows__DatasetDescriptionSummary soap_out_ows__DatasetDescriptionSummaryBaseType


#define soap_s2_ows__DatasetDescriptionSummary soap_s2ows__DatasetDescriptionSummaryBaseType


#define soap_in__ows__DatasetDescriptionSummary soap_in_ows__DatasetDescriptionSummaryBaseType


#define soap_instantiate__ows__DatasetDescriptionSummary soap_instantiate_ows__DatasetDescriptionSummaryBaseType


#define soap_new__ows__DatasetDescriptionSummary soap_new_ows__DatasetDescriptionSummaryBaseType


#define soap_new_req__ows__DatasetDescriptionSummary soap_new_req_ows__DatasetDescriptionSummaryBaseType


#define soap_new_set__ows__DatasetDescriptionSummary soap_new_set_ows__DatasetDescriptionSummaryBaseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__DatasetDescriptionSummary(struct soap*, const ows__DatasetDescriptionSummaryBaseType *, const char*, const char*);

inline int soap_write__ows__DatasetDescriptionSummary(struct soap *soap, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummary", p->soap_type() == SOAP_TYPE__ows__DatasetDescriptionSummary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__DatasetDescriptionSummary(struct soap *soap, const char *URL, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummary", p->soap_type() == SOAP_TYPE__ows__DatasetDescriptionSummary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__DatasetDescriptionSummary(struct soap *soap, const char *URL, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummary", p->soap_type() == SOAP_TYPE__ows__DatasetDescriptionSummary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__DatasetDescriptionSummary(struct soap *soap, const char *URL, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummary", p->soap_type() == SOAP_TYPE__ows__DatasetDescriptionSummary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__DatasetDescriptionSummary soap_get_ows__DatasetDescriptionSummaryBaseType


#define soap_read__ows__DatasetDescriptionSummary soap_read_ows__DatasetDescriptionSummaryBaseType


#define soap_GET__ows__DatasetDescriptionSummary soap_GET_ows__DatasetDescriptionSummaryBaseType


#define soap_POST_recv__ows__DatasetDescriptionSummary soap_POST_recv_ows__DatasetDescriptionSummaryBaseType

#endif
/* _ows__OtherSource is a typedef synonym of ows__MetadataType */

#ifndef SOAP_TYPE__ows__OtherSource_DEFINED
#define SOAP_TYPE__ows__OtherSource_DEFINED

#define soap_default__ows__OtherSource(soap, a) (a)->ows__MetadataType::soap_default(soap)


#define soap_serialize__ows__OtherSource(soap, a) (a)->soap_serialize(soap)


#define soap__ows__OtherSource2s soap_ows__MetadataType2s


#define soap_out__ows__OtherSource soap_out_ows__MetadataType


#define soap_s2_ows__OtherSource soap_s2ows__MetadataType


#define soap_in__ows__OtherSource soap_in_ows__MetadataType


#define soap_instantiate__ows__OtherSource soap_instantiate_ows__MetadataType


#define soap_new__ows__OtherSource soap_new_ows__MetadataType


#define soap_new_req__ows__OtherSource soap_new_req_ows__MetadataType


#define soap_new_set__ows__OtherSource soap_new_set_ows__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__OtherSource(struct soap*, const ows__MetadataType *, const char*, const char*);

inline int soap_write__ows__OtherSource(struct soap *soap, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OtherSource", p->soap_type() == SOAP_TYPE__ows__OtherSource ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__OtherSource(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OtherSource", p->soap_type() == SOAP_TYPE__ows__OtherSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__OtherSource(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OtherSource", p->soap_type() == SOAP_TYPE__ows__OtherSource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__OtherSource(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OtherSource", p->soap_type() == SOAP_TYPE__ows__OtherSource ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__OtherSource soap_get_ows__MetadataType


#define soap_read__ows__OtherSource soap_read_ows__MetadataType


#define soap_GET__ows__OtherSource soap_GET_ows__MetadataType


#define soap_POST_recv__ows__OtherSource soap_POST_recv_ows__MetadataType

#endif
/* _ows__UOM is a typedef synonym of ows__DomainMetadataType */

#ifndef SOAP_TYPE__ows__UOM_DEFINED
#define SOAP_TYPE__ows__UOM_DEFINED

#define soap_default__ows__UOM(soap, a) (a)->ows__DomainMetadataType::soap_default(soap)


#define soap_serialize__ows__UOM(soap, a) (a)->soap_serialize(soap)


#define soap__ows__UOM2s soap_ows__DomainMetadataType2s


#define soap_out__ows__UOM soap_out_ows__DomainMetadataType


#define soap_s2_ows__UOM soap_s2ows__DomainMetadataType


#define soap_in__ows__UOM soap_in_ows__DomainMetadataType


#define soap_instantiate__ows__UOM soap_instantiate_ows__DomainMetadataType


#define soap_new__ows__UOM soap_new_ows__DomainMetadataType


#define soap_new_req__ows__UOM soap_new_req_ows__DomainMetadataType


#define soap_new_set__ows__UOM soap_new_set_ows__DomainMetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__UOM(struct soap*, const ows__DomainMetadataType *, const char*, const char*);

inline int soap_write__ows__UOM(struct soap *soap, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UOM", p->soap_type() == SOAP_TYPE__ows__UOM ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__UOM(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UOM", p->soap_type() == SOAP_TYPE__ows__UOM ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__UOM(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UOM", p->soap_type() == SOAP_TYPE__ows__UOM ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__UOM(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UOM", p->soap_type() == SOAP_TYPE__ows__UOM ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__UOM soap_get_ows__DomainMetadataType


#define soap_read__ows__UOM soap_read_ows__DomainMetadataType


#define soap_GET__ows__UOM soap_GET_ows__DomainMetadataType


#define soap_POST_recv__ows__UOM soap_POST_recv_ows__DomainMetadataType

#endif
/* _ows__ReferenceSystem is a typedef synonym of ows__DomainMetadataType */

#ifndef SOAP_TYPE__ows__ReferenceSystem_DEFINED
#define SOAP_TYPE__ows__ReferenceSystem_DEFINED

#define soap_default__ows__ReferenceSystem(soap, a) (a)->ows__DomainMetadataType::soap_default(soap)


#define soap_serialize__ows__ReferenceSystem(soap, a) (a)->soap_serialize(soap)


#define soap__ows__ReferenceSystem2s soap_ows__DomainMetadataType2s


#define soap_out__ows__ReferenceSystem soap_out_ows__DomainMetadataType


#define soap_s2_ows__ReferenceSystem soap_s2ows__DomainMetadataType


#define soap_in__ows__ReferenceSystem soap_in_ows__DomainMetadataType


#define soap_instantiate__ows__ReferenceSystem soap_instantiate_ows__DomainMetadataType


#define soap_new__ows__ReferenceSystem soap_new_ows__DomainMetadataType


#define soap_new_req__ows__ReferenceSystem soap_new_req_ows__DomainMetadataType


#define soap_new_set__ows__ReferenceSystem soap_new_set_ows__DomainMetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__ReferenceSystem(struct soap*, const ows__DomainMetadataType *, const char*, const char*);

inline int soap_write__ows__ReferenceSystem(struct soap *soap, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceSystem", p->soap_type() == SOAP_TYPE__ows__ReferenceSystem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ReferenceSystem(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceSystem", p->soap_type() == SOAP_TYPE__ows__ReferenceSystem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ReferenceSystem(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceSystem", p->soap_type() == SOAP_TYPE__ows__ReferenceSystem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ReferenceSystem(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceSystem", p->soap_type() == SOAP_TYPE__ows__ReferenceSystem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__ReferenceSystem soap_get_ows__DomainMetadataType


#define soap_read__ows__ReferenceSystem soap_read_ows__DomainMetadataType


#define soap_GET__ows__ReferenceSystem soap_GET_ows__DomainMetadataType


#define soap_POST_recv__ows__ReferenceSystem soap_POST_recv_ows__DomainMetadataType

#endif
/* _ows__DataType is a typedef synonym of ows__DomainMetadataType */

#ifndef SOAP_TYPE__ows__DataType_DEFINED
#define SOAP_TYPE__ows__DataType_DEFINED

#define soap_default__ows__DataType(soap, a) (a)->ows__DomainMetadataType::soap_default(soap)


#define soap_serialize__ows__DataType(soap, a) (a)->soap_serialize(soap)


#define soap__ows__DataType2s soap_ows__DomainMetadataType2s


#define soap_out__ows__DataType soap_out_ows__DomainMetadataType


#define soap_s2_ows__DataType soap_s2ows__DomainMetadataType


#define soap_in__ows__DataType soap_in_ows__DomainMetadataType


#define soap_instantiate__ows__DataType soap_instantiate_ows__DomainMetadataType


#define soap_new__ows__DataType soap_new_ows__DomainMetadataType


#define soap_new_req__ows__DataType soap_new_req_ows__DomainMetadataType


#define soap_new_set__ows__DataType soap_new_set_ows__DomainMetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__DataType(struct soap*, const ows__DomainMetadataType *, const char*, const char*);

inline int soap_write__ows__DataType(struct soap *soap, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DataType", p->soap_type() == SOAP_TYPE__ows__DataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__DataType(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DataType", p->soap_type() == SOAP_TYPE__ows__DataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__DataType(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DataType", p->soap_type() == SOAP_TYPE__ows__DataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__DataType(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DataType", p->soap_type() == SOAP_TYPE__ows__DataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__DataType soap_get_ows__DomainMetadataType


#define soap_read__ows__DataType soap_read_ows__DomainMetadataType


#define soap_GET__ows__DataType soap_GET_ows__DomainMetadataType


#define soap_POST_recv__ows__DataType soap_POST_recv_ows__DomainMetadataType

#endif
/* _ows__Meaning is a typedef synonym of ows__DomainMetadataType */

#ifndef SOAP_TYPE__ows__Meaning_DEFINED
#define SOAP_TYPE__ows__Meaning_DEFINED

#define soap_default__ows__Meaning(soap, a) (a)->ows__DomainMetadataType::soap_default(soap)


#define soap_serialize__ows__Meaning(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Meaning2s soap_ows__DomainMetadataType2s


#define soap_out__ows__Meaning soap_out_ows__DomainMetadataType


#define soap_s2_ows__Meaning soap_s2ows__DomainMetadataType


#define soap_in__ows__Meaning soap_in_ows__DomainMetadataType


#define soap_instantiate__ows__Meaning soap_instantiate_ows__DomainMetadataType


#define soap_new__ows__Meaning soap_new_ows__DomainMetadataType


#define soap_new_req__ows__Meaning soap_new_req_ows__DomainMetadataType


#define soap_new_set__ows__Meaning soap_new_set_ows__DomainMetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Meaning(struct soap*, const ows__DomainMetadataType *, const char*, const char*);

inline int soap_write__ows__Meaning(struct soap *soap, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Meaning", p->soap_type() == SOAP_TYPE__ows__Meaning ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Meaning(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Meaning", p->soap_type() == SOAP_TYPE__ows__Meaning ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Meaning(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Meaning", p->soap_type() == SOAP_TYPE__ows__Meaning ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Meaning(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Meaning", p->soap_type() == SOAP_TYPE__ows__Meaning ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Meaning soap_get_ows__DomainMetadataType


#define soap_read__ows__Meaning soap_read_ows__DomainMetadataType


#define soap_GET__ows__Meaning soap_GET_ows__DomainMetadataType


#define soap_POST_recv__ows__Meaning soap_POST_recv_ows__DomainMetadataType

#endif
/* _ows__Spacing is a typedef synonym of ows__ValueType */

#ifndef SOAP_TYPE__ows__Spacing_DEFINED
#define SOAP_TYPE__ows__Spacing_DEFINED

#define soap_default__ows__Spacing(soap, a) (a)->ows__ValueType::soap_default(soap)


#define soap_serialize__ows__Spacing(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Spacing2s soap_ows__ValueType2s


#define soap_out__ows__Spacing soap_out_ows__ValueType


#define soap_s2_ows__Spacing soap_s2ows__ValueType


#define soap_in__ows__Spacing soap_in_ows__ValueType


#define soap_instantiate__ows__Spacing soap_instantiate_ows__ValueType


#define soap_new__ows__Spacing soap_new_ows__ValueType


#define soap_new_req__ows__Spacing soap_new_req_ows__ValueType


#define soap_new_set__ows__Spacing soap_new_set_ows__ValueType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Spacing(struct soap*, const ows__ValueType *, const char*, const char*);

inline int soap_write__ows__Spacing(struct soap *soap, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Spacing", p->soap_type() == SOAP_TYPE__ows__Spacing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Spacing(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Spacing", p->soap_type() == SOAP_TYPE__ows__Spacing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Spacing(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Spacing", p->soap_type() == SOAP_TYPE__ows__Spacing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Spacing(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Spacing", p->soap_type() == SOAP_TYPE__ows__Spacing ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Spacing soap_get_ows__ValueType


#define soap_read__ows__Spacing soap_read_ows__ValueType


#define soap_GET__ows__Spacing soap_GET_ows__ValueType


#define soap_POST_recv__ows__Spacing soap_POST_recv_ows__ValueType

#endif
/* _ows__MaximumValue is a typedef synonym of ows__ValueType */

#ifndef SOAP_TYPE__ows__MaximumValue_DEFINED
#define SOAP_TYPE__ows__MaximumValue_DEFINED

#define soap_default__ows__MaximumValue(soap, a) (a)->ows__ValueType::soap_default(soap)


#define soap_serialize__ows__MaximumValue(soap, a) (a)->soap_serialize(soap)


#define soap__ows__MaximumValue2s soap_ows__ValueType2s


#define soap_out__ows__MaximumValue soap_out_ows__ValueType


#define soap_s2_ows__MaximumValue soap_s2ows__ValueType


#define soap_in__ows__MaximumValue soap_in_ows__ValueType


#define soap_instantiate__ows__MaximumValue soap_instantiate_ows__ValueType


#define soap_new__ows__MaximumValue soap_new_ows__ValueType


#define soap_new_req__ows__MaximumValue soap_new_req_ows__ValueType


#define soap_new_set__ows__MaximumValue soap_new_set_ows__ValueType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__MaximumValue(struct soap*, const ows__ValueType *, const char*, const char*);

inline int soap_write__ows__MaximumValue(struct soap *soap, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MaximumValue", p->soap_type() == SOAP_TYPE__ows__MaximumValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__MaximumValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MaximumValue", p->soap_type() == SOAP_TYPE__ows__MaximumValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__MaximumValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MaximumValue", p->soap_type() == SOAP_TYPE__ows__MaximumValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__MaximumValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MaximumValue", p->soap_type() == SOAP_TYPE__ows__MaximumValue ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__MaximumValue soap_get_ows__ValueType


#define soap_read__ows__MaximumValue soap_read_ows__ValueType


#define soap_GET__ows__MaximumValue soap_GET_ows__ValueType


#define soap_POST_recv__ows__MaximumValue soap_POST_recv_ows__ValueType

#endif
/* _ows__MinimumValue is a typedef synonym of ows__ValueType */

#ifndef SOAP_TYPE__ows__MinimumValue_DEFINED
#define SOAP_TYPE__ows__MinimumValue_DEFINED

#define soap_default__ows__MinimumValue(soap, a) (a)->ows__ValueType::soap_default(soap)


#define soap_serialize__ows__MinimumValue(soap, a) (a)->soap_serialize(soap)


#define soap__ows__MinimumValue2s soap_ows__ValueType2s


#define soap_out__ows__MinimumValue soap_out_ows__ValueType


#define soap_s2_ows__MinimumValue soap_s2ows__ValueType


#define soap_in__ows__MinimumValue soap_in_ows__ValueType


#define soap_instantiate__ows__MinimumValue soap_instantiate_ows__ValueType


#define soap_new__ows__MinimumValue soap_new_ows__ValueType


#define soap_new_req__ows__MinimumValue soap_new_req_ows__ValueType


#define soap_new_set__ows__MinimumValue soap_new_set_ows__ValueType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__MinimumValue(struct soap*, const ows__ValueType *, const char*, const char*);

inline int soap_write__ows__MinimumValue(struct soap *soap, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MinimumValue", p->soap_type() == SOAP_TYPE__ows__MinimumValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__MinimumValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MinimumValue", p->soap_type() == SOAP_TYPE__ows__MinimumValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__MinimumValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MinimumValue", p->soap_type() == SOAP_TYPE__ows__MinimumValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__MinimumValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MinimumValue", p->soap_type() == SOAP_TYPE__ows__MinimumValue ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__MinimumValue soap_get_ows__ValueType


#define soap_read__ows__MinimumValue soap_read_ows__ValueType


#define soap_GET__ows__MinimumValue soap_GET_ows__ValueType


#define soap_POST_recv__ows__MinimumValue soap_POST_recv_ows__ValueType

#endif
/* _ows__Range is a typedef synonym of ows__RangeType */

#ifndef SOAP_TYPE__ows__Range_DEFINED
#define SOAP_TYPE__ows__Range_DEFINED

#define soap_default__ows__Range(soap, a) (a)->ows__RangeType::soap_default(soap)


#define soap_serialize__ows__Range(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Range2s soap_ows__RangeType2s


#define soap_out__ows__Range soap_out_ows__RangeType


#define soap_s2_ows__Range soap_s2ows__RangeType


#define soap_in__ows__Range soap_in_ows__RangeType


#define soap_instantiate__ows__Range soap_instantiate_ows__RangeType


#define soap_new__ows__Range soap_new_ows__RangeType


#define soap_new_req__ows__Range soap_new_req_ows__RangeType


#define soap_new_set__ows__Range soap_new_set_ows__RangeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Range(struct soap*, const ows__RangeType *, const char*, const char*);

inline int soap_write__ows__Range(struct soap *soap, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Range", p->soap_type() == SOAP_TYPE__ows__Range ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Range(struct soap *soap, const char *URL, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Range", p->soap_type() == SOAP_TYPE__ows__Range ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Range(struct soap *soap, const char *URL, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Range", p->soap_type() == SOAP_TYPE__ows__Range ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Range(struct soap *soap, const char *URL, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Range", p->soap_type() == SOAP_TYPE__ows__Range ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Range soap_get_ows__RangeType


#define soap_read__ows__Range soap_read_ows__RangeType


#define soap_GET__ows__Range soap_GET_ows__RangeType


#define soap_POST_recv__ows__Range soap_POST_recv_ows__RangeType

#endif
/* _ows__DefaultValue is a typedef synonym of ows__ValueType */

#ifndef SOAP_TYPE__ows__DefaultValue_DEFINED
#define SOAP_TYPE__ows__DefaultValue_DEFINED

#define soap_default__ows__DefaultValue(soap, a) (a)->ows__ValueType::soap_default(soap)


#define soap_serialize__ows__DefaultValue(soap, a) (a)->soap_serialize(soap)


#define soap__ows__DefaultValue2s soap_ows__ValueType2s


#define soap_out__ows__DefaultValue soap_out_ows__ValueType


#define soap_s2_ows__DefaultValue soap_s2ows__ValueType


#define soap_in__ows__DefaultValue soap_in_ows__ValueType


#define soap_instantiate__ows__DefaultValue soap_instantiate_ows__ValueType


#define soap_new__ows__DefaultValue soap_new_ows__ValueType


#define soap_new_req__ows__DefaultValue soap_new_req_ows__ValueType


#define soap_new_set__ows__DefaultValue soap_new_set_ows__ValueType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__DefaultValue(struct soap*, const ows__ValueType *, const char*, const char*);

inline int soap_write__ows__DefaultValue(struct soap *soap, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DefaultValue", p->soap_type() == SOAP_TYPE__ows__DefaultValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__DefaultValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DefaultValue", p->soap_type() == SOAP_TYPE__ows__DefaultValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__DefaultValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DefaultValue", p->soap_type() == SOAP_TYPE__ows__DefaultValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__DefaultValue(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DefaultValue", p->soap_type() == SOAP_TYPE__ows__DefaultValue ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__DefaultValue soap_get_ows__ValueType


#define soap_read__ows__DefaultValue soap_read_ows__ValueType


#define soap_GET__ows__DefaultValue soap_GET_ows__ValueType


#define soap_POST_recv__ows__DefaultValue soap_POST_recv_ows__ValueType

#endif
/* _ows__Value is a typedef synonym of ows__ValueType */

#ifndef SOAP_TYPE__ows__Value_DEFINED
#define SOAP_TYPE__ows__Value_DEFINED

#define soap_default__ows__Value(soap, a) (a)->ows__ValueType::soap_default(soap)


#define soap_serialize__ows__Value(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Value2s soap_ows__ValueType2s


#define soap_out__ows__Value soap_out_ows__ValueType


#define soap_s2_ows__Value soap_s2ows__ValueType


#define soap_in__ows__Value soap_in_ows__ValueType


#define soap_instantiate__ows__Value soap_instantiate_ows__ValueType


#define soap_new__ows__Value soap_new_ows__ValueType


#define soap_new_req__ows__Value soap_new_req_ows__ValueType


#define soap_new_set__ows__Value soap_new_set_ows__ValueType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Value(struct soap*, const ows__ValueType *, const char*, const char*);

inline int soap_write__ows__Value(struct soap *soap, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Value", p->soap_type() == SOAP_TYPE__ows__Value ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Value(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Value", p->soap_type() == SOAP_TYPE__ows__Value ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Value(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Value", p->soap_type() == SOAP_TYPE__ows__Value ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Value(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Value", p->soap_type() == SOAP_TYPE__ows__Value ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Value soap_get_ows__ValueType


#define soap_read__ows__Value soap_read_ows__ValueType


#define soap_GET__ows__Value soap_GET_ows__ValueType


#define soap_POST_recv__ows__Value soap_POST_recv_ows__ValueType

#endif
/* _ows__ExtendedCapabilities is a typedef synonym of xsd__anyType */

#ifndef SOAP_TYPE__ows__ExtendedCapabilities_DEFINED
#define SOAP_TYPE__ows__ExtendedCapabilities_DEFINED

#define soap_default__ows__ExtendedCapabilities(soap, a) (a)->xsd__anyType::soap_default(soap)


#define soap_serialize__ows__ExtendedCapabilities(soap, a) (a)->soap_serialize(soap)


#define soap__ows__ExtendedCapabilities2s soap_xsd__anyType2s


#define soap_out__ows__ExtendedCapabilities soap_out_xsd__anyType


#define soap_s2_ows__ExtendedCapabilities soap_s2xsd__anyType


#define soap_in__ows__ExtendedCapabilities soap_in_xsd__anyType


#define soap_instantiate__ows__ExtendedCapabilities soap_instantiate_xsd__anyType


#define soap_new__ows__ExtendedCapabilities soap_new_xsd__anyType


#define soap_new_req__ows__ExtendedCapabilities soap_new_req_xsd__anyType


#define soap_new_set__ows__ExtendedCapabilities soap_new_set_xsd__anyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__ExtendedCapabilities(struct soap*, const xsd__anyType *, const char*, const char*);

inline int soap_write__ows__ExtendedCapabilities(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__ows__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ExtendedCapabilities(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__ows__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ExtendedCapabilities(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__ows__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ExtendedCapabilities(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExtendedCapabilities", p->soap_type() == SOAP_TYPE__ows__ExtendedCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__ExtendedCapabilities soap_get_xsd__anyType


#define soap_read__ows__ExtendedCapabilities soap_read_xsd__anyType


#define soap_GET__ows__ExtendedCapabilities soap_GET_xsd__anyType


#define soap_POST_recv__ows__ExtendedCapabilities soap_POST_recv_xsd__anyType

#endif
/* _ows__GetCapabilities is a typedef synonym of ows__GetCapabilitiesType */

#ifndef SOAP_TYPE__ows__GetCapabilities_DEFINED
#define SOAP_TYPE__ows__GetCapabilities_DEFINED

#define soap_default__ows__GetCapabilities(soap, a) (a)->ows__GetCapabilitiesType::soap_default(soap)


#define soap_serialize__ows__GetCapabilities(soap, a) (a)->soap_serialize(soap)


#define soap__ows__GetCapabilities2s soap_ows__GetCapabilitiesType2s


#define soap_out__ows__GetCapabilities soap_out_ows__GetCapabilitiesType


#define soap_s2_ows__GetCapabilities soap_s2ows__GetCapabilitiesType


#define soap_in__ows__GetCapabilities soap_in_ows__GetCapabilitiesType


#define soap_instantiate__ows__GetCapabilities soap_instantiate_ows__GetCapabilitiesType


#define soap_new__ows__GetCapabilities soap_new_ows__GetCapabilitiesType


#define soap_new_req__ows__GetCapabilities soap_new_req_ows__GetCapabilitiesType


#define soap_new_set__ows__GetCapabilities soap_new_set_ows__GetCapabilitiesType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__GetCapabilities(struct soap*, const ows__GetCapabilitiesType *, const char*, const char*);

inline int soap_write__ows__GetCapabilities(struct soap *soap, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilities", p->soap_type() == SOAP_TYPE__ows__GetCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__GetCapabilities(struct soap *soap, const char *URL, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilities", p->soap_type() == SOAP_TYPE__ows__GetCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__GetCapabilities(struct soap *soap, const char *URL, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilities", p->soap_type() == SOAP_TYPE__ows__GetCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__GetCapabilities(struct soap *soap, const char *URL, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilities", p->soap_type() == SOAP_TYPE__ows__GetCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__GetCapabilities soap_get_ows__GetCapabilitiesType


#define soap_read__ows__GetCapabilities soap_read_ows__GetCapabilitiesType


#define soap_GET__ows__GetCapabilities soap_GET_ows__GetCapabilitiesType


#define soap_POST_recv__ows__GetCapabilities soap_POST_recv_ows__GetCapabilitiesType

#endif
/* _ows__ContactInfo is a typedef synonym of ows__ContactType */

#ifndef SOAP_TYPE__ows__ContactInfo_DEFINED
#define SOAP_TYPE__ows__ContactInfo_DEFINED

#define soap_default__ows__ContactInfo(soap, a) (a)->ows__ContactType::soap_default(soap)


#define soap_serialize__ows__ContactInfo(soap, a) (a)->soap_serialize(soap)


#define soap__ows__ContactInfo2s soap_ows__ContactType2s


#define soap_out__ows__ContactInfo soap_out_ows__ContactType


#define soap_s2_ows__ContactInfo soap_s2ows__ContactType


#define soap_in__ows__ContactInfo soap_in_ows__ContactType


#define soap_instantiate__ows__ContactInfo soap_instantiate_ows__ContactType


#define soap_new__ows__ContactInfo soap_new_ows__ContactType


#define soap_new_req__ows__ContactInfo soap_new_req_ows__ContactType


#define soap_new_set__ows__ContactInfo soap_new_set_ows__ContactType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__ContactInfo(struct soap*, const ows__ContactType *, const char*, const char*);

inline int soap_write__ows__ContactInfo(struct soap *soap, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactInfo", p->soap_type() == SOAP_TYPE__ows__ContactInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ContactInfo(struct soap *soap, const char *URL, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactInfo", p->soap_type() == SOAP_TYPE__ows__ContactInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ContactInfo(struct soap *soap, const char *URL, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactInfo", p->soap_type() == SOAP_TYPE__ows__ContactInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ContactInfo(struct soap *soap, const char *URL, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactInfo", p->soap_type() == SOAP_TYPE__ows__ContactInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__ContactInfo soap_get_ows__ContactType


#define soap_read__ows__ContactInfo soap_read_ows__ContactType


#define soap_GET__ows__ContactInfo soap_GET_ows__ContactType


#define soap_POST_recv__ows__ContactInfo soap_POST_recv_ows__ContactType

#endif
/* _ows__Role is a typedef synonym of ows__CodeType */

#ifndef SOAP_TYPE__ows__Role_DEFINED
#define SOAP_TYPE__ows__Role_DEFINED

#define soap_default__ows__Role(soap, a) (a)->ows__CodeType::soap_default(soap)


#define soap_serialize__ows__Role(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Role2s soap_ows__CodeType2s


#define soap_out__ows__Role soap_out_ows__CodeType


#define soap_s2_ows__Role soap_s2ows__CodeType


#define soap_in__ows__Role soap_in_ows__CodeType


#define soap_instantiate__ows__Role soap_instantiate_ows__CodeType


#define soap_new__ows__Role soap_new_ows__CodeType


#define soap_new_req__ows__Role soap_new_req_ows__CodeType


#define soap_new_set__ows__Role soap_new_set_ows__CodeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Role(struct soap*, const ows__CodeType *, const char*, const char*);

inline int soap_write__ows__Role(struct soap *soap, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Role", p->soap_type() == SOAP_TYPE__ows__Role ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Role(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Role", p->soap_type() == SOAP_TYPE__ows__Role ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Role(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Role", p->soap_type() == SOAP_TYPE__ows__Role ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Role(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Role", p->soap_type() == SOAP_TYPE__ows__Role ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Role soap_get_ows__CodeType


#define soap_read__ows__Role soap_read_ows__CodeType


#define soap_GET__ows__Role soap_GET_ows__CodeType


#define soap_POST_recv__ows__Role soap_POST_recv_ows__CodeType

#endif
/* _ows__PositionName is a typedef synonym of std__string */

#ifndef SOAP_TYPE__ows__PositionName_DEFINED
#define SOAP_TYPE__ows__PositionName_DEFINED

#define soap_default__ows__PositionName soap_default_std__string


#define soap_serialize__ows__PositionName soap_serialize_std__string


#define soap__ows__PositionName2s(soap, a) ((a).c_str())

#define soap_out__ows__PositionName soap_out_std__string


#define soap_s2_ows__PositionName(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__ows__PositionName soap_in_std__string


#define soap_instantiate__ows__PositionName soap_instantiate_std__string


#define soap_new__ows__PositionName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__PositionName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__ows__PositionName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ows__PositionName(soap, p, "ows:PositionName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ows__PositionName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__PositionName(soap, p, "ows:PositionName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__PositionName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__PositionName(soap, p, "ows:PositionName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__PositionName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__PositionName(soap, p, "ows:PositionName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__PositionName soap_get_std__string


#define soap_read__ows__PositionName soap_read_std__string


#define soap_GET__ows__PositionName soap_GET_std__string


#define soap_POST_recv__ows__PositionName soap_POST_recv_std__string

#endif
/* _ows__OrganisationName is a typedef synonym of std__string */

#ifndef SOAP_TYPE__ows__OrganisationName_DEFINED
#define SOAP_TYPE__ows__OrganisationName_DEFINED

#define soap_default__ows__OrganisationName soap_default_std__string


#define soap_serialize__ows__OrganisationName soap_serialize_std__string


#define soap__ows__OrganisationName2s(soap, a) ((a).c_str())

#define soap_out__ows__OrganisationName soap_out_std__string


#define soap_s2_ows__OrganisationName(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__ows__OrganisationName soap_in_std__string


#define soap_instantiate__ows__OrganisationName soap_instantiate_std__string


#define soap_new__ows__OrganisationName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__OrganisationName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__ows__OrganisationName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ows__OrganisationName(soap, p, "ows:OrganisationName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ows__OrganisationName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__OrganisationName(soap, p, "ows:OrganisationName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__OrganisationName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__OrganisationName(soap, p, "ows:OrganisationName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__OrganisationName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__OrganisationName(soap, p, "ows:OrganisationName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__OrganisationName soap_get_std__string


#define soap_read__ows__OrganisationName soap_read_std__string


#define soap_GET__ows__OrganisationName soap_GET_std__string


#define soap_POST_recv__ows__OrganisationName soap_POST_recv_std__string

#endif
/* _ows__IndividualName is a typedef synonym of std__string */

#ifndef SOAP_TYPE__ows__IndividualName_DEFINED
#define SOAP_TYPE__ows__IndividualName_DEFINED

#define soap_default__ows__IndividualName soap_default_std__string


#define soap_serialize__ows__IndividualName soap_serialize_std__string


#define soap__ows__IndividualName2s(soap, a) ((a).c_str())

#define soap_out__ows__IndividualName soap_out_std__string


#define soap_s2_ows__IndividualName(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__ows__IndividualName soap_in_std__string


#define soap_instantiate__ows__IndividualName soap_instantiate_std__string


#define soap_new__ows__IndividualName soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__IndividualName(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__ows__IndividualName(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ows__IndividualName(soap, p, "ows:IndividualName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ows__IndividualName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__IndividualName(soap, p, "ows:IndividualName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__IndividualName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__IndividualName(soap, p, "ows:IndividualName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__IndividualName(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__IndividualName(soap, p, "ows:IndividualName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__IndividualName soap_get_std__string


#define soap_read__ows__IndividualName soap_read_std__string


#define soap_GET__ows__IndividualName soap_GET_std__string


#define soap_POST_recv__ows__IndividualName soap_POST_recv_std__string

#endif
/* _ows__PointOfContact is a typedef synonym of ows__ResponsiblePartyType */

#ifndef SOAP_TYPE__ows__PointOfContact_DEFINED
#define SOAP_TYPE__ows__PointOfContact_DEFINED

#define soap_default__ows__PointOfContact(soap, a) (a)->ows__ResponsiblePartyType::soap_default(soap)


#define soap_serialize__ows__PointOfContact(soap, a) (a)->soap_serialize(soap)


#define soap__ows__PointOfContact2s soap_ows__ResponsiblePartyType2s


#define soap_out__ows__PointOfContact soap_out_ows__ResponsiblePartyType


#define soap_s2_ows__PointOfContact soap_s2ows__ResponsiblePartyType


#define soap_in__ows__PointOfContact soap_in_ows__ResponsiblePartyType


#define soap_instantiate__ows__PointOfContact soap_instantiate_ows__ResponsiblePartyType


#define soap_new__ows__PointOfContact soap_new_ows__ResponsiblePartyType


#define soap_new_req__ows__PointOfContact soap_new_req_ows__ResponsiblePartyType


#define soap_new_set__ows__PointOfContact soap_new_set_ows__ResponsiblePartyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__PointOfContact(struct soap*, const ows__ResponsiblePartyType *, const char*, const char*);

inline int soap_write__ows__PointOfContact(struct soap *soap, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:PointOfContact", p->soap_type() == SOAP_TYPE__ows__PointOfContact ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__PointOfContact(struct soap *soap, const char *URL, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:PointOfContact", p->soap_type() == SOAP_TYPE__ows__PointOfContact ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__PointOfContact(struct soap *soap, const char *URL, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:PointOfContact", p->soap_type() == SOAP_TYPE__ows__PointOfContact ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__PointOfContact(struct soap *soap, const char *URL, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:PointOfContact", p->soap_type() == SOAP_TYPE__ows__PointOfContact ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__PointOfContact soap_get_ows__ResponsiblePartyType


#define soap_read__ows__PointOfContact soap_read_ows__ResponsiblePartyType


#define soap_GET__ows__PointOfContact soap_GET_ows__ResponsiblePartyType


#define soap_POST_recv__ows__PointOfContact soap_POST_recv_ows__ResponsiblePartyType

#endif
/* _ows__Keywords is a typedef synonym of ows__KeywordsType */

#ifndef SOAP_TYPE__ows__Keywords_DEFINED
#define SOAP_TYPE__ows__Keywords_DEFINED

#define soap_default__ows__Keywords(soap, a) (a)->ows__KeywordsType::soap_default(soap)


#define soap_serialize__ows__Keywords(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Keywords2s soap_ows__KeywordsType2s


#define soap_out__ows__Keywords soap_out_ows__KeywordsType


#define soap_s2_ows__Keywords soap_s2ows__KeywordsType


#define soap_in__ows__Keywords soap_in_ows__KeywordsType


#define soap_instantiate__ows__Keywords soap_instantiate_ows__KeywordsType


#define soap_new__ows__Keywords soap_new_ows__KeywordsType


#define soap_new_req__ows__Keywords soap_new_req_ows__KeywordsType


#define soap_new_set__ows__Keywords soap_new_set_ows__KeywordsType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Keywords(struct soap*, const ows__KeywordsType *, const char*, const char*);

inline int soap_write__ows__Keywords(struct soap *soap, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Keywords", p->soap_type() == SOAP_TYPE__ows__Keywords ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Keywords(struct soap *soap, const char *URL, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Keywords", p->soap_type() == SOAP_TYPE__ows__Keywords ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Keywords(struct soap *soap, const char *URL, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Keywords", p->soap_type() == SOAP_TYPE__ows__Keywords ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Keywords(struct soap *soap, const char *URL, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Keywords", p->soap_type() == SOAP_TYPE__ows__Keywords ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Keywords soap_get_ows__KeywordsType


#define soap_read__ows__Keywords soap_read_ows__KeywordsType


#define soap_GET__ows__Keywords soap_GET_ows__KeywordsType


#define soap_POST_recv__ows__Keywords soap_POST_recv_ows__KeywordsType

#endif
/* _ows__Abstract is a typedef synonym of ows__LanguageStringType */

#ifndef SOAP_TYPE__ows__Abstract_DEFINED
#define SOAP_TYPE__ows__Abstract_DEFINED

#define soap_default__ows__Abstract(soap, a) (a)->ows__LanguageStringType::soap_default(soap)


#define soap_serialize__ows__Abstract(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Abstract2s soap_ows__LanguageStringType2s


#define soap_out__ows__Abstract soap_out_ows__LanguageStringType


#define soap_s2_ows__Abstract soap_s2ows__LanguageStringType


#define soap_in__ows__Abstract soap_in_ows__LanguageStringType


#define soap_instantiate__ows__Abstract soap_instantiate_ows__LanguageStringType


#define soap_new__ows__Abstract soap_new_ows__LanguageStringType


#define soap_new_req__ows__Abstract soap_new_req_ows__LanguageStringType


#define soap_new_set__ows__Abstract soap_new_set_ows__LanguageStringType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Abstract(struct soap*, const ows__LanguageStringType *, const char*, const char*);

inline int soap_write__ows__Abstract(struct soap *soap, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Abstract", p->soap_type() == SOAP_TYPE__ows__Abstract ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Abstract(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Abstract", p->soap_type() == SOAP_TYPE__ows__Abstract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Abstract(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Abstract", p->soap_type() == SOAP_TYPE__ows__Abstract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Abstract(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Abstract", p->soap_type() == SOAP_TYPE__ows__Abstract ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Abstract soap_get_ows__LanguageStringType


#define soap_read__ows__Abstract soap_read_ows__LanguageStringType


#define soap_GET__ows__Abstract soap_GET_ows__LanguageStringType


#define soap_POST_recv__ows__Abstract soap_POST_recv_ows__LanguageStringType

#endif
/* _ows__Title is a typedef synonym of ows__LanguageStringType */

#ifndef SOAP_TYPE__ows__Title_DEFINED
#define SOAP_TYPE__ows__Title_DEFINED

#define soap_default__ows__Title(soap, a) (a)->ows__LanguageStringType::soap_default(soap)


#define soap_serialize__ows__Title(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Title2s soap_ows__LanguageStringType2s


#define soap_out__ows__Title soap_out_ows__LanguageStringType


#define soap_s2_ows__Title soap_s2ows__LanguageStringType


#define soap_in__ows__Title soap_in_ows__LanguageStringType


#define soap_instantiate__ows__Title soap_instantiate_ows__LanguageStringType


#define soap_new__ows__Title soap_new_ows__LanguageStringType


#define soap_new_req__ows__Title soap_new_req_ows__LanguageStringType


#define soap_new_set__ows__Title soap_new_set_ows__LanguageStringType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Title(struct soap*, const ows__LanguageStringType *, const char*, const char*);

inline int soap_write__ows__Title(struct soap *soap, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Title", p->soap_type() == SOAP_TYPE__ows__Title ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Title(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Title", p->soap_type() == SOAP_TYPE__ows__Title ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Title(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Title", p->soap_type() == SOAP_TYPE__ows__Title ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Title(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Title", p->soap_type() == SOAP_TYPE__ows__Title ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Title soap_get_ows__LanguageStringType


#define soap_read__ows__Title soap_read_ows__LanguageStringType


#define soap_GET__ows__Title soap_GET_ows__LanguageStringType


#define soap_POST_recv__ows__Title soap_POST_recv_ows__LanguageStringType

#endif
/* _ows__WGS84BoundingBox is a typedef synonym of ows__WGS84BoundingBoxType */

#ifndef SOAP_TYPE__ows__WGS84BoundingBox_DEFINED
#define SOAP_TYPE__ows__WGS84BoundingBox_DEFINED

#define soap_default__ows__WGS84BoundingBox(soap, a) (a)->ows__WGS84BoundingBoxType::soap_default(soap)


#define soap_serialize__ows__WGS84BoundingBox(soap, a) (a)->soap_serialize(soap)


#define soap__ows__WGS84BoundingBox2s soap_ows__WGS84BoundingBoxType2s


#define soap_out__ows__WGS84BoundingBox soap_out_ows__WGS84BoundingBoxType


#define soap_s2_ows__WGS84BoundingBox soap_s2ows__WGS84BoundingBoxType


#define soap_in__ows__WGS84BoundingBox soap_in_ows__WGS84BoundingBoxType


#define soap_instantiate__ows__WGS84BoundingBox soap_instantiate_ows__WGS84BoundingBoxType


#define soap_new__ows__WGS84BoundingBox soap_new_ows__WGS84BoundingBoxType


#define soap_new_req__ows__WGS84BoundingBox soap_new_req_ows__WGS84BoundingBoxType


#define soap_new_set__ows__WGS84BoundingBox soap_new_set_ows__WGS84BoundingBoxType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__WGS84BoundingBox(struct soap*, const ows__WGS84BoundingBoxType *, const char*, const char*);

inline int soap_write__ows__WGS84BoundingBox(struct soap *soap, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBox", p->soap_type() == SOAP_TYPE__ows__WGS84BoundingBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__WGS84BoundingBox(struct soap *soap, const char *URL, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBox", p->soap_type() == SOAP_TYPE__ows__WGS84BoundingBox ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__WGS84BoundingBox(struct soap *soap, const char *URL, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBox", p->soap_type() == SOAP_TYPE__ows__WGS84BoundingBox ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__WGS84BoundingBox(struct soap *soap, const char *URL, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBox", p->soap_type() == SOAP_TYPE__ows__WGS84BoundingBox ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__WGS84BoundingBox soap_get_ows__WGS84BoundingBoxType


#define soap_read__ows__WGS84BoundingBox soap_read_ows__WGS84BoundingBoxType


#define soap_GET__ows__WGS84BoundingBox soap_GET_ows__WGS84BoundingBoxType


#define soap_POST_recv__ows__WGS84BoundingBox soap_POST_recv_ows__WGS84BoundingBoxType

#endif
/* _ows__BoundingBox is a typedef synonym of ows__BoundingBoxType */

#ifndef SOAP_TYPE__ows__BoundingBox_DEFINED
#define SOAP_TYPE__ows__BoundingBox_DEFINED

#define soap_default__ows__BoundingBox(soap, a) (a)->ows__BoundingBoxType::soap_default(soap)


#define soap_serialize__ows__BoundingBox(soap, a) (a)->soap_serialize(soap)


#define soap__ows__BoundingBox2s soap_ows__BoundingBoxType2s


#define soap_out__ows__BoundingBox soap_out_ows__BoundingBoxType


#define soap_s2_ows__BoundingBox soap_s2ows__BoundingBoxType


#define soap_in__ows__BoundingBox soap_in_ows__BoundingBoxType


#define soap_instantiate__ows__BoundingBox soap_instantiate_ows__BoundingBoxType


#define soap_new__ows__BoundingBox soap_new_ows__BoundingBoxType


#define soap_new_req__ows__BoundingBox soap_new_req_ows__BoundingBoxType


#define soap_new_set__ows__BoundingBox soap_new_set_ows__BoundingBoxType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__BoundingBox(struct soap*, const ows__BoundingBoxType *, const char*, const char*);

inline int soap_write__ows__BoundingBox(struct soap *soap, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBox", p->soap_type() == SOAP_TYPE__ows__BoundingBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__BoundingBox(struct soap *soap, const char *URL, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBox", p->soap_type() == SOAP_TYPE__ows__BoundingBox ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__BoundingBox(struct soap *soap, const char *URL, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBox", p->soap_type() == SOAP_TYPE__ows__BoundingBox ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__BoundingBox(struct soap *soap, const char *URL, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBox", p->soap_type() == SOAP_TYPE__ows__BoundingBox ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__BoundingBox soap_get_ows__BoundingBoxType


#define soap_read__ows__BoundingBox soap_read_ows__BoundingBoxType


#define soap_GET__ows__BoundingBox soap_GET_ows__BoundingBoxType


#define soap_POST_recv__ows__BoundingBox soap_POST_recv_ows__BoundingBoxType

#endif
/* _ows__Metadata is a typedef synonym of ows__MetadataType */

#ifndef SOAP_TYPE__ows__Metadata_DEFINED
#define SOAP_TYPE__ows__Metadata_DEFINED

#define soap_default__ows__Metadata(soap, a) (a)->ows__MetadataType::soap_default(soap)


#define soap_serialize__ows__Metadata(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Metadata2s soap_ows__MetadataType2s


#define soap_out__ows__Metadata soap_out_ows__MetadataType


#define soap_s2_ows__Metadata soap_s2ows__MetadataType


#define soap_in__ows__Metadata soap_in_ows__MetadataType


#define soap_instantiate__ows__Metadata soap_instantiate_ows__MetadataType


#define soap_new__ows__Metadata soap_new_ows__MetadataType


#define soap_new_req__ows__Metadata soap_new_req_ows__MetadataType


#define soap_new_set__ows__Metadata soap_new_set_ows__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Metadata(struct soap*, const ows__MetadataType *, const char*, const char*);

inline int soap_write__ows__Metadata(struct soap *soap, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Metadata", p->soap_type() == SOAP_TYPE__ows__Metadata ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Metadata(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Metadata", p->soap_type() == SOAP_TYPE__ows__Metadata ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Metadata(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Metadata", p->soap_type() == SOAP_TYPE__ows__Metadata ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Metadata(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Metadata", p->soap_type() == SOAP_TYPE__ows__Metadata ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Metadata soap_get_ows__MetadataType


#define soap_read__ows__Metadata soap_read_ows__MetadataType


#define soap_GET__ows__Metadata soap_GET_ows__MetadataType


#define soap_POST_recv__ows__Metadata soap_POST_recv_ows__MetadataType

#endif
/* _ows__Fees is a typedef synonym of std__string */

#ifndef SOAP_TYPE__ows__Fees_DEFINED
#define SOAP_TYPE__ows__Fees_DEFINED

#define soap_default__ows__Fees soap_default_std__string


#define soap_serialize__ows__Fees soap_serialize_std__string


#define soap__ows__Fees2s(soap, a) ((a).c_str())

#define soap_out__ows__Fees soap_out_std__string


#define soap_s2_ows__Fees(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__ows__Fees soap_in_std__string


#define soap_instantiate__ows__Fees soap_instantiate_std__string


#define soap_new__ows__Fees soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Fees(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__ows__Fees(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ows__Fees(soap, p, "ows:Fees", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ows__Fees(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__Fees(soap, p, "ows:Fees", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Fees(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__Fees(soap, p, "ows:Fees", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Fees(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__Fees(soap, p, "ows:Fees", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Fees soap_get_std__string


#define soap_read__ows__Fees soap_read_std__string


#define soap_GET__ows__Fees soap_GET_std__string


#define soap_POST_recv__ows__Fees soap_POST_recv_std__string

#endif
/* _ows__AccessConstraints is a typedef synonym of std__string */

#ifndef SOAP_TYPE__ows__AccessConstraints_DEFINED
#define SOAP_TYPE__ows__AccessConstraints_DEFINED

#define soap_default__ows__AccessConstraints soap_default_std__string


#define soap_serialize__ows__AccessConstraints soap_serialize_std__string


#define soap__ows__AccessConstraints2s(soap, a) ((a).c_str())

#define soap_out__ows__AccessConstraints soap_out_std__string


#define soap_s2_ows__AccessConstraints(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in__ows__AccessConstraints soap_in_std__string


#define soap_instantiate__ows__AccessConstraints soap_instantiate_std__string


#define soap_new__ows__AccessConstraints soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__AccessConstraints(struct soap*, const std::string *, const char*, const char*);

inline int soap_write__ows__AccessConstraints(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__ows__AccessConstraints(soap, p, "ows:AccessConstraints", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__ows__AccessConstraints(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__AccessConstraints(soap, p, "ows:AccessConstraints", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__AccessConstraints(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__AccessConstraints(soap, p, "ows:AccessConstraints", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__AccessConstraints(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__ows__AccessConstraints(soap, p, "ows:AccessConstraints", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__AccessConstraints soap_get_std__string


#define soap_read__ows__AccessConstraints soap_read_std__string


#define soap_GET__ows__AccessConstraints soap_GET_std__string


#define soap_POST_recv__ows__AccessConstraints soap_POST_recv_std__string

#endif
/* _ows__OutputFormat is a typedef synonym of ows__MimeType */

#ifndef SOAP_TYPE__ows__OutputFormat_DEFINED
#define SOAP_TYPE__ows__OutputFormat_DEFINED

#define soap_default__ows__OutputFormat soap_default_ows__MimeType


#define soap_serialize__ows__OutputFormat soap_serialize_ows__MimeType


#define soap__ows__OutputFormat2s(soap, a) ((a).c_str())

#define soap_out__ows__OutputFormat soap_out_ows__MimeType


#define soap_s2_ows__OutputFormat(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "(application|audio|image|text|video|message|multipart|model)/.+(;\\s*.+=.+)*")

#define soap_in__ows__OutputFormat soap_in_ows__MimeType


#define soap_instantiate__ows__OutputFormat soap_instantiate_ows__MimeType


#define soap_new__ows__OutputFormat soap_new_ows__MimeType


#define soap_put__ows__OutputFormat soap_put_ows__MimeType


#define soap_write__ows__OutputFormat soap_write_ows__MimeType


#define soap_PUT__ows__OutputFormat soap_PUT_ows__MimeType


#define soap_PATCH__ows__OutputFormat soap_PATCH_ows__MimeType


#define soap_POST_send__ows__OutputFormat soap_POST_send_ows__MimeType


#define soap_get__ows__OutputFormat soap_get_ows__MimeType


#define soap_read__ows__OutputFormat soap_read_ows__MimeType


#define soap_GET__ows__OutputFormat soap_GET_ows__MimeType


#define soap_POST_recv__ows__OutputFormat soap_POST_recv_ows__MimeType

#endif
/* _ows__Identifier is a typedef synonym of ows__CodeType */

#ifndef SOAP_TYPE__ows__Identifier_DEFINED
#define SOAP_TYPE__ows__Identifier_DEFINED

#define soap_default__ows__Identifier(soap, a) (a)->ows__CodeType::soap_default(soap)


#define soap_serialize__ows__Identifier(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Identifier2s soap_ows__CodeType2s


#define soap_out__ows__Identifier soap_out_ows__CodeType


#define soap_s2_ows__Identifier soap_s2ows__CodeType


#define soap_in__ows__Identifier soap_in_ows__CodeType


#define soap_instantiate__ows__Identifier soap_instantiate_ows__CodeType


#define soap_new__ows__Identifier soap_new_ows__CodeType


#define soap_new_req__ows__Identifier soap_new_req_ows__CodeType


#define soap_new_set__ows__Identifier soap_new_set_ows__CodeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Identifier(struct soap*, const ows__CodeType *, const char*, const char*);

inline int soap_write__ows__Identifier(struct soap *soap, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Identifier", p->soap_type() == SOAP_TYPE__ows__Identifier ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Identifier(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Identifier", p->soap_type() == SOAP_TYPE__ows__Identifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Identifier(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Identifier", p->soap_type() == SOAP_TYPE__ows__Identifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Identifier(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Identifier", p->soap_type() == SOAP_TYPE__ows__Identifier ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Identifier soap_get_ows__CodeType


#define soap_read__ows__Identifier soap_read_ows__CodeType


#define soap_GET__ows__Identifier soap_GET_ows__CodeType


#define soap_POST_recv__ows__Identifier soap_POST_recv_ows__CodeType

#endif
/* _ows__GetResourceByID is a typedef synonym of ows__GetResourceByIdType */

#ifndef SOAP_TYPE__ows__GetResourceByID_DEFINED
#define SOAP_TYPE__ows__GetResourceByID_DEFINED

#define soap_default__ows__GetResourceByID(soap, a) (a)->ows__GetResourceByIdType::soap_default(soap)


#define soap_serialize__ows__GetResourceByID(soap, a) (a)->soap_serialize(soap)


#define soap__ows__GetResourceByID2s soap_ows__GetResourceByIdType2s


#define soap_out__ows__GetResourceByID soap_out_ows__GetResourceByIdType


#define soap_s2_ows__GetResourceByID soap_s2ows__GetResourceByIdType


#define soap_in__ows__GetResourceByID soap_in_ows__GetResourceByIdType


#define soap_instantiate__ows__GetResourceByID soap_instantiate_ows__GetResourceByIdType


#define soap_new__ows__GetResourceByID soap_new_ows__GetResourceByIdType


#define soap_new_req__ows__GetResourceByID soap_new_req_ows__GetResourceByIdType


#define soap_new_set__ows__GetResourceByID soap_new_set_ows__GetResourceByIdType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__GetResourceByID(struct soap*, const ows__GetResourceByIdType *, const char*, const char*);

inline int soap_write__ows__GetResourceByID(struct soap *soap, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByID", p->soap_type() == SOAP_TYPE__ows__GetResourceByID ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__GetResourceByID(struct soap *soap, const char *URL, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByID", p->soap_type() == SOAP_TYPE__ows__GetResourceByID ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__GetResourceByID(struct soap *soap, const char *URL, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByID", p->soap_type() == SOAP_TYPE__ows__GetResourceByID ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__GetResourceByID(struct soap *soap, const char *URL, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByID", p->soap_type() == SOAP_TYPE__ows__GetResourceByID ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__GetResourceByID soap_get_ows__GetResourceByIdType


#define soap_read__ows__GetResourceByID soap_read_ows__GetResourceByIdType


#define soap_GET__ows__GetResourceByID soap_GET_ows__GetResourceByIdType


#define soap_POST_recv__ows__GetResourceByID soap_POST_recv_ows__GetResourceByIdType

#endif
/* _ows__Exception is a typedef synonym of ows__ExceptionType */

#ifndef SOAP_TYPE__ows__Exception_DEFINED
#define SOAP_TYPE__ows__Exception_DEFINED

#define soap_default__ows__Exception(soap, a) (a)->ows__ExceptionType::soap_default(soap)


#define soap_serialize__ows__Exception(soap, a) (a)->soap_serialize(soap)


#define soap__ows__Exception2s soap_ows__ExceptionType2s


#define soap_out__ows__Exception soap_out_ows__ExceptionType


#define soap_s2_ows__Exception soap_s2ows__ExceptionType


#define soap_in__ows__Exception soap_in_ows__ExceptionType


#define soap_instantiate__ows__Exception soap_instantiate_ows__ExceptionType


#define soap_new__ows__Exception soap_new_ows__ExceptionType


#define soap_new_req__ows__Exception soap_new_req_ows__ExceptionType


#define soap_new_set__ows__Exception soap_new_set_ows__ExceptionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ows__Exception(struct soap*, const ows__ExceptionType *, const char*, const char*);

inline int soap_write__ows__Exception(struct soap *soap, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Exception", p->soap_type() == SOAP_TYPE__ows__Exception ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Exception(struct soap *soap, const char *URL, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Exception", p->soap_type() == SOAP_TYPE__ows__Exception ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Exception(struct soap *soap, const char *URL, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Exception", p->soap_type() == SOAP_TYPE__ows__Exception ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Exception(struct soap *soap, const char *URL, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Exception", p->soap_type() == SOAP_TYPE__ows__Exception ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__ows__Exception soap_get_ows__ExceptionType


#define soap_read__ows__Exception soap_read_ows__ExceptionType


#define soap_GET__ows__Exception soap_GET_ows__ExceptionType


#define soap_POST_recv__ows__Exception soap_POST_recv_ows__ExceptionType

#endif
/* _util__DescribeFeatureTypeResponse is a typedef synonym of util__DescribeFeatureTypeResponseType */

#ifndef SOAP_TYPE__util__DescribeFeatureTypeResponse_DEFINED
#define SOAP_TYPE__util__DescribeFeatureTypeResponse_DEFINED

#define soap_default__util__DescribeFeatureTypeResponse(soap, a) (a)->util__DescribeFeatureTypeResponseType::soap_default(soap)


#define soap_serialize__util__DescribeFeatureTypeResponse(soap, a) (a)->soap_serialize(soap)


#define soap__util__DescribeFeatureTypeResponse2s soap_util__DescribeFeatureTypeResponseType2s


#define soap_out__util__DescribeFeatureTypeResponse soap_out_util__DescribeFeatureTypeResponseType


#define soap_s2_util__DescribeFeatureTypeResponse soap_s2util__DescribeFeatureTypeResponseType


#define soap_in__util__DescribeFeatureTypeResponse soap_in_util__DescribeFeatureTypeResponseType


#define soap_instantiate__util__DescribeFeatureTypeResponse soap_instantiate_util__DescribeFeatureTypeResponseType


#define soap_new__util__DescribeFeatureTypeResponse soap_new_util__DescribeFeatureTypeResponseType


#define soap_new_req__util__DescribeFeatureTypeResponse soap_new_req_util__DescribeFeatureTypeResponseType


#define soap_new_set__util__DescribeFeatureTypeResponse soap_new_set_util__DescribeFeatureTypeResponseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__util__DescribeFeatureTypeResponse(struct soap*, const util__DescribeFeatureTypeResponseType *, const char*, const char*);

inline int soap_write__util__DescribeFeatureTypeResponse(struct soap *soap, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponse", p->soap_type() == SOAP_TYPE__util__DescribeFeatureTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__util__DescribeFeatureTypeResponse(struct soap *soap, const char *URL, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponse", p->soap_type() == SOAP_TYPE__util__DescribeFeatureTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__util__DescribeFeatureTypeResponse(struct soap *soap, const char *URL, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponse", p->soap_type() == SOAP_TYPE__util__DescribeFeatureTypeResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__util__DescribeFeatureTypeResponse(struct soap *soap, const char *URL, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponse", p->soap_type() == SOAP_TYPE__util__DescribeFeatureTypeResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__util__DescribeFeatureTypeResponse soap_get_util__DescribeFeatureTypeResponseType


#define soap_read__util__DescribeFeatureTypeResponse soap_read_util__DescribeFeatureTypeResponseType


#define soap_GET__util__DescribeFeatureTypeResponse soap_GET_util__DescribeFeatureTypeResponseType


#define soap_POST_recv__util__DescribeFeatureTypeResponse soap_POST_recv_util__DescribeFeatureTypeResponseType

#endif
/* _wfs__TransactionResponse is a typedef synonym of wfs__TransactionResponseType */

#ifndef SOAP_TYPE__wfs__TransactionResponse_DEFINED
#define SOAP_TYPE__wfs__TransactionResponse_DEFINED

#define soap_default__wfs__TransactionResponse(soap, a) (a)->wfs__TransactionResponseType::soap_default(soap)


#define soap_serialize__wfs__TransactionResponse(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__TransactionResponse2s soap_wfs__TransactionResponseType2s


#define soap_out__wfs__TransactionResponse soap_out_wfs__TransactionResponseType


#define soap_s2_wfs__TransactionResponse soap_s2wfs__TransactionResponseType


#define soap_in__wfs__TransactionResponse soap_in_wfs__TransactionResponseType


#define soap_instantiate__wfs__TransactionResponse soap_instantiate_wfs__TransactionResponseType


#define soap_new__wfs__TransactionResponse soap_new_wfs__TransactionResponseType


#define soap_new_req__wfs__TransactionResponse soap_new_req_wfs__TransactionResponseType


#define soap_new_set__wfs__TransactionResponse soap_new_set_wfs__TransactionResponseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__TransactionResponse(struct soap*, const wfs__TransactionResponseType *, const char*, const char*);

inline int soap_write__wfs__TransactionResponse(struct soap *soap, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponse", p->soap_type() == SOAP_TYPE__wfs__TransactionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__TransactionResponse(struct soap *soap, const char *URL, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponse", p->soap_type() == SOAP_TYPE__wfs__TransactionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__TransactionResponse(struct soap *soap, const char *URL, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponse", p->soap_type() == SOAP_TYPE__wfs__TransactionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__TransactionResponse(struct soap *soap, const char *URL, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponse", p->soap_type() == SOAP_TYPE__wfs__TransactionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__TransactionResponse soap_get_wfs__TransactionResponseType


#define soap_read__wfs__TransactionResponse soap_read_wfs__TransactionResponseType


#define soap_GET__wfs__TransactionResponse soap_GET_wfs__TransactionResponseType


#define soap_POST_recv__wfs__TransactionResponse soap_POST_recv_wfs__TransactionResponseType

#endif
/* _wfs__Native is a typedef synonym of wfs__NativeType */

#ifndef SOAP_TYPE__wfs__Native_DEFINED
#define SOAP_TYPE__wfs__Native_DEFINED

#define soap_default__wfs__Native(soap, a) (a)->wfs__NativeType::soap_default(soap)


#define soap_serialize__wfs__Native(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Native2s soap_wfs__NativeType2s


#define soap_out__wfs__Native soap_out_wfs__NativeType


#define soap_s2_wfs__Native soap_s2wfs__NativeType


#define soap_in__wfs__Native soap_in_wfs__NativeType


#define soap_instantiate__wfs__Native soap_instantiate_wfs__NativeType


#define soap_new__wfs__Native soap_new_wfs__NativeType


#define soap_new_req__wfs__Native soap_new_req_wfs__NativeType


#define soap_new_set__wfs__Native soap_new_set_wfs__NativeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Native(struct soap*, const wfs__NativeType *, const char*, const char*);

inline int soap_write__wfs__Native(struct soap *soap, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Native", p->soap_type() == SOAP_TYPE__wfs__Native ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Native(struct soap *soap, const char *URL, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Native", p->soap_type() == SOAP_TYPE__wfs__Native ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Native(struct soap *soap, const char *URL, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Native", p->soap_type() == SOAP_TYPE__wfs__Native ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Native(struct soap *soap, const char *URL, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Native", p->soap_type() == SOAP_TYPE__wfs__Native ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Native soap_get_wfs__NativeType


#define soap_read__wfs__Native soap_read_wfs__NativeType


#define soap_GET__wfs__Native soap_GET_wfs__NativeType


#define soap_POST_recv__wfs__Native soap_POST_recv_wfs__NativeType

#endif
/* _wfs__Delete is a typedef synonym of wfs__DeleteType */

#ifndef SOAP_TYPE__wfs__Delete_DEFINED
#define SOAP_TYPE__wfs__Delete_DEFINED

#define soap_default__wfs__Delete(soap, a) (a)->wfs__DeleteType::soap_default(soap)


#define soap_serialize__wfs__Delete(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Delete2s soap_wfs__DeleteType2s


#define soap_out__wfs__Delete soap_out_wfs__DeleteType


#define soap_s2_wfs__Delete soap_s2wfs__DeleteType


#define soap_in__wfs__Delete soap_in_wfs__DeleteType


#define soap_instantiate__wfs__Delete soap_instantiate_wfs__DeleteType


#define soap_new__wfs__Delete soap_new_wfs__DeleteType


#define soap_new_req__wfs__Delete soap_new_req_wfs__DeleteType


#define soap_new_set__wfs__Delete soap_new_set_wfs__DeleteType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Delete(struct soap*, const wfs__DeleteType *, const char*, const char*);

inline int soap_write__wfs__Delete(struct soap *soap, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Delete", p->soap_type() == SOAP_TYPE__wfs__Delete ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Delete(struct soap *soap, const char *URL, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Delete", p->soap_type() == SOAP_TYPE__wfs__Delete ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Delete(struct soap *soap, const char *URL, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Delete", p->soap_type() == SOAP_TYPE__wfs__Delete ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Delete(struct soap *soap, const char *URL, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Delete", p->soap_type() == SOAP_TYPE__wfs__Delete ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Delete soap_get_wfs__DeleteType


#define soap_read__wfs__Delete soap_read_wfs__DeleteType


#define soap_GET__wfs__Delete soap_GET_wfs__DeleteType


#define soap_POST_recv__wfs__Delete soap_POST_recv_wfs__DeleteType

#endif
/* _wfs__Replace is a typedef synonym of wfs__ReplaceType */

#ifndef SOAP_TYPE__wfs__Replace_DEFINED
#define SOAP_TYPE__wfs__Replace_DEFINED

#define soap_default__wfs__Replace(soap, a) (a)->wfs__ReplaceType::soap_default(soap)


#define soap_serialize__wfs__Replace(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Replace2s soap_wfs__ReplaceType2s


#define soap_out__wfs__Replace soap_out_wfs__ReplaceType


#define soap_s2_wfs__Replace soap_s2wfs__ReplaceType


#define soap_in__wfs__Replace soap_in_wfs__ReplaceType


#define soap_instantiate__wfs__Replace soap_instantiate_wfs__ReplaceType


#define soap_new__wfs__Replace soap_new_wfs__ReplaceType


#define soap_new_req__wfs__Replace soap_new_req_wfs__ReplaceType


#define soap_new_set__wfs__Replace soap_new_set_wfs__ReplaceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Replace(struct soap*, const wfs__ReplaceType *, const char*, const char*);

inline int soap_write__wfs__Replace(struct soap *soap, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Replace", p->soap_type() == SOAP_TYPE__wfs__Replace ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Replace(struct soap *soap, const char *URL, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Replace", p->soap_type() == SOAP_TYPE__wfs__Replace ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Replace(struct soap *soap, const char *URL, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Replace", p->soap_type() == SOAP_TYPE__wfs__Replace ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Replace(struct soap *soap, const char *URL, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Replace", p->soap_type() == SOAP_TYPE__wfs__Replace ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Replace soap_get_wfs__ReplaceType


#define soap_read__wfs__Replace soap_read_wfs__ReplaceType


#define soap_GET__wfs__Replace soap_GET_wfs__ReplaceType


#define soap_POST_recv__wfs__Replace soap_POST_recv_wfs__ReplaceType

#endif
/* _wfs__Property is a typedef synonym of wfs__PropertyType */

#ifndef SOAP_TYPE__wfs__Property_DEFINED
#define SOAP_TYPE__wfs__Property_DEFINED

#define soap_default__wfs__Property(soap, a) (a)->wfs__PropertyType::soap_default(soap)


#define soap_serialize__wfs__Property(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Property2s soap_wfs__PropertyType2s


#define soap_out__wfs__Property soap_out_wfs__PropertyType


#define soap_s2_wfs__Property soap_s2wfs__PropertyType


#define soap_in__wfs__Property soap_in_wfs__PropertyType


#define soap_instantiate__wfs__Property soap_instantiate_wfs__PropertyType


#define soap_new__wfs__Property soap_new_wfs__PropertyType


#define soap_new_req__wfs__Property soap_new_req_wfs__PropertyType


#define soap_new_set__wfs__Property soap_new_set_wfs__PropertyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Property(struct soap*, const wfs__PropertyType *, const char*, const char*);

inline int soap_write__wfs__Property(struct soap *soap, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Property", p->soap_type() == SOAP_TYPE__wfs__Property ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Property(struct soap *soap, const char *URL, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Property", p->soap_type() == SOAP_TYPE__wfs__Property ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Property(struct soap *soap, const char *URL, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Property", p->soap_type() == SOAP_TYPE__wfs__Property ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Property(struct soap *soap, const char *URL, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Property", p->soap_type() == SOAP_TYPE__wfs__Property ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Property soap_get_wfs__PropertyType


#define soap_read__wfs__Property soap_read_wfs__PropertyType


#define soap_GET__wfs__Property soap_GET_wfs__PropertyType


#define soap_POST_recv__wfs__Property soap_POST_recv_wfs__PropertyType

#endif
/* _wfs__Update is a typedef synonym of wfs__UpdateType */

#ifndef SOAP_TYPE__wfs__Update_DEFINED
#define SOAP_TYPE__wfs__Update_DEFINED

#define soap_default__wfs__Update(soap, a) (a)->wfs__UpdateType::soap_default(soap)


#define soap_serialize__wfs__Update(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Update2s soap_wfs__UpdateType2s


#define soap_out__wfs__Update soap_out_wfs__UpdateType


#define soap_s2_wfs__Update soap_s2wfs__UpdateType


#define soap_in__wfs__Update soap_in_wfs__UpdateType


#define soap_instantiate__wfs__Update soap_instantiate_wfs__UpdateType


#define soap_new__wfs__Update soap_new_wfs__UpdateType


#define soap_new_req__wfs__Update soap_new_req_wfs__UpdateType


#define soap_new_set__wfs__Update soap_new_set_wfs__UpdateType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Update(struct soap*, const wfs__UpdateType *, const char*, const char*);

inline int soap_write__wfs__Update(struct soap *soap, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Update", p->soap_type() == SOAP_TYPE__wfs__Update ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Update(struct soap *soap, const char *URL, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Update", p->soap_type() == SOAP_TYPE__wfs__Update ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Update(struct soap *soap, const char *URL, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Update", p->soap_type() == SOAP_TYPE__wfs__Update ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Update(struct soap *soap, const char *URL, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Update", p->soap_type() == SOAP_TYPE__wfs__Update ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Update soap_get_wfs__UpdateType


#define soap_read__wfs__Update soap_read_wfs__UpdateType


#define soap_GET__wfs__Update soap_GET_wfs__UpdateType


#define soap_POST_recv__wfs__Update soap_POST_recv_wfs__UpdateType

#endif
/* _wfs__Insert is a typedef synonym of wfs__InsertType */

#ifndef SOAP_TYPE__wfs__Insert_DEFINED
#define SOAP_TYPE__wfs__Insert_DEFINED

#define soap_default__wfs__Insert(soap, a) (a)->wfs__InsertType::soap_default(soap)


#define soap_serialize__wfs__Insert(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Insert2s soap_wfs__InsertType2s


#define soap_out__wfs__Insert soap_out_wfs__InsertType


#define soap_s2_wfs__Insert soap_s2wfs__InsertType


#define soap_in__wfs__Insert soap_in_wfs__InsertType


#define soap_instantiate__wfs__Insert soap_instantiate_wfs__InsertType


#define soap_new__wfs__Insert soap_new_wfs__InsertType


#define soap_new_req__wfs__Insert soap_new_req_wfs__InsertType


#define soap_new_set__wfs__Insert soap_new_set_wfs__InsertType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Insert(struct soap*, const wfs__InsertType *, const char*, const char*);

inline int soap_write__wfs__Insert(struct soap *soap, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Insert", p->soap_type() == SOAP_TYPE__wfs__Insert ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Insert(struct soap *soap, const char *URL, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Insert", p->soap_type() == SOAP_TYPE__wfs__Insert ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Insert(struct soap *soap, const char *URL, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Insert", p->soap_type() == SOAP_TYPE__wfs__Insert ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Insert(struct soap *soap, const char *URL, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Insert", p->soap_type() == SOAP_TYPE__wfs__Insert ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Insert soap_get_wfs__InsertType


#define soap_read__wfs__Insert soap_read_wfs__InsertType


#define soap_GET__wfs__Insert soap_GET_wfs__InsertType


#define soap_POST_recv__wfs__Insert soap_POST_recv_wfs__InsertType

#endif
/* _wfs__Transaction is a typedef synonym of wfs__TransactionType */

#ifndef SOAP_TYPE__wfs__Transaction_DEFINED
#define SOAP_TYPE__wfs__Transaction_DEFINED

#define soap_default__wfs__Transaction(soap, a) (a)->wfs__TransactionType::soap_default(soap)


#define soap_serialize__wfs__Transaction(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Transaction2s soap_wfs__TransactionType2s


#define soap_out__wfs__Transaction soap_out_wfs__TransactionType


#define soap_s2_wfs__Transaction soap_s2wfs__TransactionType


#define soap_in__wfs__Transaction soap_in_wfs__TransactionType


#define soap_instantiate__wfs__Transaction soap_instantiate_wfs__TransactionType


#define soap_new__wfs__Transaction soap_new_wfs__TransactionType


#define soap_new_req__wfs__Transaction soap_new_req_wfs__TransactionType


#define soap_new_set__wfs__Transaction soap_new_set_wfs__TransactionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Transaction(struct soap*, const wfs__TransactionType *, const char*, const char*);

inline int soap_write__wfs__Transaction(struct soap *soap, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Transaction", p->soap_type() == SOAP_TYPE__wfs__Transaction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Transaction(struct soap *soap, const char *URL, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Transaction", p->soap_type() == SOAP_TYPE__wfs__Transaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Transaction(struct soap *soap, const char *URL, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Transaction", p->soap_type() == SOAP_TYPE__wfs__Transaction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Transaction(struct soap *soap, const char *URL, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Transaction", p->soap_type() == SOAP_TYPE__wfs__Transaction ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Transaction soap_get_wfs__TransactionType


#define soap_read__wfs__Transaction soap_read_wfs__TransactionType


#define soap_GET__wfs__Transaction soap_GET_wfs__TransactionType


#define soap_POST_recv__wfs__Transaction soap_POST_recv_wfs__TransactionType

#endif
/* _wfs__LockFeatureResponse is a typedef synonym of wfs__LockFeatureResponseType */

#ifndef SOAP_TYPE__wfs__LockFeatureResponse_DEFINED
#define SOAP_TYPE__wfs__LockFeatureResponse_DEFINED

#define soap_default__wfs__LockFeatureResponse(soap, a) (a)->wfs__LockFeatureResponseType::soap_default(soap)


#define soap_serialize__wfs__LockFeatureResponse(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__LockFeatureResponse2s soap_wfs__LockFeatureResponseType2s


#define soap_out__wfs__LockFeatureResponse soap_out_wfs__LockFeatureResponseType


#define soap_s2_wfs__LockFeatureResponse soap_s2wfs__LockFeatureResponseType


#define soap_in__wfs__LockFeatureResponse soap_in_wfs__LockFeatureResponseType


#define soap_instantiate__wfs__LockFeatureResponse soap_instantiate_wfs__LockFeatureResponseType


#define soap_new__wfs__LockFeatureResponse soap_new_wfs__LockFeatureResponseType


#define soap_new_req__wfs__LockFeatureResponse soap_new_req_wfs__LockFeatureResponseType


#define soap_new_set__wfs__LockFeatureResponse soap_new_set_wfs__LockFeatureResponseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__LockFeatureResponse(struct soap*, const wfs__LockFeatureResponseType *, const char*, const char*);

inline int soap_write__wfs__LockFeatureResponse(struct soap *soap, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponse", p->soap_type() == SOAP_TYPE__wfs__LockFeatureResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__LockFeatureResponse(struct soap *soap, const char *URL, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponse", p->soap_type() == SOAP_TYPE__wfs__LockFeatureResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__LockFeatureResponse(struct soap *soap, const char *URL, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponse", p->soap_type() == SOAP_TYPE__wfs__LockFeatureResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__LockFeatureResponse(struct soap *soap, const char *URL, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponse", p->soap_type() == SOAP_TYPE__wfs__LockFeatureResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__LockFeatureResponse soap_get_wfs__LockFeatureResponseType


#define soap_read__wfs__LockFeatureResponse soap_read_wfs__LockFeatureResponseType


#define soap_GET__wfs__LockFeatureResponse soap_GET_wfs__LockFeatureResponseType


#define soap_POST_recv__wfs__LockFeatureResponse soap_POST_recv_wfs__LockFeatureResponseType

#endif
/* _wfs__LockFeature is a typedef synonym of wfs__LockFeatureType */

#ifndef SOAP_TYPE__wfs__LockFeature_DEFINED
#define SOAP_TYPE__wfs__LockFeature_DEFINED

#define soap_default__wfs__LockFeature(soap, a) (a)->wfs__LockFeatureType::soap_default(soap)


#define soap_serialize__wfs__LockFeature(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__LockFeature2s soap_wfs__LockFeatureType2s


#define soap_out__wfs__LockFeature soap_out_wfs__LockFeatureType


#define soap_s2_wfs__LockFeature soap_s2wfs__LockFeatureType


#define soap_in__wfs__LockFeature soap_in_wfs__LockFeatureType


#define soap_instantiate__wfs__LockFeature soap_instantiate_wfs__LockFeatureType


#define soap_new__wfs__LockFeature soap_new_wfs__LockFeatureType


#define soap_new_req__wfs__LockFeature soap_new_req_wfs__LockFeatureType


#define soap_new_set__wfs__LockFeature soap_new_set_wfs__LockFeatureType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__LockFeature(struct soap*, const wfs__LockFeatureType *, const char*, const char*);

inline int soap_write__wfs__LockFeature(struct soap *soap, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeature", p->soap_type() == SOAP_TYPE__wfs__LockFeature ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__LockFeature(struct soap *soap, const char *URL, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeature", p->soap_type() == SOAP_TYPE__wfs__LockFeature ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__LockFeature(struct soap *soap, const char *URL, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeature", p->soap_type() == SOAP_TYPE__wfs__LockFeature ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__LockFeature(struct soap *soap, const char *URL, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeature", p->soap_type() == SOAP_TYPE__wfs__LockFeature ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__LockFeature soap_get_wfs__LockFeatureType


#define soap_read__wfs__LockFeature soap_read_wfs__LockFeatureType


#define soap_GET__wfs__LockFeature soap_GET_wfs__LockFeatureType


#define soap_POST_recv__wfs__LockFeature soap_POST_recv_wfs__LockFeatureType

#endif
/* _wfs__DropStoredQueryResponse is a typedef synonym of wfs__ExecutionStatusType */

#ifndef SOAP_TYPE__wfs__DropStoredQueryResponse_DEFINED
#define SOAP_TYPE__wfs__DropStoredQueryResponse_DEFINED

#define soap_default__wfs__DropStoredQueryResponse(soap, a) (a)->wfs__ExecutionStatusType::soap_default(soap)


#define soap_serialize__wfs__DropStoredQueryResponse(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__DropStoredQueryResponse2s soap_wfs__ExecutionStatusType2s


#define soap_out__wfs__DropStoredQueryResponse soap_out_wfs__ExecutionStatusType


#define soap_s2_wfs__DropStoredQueryResponse soap_s2wfs__ExecutionStatusType


#define soap_in__wfs__DropStoredQueryResponse soap_in_wfs__ExecutionStatusType


#define soap_instantiate__wfs__DropStoredQueryResponse soap_instantiate_wfs__ExecutionStatusType


#define soap_new__wfs__DropStoredQueryResponse soap_new_wfs__ExecutionStatusType


#define soap_new_req__wfs__DropStoredQueryResponse soap_new_req_wfs__ExecutionStatusType


#define soap_new_set__wfs__DropStoredQueryResponse soap_new_set_wfs__ExecutionStatusType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__DropStoredQueryResponse(struct soap*, const wfs__ExecutionStatusType *, const char*, const char*);

inline int soap_write__wfs__DropStoredQueryResponse(struct soap *soap, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__DropStoredQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__DropStoredQueryResponse(struct soap *soap, const char *URL, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__DropStoredQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__DropStoredQueryResponse(struct soap *soap, const char *URL, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__DropStoredQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__DropStoredQueryResponse(struct soap *soap, const char *URL, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__DropStoredQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__DropStoredQueryResponse soap_get_wfs__ExecutionStatusType


#define soap_read__wfs__DropStoredQueryResponse soap_read_wfs__ExecutionStatusType


#define soap_GET__wfs__DropStoredQueryResponse soap_GET_wfs__ExecutionStatusType


#define soap_POST_recv__wfs__DropStoredQueryResponse soap_POST_recv_wfs__ExecutionStatusType

#endif
/* _wfs__CreateStoredQueryResponse is a typedef synonym of wfs__CreateStoredQueryResponseType */

#ifndef SOAP_TYPE__wfs__CreateStoredQueryResponse_DEFINED
#define SOAP_TYPE__wfs__CreateStoredQueryResponse_DEFINED

#define soap_default__wfs__CreateStoredQueryResponse(soap, a) (a)->wfs__CreateStoredQueryResponseType::soap_default(soap)


#define soap_serialize__wfs__CreateStoredQueryResponse(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__CreateStoredQueryResponse2s soap_wfs__CreateStoredQueryResponseType2s


#define soap_out__wfs__CreateStoredQueryResponse soap_out_wfs__CreateStoredQueryResponseType


#define soap_s2_wfs__CreateStoredQueryResponse soap_s2wfs__CreateStoredQueryResponseType


#define soap_in__wfs__CreateStoredQueryResponse soap_in_wfs__CreateStoredQueryResponseType


#define soap_instantiate__wfs__CreateStoredQueryResponse soap_instantiate_wfs__CreateStoredQueryResponseType


#define soap_new__wfs__CreateStoredQueryResponse soap_new_wfs__CreateStoredQueryResponseType


#define soap_new_req__wfs__CreateStoredQueryResponse soap_new_req_wfs__CreateStoredQueryResponseType


#define soap_new_set__wfs__CreateStoredQueryResponse soap_new_set_wfs__CreateStoredQueryResponseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__CreateStoredQueryResponse(struct soap*, const wfs__CreateStoredQueryResponseType *, const char*, const char*);

inline int soap_write__wfs__CreateStoredQueryResponse(struct soap *soap, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__CreateStoredQueryResponse(struct soap *soap, const char *URL, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__CreateStoredQueryResponse(struct soap *soap, const char *URL, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__CreateStoredQueryResponse(struct soap *soap, const char *URL, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponse", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__CreateStoredQueryResponse soap_get_wfs__CreateStoredQueryResponseType


#define soap_read__wfs__CreateStoredQueryResponse soap_read_wfs__CreateStoredQueryResponseType


#define soap_GET__wfs__CreateStoredQueryResponse soap_GET_wfs__CreateStoredQueryResponseType


#define soap_POST_recv__wfs__CreateStoredQueryResponse soap_POST_recv_wfs__CreateStoredQueryResponseType

#endif
/* _wfs__CreateStoredQuery is a typedef synonym of wfs__CreateStoredQueryType */

#ifndef SOAP_TYPE__wfs__CreateStoredQuery_DEFINED
#define SOAP_TYPE__wfs__CreateStoredQuery_DEFINED

#define soap_default__wfs__CreateStoredQuery(soap, a) (a)->wfs__CreateStoredQueryType::soap_default(soap)


#define soap_serialize__wfs__CreateStoredQuery(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__CreateStoredQuery2s soap_wfs__CreateStoredQueryType2s


#define soap_out__wfs__CreateStoredQuery soap_out_wfs__CreateStoredQueryType


#define soap_s2_wfs__CreateStoredQuery soap_s2wfs__CreateStoredQueryType


#define soap_in__wfs__CreateStoredQuery soap_in_wfs__CreateStoredQueryType


#define soap_instantiate__wfs__CreateStoredQuery soap_instantiate_wfs__CreateStoredQueryType


#define soap_new__wfs__CreateStoredQuery soap_new_wfs__CreateStoredQueryType


#define soap_new_req__wfs__CreateStoredQuery soap_new_req_wfs__CreateStoredQueryType


#define soap_new_set__wfs__CreateStoredQuery soap_new_set_wfs__CreateStoredQueryType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__CreateStoredQuery(struct soap*, const wfs__CreateStoredQueryType *, const char*, const char*);

inline int soap_write__wfs__CreateStoredQuery(struct soap *soap, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQuery", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQuery ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__CreateStoredQuery(struct soap *soap, const char *URL, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQuery", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__CreateStoredQuery(struct soap *soap, const char *URL, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQuery", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__CreateStoredQuery(struct soap *soap, const char *URL, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQuery", p->soap_type() == SOAP_TYPE__wfs__CreateStoredQuery ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__CreateStoredQuery soap_get_wfs__CreateStoredQueryType


#define soap_read__wfs__CreateStoredQuery soap_read_wfs__CreateStoredQueryType


#define soap_GET__wfs__CreateStoredQuery soap_GET_wfs__CreateStoredQueryType


#define soap_POST_recv__wfs__CreateStoredQuery soap_POST_recv_wfs__CreateStoredQueryType

#endif
/* _wfs__DescribeStoredQueriesResponse is a typedef synonym of wfs__DescribeStoredQueriesResponseType */

#ifndef SOAP_TYPE__wfs__DescribeStoredQueriesResponse_DEFINED
#define SOAP_TYPE__wfs__DescribeStoredQueriesResponse_DEFINED

#define soap_default__wfs__DescribeStoredQueriesResponse(soap, a) (a)->wfs__DescribeStoredQueriesResponseType::soap_default(soap)


#define soap_serialize__wfs__DescribeStoredQueriesResponse(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__DescribeStoredQueriesResponse2s soap_wfs__DescribeStoredQueriesResponseType2s


#define soap_out__wfs__DescribeStoredQueriesResponse soap_out_wfs__DescribeStoredQueriesResponseType


#define soap_s2_wfs__DescribeStoredQueriesResponse soap_s2wfs__DescribeStoredQueriesResponseType


#define soap_in__wfs__DescribeStoredQueriesResponse soap_in_wfs__DescribeStoredQueriesResponseType


#define soap_instantiate__wfs__DescribeStoredQueriesResponse soap_instantiate_wfs__DescribeStoredQueriesResponseType


#define soap_new__wfs__DescribeStoredQueriesResponse soap_new_wfs__DescribeStoredQueriesResponseType


#define soap_new_req__wfs__DescribeStoredQueriesResponse soap_new_req_wfs__DescribeStoredQueriesResponseType


#define soap_new_set__wfs__DescribeStoredQueriesResponse soap_new_set_wfs__DescribeStoredQueriesResponseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__DescribeStoredQueriesResponse(struct soap*, const wfs__DescribeStoredQueriesResponseType *, const char*, const char*);

inline int soap_write__wfs__DescribeStoredQueriesResponse(struct soap *soap, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueriesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__DescribeStoredQueriesResponse(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueriesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__DescribeStoredQueriesResponse(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueriesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__DescribeStoredQueriesResponse(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueriesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__DescribeStoredQueriesResponse soap_get_wfs__DescribeStoredQueriesResponseType


#define soap_read__wfs__DescribeStoredQueriesResponse soap_read_wfs__DescribeStoredQueriesResponseType


#define soap_GET__wfs__DescribeStoredQueriesResponse soap_GET_wfs__DescribeStoredQueriesResponseType


#define soap_POST_recv__wfs__DescribeStoredQueriesResponse soap_POST_recv_wfs__DescribeStoredQueriesResponseType

#endif
/* _wfs__DescribeStoredQueries is a typedef synonym of wfs__DescribeStoredQueriesType */

#ifndef SOAP_TYPE__wfs__DescribeStoredQueries_DEFINED
#define SOAP_TYPE__wfs__DescribeStoredQueries_DEFINED

#define soap_default__wfs__DescribeStoredQueries(soap, a) (a)->wfs__DescribeStoredQueriesType::soap_default(soap)


#define soap_serialize__wfs__DescribeStoredQueries(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__DescribeStoredQueries2s soap_wfs__DescribeStoredQueriesType2s


#define soap_out__wfs__DescribeStoredQueries soap_out_wfs__DescribeStoredQueriesType


#define soap_s2_wfs__DescribeStoredQueries soap_s2wfs__DescribeStoredQueriesType


#define soap_in__wfs__DescribeStoredQueries soap_in_wfs__DescribeStoredQueriesType


#define soap_instantiate__wfs__DescribeStoredQueries soap_instantiate_wfs__DescribeStoredQueriesType


#define soap_new__wfs__DescribeStoredQueries soap_new_wfs__DescribeStoredQueriesType


#define soap_new_req__wfs__DescribeStoredQueries soap_new_req_wfs__DescribeStoredQueriesType


#define soap_new_set__wfs__DescribeStoredQueries soap_new_set_wfs__DescribeStoredQueriesType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__DescribeStoredQueries(struct soap*, const wfs__DescribeStoredQueriesType *, const char*, const char*);

inline int soap_write__wfs__DescribeStoredQueries(struct soap *soap, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueries", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueries ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__DescribeStoredQueries(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueries", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueries ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__DescribeStoredQueries(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueries", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueries ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__DescribeStoredQueries(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueries", p->soap_type() == SOAP_TYPE__wfs__DescribeStoredQueries ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__DescribeStoredQueries soap_get_wfs__DescribeStoredQueriesType


#define soap_read__wfs__DescribeStoredQueries soap_read_wfs__DescribeStoredQueriesType


#define soap_GET__wfs__DescribeStoredQueries soap_GET_wfs__DescribeStoredQueriesType


#define soap_POST_recv__wfs__DescribeStoredQueries soap_POST_recv_wfs__DescribeStoredQueriesType

#endif
/* _wfs__ListStoredQueriesResponse is a typedef synonym of wfs__ListStoredQueriesResponseType */

#ifndef SOAP_TYPE__wfs__ListStoredQueriesResponse_DEFINED
#define SOAP_TYPE__wfs__ListStoredQueriesResponse_DEFINED

#define soap_default__wfs__ListStoredQueriesResponse(soap, a) (a)->wfs__ListStoredQueriesResponseType::soap_default(soap)


#define soap_serialize__wfs__ListStoredQueriesResponse(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__ListStoredQueriesResponse2s soap_wfs__ListStoredQueriesResponseType2s


#define soap_out__wfs__ListStoredQueriesResponse soap_out_wfs__ListStoredQueriesResponseType


#define soap_s2_wfs__ListStoredQueriesResponse soap_s2wfs__ListStoredQueriesResponseType


#define soap_in__wfs__ListStoredQueriesResponse soap_in_wfs__ListStoredQueriesResponseType


#define soap_instantiate__wfs__ListStoredQueriesResponse soap_instantiate_wfs__ListStoredQueriesResponseType


#define soap_new__wfs__ListStoredQueriesResponse soap_new_wfs__ListStoredQueriesResponseType


#define soap_new_req__wfs__ListStoredQueriesResponse soap_new_req_wfs__ListStoredQueriesResponseType


#define soap_new_set__wfs__ListStoredQueriesResponse soap_new_set_wfs__ListStoredQueriesResponseType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__ListStoredQueriesResponse(struct soap*, const wfs__ListStoredQueriesResponseType *, const char*, const char*);

inline int soap_write__wfs__ListStoredQueriesResponse(struct soap *soap, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueriesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__ListStoredQueriesResponse(struct soap *soap, const char *URL, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueriesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__ListStoredQueriesResponse(struct soap *soap, const char *URL, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueriesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__ListStoredQueriesResponse(struct soap *soap, const char *URL, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponse", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueriesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__ListStoredQueriesResponse soap_get_wfs__ListStoredQueriesResponseType


#define soap_read__wfs__ListStoredQueriesResponse soap_read_wfs__ListStoredQueriesResponseType


#define soap_GET__wfs__ListStoredQueriesResponse soap_GET_wfs__ListStoredQueriesResponseType


#define soap_POST_recv__wfs__ListStoredQueriesResponse soap_POST_recv_wfs__ListStoredQueriesResponseType

#endif
/* _wfs__ListStoredQueries is a typedef synonym of wfs__ListStoredQueriesType */

#ifndef SOAP_TYPE__wfs__ListStoredQueries_DEFINED
#define SOAP_TYPE__wfs__ListStoredQueries_DEFINED

#define soap_default__wfs__ListStoredQueries(soap, a) (a)->wfs__ListStoredQueriesType::soap_default(soap)


#define soap_serialize__wfs__ListStoredQueries(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__ListStoredQueries2s soap_wfs__ListStoredQueriesType2s


#define soap_out__wfs__ListStoredQueries soap_out_wfs__ListStoredQueriesType


#define soap_s2_wfs__ListStoredQueries soap_s2wfs__ListStoredQueriesType


#define soap_in__wfs__ListStoredQueries soap_in_wfs__ListStoredQueriesType


#define soap_instantiate__wfs__ListStoredQueries soap_instantiate_wfs__ListStoredQueriesType


#define soap_new__wfs__ListStoredQueries soap_new_wfs__ListStoredQueriesType


#define soap_new_req__wfs__ListStoredQueries soap_new_req_wfs__ListStoredQueriesType


#define soap_new_set__wfs__ListStoredQueries soap_new_set_wfs__ListStoredQueriesType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__ListStoredQueries(struct soap*, const wfs__ListStoredQueriesType *, const char*, const char*);

inline int soap_write__wfs__ListStoredQueries(struct soap *soap, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueries", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueries ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__ListStoredQueries(struct soap *soap, const char *URL, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueries", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueries ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__ListStoredQueries(struct soap *soap, const char *URL, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueries", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueries ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__ListStoredQueries(struct soap *soap, const char *URL, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueries", p->soap_type() == SOAP_TYPE__wfs__ListStoredQueries ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__ListStoredQueries soap_get_wfs__ListStoredQueriesType


#define soap_read__wfs__ListStoredQueries soap_read_wfs__ListStoredQueriesType


#define soap_GET__wfs__ListStoredQueries soap_GET_wfs__ListStoredQueriesType


#define soap_POST_recv__wfs__ListStoredQueries soap_POST_recv_wfs__ListStoredQueriesType

#endif
/* _wfs__boundedBy is a typedef synonym of wfs__EnvelopePropertyType */

#ifndef SOAP_TYPE__wfs__boundedBy_DEFINED
#define SOAP_TYPE__wfs__boundedBy_DEFINED

#define soap_default__wfs__boundedBy(soap, a) (a)->wfs__EnvelopePropertyType::soap_default(soap)


#define soap_serialize__wfs__boundedBy(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__boundedBy2s soap_wfs__EnvelopePropertyType2s


#define soap_out__wfs__boundedBy soap_out_wfs__EnvelopePropertyType


#define soap_s2_wfs__boundedBy soap_s2wfs__EnvelopePropertyType


#define soap_in__wfs__boundedBy soap_in_wfs__EnvelopePropertyType


#define soap_instantiate__wfs__boundedBy soap_instantiate_wfs__EnvelopePropertyType


#define soap_new__wfs__boundedBy soap_new_wfs__EnvelopePropertyType


#define soap_new_req__wfs__boundedBy soap_new_req_wfs__EnvelopePropertyType


#define soap_new_set__wfs__boundedBy soap_new_set_wfs__EnvelopePropertyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__boundedBy(struct soap*, const wfs__EnvelopePropertyType *, const char*, const char*);

inline int soap_write__wfs__boundedBy(struct soap *soap, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:boundedBy", p->soap_type() == SOAP_TYPE__wfs__boundedBy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__boundedBy(struct soap *soap, const char *URL, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:boundedBy", p->soap_type() == SOAP_TYPE__wfs__boundedBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__boundedBy(struct soap *soap, const char *URL, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:boundedBy", p->soap_type() == SOAP_TYPE__wfs__boundedBy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__boundedBy(struct soap *soap, const char *URL, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:boundedBy", p->soap_type() == SOAP_TYPE__wfs__boundedBy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__boundedBy soap_get_wfs__EnvelopePropertyType


#define soap_read__wfs__boundedBy soap_read_wfs__EnvelopePropertyType


#define soap_GET__wfs__boundedBy soap_GET_wfs__EnvelopePropertyType


#define soap_POST_recv__wfs__boundedBy soap_POST_recv_wfs__EnvelopePropertyType

#endif
/* _wfs__SimpleFeatureCollection is a typedef synonym of wfs__SimpleFeatureCollectionType */

#ifndef SOAP_TYPE__wfs__SimpleFeatureCollection_DEFINED
#define SOAP_TYPE__wfs__SimpleFeatureCollection_DEFINED

#define soap_default__wfs__SimpleFeatureCollection(soap, a) (a)->wfs__SimpleFeatureCollectionType::soap_default(soap)


#define soap_serialize__wfs__SimpleFeatureCollection(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__SimpleFeatureCollection2s soap_wfs__SimpleFeatureCollectionType2s


#define soap_out__wfs__SimpleFeatureCollection soap_out_wfs__SimpleFeatureCollectionType


#define soap_s2_wfs__SimpleFeatureCollection soap_s2wfs__SimpleFeatureCollectionType


#define soap_in__wfs__SimpleFeatureCollection soap_in_wfs__SimpleFeatureCollectionType


#define soap_instantiate__wfs__SimpleFeatureCollection soap_instantiate_wfs__SimpleFeatureCollectionType


#define soap_new__wfs__SimpleFeatureCollection soap_new_wfs__SimpleFeatureCollectionType


#define soap_new_req__wfs__SimpleFeatureCollection soap_new_req_wfs__SimpleFeatureCollectionType


#define soap_new_set__wfs__SimpleFeatureCollection soap_new_set_wfs__SimpleFeatureCollectionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__SimpleFeatureCollection(struct soap*, const wfs__SimpleFeatureCollectionType *, const char*, const char*);

inline int soap_write__wfs__SimpleFeatureCollection(struct soap *soap, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollection", p->soap_type() == SOAP_TYPE__wfs__SimpleFeatureCollection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__SimpleFeatureCollection(struct soap *soap, const char *URL, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollection", p->soap_type() == SOAP_TYPE__wfs__SimpleFeatureCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__SimpleFeatureCollection(struct soap *soap, const char *URL, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollection", p->soap_type() == SOAP_TYPE__wfs__SimpleFeatureCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__SimpleFeatureCollection(struct soap *soap, const char *URL, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollection", p->soap_type() == SOAP_TYPE__wfs__SimpleFeatureCollection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__SimpleFeatureCollection soap_get_wfs__SimpleFeatureCollectionType


#define soap_read__wfs__SimpleFeatureCollection soap_read_wfs__SimpleFeatureCollectionType


#define soap_GET__wfs__SimpleFeatureCollection soap_GET_wfs__SimpleFeatureCollectionType


#define soap_POST_recv__wfs__SimpleFeatureCollection soap_POST_recv_wfs__SimpleFeatureCollectionType

#endif
/* _wfs__FeatureCollection is a typedef synonym of wfs__FeatureCollectionType */

#ifndef SOAP_TYPE__wfs__FeatureCollection_DEFINED
#define SOAP_TYPE__wfs__FeatureCollection_DEFINED

#define soap_default__wfs__FeatureCollection(soap, a) (a)->wfs__FeatureCollectionType::soap_default(soap)


#define soap_serialize__wfs__FeatureCollection(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__FeatureCollection2s soap_wfs__FeatureCollectionType2s


#define soap_out__wfs__FeatureCollection soap_out_wfs__FeatureCollectionType


#define soap_s2_wfs__FeatureCollection soap_s2wfs__FeatureCollectionType


#define soap_in__wfs__FeatureCollection soap_in_wfs__FeatureCollectionType


#define soap_instantiate__wfs__FeatureCollection soap_instantiate_wfs__FeatureCollectionType


#define soap_new__wfs__FeatureCollection soap_new_wfs__FeatureCollectionType


#define soap_new_req__wfs__FeatureCollection soap_new_req_wfs__FeatureCollectionType


#define soap_new_set__wfs__FeatureCollection soap_new_set_wfs__FeatureCollectionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__FeatureCollection(struct soap*, const wfs__FeatureCollectionType *, const char*, const char*);

inline int soap_write__wfs__FeatureCollection(struct soap *soap, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollection", p->soap_type() == SOAP_TYPE__wfs__FeatureCollection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__FeatureCollection(struct soap *soap, const char *URL, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollection", p->soap_type() == SOAP_TYPE__wfs__FeatureCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__FeatureCollection(struct soap *soap, const char *URL, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollection", p->soap_type() == SOAP_TYPE__wfs__FeatureCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__FeatureCollection(struct soap *soap, const char *URL, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollection", p->soap_type() == SOAP_TYPE__wfs__FeatureCollection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__FeatureCollection soap_get_wfs__FeatureCollectionType


#define soap_read__wfs__FeatureCollection soap_read_wfs__FeatureCollectionType


#define soap_GET__wfs__FeatureCollection soap_GET_wfs__FeatureCollectionType


#define soap_POST_recv__wfs__FeatureCollection soap_POST_recv_wfs__FeatureCollectionType

#endif
/* _wfs__GetFeatureWithLock is a typedef synonym of wfs__GetFeatureWithLockType */

#ifndef SOAP_TYPE__wfs__GetFeatureWithLock_DEFINED
#define SOAP_TYPE__wfs__GetFeatureWithLock_DEFINED

#define soap_default__wfs__GetFeatureWithLock(soap, a) (a)->wfs__GetFeatureWithLockType::soap_default(soap)


#define soap_serialize__wfs__GetFeatureWithLock(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__GetFeatureWithLock2s soap_wfs__GetFeatureWithLockType2s


#define soap_out__wfs__GetFeatureWithLock soap_out_wfs__GetFeatureWithLockType


#define soap_s2_wfs__GetFeatureWithLock soap_s2wfs__GetFeatureWithLockType


#define soap_in__wfs__GetFeatureWithLock soap_in_wfs__GetFeatureWithLockType


#define soap_instantiate__wfs__GetFeatureWithLock soap_instantiate_wfs__GetFeatureWithLockType


#define soap_new__wfs__GetFeatureWithLock soap_new_wfs__GetFeatureWithLockType


#define soap_new_req__wfs__GetFeatureWithLock soap_new_req_wfs__GetFeatureWithLockType


#define soap_new_set__wfs__GetFeatureWithLock soap_new_set_wfs__GetFeatureWithLockType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__GetFeatureWithLock(struct soap*, const wfs__GetFeatureWithLockType *, const char*, const char*);

inline int soap_write__wfs__GetFeatureWithLock(struct soap *soap, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLock", p->soap_type() == SOAP_TYPE__wfs__GetFeatureWithLock ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__GetFeatureWithLock(struct soap *soap, const char *URL, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLock", p->soap_type() == SOAP_TYPE__wfs__GetFeatureWithLock ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__GetFeatureWithLock(struct soap *soap, const char *URL, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLock", p->soap_type() == SOAP_TYPE__wfs__GetFeatureWithLock ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__GetFeatureWithLock(struct soap *soap, const char *URL, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLock", p->soap_type() == SOAP_TYPE__wfs__GetFeatureWithLock ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__GetFeatureWithLock soap_get_wfs__GetFeatureWithLockType


#define soap_read__wfs__GetFeatureWithLock soap_read_wfs__GetFeatureWithLockType


#define soap_GET__wfs__GetFeatureWithLock soap_GET_wfs__GetFeatureWithLockType


#define soap_POST_recv__wfs__GetFeatureWithLock soap_POST_recv_wfs__GetFeatureWithLockType

#endif
/* _wfs__GetFeature is a typedef synonym of wfs__GetFeatureType */

#ifndef SOAP_TYPE__wfs__GetFeature_DEFINED
#define SOAP_TYPE__wfs__GetFeature_DEFINED

#define soap_default__wfs__GetFeature(soap, a) (a)->wfs__GetFeatureType::soap_default(soap)


#define soap_serialize__wfs__GetFeature(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__GetFeature2s soap_wfs__GetFeatureType2s


#define soap_out__wfs__GetFeature soap_out_wfs__GetFeatureType


#define soap_s2_wfs__GetFeature soap_s2wfs__GetFeatureType


#define soap_in__wfs__GetFeature soap_in_wfs__GetFeatureType


#define soap_instantiate__wfs__GetFeature soap_instantiate_wfs__GetFeatureType


#define soap_new__wfs__GetFeature soap_new_wfs__GetFeatureType


#define soap_new_req__wfs__GetFeature soap_new_req_wfs__GetFeatureType


#define soap_new_set__wfs__GetFeature soap_new_set_wfs__GetFeatureType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__GetFeature(struct soap*, const wfs__GetFeatureType *, const char*, const char*);

inline int soap_write__wfs__GetFeature(struct soap *soap, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeature", p->soap_type() == SOAP_TYPE__wfs__GetFeature ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__GetFeature(struct soap *soap, const char *URL, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeature", p->soap_type() == SOAP_TYPE__wfs__GetFeature ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__GetFeature(struct soap *soap, const char *URL, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeature", p->soap_type() == SOAP_TYPE__wfs__GetFeature ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__GetFeature(struct soap *soap, const char *URL, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeature", p->soap_type() == SOAP_TYPE__wfs__GetFeature ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__GetFeature soap_get_wfs__GetFeatureType


#define soap_read__wfs__GetFeature soap_read_wfs__GetFeatureType


#define soap_GET__wfs__GetFeature soap_GET_wfs__GetFeatureType


#define soap_POST_recv__wfs__GetFeature soap_POST_recv_wfs__GetFeatureType

#endif
/* _wfs__Tuple is a typedef synonym of wfs__TupleType */

#ifndef SOAP_TYPE__wfs__Tuple_DEFINED
#define SOAP_TYPE__wfs__Tuple_DEFINED

#define soap_default__wfs__Tuple(soap, a) (a)->wfs__TupleType::soap_default(soap)


#define soap_serialize__wfs__Tuple(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Tuple2s soap_wfs__TupleType2s


#define soap_out__wfs__Tuple soap_out_wfs__TupleType


#define soap_s2_wfs__Tuple soap_s2wfs__TupleType


#define soap_in__wfs__Tuple soap_in_wfs__TupleType


#define soap_instantiate__wfs__Tuple soap_instantiate_wfs__TupleType


#define soap_new__wfs__Tuple soap_new_wfs__TupleType


#define soap_new_req__wfs__Tuple soap_new_req_wfs__TupleType


#define soap_new_set__wfs__Tuple soap_new_set_wfs__TupleType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Tuple(struct soap*, const wfs__TupleType *, const char*, const char*);

inline int soap_write__wfs__Tuple(struct soap *soap, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Tuple", p->soap_type() == SOAP_TYPE__wfs__Tuple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Tuple(struct soap *soap, const char *URL, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Tuple", p->soap_type() == SOAP_TYPE__wfs__Tuple ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Tuple(struct soap *soap, const char *URL, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Tuple", p->soap_type() == SOAP_TYPE__wfs__Tuple ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Tuple(struct soap *soap, const char *URL, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Tuple", p->soap_type() == SOAP_TYPE__wfs__Tuple ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Tuple soap_get_wfs__TupleType


#define soap_read__wfs__Tuple soap_read_wfs__TupleType


#define soap_GET__wfs__Tuple soap_GET_wfs__TupleType


#define soap_POST_recv__wfs__Tuple soap_POST_recv_wfs__TupleType

#endif
/* _wfs__member is a typedef synonym of wfs__MemberPropertyType */

#ifndef SOAP_TYPE__wfs__member_DEFINED
#define SOAP_TYPE__wfs__member_DEFINED

#define soap_default__wfs__member(soap, a) (a)->wfs__MemberPropertyType::soap_default(soap)


#define soap_serialize__wfs__member(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__member2s soap_wfs__MemberPropertyType2s


#define soap_out__wfs__member soap_out_wfs__MemberPropertyType


#define soap_s2_wfs__member soap_s2wfs__MemberPropertyType


#define soap_in__wfs__member soap_in_wfs__MemberPropertyType


#define soap_instantiate__wfs__member soap_instantiate_wfs__MemberPropertyType


#define soap_new__wfs__member soap_new_wfs__MemberPropertyType


#define soap_new_req__wfs__member soap_new_req_wfs__MemberPropertyType


#define soap_new_set__wfs__member soap_new_set_wfs__MemberPropertyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__member(struct soap*, const wfs__MemberPropertyType *, const char*, const char*);

inline int soap_write__wfs__member(struct soap *soap, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:member", p->soap_type() == SOAP_TYPE__wfs__member ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__member(struct soap *soap, const char *URL, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:member", p->soap_type() == SOAP_TYPE__wfs__member ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__member(struct soap *soap, const char *URL, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:member", p->soap_type() == SOAP_TYPE__wfs__member ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__member(struct soap *soap, const char *URL, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:member", p->soap_type() == SOAP_TYPE__wfs__member ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__member soap_get_wfs__MemberPropertyType


#define soap_read__wfs__member soap_read_wfs__MemberPropertyType


#define soap_GET__wfs__member soap_GET_wfs__MemberPropertyType


#define soap_POST_recv__wfs__member soap_POST_recv_wfs__MemberPropertyType

#endif
/* _wfs__ValueCollection is a typedef synonym of wfs__ValueCollectionType */

#ifndef SOAP_TYPE__wfs__ValueCollection_DEFINED
#define SOAP_TYPE__wfs__ValueCollection_DEFINED

#define soap_default__wfs__ValueCollection(soap, a) (a)->wfs__ValueCollectionType::soap_default(soap)


#define soap_serialize__wfs__ValueCollection(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__ValueCollection2s soap_wfs__ValueCollectionType2s


#define soap_out__wfs__ValueCollection soap_out_wfs__ValueCollectionType


#define soap_s2_wfs__ValueCollection soap_s2wfs__ValueCollectionType


#define soap_in__wfs__ValueCollection soap_in_wfs__ValueCollectionType


#define soap_instantiate__wfs__ValueCollection soap_instantiate_wfs__ValueCollectionType


#define soap_new__wfs__ValueCollection soap_new_wfs__ValueCollectionType


#define soap_new_req__wfs__ValueCollection soap_new_req_wfs__ValueCollectionType


#define soap_new_set__wfs__ValueCollection soap_new_set_wfs__ValueCollectionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__ValueCollection(struct soap*, const wfs__ValueCollectionType *, const char*, const char*);

inline int soap_write__wfs__ValueCollection(struct soap *soap, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollection", p->soap_type() == SOAP_TYPE__wfs__ValueCollection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__ValueCollection(struct soap *soap, const char *URL, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollection", p->soap_type() == SOAP_TYPE__wfs__ValueCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__ValueCollection(struct soap *soap, const char *URL, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollection", p->soap_type() == SOAP_TYPE__wfs__ValueCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__ValueCollection(struct soap *soap, const char *URL, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollection", p->soap_type() == SOAP_TYPE__wfs__ValueCollection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__ValueCollection soap_get_wfs__ValueCollectionType


#define soap_read__wfs__ValueCollection soap_read_wfs__ValueCollectionType


#define soap_GET__wfs__ValueCollection soap_GET_wfs__ValueCollectionType


#define soap_POST_recv__wfs__ValueCollection soap_POST_recv_wfs__ValueCollectionType

#endif
/* _wfs__GetPropertyValue is a typedef synonym of wfs__GetPropertyValueType */

#ifndef SOAP_TYPE__wfs__GetPropertyValue_DEFINED
#define SOAP_TYPE__wfs__GetPropertyValue_DEFINED

#define soap_default__wfs__GetPropertyValue(soap, a) (a)->wfs__GetPropertyValueType::soap_default(soap)


#define soap_serialize__wfs__GetPropertyValue(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__GetPropertyValue2s soap_wfs__GetPropertyValueType2s


#define soap_out__wfs__GetPropertyValue soap_out_wfs__GetPropertyValueType


#define soap_s2_wfs__GetPropertyValue soap_s2wfs__GetPropertyValueType


#define soap_in__wfs__GetPropertyValue soap_in_wfs__GetPropertyValueType


#define soap_instantiate__wfs__GetPropertyValue soap_instantiate_wfs__GetPropertyValueType


#define soap_new__wfs__GetPropertyValue soap_new_wfs__GetPropertyValueType


#define soap_new_req__wfs__GetPropertyValue soap_new_req_wfs__GetPropertyValueType


#define soap_new_set__wfs__GetPropertyValue soap_new_set_wfs__GetPropertyValueType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__GetPropertyValue(struct soap*, const wfs__GetPropertyValueType *, const char*, const char*);

inline int soap_write__wfs__GetPropertyValue(struct soap *soap, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValue", p->soap_type() == SOAP_TYPE__wfs__GetPropertyValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__GetPropertyValue(struct soap *soap, const char *URL, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValue", p->soap_type() == SOAP_TYPE__wfs__GetPropertyValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__GetPropertyValue(struct soap *soap, const char *URL, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValue", p->soap_type() == SOAP_TYPE__wfs__GetPropertyValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__GetPropertyValue(struct soap *soap, const char *URL, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValue", p->soap_type() == SOAP_TYPE__wfs__GetPropertyValue ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__GetPropertyValue soap_get_wfs__GetPropertyValueType


#define soap_read__wfs__GetPropertyValue soap_read_wfs__GetPropertyValueType


#define soap_GET__wfs__GetPropertyValue soap_GET_wfs__GetPropertyValueType


#define soap_POST_recv__wfs__GetPropertyValue soap_POST_recv_wfs__GetPropertyValueType

#endif
/* _wfs__DescribeFeatureType is a typedef synonym of wfs__DescribeFeatureTypeType */

#ifndef SOAP_TYPE__wfs__DescribeFeatureType_DEFINED
#define SOAP_TYPE__wfs__DescribeFeatureType_DEFINED

#define soap_default__wfs__DescribeFeatureType(soap, a) (a)->wfs__DescribeFeatureTypeType::soap_default(soap)


#define soap_serialize__wfs__DescribeFeatureType(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__DescribeFeatureType2s soap_wfs__DescribeFeatureTypeType2s


#define soap_out__wfs__DescribeFeatureType soap_out_wfs__DescribeFeatureTypeType


#define soap_s2_wfs__DescribeFeatureType soap_s2wfs__DescribeFeatureTypeType


#define soap_in__wfs__DescribeFeatureType soap_in_wfs__DescribeFeatureTypeType


#define soap_instantiate__wfs__DescribeFeatureType soap_instantiate_wfs__DescribeFeatureTypeType


#define soap_new__wfs__DescribeFeatureType soap_new_wfs__DescribeFeatureTypeType


#define soap_new_req__wfs__DescribeFeatureType soap_new_req_wfs__DescribeFeatureTypeType


#define soap_new_set__wfs__DescribeFeatureType soap_new_set_wfs__DescribeFeatureTypeType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__DescribeFeatureType(struct soap*, const wfs__DescribeFeatureTypeType *, const char*, const char*);

inline int soap_write__wfs__DescribeFeatureType(struct soap *soap, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureType", p->soap_type() == SOAP_TYPE__wfs__DescribeFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__DescribeFeatureType(struct soap *soap, const char *URL, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureType", p->soap_type() == SOAP_TYPE__wfs__DescribeFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__DescribeFeatureType(struct soap *soap, const char *URL, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureType", p->soap_type() == SOAP_TYPE__wfs__DescribeFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__DescribeFeatureType(struct soap *soap, const char *URL, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureType", p->soap_type() == SOAP_TYPE__wfs__DescribeFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__DescribeFeatureType soap_get_wfs__DescribeFeatureTypeType


#define soap_read__wfs__DescribeFeatureType soap_read_wfs__DescribeFeatureTypeType


#define soap_GET__wfs__DescribeFeatureType soap_GET_wfs__DescribeFeatureTypeType


#define soap_POST_recv__wfs__DescribeFeatureType soap_POST_recv_wfs__DescribeFeatureTypeType

#endif
/* _wfs__Value is a typedef synonym of xsd__anyType */

#ifndef SOAP_TYPE__wfs__Value_DEFINED
#define SOAP_TYPE__wfs__Value_DEFINED

#define soap_default__wfs__Value(soap, a) (a)->xsd__anyType::soap_default(soap)


#define soap_serialize__wfs__Value(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Value2s soap_xsd__anyType2s


#define soap_out__wfs__Value soap_out_xsd__anyType


#define soap_s2_wfs__Value soap_s2xsd__anyType


#define soap_in__wfs__Value soap_in_xsd__anyType


#define soap_instantiate__wfs__Value soap_instantiate_xsd__anyType


#define soap_new__wfs__Value soap_new_xsd__anyType


#define soap_new_req__wfs__Value soap_new_req_xsd__anyType


#define soap_new_set__wfs__Value soap_new_set_xsd__anyType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Value(struct soap*, const xsd__anyType *, const char*, const char*);

inline int soap_write__wfs__Value(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Value", p->soap_type() == SOAP_TYPE__wfs__Value ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Value(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Value", p->soap_type() == SOAP_TYPE__wfs__Value ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Value(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Value", p->soap_type() == SOAP_TYPE__wfs__Value ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Value(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Value", p->soap_type() == SOAP_TYPE__wfs__Value ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Value soap_get_xsd__anyType


#define soap_read__wfs__Value soap_read_xsd__anyType


#define soap_GET__wfs__Value soap_GET_xsd__anyType


#define soap_POST_recv__wfs__Value soap_POST_recv_xsd__anyType

#endif
/* _wfs__ValueList is a typedef synonym of wfs__ValueListType */

#ifndef SOAP_TYPE__wfs__ValueList_DEFINED
#define SOAP_TYPE__wfs__ValueList_DEFINED

#define soap_default__wfs__ValueList(soap, a) (a)->wfs__ValueListType::soap_default(soap)


#define soap_serialize__wfs__ValueList(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__ValueList2s soap_wfs__ValueListType2s


#define soap_out__wfs__ValueList soap_out_wfs__ValueListType


#define soap_s2_wfs__ValueList soap_s2wfs__ValueListType


#define soap_in__wfs__ValueList soap_in_wfs__ValueListType


#define soap_instantiate__wfs__ValueList soap_instantiate_wfs__ValueListType


#define soap_new__wfs__ValueList soap_new_wfs__ValueListType


#define soap_new_req__wfs__ValueList soap_new_req_wfs__ValueListType


#define soap_new_set__wfs__ValueList soap_new_set_wfs__ValueListType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__ValueList(struct soap*, const wfs__ValueListType *, const char*, const char*);

inline int soap_write__wfs__ValueList(struct soap *soap, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueList", p->soap_type() == SOAP_TYPE__wfs__ValueList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__ValueList(struct soap *soap, const char *URL, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueList", p->soap_type() == SOAP_TYPE__wfs__ValueList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__ValueList(struct soap *soap, const char *URL, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueList", p->soap_type() == SOAP_TYPE__wfs__ValueList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__ValueList(struct soap *soap, const char *URL, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueList", p->soap_type() == SOAP_TYPE__wfs__ValueList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__ValueList soap_get_wfs__ValueListType


#define soap_read__wfs__ValueList soap_read_wfs__ValueListType


#define soap_GET__wfs__ValueList soap_GET_wfs__ValueListType


#define soap_POST_recv__wfs__ValueList soap_POST_recv_wfs__ValueListType

#endif
/* _wfs__Element is a typedef synonym of wfs__ElementType */

#ifndef SOAP_TYPE__wfs__Element_DEFINED
#define SOAP_TYPE__wfs__Element_DEFINED

#define soap_default__wfs__Element(soap, a) (a)->wfs__ElementType::soap_default(soap)


#define soap_serialize__wfs__Element(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Element2s soap_wfs__ElementType2s


#define soap_out__wfs__Element soap_out_wfs__ElementType


#define soap_s2_wfs__Element soap_s2wfs__ElementType


#define soap_in__wfs__Element soap_in_wfs__ElementType


#define soap_instantiate__wfs__Element soap_instantiate_wfs__ElementType


#define soap_new__wfs__Element soap_new_wfs__ElementType


#define soap_new_req__wfs__Element soap_new_req_wfs__ElementType


#define soap_new_set__wfs__Element soap_new_set_wfs__ElementType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Element(struct soap*, const wfs__ElementType *, const char*, const char*);

inline int soap_write__wfs__Element(struct soap *soap, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Element", p->soap_type() == SOAP_TYPE__wfs__Element ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Element(struct soap *soap, const char *URL, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Element", p->soap_type() == SOAP_TYPE__wfs__Element ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Element(struct soap *soap, const char *URL, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Element", p->soap_type() == SOAP_TYPE__wfs__Element ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Element(struct soap *soap, const char *URL, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Element", p->soap_type() == SOAP_TYPE__wfs__Element ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Element soap_get_wfs__ElementType


#define soap_read__wfs__Element soap_read_wfs__ElementType


#define soap_GET__wfs__Element soap_GET_wfs__ElementType


#define soap_POST_recv__wfs__Element soap_POST_recv_wfs__ElementType

#endif
/* _wfs__FeatureTypeList is a typedef synonym of wfs__FeatureTypeListType */

#ifndef SOAP_TYPE__wfs__FeatureTypeList_DEFINED
#define SOAP_TYPE__wfs__FeatureTypeList_DEFINED

#define soap_default__wfs__FeatureTypeList(soap, a) (a)->wfs__FeatureTypeListType::soap_default(soap)


#define soap_serialize__wfs__FeatureTypeList(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__FeatureTypeList2s soap_wfs__FeatureTypeListType2s


#define soap_out__wfs__FeatureTypeList soap_out_wfs__FeatureTypeListType


#define soap_s2_wfs__FeatureTypeList soap_s2wfs__FeatureTypeListType


#define soap_in__wfs__FeatureTypeList soap_in_wfs__FeatureTypeListType


#define soap_instantiate__wfs__FeatureTypeList soap_instantiate_wfs__FeatureTypeListType


#define soap_new__wfs__FeatureTypeList soap_new_wfs__FeatureTypeListType


#define soap_new_req__wfs__FeatureTypeList soap_new_req_wfs__FeatureTypeListType


#define soap_new_set__wfs__FeatureTypeList soap_new_set_wfs__FeatureTypeListType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__FeatureTypeList(struct soap*, const wfs__FeatureTypeListType *, const char*, const char*);

inline int soap_write__wfs__FeatureTypeList(struct soap *soap, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeList", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__FeatureTypeList(struct soap *soap, const char *URL, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeList", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__FeatureTypeList(struct soap *soap, const char *URL, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeList", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__FeatureTypeList(struct soap *soap, const char *URL, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeList", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__FeatureTypeList soap_get_wfs__FeatureTypeListType


#define soap_read__wfs__FeatureTypeList soap_read_wfs__FeatureTypeListType


#define soap_GET__wfs__FeatureTypeList soap_GET_wfs__FeatureTypeListType


#define soap_POST_recv__wfs__FeatureTypeList soap_POST_recv_wfs__FeatureTypeListType

#endif
/* _wfs__WFS_x005fCapabilities is a typedef synonym of wfs__WFS_x005fCapabilitiesType */

#ifndef SOAP_TYPE__wfs__WFS_x005fCapabilities_DEFINED
#define SOAP_TYPE__wfs__WFS_x005fCapabilities_DEFINED

#define soap_default__wfs__WFS_x005fCapabilities(soap, a) (a)->wfs__WFS_x005fCapabilitiesType::soap_default(soap)


#define soap_serialize__wfs__WFS_x005fCapabilities(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__WFS_x005fCapabilities2s soap_wfs__WFS_x005fCapabilitiesType2s


#define soap_out__wfs__WFS_x005fCapabilities soap_out_wfs__WFS_x005fCapabilitiesType


#define soap_s2_wfs__WFS_x005fCapabilities soap_s2wfs__WFS_x005fCapabilitiesType


#define soap_in__wfs__WFS_x005fCapabilities soap_in_wfs__WFS_x005fCapabilitiesType


#define soap_instantiate__wfs__WFS_x005fCapabilities soap_instantiate_wfs__WFS_x005fCapabilitiesType


#define soap_new__wfs__WFS_x005fCapabilities soap_new_wfs__WFS_x005fCapabilitiesType


#define soap_new_req__wfs__WFS_x005fCapabilities soap_new_req_wfs__WFS_x005fCapabilitiesType


#define soap_new_set__wfs__WFS_x005fCapabilities soap_new_set_wfs__WFS_x005fCapabilitiesType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__WFS_x005fCapabilities(struct soap*, const wfs__WFS_x005fCapabilitiesType *, const char*, const char*);

inline int soap_write__wfs__WFS_x005fCapabilities(struct soap *soap, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_Capabilities", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__WFS_x005fCapabilities(struct soap *soap, const char *URL, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_Capabilities", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__WFS_x005fCapabilities(struct soap *soap, const char *URL, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_Capabilities", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__WFS_x005fCapabilities(struct soap *soap, const char *URL, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_Capabilities", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__WFS_x005fCapabilities soap_get_wfs__WFS_x005fCapabilitiesType


#define soap_read__wfs__WFS_x005fCapabilities soap_read_wfs__WFS_x005fCapabilitiesType


#define soap_GET__wfs__WFS_x005fCapabilities soap_GET_wfs__WFS_x005fCapabilitiesType


#define soap_POST_recv__wfs__WFS_x005fCapabilities soap_POST_recv_wfs__WFS_x005fCapabilitiesType

#endif
/* _wfs__GetCapabilities is a typedef synonym of wfs__GetCapabilitiesType */

#ifndef SOAP_TYPE__wfs__GetCapabilities_DEFINED
#define SOAP_TYPE__wfs__GetCapabilities_DEFINED

#define soap_default__wfs__GetCapabilities(soap, a) (a)->wfs__GetCapabilitiesType::soap_default(soap)


#define soap_serialize__wfs__GetCapabilities(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__GetCapabilities2s soap_wfs__GetCapabilitiesType2s


#define soap_out__wfs__GetCapabilities soap_out_wfs__GetCapabilitiesType


#define soap_s2_wfs__GetCapabilities soap_s2wfs__GetCapabilitiesType


#define soap_in__wfs__GetCapabilities soap_in_wfs__GetCapabilitiesType


#define soap_instantiate__wfs__GetCapabilities soap_instantiate_wfs__GetCapabilitiesType


#define soap_new__wfs__GetCapabilities soap_new_wfs__GetCapabilitiesType


#define soap_new_req__wfs__GetCapabilities soap_new_req_wfs__GetCapabilitiesType


#define soap_new_set__wfs__GetCapabilities soap_new_set_wfs__GetCapabilitiesType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__GetCapabilities(struct soap*, const wfs__GetCapabilitiesType *, const char*, const char*);

inline int soap_write__wfs__GetCapabilities(struct soap *soap, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilities", p->soap_type() == SOAP_TYPE__wfs__GetCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__GetCapabilities(struct soap *soap, const char *URL, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilities", p->soap_type() == SOAP_TYPE__wfs__GetCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__GetCapabilities(struct soap *soap, const char *URL, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilities", p->soap_type() == SOAP_TYPE__wfs__GetCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__GetCapabilities(struct soap *soap, const char *URL, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilities", p->soap_type() == SOAP_TYPE__wfs__GetCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__GetCapabilities soap_get_wfs__GetCapabilitiesType


#define soap_read__wfs__GetCapabilities soap_read_wfs__GetCapabilitiesType


#define soap_GET__wfs__GetCapabilities soap_GET_wfs__GetCapabilitiesType


#define soap_POST_recv__wfs__GetCapabilities soap_POST_recv_wfs__GetCapabilitiesType

#endif
/* _wfs__StoredQuery is a typedef synonym of wfs__StoredQueryType */

#ifndef SOAP_TYPE__wfs__StoredQuery_DEFINED
#define SOAP_TYPE__wfs__StoredQuery_DEFINED

#define soap_default__wfs__StoredQuery(soap, a) (a)->wfs__StoredQueryType::soap_default(soap)


#define soap_serialize__wfs__StoredQuery(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__StoredQuery2s soap_wfs__StoredQueryType2s


#define soap_out__wfs__StoredQuery soap_out_wfs__StoredQueryType


#define soap_s2_wfs__StoredQuery soap_s2wfs__StoredQueryType


#define soap_in__wfs__StoredQuery soap_in_wfs__StoredQueryType


#define soap_instantiate__wfs__StoredQuery soap_instantiate_wfs__StoredQueryType


#define soap_new__wfs__StoredQuery soap_new_wfs__StoredQueryType


#define soap_new_req__wfs__StoredQuery soap_new_req_wfs__StoredQueryType


#define soap_new_set__wfs__StoredQuery soap_new_set_wfs__StoredQueryType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__StoredQuery(struct soap*, const wfs__StoredQueryType *, const char*, const char*);

inline int soap_write__wfs__StoredQuery(struct soap *soap, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQuery", p->soap_type() == SOAP_TYPE__wfs__StoredQuery ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__StoredQuery(struct soap *soap, const char *URL, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQuery", p->soap_type() == SOAP_TYPE__wfs__StoredQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__StoredQuery(struct soap *soap, const char *URL, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQuery", p->soap_type() == SOAP_TYPE__wfs__StoredQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__StoredQuery(struct soap *soap, const char *URL, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQuery", p->soap_type() == SOAP_TYPE__wfs__StoredQuery ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__StoredQuery soap_get_wfs__StoredQueryType


#define soap_read__wfs__StoredQuery soap_read_wfs__StoredQueryType


#define soap_GET__wfs__StoredQuery soap_GET_wfs__StoredQueryType


#define soap_POST_recv__wfs__StoredQuery soap_POST_recv_wfs__StoredQueryType

#endif
/* _wfs__Query is a typedef synonym of wfs__QueryType */

#ifndef SOAP_TYPE__wfs__Query_DEFINED
#define SOAP_TYPE__wfs__Query_DEFINED

#define soap_default__wfs__Query(soap, a) (a)->wfs__QueryType::soap_default(soap)


#define soap_serialize__wfs__Query(soap, a) (a)->soap_serialize(soap)


#define soap__wfs__Query2s soap_wfs__QueryType2s


#define soap_out__wfs__Query soap_out_wfs__QueryType


#define soap_s2_wfs__Query soap_s2wfs__QueryType


#define soap_in__wfs__Query soap_in_wfs__QueryType


#define soap_instantiate__wfs__Query soap_instantiate_wfs__QueryType


#define soap_new__wfs__Query soap_new_wfs__QueryType


#define soap_new_req__wfs__Query soap_new_req_wfs__QueryType


#define soap_new_set__wfs__Query soap_new_set_wfs__QueryType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wfs__Query(struct soap*, const wfs__QueryType *, const char*, const char*);

inline int soap_write__wfs__Query(struct soap *soap, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Query", p->soap_type() == SOAP_TYPE__wfs__Query ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Query(struct soap *soap, const char *URL, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Query", p->soap_type() == SOAP_TYPE__wfs__Query ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Query(struct soap *soap, const char *URL, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Query", p->soap_type() == SOAP_TYPE__wfs__Query ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Query(struct soap *soap, const char *URL, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Query", p->soap_type() == SOAP_TYPE__wfs__Query ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wfs__Query soap_get_wfs__QueryType


#define soap_read__wfs__Query soap_read_wfs__QueryType


#define soap_GET__wfs__Query soap_GET_wfs__QueryType


#define soap_POST_recv__wfs__Query soap_POST_recv_wfs__QueryType

#endif

#ifndef SOAP_TYPE___ows__union_ReferenceGroupType_DEFINED
#define SOAP_TYPE___ows__union_ReferenceGroupType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ows__union_ReferenceGroupType(struct soap*, const char*, int, const __ows__union_ReferenceGroupType *, const char*);
SOAP_FMAC3 __ows__union_ReferenceGroupType * SOAP_FMAC4 soap_in___ows__union_ReferenceGroupType(struct soap*, const char*, __ows__union_ReferenceGroupType *, const char*);
SOAP_FMAC1 __ows__union_ReferenceGroupType * SOAP_FMAC2 soap_instantiate___ows__union_ReferenceGroupType(struct soap*, int, const char*, const char*, size_t*);

inline __ows__union_ReferenceGroupType * soap_new___ows__union_ReferenceGroupType(struct soap *soap, int n = -1)
{
	return soap_instantiate___ows__union_ReferenceGroupType(soap, n, NULL, NULL, NULL);
}

inline __ows__union_ReferenceGroupType * soap_new_req___ows__union_ReferenceGroupType(
	struct soap *soap,
	const union _ows__union_ReferenceGroupType& union_ReferenceGroupType)
{
	__ows__union_ReferenceGroupType *_p = ::soap_new___ows__union_ReferenceGroupType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_ReferenceGroupType::union_ReferenceGroupType = union_ReferenceGroupType;
	}
	return _p;
}

inline __ows__union_ReferenceGroupType * soap_new_set___ows__union_ReferenceGroupType(
	struct soap *soap,
	int __unionAbstractReferenceBase,
	const union _ows__union_ReferenceGroupType& union_ReferenceGroupType)
{
	__ows__union_ReferenceGroupType *_p = ::soap_new___ows__union_ReferenceGroupType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_ReferenceGroupType::__unionAbstractReferenceBase = __unionAbstractReferenceBase;
		_p->__ows__union_ReferenceGroupType::union_ReferenceGroupType = union_ReferenceGroupType;
	}
	return _p;
}

inline int soap_write___ows__union_ReferenceGroupType(struct soap *soap, __ows__union_ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-ReferenceGroupType", p->soap_type() == SOAP_TYPE___ows__union_ReferenceGroupType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ows__union_ReferenceGroupType(struct soap *soap, const char *URL, __ows__union_ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-ReferenceGroupType", p->soap_type() == SOAP_TYPE___ows__union_ReferenceGroupType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ows__union_ReferenceGroupType(struct soap *soap, const char *URL, __ows__union_ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-ReferenceGroupType", p->soap_type() == SOAP_TYPE___ows__union_ReferenceGroupType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ows__union_ReferenceGroupType(struct soap *soap, const char *URL, __ows__union_ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-ReferenceGroupType", p->soap_type() == SOAP_TYPE___ows__union_ReferenceGroupType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __ows__union_ReferenceGroupType * SOAP_FMAC4 soap_get___ows__union_ReferenceGroupType(struct soap*, __ows__union_ReferenceGroupType *, const char*, const char*);

inline int soap_read___ows__union_ReferenceGroupType(struct soap *soap, __ows__union_ReferenceGroupType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___ows__union_ReferenceGroupType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ows__union_ReferenceGroupType(struct soap *soap, const char *URL, __ows__union_ReferenceGroupType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ows__union_ReferenceGroupType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ows__union_ReferenceGroupType(struct soap *soap, __ows__union_ReferenceGroupType *p)
{
	if (::soap_read___ows__union_ReferenceGroupType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ows__union_IdentificationType__DEFINED
#define SOAP_TYPE___ows__union_IdentificationType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ows__union_IdentificationType_(struct soap*, const char*, int, const __ows__union_IdentificationType_ *, const char*);
SOAP_FMAC3 __ows__union_IdentificationType_ * SOAP_FMAC4 soap_in___ows__union_IdentificationType_(struct soap*, const char*, __ows__union_IdentificationType_ *, const char*);
SOAP_FMAC1 __ows__union_IdentificationType_ * SOAP_FMAC2 soap_instantiate___ows__union_IdentificationType_(struct soap*, int, const char*, const char*, size_t*);

inline __ows__union_IdentificationType_ * soap_new___ows__union_IdentificationType_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ows__union_IdentificationType_(soap, n, NULL, NULL, NULL);
}

inline __ows__union_IdentificationType_ * soap_new_req___ows__union_IdentificationType_(
	struct soap *soap,
	const union _ows__union_IdentificationType_& union_IdentificationType_)
{
	__ows__union_IdentificationType_ *_p = ::soap_new___ows__union_IdentificationType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_IdentificationType_::union_IdentificationType_ = union_IdentificationType_;
	}
	return _p;
}

inline __ows__union_IdentificationType_ * soap_new_set___ows__union_IdentificationType_(
	struct soap *soap,
	int __unionAvailableCRS,
	const union _ows__union_IdentificationType_& union_IdentificationType_)
{
	__ows__union_IdentificationType_ *_p = ::soap_new___ows__union_IdentificationType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_IdentificationType_::__unionAvailableCRS = __unionAvailableCRS;
		_p->__ows__union_IdentificationType_::union_IdentificationType_ = union_IdentificationType_;
	}
	return _p;
}

inline int soap_write___ows__union_IdentificationType_(struct soap *soap, __ows__union_IdentificationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ows__union_IdentificationType_(struct soap *soap, const char *URL, __ows__union_IdentificationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ows__union_IdentificationType_(struct soap *soap, const char *URL, __ows__union_IdentificationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ows__union_IdentificationType_(struct soap *soap, const char *URL, __ows__union_IdentificationType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __ows__union_IdentificationType_ * SOAP_FMAC4 soap_get___ows__union_IdentificationType_(struct soap*, __ows__union_IdentificationType_ *, const char*, const char*);

inline int soap_read___ows__union_IdentificationType_(struct soap *soap, __ows__union_IdentificationType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___ows__union_IdentificationType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ows__union_IdentificationType_(struct soap *soap, const char *URL, __ows__union_IdentificationType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ows__union_IdentificationType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ows__union_IdentificationType_(struct soap *soap, __ows__union_IdentificationType_ *p)
{
	if (::soap_read___ows__union_IdentificationType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ows__union_IdentificationType_DEFINED
#define SOAP_TYPE___ows__union_IdentificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ows__union_IdentificationType(struct soap*, const char*, int, const __ows__union_IdentificationType *, const char*);
SOAP_FMAC3 __ows__union_IdentificationType * SOAP_FMAC4 soap_in___ows__union_IdentificationType(struct soap*, const char*, __ows__union_IdentificationType *, const char*);
SOAP_FMAC1 __ows__union_IdentificationType * SOAP_FMAC2 soap_instantiate___ows__union_IdentificationType(struct soap*, int, const char*, const char*, size_t*);

inline __ows__union_IdentificationType * soap_new___ows__union_IdentificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate___ows__union_IdentificationType(soap, n, NULL, NULL, NULL);
}

inline __ows__union_IdentificationType * soap_new_req___ows__union_IdentificationType(
	struct soap *soap,
	const union _ows__union_IdentificationType& union_IdentificationType)
{
	__ows__union_IdentificationType *_p = ::soap_new___ows__union_IdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_IdentificationType::union_IdentificationType = union_IdentificationType;
	}
	return _p;
}

inline __ows__union_IdentificationType * soap_new_set___ows__union_IdentificationType(
	struct soap *soap,
	int __unionBoundingBox,
	const union _ows__union_IdentificationType& union_IdentificationType)
{
	__ows__union_IdentificationType *_p = ::soap_new___ows__union_IdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_IdentificationType::__unionBoundingBox = __unionBoundingBox;
		_p->__ows__union_IdentificationType::union_IdentificationType = union_IdentificationType;
	}
	return _p;
}

inline int soap_write___ows__union_IdentificationType(struct soap *soap, __ows__union_IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ows__union_IdentificationType(struct soap *soap, const char *URL, __ows__union_IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ows__union_IdentificationType(struct soap *soap, const char *URL, __ows__union_IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ows__union_IdentificationType(struct soap *soap, const char *URL, __ows__union_IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-IdentificationType", p->soap_type() == SOAP_TYPE___ows__union_IdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __ows__union_IdentificationType * SOAP_FMAC4 soap_get___ows__union_IdentificationType(struct soap*, __ows__union_IdentificationType *, const char*, const char*);

inline int soap_read___ows__union_IdentificationType(struct soap *soap, __ows__union_IdentificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___ows__union_IdentificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ows__union_IdentificationType(struct soap *soap, const char *URL, __ows__union_IdentificationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ows__union_IdentificationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ows__union_IdentificationType(struct soap *soap, __ows__union_IdentificationType *p)
{
	if (::soap_read___ows__union_IdentificationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_UnaryLogicOpType________DEFINED
#define SOAP_TYPE___fes__union_UnaryLogicOpType________DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_UnaryLogicOpType_______(struct soap*, const char*, int, const __fes__union_UnaryLogicOpType_______ *, const char*);
SOAP_FMAC3 __fes__union_UnaryLogicOpType_______ * SOAP_FMAC4 soap_in___fes__union_UnaryLogicOpType_______(struct soap*, const char*, __fes__union_UnaryLogicOpType_______ *, const char*);
SOAP_FMAC1 __fes__union_UnaryLogicOpType_______ * SOAP_FMAC2 soap_instantiate___fes__union_UnaryLogicOpType_______(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_UnaryLogicOpType_______ * soap_new___fes__union_UnaryLogicOpType_______(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_UnaryLogicOpType_______(soap, n, NULL, NULL, NULL);
}

inline __fes__union_UnaryLogicOpType_______ * soap_new_req___fes__union_UnaryLogicOpType_______(
	struct soap *soap,
	const union _fes__union_UnaryLogicOpType_______& union_UnaryLogicOpType_______)
{
	__fes__union_UnaryLogicOpType_______ *_p = ::soap_new___fes__union_UnaryLogicOpType_______(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_UnaryLogicOpType_______::union_UnaryLogicOpType_______ = union_UnaryLogicOpType_______;
	}
	return _p;
}

inline __fes__union_UnaryLogicOpType_______ * soap_new_set___fes__union_UnaryLogicOpType_______(
	struct soap *soap,
	int __union_x005fId,
	const union _fes__union_UnaryLogicOpType_______& union_UnaryLogicOpType_______)
{
	__fes__union_UnaryLogicOpType_______ *_p = ::soap_new___fes__union_UnaryLogicOpType_______(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_UnaryLogicOpType_______::__union_x005fId = __union_x005fId;
		_p->__fes__union_UnaryLogicOpType_______::union_UnaryLogicOpType_______ = union_UnaryLogicOpType_______;
	}
	return _p;
}

inline int soap_write___fes__union_UnaryLogicOpType_______(struct soap *soap, __fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-UnaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_UnaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-UnaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_UnaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-UnaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_UnaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-UnaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_UnaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_UnaryLogicOpType_______ * SOAP_FMAC4 soap_get___fes__union_UnaryLogicOpType_______(struct soap*, __fes__union_UnaryLogicOpType_______ *, const char*, const char*);

inline int soap_read___fes__union_UnaryLogicOpType_______(struct soap *soap, __fes__union_UnaryLogicOpType_______ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_UnaryLogicOpType_______(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_UnaryLogicOpType_______ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_UnaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_UnaryLogicOpType_______(struct soap *soap, __fes__union_UnaryLogicOpType_______ *p)
{
	if (::soap_read___fes__union_UnaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_BinaryLogicOpType________DEFINED
#define SOAP_TYPE___fes__union_BinaryLogicOpType________DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_BinaryLogicOpType_______(struct soap*, const char*, int, const __fes__union_BinaryLogicOpType_______ *, const char*);
SOAP_FMAC3 __fes__union_BinaryLogicOpType_______ * SOAP_FMAC4 soap_in___fes__union_BinaryLogicOpType_______(struct soap*, const char*, __fes__union_BinaryLogicOpType_______ *, const char*);
SOAP_FMAC1 __fes__union_BinaryLogicOpType_______ * SOAP_FMAC2 soap_instantiate___fes__union_BinaryLogicOpType_______(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_BinaryLogicOpType_______ * soap_new___fes__union_BinaryLogicOpType_______(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_BinaryLogicOpType_______(soap, n, NULL, NULL, NULL);
}

inline __fes__union_BinaryLogicOpType_______ * soap_new_req___fes__union_BinaryLogicOpType_______(
	struct soap *soap,
	const union _fes__union_BinaryLogicOpType_______& union_BinaryLogicOpType_______)
{
	__fes__union_BinaryLogicOpType_______ *_p = ::soap_new___fes__union_BinaryLogicOpType_______(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryLogicOpType_______::union_BinaryLogicOpType_______ = union_BinaryLogicOpType_______;
	}
	return _p;
}

inline __fes__union_BinaryLogicOpType_______ * soap_new_set___fes__union_BinaryLogicOpType_______(
	struct soap *soap,
	int __union_x005fId,
	const union _fes__union_BinaryLogicOpType_______& union_BinaryLogicOpType_______)
{
	__fes__union_BinaryLogicOpType_______ *_p = ::soap_new___fes__union_BinaryLogicOpType_______(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryLogicOpType_______::__union_x005fId = __union_x005fId;
		_p->__fes__union_BinaryLogicOpType_______::union_BinaryLogicOpType_______ = union_BinaryLogicOpType_______;
	}
	return _p;
}

inline int soap_write___fes__union_BinaryLogicOpType_______(struct soap *soap, __fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType_______ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_BinaryLogicOpType_______ * SOAP_FMAC4 soap_get___fes__union_BinaryLogicOpType_______(struct soap*, __fes__union_BinaryLogicOpType_______ *, const char*, const char*);

inline int soap_read___fes__union_BinaryLogicOpType_______(struct soap *soap, __fes__union_BinaryLogicOpType_______ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_BinaryLogicOpType_______(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType_______ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_BinaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_BinaryLogicOpType_______(struct soap *soap, __fes__union_BinaryLogicOpType_______ *p)
{
	if (::soap_read___fes__union_BinaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_BinaryLogicOpType_DEFINED
#define SOAP_TYPE___fes__union_BinaryLogicOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_BinaryLogicOpType(struct soap*, const char*, int, const __fes__union_BinaryLogicOpType *, const char*);
SOAP_FMAC3 __fes__union_BinaryLogicOpType * SOAP_FMAC4 soap_in___fes__union_BinaryLogicOpType(struct soap*, const char*, __fes__union_BinaryLogicOpType *, const char*);
SOAP_FMAC1 __fes__union_BinaryLogicOpType * SOAP_FMAC2 soap_instantiate___fes__union_BinaryLogicOpType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_BinaryLogicOpType * soap_new___fes__union_BinaryLogicOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_BinaryLogicOpType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_BinaryLogicOpType * soap_new_req___fes__union_BinaryLogicOpType(
	struct soap *soap,
	const union _fes__union_BinaryLogicOpType_& union_BinaryLogicOpType_)
{
	__fes__union_BinaryLogicOpType *_p = ::soap_new___fes__union_BinaryLogicOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryLogicOpType::union_BinaryLogicOpType_ = union_BinaryLogicOpType_;
	}
	return _p;
}

inline __fes__union_BinaryLogicOpType * soap_new_set___fes__union_BinaryLogicOpType(
	struct soap *soap,
	int __union_BinaryLogicOpType_,
	const union _fes__union_BinaryLogicOpType_& union_BinaryLogicOpType_)
{
	__fes__union_BinaryLogicOpType *_p = ::soap_new___fes__union_BinaryLogicOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryLogicOpType::__union_BinaryLogicOpType_ = __union_BinaryLogicOpType_;
		_p->__fes__union_BinaryLogicOpType::union_BinaryLogicOpType_ = union_BinaryLogicOpType_;
	}
	return _p;
}

inline int soap_write___fes__union_BinaryLogicOpType(struct soap *soap, __fes__union_BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_BinaryLogicOpType(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_BinaryLogicOpType(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_BinaryLogicOpType(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryLogicOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryLogicOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_BinaryLogicOpType * SOAP_FMAC4 soap_get___fes__union_BinaryLogicOpType(struct soap*, __fes__union_BinaryLogicOpType *, const char*, const char*);

inline int soap_read___fes__union_BinaryLogicOpType(struct soap *soap, __fes__union_BinaryLogicOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_BinaryLogicOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_BinaryLogicOpType(struct soap *soap, const char *URL, __fes__union_BinaryLogicOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_BinaryLogicOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_BinaryLogicOpType(struct soap *soap, __fes__union_BinaryLogicOpType *p)
{
	if (::soap_read___fes__union_BinaryLogicOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_DistanceBufferType_DEFINED
#define SOAP_TYPE___fes__union_DistanceBufferType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_DistanceBufferType(struct soap*, const char*, int, const __fes__union_DistanceBufferType *, const char*);
SOAP_FMAC3 __fes__union_DistanceBufferType * SOAP_FMAC4 soap_in___fes__union_DistanceBufferType(struct soap*, const char*, __fes__union_DistanceBufferType *, const char*);
SOAP_FMAC1 __fes__union_DistanceBufferType * SOAP_FMAC2 soap_instantiate___fes__union_DistanceBufferType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_DistanceBufferType * soap_new___fes__union_DistanceBufferType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_DistanceBufferType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_DistanceBufferType * soap_new_req___fes__union_DistanceBufferType(
	struct soap *soap,
	const union _fes__union_DistanceBufferType& union_DistanceBufferType)
{
	__fes__union_DistanceBufferType *_p = ::soap_new___fes__union_DistanceBufferType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_DistanceBufferType::union_DistanceBufferType = union_DistanceBufferType;
	}
	return _p;
}

inline __fes__union_DistanceBufferType * soap_new_set___fes__union_DistanceBufferType(
	struct soap *soap,
	int __union_DistanceBufferType,
	const union _fes__union_DistanceBufferType& union_DistanceBufferType)
{
	__fes__union_DistanceBufferType *_p = ::soap_new___fes__union_DistanceBufferType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_DistanceBufferType::__union_DistanceBufferType = __union_DistanceBufferType;
		_p->__fes__union_DistanceBufferType::union_DistanceBufferType = union_DistanceBufferType;
	}
	return _p;
}

inline int soap_write___fes__union_DistanceBufferType(struct soap *soap, __fes__union_DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-DistanceBufferType", p->soap_type() == SOAP_TYPE___fes__union_DistanceBufferType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_DistanceBufferType(struct soap *soap, const char *URL, __fes__union_DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-DistanceBufferType", p->soap_type() == SOAP_TYPE___fes__union_DistanceBufferType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_DistanceBufferType(struct soap *soap, const char *URL, __fes__union_DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-DistanceBufferType", p->soap_type() == SOAP_TYPE___fes__union_DistanceBufferType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_DistanceBufferType(struct soap *soap, const char *URL, __fes__union_DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-DistanceBufferType", p->soap_type() == SOAP_TYPE___fes__union_DistanceBufferType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_DistanceBufferType * SOAP_FMAC4 soap_get___fes__union_DistanceBufferType(struct soap*, __fes__union_DistanceBufferType *, const char*, const char*);

inline int soap_read___fes__union_DistanceBufferType(struct soap *soap, __fes__union_DistanceBufferType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_DistanceBufferType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_DistanceBufferType(struct soap *soap, const char *URL, __fes__union_DistanceBufferType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_DistanceBufferType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_DistanceBufferType(struct soap *soap, __fes__union_DistanceBufferType *p)
{
	if (::soap_read___fes__union_DistanceBufferType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_BBOXType_DEFINED
#define SOAP_TYPE___fes__union_BBOXType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_BBOXType(struct soap*, const char*, int, const __fes__union_BBOXType *, const char*);
SOAP_FMAC3 __fes__union_BBOXType * SOAP_FMAC4 soap_in___fes__union_BBOXType(struct soap*, const char*, __fes__union_BBOXType *, const char*);
SOAP_FMAC1 __fes__union_BBOXType * SOAP_FMAC2 soap_instantiate___fes__union_BBOXType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_BBOXType * soap_new___fes__union_BBOXType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_BBOXType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_BBOXType * soap_new_req___fes__union_BBOXType(
	struct soap *soap,
	const union _fes__union_BBOXType& union_BBOXType)
{
	__fes__union_BBOXType *_p = ::soap_new___fes__union_BBOXType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BBOXType::union_BBOXType = union_BBOXType;
	}
	return _p;
}

inline __fes__union_BBOXType * soap_new_set___fes__union_BBOXType(
	struct soap *soap,
	int __union_BBOXType,
	const union _fes__union_BBOXType& union_BBOXType)
{
	__fes__union_BBOXType *_p = ::soap_new___fes__union_BBOXType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BBOXType::__union_BBOXType = __union_BBOXType;
		_p->__fes__union_BBOXType::union_BBOXType = union_BBOXType;
	}
	return _p;
}

inline int soap_write___fes__union_BBOXType(struct soap *soap, __fes__union_BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BBOXType", p->soap_type() == SOAP_TYPE___fes__union_BBOXType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_BBOXType(struct soap *soap, const char *URL, __fes__union_BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BBOXType", p->soap_type() == SOAP_TYPE___fes__union_BBOXType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_BBOXType(struct soap *soap, const char *URL, __fes__union_BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BBOXType", p->soap_type() == SOAP_TYPE___fes__union_BBOXType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_BBOXType(struct soap *soap, const char *URL, __fes__union_BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BBOXType", p->soap_type() == SOAP_TYPE___fes__union_BBOXType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_BBOXType * SOAP_FMAC4 soap_get___fes__union_BBOXType(struct soap*, __fes__union_BBOXType *, const char*, const char*);

inline int soap_read___fes__union_BBOXType(struct soap *soap, __fes__union_BBOXType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_BBOXType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_BBOXType(struct soap *soap, const char *URL, __fes__union_BBOXType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_BBOXType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_BBOXType(struct soap *soap, __fes__union_BBOXType *p)
{
	if (::soap_read___fes__union_BBOXType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_BinaryTemporalOpType_DEFINED
#define SOAP_TYPE___fes__union_BinaryTemporalOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_BinaryTemporalOpType(struct soap*, const char*, int, const __fes__union_BinaryTemporalOpType *, const char*);
SOAP_FMAC3 __fes__union_BinaryTemporalOpType * SOAP_FMAC4 soap_in___fes__union_BinaryTemporalOpType(struct soap*, const char*, __fes__union_BinaryTemporalOpType *, const char*);
SOAP_FMAC1 __fes__union_BinaryTemporalOpType * SOAP_FMAC2 soap_instantiate___fes__union_BinaryTemporalOpType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_BinaryTemporalOpType * soap_new___fes__union_BinaryTemporalOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_BinaryTemporalOpType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_BinaryTemporalOpType * soap_new_req___fes__union_BinaryTemporalOpType(
	struct soap *soap,
	const union _fes__union_BinaryTemporalOpType& union_BinaryTemporalOpType)
{
	__fes__union_BinaryTemporalOpType *_p = ::soap_new___fes__union_BinaryTemporalOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryTemporalOpType::union_BinaryTemporalOpType = union_BinaryTemporalOpType;
	}
	return _p;
}

inline __fes__union_BinaryTemporalOpType * soap_new_set___fes__union_BinaryTemporalOpType(
	struct soap *soap,
	int __union_BinaryTemporalOpType,
	const union _fes__union_BinaryTemporalOpType& union_BinaryTemporalOpType)
{
	__fes__union_BinaryTemporalOpType *_p = ::soap_new___fes__union_BinaryTemporalOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryTemporalOpType::__union_BinaryTemporalOpType = __union_BinaryTemporalOpType;
		_p->__fes__union_BinaryTemporalOpType::union_BinaryTemporalOpType = union_BinaryTemporalOpType;
	}
	return _p;
}

inline int soap_write___fes__union_BinaryTemporalOpType(struct soap *soap, __fes__union_BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryTemporalOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_BinaryTemporalOpType(struct soap *soap, const char *URL, __fes__union_BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryTemporalOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_BinaryTemporalOpType(struct soap *soap, const char *URL, __fes__union_BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryTemporalOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_BinaryTemporalOpType(struct soap *soap, const char *URL, __fes__union_BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryTemporalOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_BinaryTemporalOpType * SOAP_FMAC4 soap_get___fes__union_BinaryTemporalOpType(struct soap*, __fes__union_BinaryTemporalOpType *, const char*, const char*);

inline int soap_read___fes__union_BinaryTemporalOpType(struct soap *soap, __fes__union_BinaryTemporalOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_BinaryTemporalOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_BinaryTemporalOpType(struct soap *soap, const char *URL, __fes__union_BinaryTemporalOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_BinaryTemporalOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_BinaryTemporalOpType(struct soap *soap, __fes__union_BinaryTemporalOpType *p)
{
	if (::soap_read___fes__union_BinaryTemporalOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_BinarySpatialOpType_DEFINED
#define SOAP_TYPE___fes__union_BinarySpatialOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_BinarySpatialOpType(struct soap*, const char*, int, const __fes__union_BinarySpatialOpType *, const char*);
SOAP_FMAC3 __fes__union_BinarySpatialOpType * SOAP_FMAC4 soap_in___fes__union_BinarySpatialOpType(struct soap*, const char*, __fes__union_BinarySpatialOpType *, const char*);
SOAP_FMAC1 __fes__union_BinarySpatialOpType * SOAP_FMAC2 soap_instantiate___fes__union_BinarySpatialOpType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_BinarySpatialOpType * soap_new___fes__union_BinarySpatialOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_BinarySpatialOpType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_BinarySpatialOpType * soap_new_req___fes__union_BinarySpatialOpType(
	struct soap *soap,
	const union _fes__union_BinarySpatialOpType& union_BinarySpatialOpType)
{
	__fes__union_BinarySpatialOpType *_p = ::soap_new___fes__union_BinarySpatialOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinarySpatialOpType::union_BinarySpatialOpType = union_BinarySpatialOpType;
	}
	return _p;
}

inline __fes__union_BinarySpatialOpType * soap_new_set___fes__union_BinarySpatialOpType(
	struct soap *soap,
	int __union_BinarySpatialOpType,
	const union _fes__union_BinarySpatialOpType& union_BinarySpatialOpType)
{
	__fes__union_BinarySpatialOpType *_p = ::soap_new___fes__union_BinarySpatialOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinarySpatialOpType::__union_BinarySpatialOpType = __union_BinarySpatialOpType;
		_p->__fes__union_BinarySpatialOpType::union_BinarySpatialOpType = union_BinarySpatialOpType;
	}
	return _p;
}

inline int soap_write___fes__union_BinarySpatialOpType(struct soap *soap, __fes__union_BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinarySpatialOpType", p->soap_type() == SOAP_TYPE___fes__union_BinarySpatialOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_BinarySpatialOpType(struct soap *soap, const char *URL, __fes__union_BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinarySpatialOpType", p->soap_type() == SOAP_TYPE___fes__union_BinarySpatialOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_BinarySpatialOpType(struct soap *soap, const char *URL, __fes__union_BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinarySpatialOpType", p->soap_type() == SOAP_TYPE___fes__union_BinarySpatialOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_BinarySpatialOpType(struct soap *soap, const char *URL, __fes__union_BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinarySpatialOpType", p->soap_type() == SOAP_TYPE___fes__union_BinarySpatialOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_BinarySpatialOpType * SOAP_FMAC4 soap_get___fes__union_BinarySpatialOpType(struct soap*, __fes__union_BinarySpatialOpType *, const char*, const char*);

inline int soap_read___fes__union_BinarySpatialOpType(struct soap *soap, __fes__union_BinarySpatialOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_BinarySpatialOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_BinarySpatialOpType(struct soap *soap, const char *URL, __fes__union_BinarySpatialOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_BinarySpatialOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_BinarySpatialOpType(struct soap *soap, __fes__union_BinarySpatialOpType *p)
{
	if (::soap_read___fes__union_BinarySpatialOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_PropertyIsLikeType_DEFINED
#define SOAP_TYPE___fes__union_PropertyIsLikeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_PropertyIsLikeType(struct soap*, const char*, int, const __fes__union_PropertyIsLikeType *, const char*);
SOAP_FMAC3 __fes__union_PropertyIsLikeType * SOAP_FMAC4 soap_in___fes__union_PropertyIsLikeType(struct soap*, const char*, __fes__union_PropertyIsLikeType *, const char*);
SOAP_FMAC1 __fes__union_PropertyIsLikeType * SOAP_FMAC2 soap_instantiate___fes__union_PropertyIsLikeType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_PropertyIsLikeType * soap_new___fes__union_PropertyIsLikeType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_PropertyIsLikeType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_PropertyIsLikeType * soap_new_req___fes__union_PropertyIsLikeType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_PropertyIsLikeType& union_PropertyIsLikeType)
{
	__fes__union_PropertyIsLikeType *_p = ::soap_new___fes__union_PropertyIsLikeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_PropertyIsLikeType::__unionexpression = __unionexpression;
		_p->__fes__union_PropertyIsLikeType::union_PropertyIsLikeType = union_PropertyIsLikeType;
	}
	return _p;
}

inline __fes__union_PropertyIsLikeType * soap_new_set___fes__union_PropertyIsLikeType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_PropertyIsLikeType& union_PropertyIsLikeType)
{
	__fes__union_PropertyIsLikeType *_p = ::soap_new___fes__union_PropertyIsLikeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_PropertyIsLikeType::__unionexpression = __unionexpression;
		_p->__fes__union_PropertyIsLikeType::union_PropertyIsLikeType = union_PropertyIsLikeType;
	}
	return _p;
}

inline int soap_write___fes__union_PropertyIsLikeType(struct soap *soap, __fes__union_PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-PropertyIsLikeType", p->soap_type() == SOAP_TYPE___fes__union_PropertyIsLikeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_PropertyIsLikeType(struct soap *soap, const char *URL, __fes__union_PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-PropertyIsLikeType", p->soap_type() == SOAP_TYPE___fes__union_PropertyIsLikeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_PropertyIsLikeType(struct soap *soap, const char *URL, __fes__union_PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-PropertyIsLikeType", p->soap_type() == SOAP_TYPE___fes__union_PropertyIsLikeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_PropertyIsLikeType(struct soap *soap, const char *URL, __fes__union_PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-PropertyIsLikeType", p->soap_type() == SOAP_TYPE___fes__union_PropertyIsLikeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_PropertyIsLikeType * SOAP_FMAC4 soap_get___fes__union_PropertyIsLikeType(struct soap*, __fes__union_PropertyIsLikeType *, const char*, const char*);

inline int soap_read___fes__union_PropertyIsLikeType(struct soap *soap, __fes__union_PropertyIsLikeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_PropertyIsLikeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_PropertyIsLikeType(struct soap *soap, const char *URL, __fes__union_PropertyIsLikeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_PropertyIsLikeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_PropertyIsLikeType(struct soap *soap, __fes__union_PropertyIsLikeType *p)
{
	if (::soap_read___fes__union_PropertyIsLikeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_BinaryComparisonOpType_DEFINED
#define SOAP_TYPE___fes__union_BinaryComparisonOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_BinaryComparisonOpType(struct soap*, const char*, int, const __fes__union_BinaryComparisonOpType *, const char*);
SOAP_FMAC3 __fes__union_BinaryComparisonOpType * SOAP_FMAC4 soap_in___fes__union_BinaryComparisonOpType(struct soap*, const char*, __fes__union_BinaryComparisonOpType *, const char*);
SOAP_FMAC1 __fes__union_BinaryComparisonOpType * SOAP_FMAC2 soap_instantiate___fes__union_BinaryComparisonOpType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_BinaryComparisonOpType * soap_new___fes__union_BinaryComparisonOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_BinaryComparisonOpType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_BinaryComparisonOpType * soap_new_req___fes__union_BinaryComparisonOpType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_BinaryComparisonOpType& union_BinaryComparisonOpType)
{
	__fes__union_BinaryComparisonOpType *_p = ::soap_new___fes__union_BinaryComparisonOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryComparisonOpType::__unionexpression = __unionexpression;
		_p->__fes__union_BinaryComparisonOpType::union_BinaryComparisonOpType = union_BinaryComparisonOpType;
	}
	return _p;
}

inline __fes__union_BinaryComparisonOpType * soap_new_set___fes__union_BinaryComparisonOpType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_BinaryComparisonOpType& union_BinaryComparisonOpType)
{
	__fes__union_BinaryComparisonOpType *_p = ::soap_new___fes__union_BinaryComparisonOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_BinaryComparisonOpType::__unionexpression = __unionexpression;
		_p->__fes__union_BinaryComparisonOpType::union_BinaryComparisonOpType = union_BinaryComparisonOpType;
	}
	return _p;
}

inline int soap_write___fes__union_BinaryComparisonOpType(struct soap *soap, __fes__union_BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryComparisonOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_BinaryComparisonOpType(struct soap *soap, const char *URL, __fes__union_BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryComparisonOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_BinaryComparisonOpType(struct soap *soap, const char *URL, __fes__union_BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryComparisonOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_BinaryComparisonOpType(struct soap *soap, const char *URL, __fes__union_BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-BinaryComparisonOpType", p->soap_type() == SOAP_TYPE___fes__union_BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_BinaryComparisonOpType * SOAP_FMAC4 soap_get___fes__union_BinaryComparisonOpType(struct soap*, __fes__union_BinaryComparisonOpType *, const char*, const char*);

inline int soap_read___fes__union_BinaryComparisonOpType(struct soap *soap, __fes__union_BinaryComparisonOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_BinaryComparisonOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_BinaryComparisonOpType(struct soap *soap, const char *URL, __fes__union_BinaryComparisonOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_BinaryComparisonOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_BinaryComparisonOpType(struct soap *soap, __fes__union_BinaryComparisonOpType *p)
{
	if (::soap_read___fes__union_BinaryComparisonOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_FilterType_______DEFINED
#define SOAP_TYPE___fes__union_FilterType_______DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_FilterType______(struct soap*, const char*, int, const __fes__union_FilterType______ *, const char*);
SOAP_FMAC3 __fes__union_FilterType______ * SOAP_FMAC4 soap_in___fes__union_FilterType______(struct soap*, const char*, __fes__union_FilterType______ *, const char*);
SOAP_FMAC1 __fes__union_FilterType______ * SOAP_FMAC2 soap_instantiate___fes__union_FilterType______(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_FilterType______ * soap_new___fes__union_FilterType______(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_FilterType______(soap, n, NULL, NULL, NULL);
}

inline __fes__union_FilterType______ * soap_new_req___fes__union_FilterType______(
	struct soap *soap,
	const union _fes__union_FilterType______& union_FilterType______)
{
	__fes__union_FilterType______ *_p = ::soap_new___fes__union_FilterType______(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_FilterType______::union_FilterType______ = union_FilterType______;
	}
	return _p;
}

inline __fes__union_FilterType______ * soap_new_set___fes__union_FilterType______(
	struct soap *soap,
	int __union_x005fId,
	const union _fes__union_FilterType______& union_FilterType______)
{
	__fes__union_FilterType______ *_p = ::soap_new___fes__union_FilterType______(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_FilterType______::__union_x005fId = __union_x005fId;
		_p->__fes__union_FilterType______::union_FilterType______ = union_FilterType______;
	}
	return _p;
}

inline int soap_write___fes__union_FilterType______(struct soap *soap, __fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FilterType", p->soap_type() == SOAP_TYPE___fes__union_FilterType______ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_FilterType______(struct soap *soap, const char *URL, __fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FilterType", p->soap_type() == SOAP_TYPE___fes__union_FilterType______ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_FilterType______(struct soap *soap, const char *URL, __fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FilterType", p->soap_type() == SOAP_TYPE___fes__union_FilterType______ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_FilterType______(struct soap *soap, const char *URL, __fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FilterType", p->soap_type() == SOAP_TYPE___fes__union_FilterType______ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_FilterType______ * SOAP_FMAC4 soap_get___fes__union_FilterType______(struct soap*, __fes__union_FilterType______ *, const char*, const char*);

inline int soap_read___fes__union_FilterType______(struct soap *soap, __fes__union_FilterType______ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_FilterType______(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_FilterType______(struct soap *soap, const char *URL, __fes__union_FilterType______ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_FilterType______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_FilterType______(struct soap *soap, __fes__union_FilterType______ *p)
{
	if (::soap_read___fes__union_FilterType______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_AbstractAdhocQueryExpressionType_DEFINED
#define SOAP_TYPE___fes__union_AbstractAdhocQueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_AbstractAdhocQueryExpressionType(struct soap*, const char*, int, const __fes__union_AbstractAdhocQueryExpressionType *, const char*);
SOAP_FMAC3 __fes__union_AbstractAdhocQueryExpressionType * SOAP_FMAC4 soap_in___fes__union_AbstractAdhocQueryExpressionType(struct soap*, const char*, __fes__union_AbstractAdhocQueryExpressionType *, const char*);
SOAP_FMAC1 __fes__union_AbstractAdhocQueryExpressionType * SOAP_FMAC2 soap_instantiate___fes__union_AbstractAdhocQueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_AbstractAdhocQueryExpressionType * soap_new___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_AbstractAdhocQueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_AbstractAdhocQueryExpressionType * soap_new_req___fes__union_AbstractAdhocQueryExpressionType(
	struct soap *soap,
	const union _fes__union_AbstractAdhocQueryExpressionType& union_AbstractAdhocQueryExpressionType)
{
	__fes__union_AbstractAdhocQueryExpressionType *_p = ::soap_new___fes__union_AbstractAdhocQueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType = union_AbstractAdhocQueryExpressionType;
	}
	return _p;
}

inline __fes__union_AbstractAdhocQueryExpressionType * soap_new_set___fes__union_AbstractAdhocQueryExpressionType(
	struct soap *soap,
	int __unionAbstractProjectionClause,
	const union _fes__union_AbstractAdhocQueryExpressionType& union_AbstractAdhocQueryExpressionType)
{
	__fes__union_AbstractAdhocQueryExpressionType *_p = ::soap_new___fes__union_AbstractAdhocQueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_AbstractAdhocQueryExpressionType::__unionAbstractProjectionClause = __unionAbstractProjectionClause;
		_p->__fes__union_AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType = union_AbstractAdhocQueryExpressionType;
	}
	return _p;
}

inline int soap_write___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, __fes__union_AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE___fes__union_AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, __fes__union_AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE___fes__union_AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, __fes__union_AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE___fes__union_AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, __fes__union_AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE___fes__union_AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_AbstractAdhocQueryExpressionType * SOAP_FMAC4 soap_get___fes__union_AbstractAdhocQueryExpressionType(struct soap*, __fes__union_AbstractAdhocQueryExpressionType *, const char*, const char*);

inline int soap_read___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, __fes__union_AbstractAdhocQueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_AbstractAdhocQueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, __fes__union_AbstractAdhocQueryExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_AbstractAdhocQueryExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_AbstractAdhocQueryExpressionType(struct soap *soap, __fes__union_AbstractAdhocQueryExpressionType *p)
{
	if (::soap_read___fes__union_AbstractAdhocQueryExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ows__union_DatasetDescriptionSummaryBaseType_DEFINED
#define SOAP_TYPE___ows__union_DatasetDescriptionSummaryBaseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ows__union_DatasetDescriptionSummaryBaseType(struct soap*, const char*, int, const __ows__union_DatasetDescriptionSummaryBaseType *, const char*);
SOAP_FMAC3 __ows__union_DatasetDescriptionSummaryBaseType * SOAP_FMAC4 soap_in___ows__union_DatasetDescriptionSummaryBaseType(struct soap*, const char*, __ows__union_DatasetDescriptionSummaryBaseType *, const char*);
SOAP_FMAC1 __ows__union_DatasetDescriptionSummaryBaseType * SOAP_FMAC2 soap_instantiate___ows__union_DatasetDescriptionSummaryBaseType(struct soap*, int, const char*, const char*, size_t*);

inline __ows__union_DatasetDescriptionSummaryBaseType * soap_new___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, int n = -1)
{
	return soap_instantiate___ows__union_DatasetDescriptionSummaryBaseType(soap, n, NULL, NULL, NULL);
}

inline __ows__union_DatasetDescriptionSummaryBaseType * soap_new_req___ows__union_DatasetDescriptionSummaryBaseType(
	struct soap *soap,
	const union _ows__union_DatasetDescriptionSummaryBaseType& union_DatasetDescriptionSummaryBaseType)
{
	__ows__union_DatasetDescriptionSummaryBaseType *_p = ::soap_new___ows__union_DatasetDescriptionSummaryBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_DatasetDescriptionSummaryBaseType::union_DatasetDescriptionSummaryBaseType = union_DatasetDescriptionSummaryBaseType;
	}
	return _p;
}

inline __ows__union_DatasetDescriptionSummaryBaseType * soap_new_set___ows__union_DatasetDescriptionSummaryBaseType(
	struct soap *soap,
	int __unionBoundingBox,
	const union _ows__union_DatasetDescriptionSummaryBaseType& union_DatasetDescriptionSummaryBaseType)
{
	__ows__union_DatasetDescriptionSummaryBaseType *_p = ::soap_new___ows__union_DatasetDescriptionSummaryBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_DatasetDescriptionSummaryBaseType::__unionBoundingBox = __unionBoundingBox;
		_p->__ows__union_DatasetDescriptionSummaryBaseType::union_DatasetDescriptionSummaryBaseType = union_DatasetDescriptionSummaryBaseType;
	}
	return _p;
}

inline int soap_write___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, __ows__union_DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE___ows__union_DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, __ows__union_DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE___ows__union_DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, __ows__union_DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE___ows__union_DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, __ows__union_DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE___ows__union_DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __ows__union_DatasetDescriptionSummaryBaseType * SOAP_FMAC4 soap_get___ows__union_DatasetDescriptionSummaryBaseType(struct soap*, __ows__union_DatasetDescriptionSummaryBaseType *, const char*, const char*);

inline int soap_read___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, __ows__union_DatasetDescriptionSummaryBaseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___ows__union_DatasetDescriptionSummaryBaseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, __ows__union_DatasetDescriptionSummaryBaseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ows__union_DatasetDescriptionSummaryBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ows__union_DatasetDescriptionSummaryBaseType(struct soap *soap, __ows__union_DatasetDescriptionSummaryBaseType *p)
{
	if (::soap_read___ows__union_DatasetDescriptionSummaryBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__union_LockFeatureType_DEFINED
#define SOAP_TYPE___wfs__union_LockFeatureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__union_LockFeatureType(struct soap*, const char*, int, const __wfs__union_LockFeatureType *, const char*);
SOAP_FMAC3 __wfs__union_LockFeatureType * SOAP_FMAC4 soap_in___wfs__union_LockFeatureType(struct soap*, const char*, __wfs__union_LockFeatureType *, const char*);
SOAP_FMAC1 __wfs__union_LockFeatureType * SOAP_FMAC2 soap_instantiate___wfs__union_LockFeatureType(struct soap*, int, const char*, const char*, size_t*);

inline __wfs__union_LockFeatureType * soap_new___wfs__union_LockFeatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__union_LockFeatureType(soap, n, NULL, NULL, NULL);
}

inline __wfs__union_LockFeatureType * soap_new_req___wfs__union_LockFeatureType(
	struct soap *soap,
	const union _wfs__union_LockFeatureType& union_LockFeatureType)
{
	__wfs__union_LockFeatureType *_p = ::soap_new___wfs__union_LockFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__wfs__union_LockFeatureType::union_LockFeatureType = union_LockFeatureType;
	}
	return _p;
}

inline __wfs__union_LockFeatureType * soap_new_set___wfs__union_LockFeatureType(
	struct soap *soap,
	int __unionAbstractQueryExpression,
	const union _wfs__union_LockFeatureType& union_LockFeatureType)
{
	__wfs__union_LockFeatureType *_p = ::soap_new___wfs__union_LockFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__wfs__union_LockFeatureType::__unionAbstractQueryExpression = __unionAbstractQueryExpression;
		_p->__wfs__union_LockFeatureType::union_LockFeatureType = union_LockFeatureType;
	}
	return _p;
}

inline int soap_write___wfs__union_LockFeatureType(struct soap *soap, __wfs__union_LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-LockFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_LockFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__union_LockFeatureType(struct soap *soap, const char *URL, __wfs__union_LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-LockFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_LockFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__union_LockFeatureType(struct soap *soap, const char *URL, __wfs__union_LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-LockFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_LockFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__union_LockFeatureType(struct soap *soap, const char *URL, __wfs__union_LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-LockFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_LockFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __wfs__union_LockFeatureType * SOAP_FMAC4 soap_get___wfs__union_LockFeatureType(struct soap*, __wfs__union_LockFeatureType *, const char*, const char*);

inline int soap_read___wfs__union_LockFeatureType(struct soap *soap, __wfs__union_LockFeatureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___wfs__union_LockFeatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__union_LockFeatureType(struct soap *soap, const char *URL, __wfs__union_LockFeatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__union_LockFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__union_LockFeatureType(struct soap *soap, __wfs__union_LockFeatureType *p)
{
	if (::soap_read___wfs__union_LockFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__union_GetFeatureType_DEFINED
#define SOAP_TYPE___wfs__union_GetFeatureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__union_GetFeatureType(struct soap*, const char*, int, const __wfs__union_GetFeatureType *, const char*);
SOAP_FMAC3 __wfs__union_GetFeatureType * SOAP_FMAC4 soap_in___wfs__union_GetFeatureType(struct soap*, const char*, __wfs__union_GetFeatureType *, const char*);
SOAP_FMAC1 __wfs__union_GetFeatureType * SOAP_FMAC2 soap_instantiate___wfs__union_GetFeatureType(struct soap*, int, const char*, const char*, size_t*);

inline __wfs__union_GetFeatureType * soap_new___wfs__union_GetFeatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__union_GetFeatureType(soap, n, NULL, NULL, NULL);
}

inline __wfs__union_GetFeatureType * soap_new_req___wfs__union_GetFeatureType(
	struct soap *soap,
	const union _wfs__union_GetFeatureType& union_GetFeatureType)
{
	__wfs__union_GetFeatureType *_p = ::soap_new___wfs__union_GetFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__wfs__union_GetFeatureType::union_GetFeatureType = union_GetFeatureType;
	}
	return _p;
}

inline __wfs__union_GetFeatureType * soap_new_set___wfs__union_GetFeatureType(
	struct soap *soap,
	int __unionAbstractQueryExpression,
	const union _wfs__union_GetFeatureType& union_GetFeatureType)
{
	__wfs__union_GetFeatureType *_p = ::soap_new___wfs__union_GetFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__wfs__union_GetFeatureType::__unionAbstractQueryExpression = __unionAbstractQueryExpression;
		_p->__wfs__union_GetFeatureType::union_GetFeatureType = union_GetFeatureType;
	}
	return _p;
}

inline int soap_write___wfs__union_GetFeatureType(struct soap *soap, __wfs__union_GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-GetFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_GetFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__union_GetFeatureType(struct soap *soap, const char *URL, __wfs__union_GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-GetFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_GetFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__union_GetFeatureType(struct soap *soap, const char *URL, __wfs__union_GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-GetFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_GetFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__union_GetFeatureType(struct soap *soap, const char *URL, __wfs__union_GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-wfs:union-GetFeatureType", p->soap_type() == SOAP_TYPE___wfs__union_GetFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __wfs__union_GetFeatureType * SOAP_FMAC4 soap_get___wfs__union_GetFeatureType(struct soap*, __wfs__union_GetFeatureType *, const char*, const char*);

inline int soap_read___wfs__union_GetFeatureType(struct soap *soap, __wfs__union_GetFeatureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___wfs__union_GetFeatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__union_GetFeatureType(struct soap *soap, const char *URL, __wfs__union_GetFeatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__union_GetFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__union_GetFeatureType(struct soap *soap, __wfs__union_GetFeatureType *p)
{
	if (::soap_read___wfs__union_GetFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__WFS_x005fCapabilitiesType_WSDL_DEFINED
#define SOAP_TYPE__wfs__WFS_x005fCapabilitiesType_WSDL_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, const char*, int, const _wfs__WFS_x005fCapabilitiesType_WSDL *, const char*);
SOAP_FMAC3 _wfs__WFS_x005fCapabilitiesType_WSDL * SOAP_FMAC4 soap_in__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, const char*, _wfs__WFS_x005fCapabilitiesType_WSDL *, const char*);
SOAP_FMAC1 _wfs__WFS_x005fCapabilitiesType_WSDL * SOAP_FMAC2 soap_instantiate__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__WFS_x005fCapabilitiesType_WSDL * soap_new__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__WFS_x005fCapabilitiesType_WSDL(soap, n, NULL, NULL, NULL);
}

inline _wfs__WFS_x005fCapabilitiesType_WSDL * soap_new_req__wfs__WFS_x005fCapabilitiesType_WSDL(
	struct soap *soap)
{
	_wfs__WFS_x005fCapabilitiesType_WSDL *_p = ::soap_new__wfs__WFS_x005fCapabilitiesType_WSDL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wfs__WFS_x005fCapabilitiesType_WSDL * soap_new_set__wfs__WFS_x005fCapabilitiesType_WSDL(
	struct soap *soap)
{
	_wfs__WFS_x005fCapabilitiesType_WSDL *_p = ::soap_new__wfs__WFS_x005fCapabilitiesType_WSDL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, _wfs__WFS_x005fCapabilitiesType_WSDL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType-WSDL", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilitiesType_WSDL ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, const char *URL, _wfs__WFS_x005fCapabilitiesType_WSDL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType-WSDL", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilitiesType_WSDL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, const char *URL, _wfs__WFS_x005fCapabilitiesType_WSDL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType-WSDL", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilitiesType_WSDL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, const char *URL, _wfs__WFS_x005fCapabilitiesType_WSDL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType-WSDL", p->soap_type() == SOAP_TYPE__wfs__WFS_x005fCapabilitiesType_WSDL ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__WFS_x005fCapabilitiesType_WSDL * SOAP_FMAC4 soap_get__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, _wfs__WFS_x005fCapabilitiesType_WSDL *, const char*, const char*);

inline int soap_read__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, _wfs__WFS_x005fCapabilitiesType_WSDL *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__WFS_x005fCapabilitiesType_WSDL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, const char *URL, _wfs__WFS_x005fCapabilitiesType_WSDL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__WFS_x005fCapabilitiesType_WSDL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__WFS_x005fCapabilitiesType_WSDL(struct soap *soap, _wfs__WFS_x005fCapabilitiesType_WSDL *p)
{
	if (::soap_read__wfs__WFS_x005fCapabilitiesType_WSDL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap*, const char*, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL * soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL * soap_new_req__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL * soap_new_set__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap*, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap*, const char*, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat * soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat * soap_new_req__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat * soap_new_set__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend-LegendFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap*, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style_LegendList_Legend *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList_Legend * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap*, const char*, _icommon__layers_Layer_Styles_Style_LegendList_Legend *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style_LegendList_Legend * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend * soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList_Legend(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend * soap_new_req__icommon__layers_Layer_Styles_Style_LegendList_Legend(
	struct soap *soap,
	const _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat& LegendFormat,
	char LegendHeight,
	char LegendWidth,
	const _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL& LegendURL)
{
	_icommon__layers_Layer_Styles_Style_LegendList_Legend *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendFormat = LegendFormat;
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendHeight = LegendHeight;
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendWidth = LegendWidth;
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendURL = LegendURL;
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style_LegendList_Legend * soap_new_set__icommon__layers_Layer_Styles_Style_LegendList_Legend(
	struct soap *soap,
	const _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendFormat& LegendFormat,
	char LegendHeight,
	char LegendWidth,
	const _icommon__layers_Layer_Styles_Style_LegendList_Legend_LegendURL& LegendURL)
{
	_icommon__layers_Layer_Styles_Style_LegendList_Legend *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList_Legend(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendFormat = LegendFormat;
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendHeight = LegendHeight;
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendWidth = LegendWidth;
		_p->_icommon__layers_Layer_Styles_Style_LegendList_Legend::LegendURL = LegendURL;
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList-Legend", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_Legend ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList_Legend * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap*, _icommon__layers_Layer_Styles_Style_LegendList_Legend *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style_LegendList_Legend(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList_Legend *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style_LegendList_Legend(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList_Legend *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style_LegendList_Legend(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style_LegendList(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style_LegendList *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style_LegendList(struct soap*, const char*, _icommon__layers_Layer_Styles_Style_LegendList *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style_LegendList * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style_LegendList * soap_new__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style_LegendList(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style_LegendList * soap_new_req__icommon__layers_Layer_Styles_Style_LegendList(
	struct soap *soap,
	const _icommon__layers_Layer_Styles_Style_LegendList_Legend& Legend)
{
	_icommon__layers_Layer_Styles_Style_LegendList *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles_Style_LegendList::Legend = Legend;
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style_LegendList * soap_new_set__icommon__layers_Layer_Styles_Style_LegendList(
	struct soap *soap,
	const _icommon__layers_Layer_Styles_Style_LegendList_Legend& Legend)
{
	_icommon__layers_Layer_Styles_Style_LegendList *_p = ::soap_new__icommon__layers_Layer_Styles_Style_LegendList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles_Style_LegendList::Legend = Legend;
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-LegendList", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_LegendList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_LegendList * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style_LegendList(struct soap*, _icommon__layers_Layer_Styles_Style_LegendList *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style_LegendList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_LegendList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style_LegendList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style_LegendList(struct soap *soap, _icommon__layers_Layer_Styles_Style_LegendList *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style_LegendList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleURL_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleURL_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style_StyleURL(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style_StyleURL *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_StyleURL * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style_StyleURL(struct soap*, const char*, _icommon__layers_Layer_Styles_Style_StyleURL *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style_StyleURL * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style_StyleURL(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style_StyleURL * soap_new__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style_StyleURL(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style_StyleURL * soap_new_req__icommon__layers_Layer_Styles_Style_StyleURL(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_StyleURL *_p = ::soap_new__icommon__layers_Layer_Styles_Style_StyleURL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style_StyleURL * soap_new_set__icommon__layers_Layer_Styles_Style_StyleURL(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_StyleURL *_p = ::soap_new__icommon__layers_Layer_Styles_Style_StyleURL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleURL const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleURL ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleURL const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleURL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleURL const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleURL ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleURL const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleURL", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleURL ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_StyleURL * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style_StyleURL(struct soap*, _icommon__layers_Layer_Styles_Style_StyleURL *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleURL *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style_StyleURL(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleURL *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style_StyleURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style_StyleURL(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleURL *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style_StyleURL(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleFormat_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleFormat_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style_StyleFormat *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_StyleFormat * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap*, const char*, _icommon__layers_Layer_Styles_Style_StyleFormat *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style_StyleFormat * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style_StyleFormat * soap_new__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style_StyleFormat(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style_StyleFormat * soap_new_req__icommon__layers_Layer_Styles_Style_StyleFormat(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_StyleFormat *_p = ::soap_new__icommon__layers_Layer_Styles_Style_StyleFormat(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style_StyleFormat * soap_new_set__icommon__layers_Layer_Styles_Style_StyleFormat(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_StyleFormat *_p = ::soap_new__icommon__layers_Layer_Styles_Style_StyleFormat(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleFormat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleFormat ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleFormat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleFormat ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleFormat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleFormat", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleFormat ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_StyleFormat * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap*, _icommon__layers_Layer_Styles_Style_StyleFormat *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleFormat *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style_StyleFormat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleFormat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style_StyleFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style_StyleFormat(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleFormat *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style_StyleFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleAbstract_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleAbstract_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style_StyleAbstract *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_StyleAbstract * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap*, const char*, _icommon__layers_Layer_Styles_Style_StyleAbstract *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style_StyleAbstract * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style_StyleAbstract * soap_new__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style_StyleAbstract(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style_StyleAbstract * soap_new_req__icommon__layers_Layer_Styles_Style_StyleAbstract(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_StyleAbstract *_p = ::soap_new__icommon__layers_Layer_Styles_Style_StyleAbstract(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style_StyleAbstract * soap_new_set__icommon__layers_Layer_Styles_Style_StyleAbstract(
	struct soap *soap)
{
	_icommon__layers_Layer_Styles_Style_StyleAbstract *_p = ::soap_new__icommon__layers_Layer_Styles_Style_StyleAbstract(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleAbstract const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleAbstract", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleAbstract ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleAbstract const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleAbstract", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleAbstract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleAbstract const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleAbstract", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleAbstract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleAbstract const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style-StyleAbstract", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style_StyleAbstract ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style_StyleAbstract * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap*, _icommon__layers_Layer_Styles_Style_StyleAbstract *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleAbstract *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style_StyleAbstract(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style_StyleAbstract *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style_StyleAbstract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style_StyleAbstract(struct soap *soap, _icommon__layers_Layer_Styles_Style_StyleAbstract *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style_StyleAbstract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_Style_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_Style_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles_Style(struct soap*, const char*, int, const _icommon__layers_Layer_Styles_Style *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles_Style(struct soap*, const char*, _icommon__layers_Layer_Styles_Style *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles_Style * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles_Style(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles_Style * soap_new__icommon__layers_Layer_Styles_Style(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles_Style(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles_Style * soap_new_req__icommon__layers_Layer_Styles_Style(
	struct soap *soap,
	const std::string& StyleName,
	const std::string& StyleTitle,
	const _icommon__layers_Layer_Styles_Style_StyleAbstract& StyleAbstract,
	const _icommon__layers_Layer_Styles_Style_StyleFormat& StyleFormat,
	const _icommon__layers_Layer_Styles_Style_StyleURL& StyleURL,
	const _icommon__layers_Layer_Styles_Style_LegendList& LegendList,
	const std::string& name)
{
	_icommon__layers_Layer_Styles_Style *_p = ::soap_new__icommon__layers_Layer_Styles_Style(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles_Style::StyleName = StyleName;
		_p->_icommon__layers_Layer_Styles_Style::StyleTitle = StyleTitle;
		_p->_icommon__layers_Layer_Styles_Style::StyleAbstract = StyleAbstract;
		_p->_icommon__layers_Layer_Styles_Style::StyleFormat = StyleFormat;
		_p->_icommon__layers_Layer_Styles_Style::StyleURL = StyleURL;
		_p->_icommon__layers_Layer_Styles_Style::LegendList = LegendList;
		_p->_icommon__layers_Layer_Styles_Style::name = name;
	}
	return _p;
}

inline _icommon__layers_Layer_Styles_Style * soap_new_set__icommon__layers_Layer_Styles_Style(
	struct soap *soap,
	const std::string& StyleName,
	const std::string& StyleTitle,
	const _icommon__layers_Layer_Styles_Style_StyleAbstract& StyleAbstract,
	const _icommon__layers_Layer_Styles_Style_StyleFormat& StyleFormat,
	const _icommon__layers_Layer_Styles_Style_StyleURL& StyleURL,
	const _icommon__layers_Layer_Styles_Style_LegendList& LegendList,
	const std::string& name)
{
	_icommon__layers_Layer_Styles_Style *_p = ::soap_new__icommon__layers_Layer_Styles_Style(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles_Style::StyleName = StyleName;
		_p->_icommon__layers_Layer_Styles_Style::StyleTitle = StyleTitle;
		_p->_icommon__layers_Layer_Styles_Style::StyleAbstract = StyleAbstract;
		_p->_icommon__layers_Layer_Styles_Style::StyleFormat = StyleFormat;
		_p->_icommon__layers_Layer_Styles_Style::StyleURL = StyleURL;
		_p->_icommon__layers_Layer_Styles_Style::LegendList = LegendList;
		_p->_icommon__layers_Layer_Styles_Style::name = name;
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles_Style(struct soap *soap, _icommon__layers_Layer_Styles_Style const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles_Style(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles_Style(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles_Style(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles-Style", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles_Style ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles_Style * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles_Style(struct soap*, _icommon__layers_Layer_Styles_Style *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles_Style(struct soap *soap, _icommon__layers_Layer_Styles_Style *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles_Style(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles_Style(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles_Style *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles_Style(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles_Style(struct soap *soap, _icommon__layers_Layer_Styles_Style *p)
{
	if (::soap_read__icommon__layers_Layer_Styles_Style(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_Styles_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_Styles_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_Styles(struct soap*, const char*, int, const _icommon__layers_Layer_Styles *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_Styles * SOAP_FMAC4 soap_in__icommon__layers_Layer_Styles(struct soap*, const char*, _icommon__layers_Layer_Styles *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_Styles * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_Styles(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_Styles * soap_new__icommon__layers_Layer_Styles(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_Styles(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_Styles * soap_new_req__icommon__layers_Layer_Styles(
	struct soap *soap,
	const _icommon__layers_Layer_Styles_Style& Style)
{
	_icommon__layers_Layer_Styles *_p = ::soap_new__icommon__layers_Layer_Styles(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles::Style = Style;
	}
	return _p;
}

inline _icommon__layers_Layer_Styles * soap_new_set__icommon__layers_Layer_Styles(
	struct soap *soap,
	const _icommon__layers_Layer_Styles_Style& Style)
{
	_icommon__layers_Layer_Styles *_p = ::soap_new__icommon__layers_Layer_Styles(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_Styles::Style = Style;
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_Styles(struct soap *soap, _icommon__layers_Layer_Styles const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_Styles(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_Styles(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_Styles(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-Styles", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_Styles ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_Styles * SOAP_FMAC4 soap_get__icommon__layers_Layer_Styles(struct soap*, _icommon__layers_Layer_Styles *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_Styles(struct soap *soap, _icommon__layers_Layer_Styles *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_Styles(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_Styles(struct soap *soap, const char *URL, _icommon__layers_Layer_Styles *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_Styles(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_Styles(struct soap *soap, _icommon__layers_Layer_Styles *p)
{
	if (::soap_read__icommon__layers_Layer_Styles(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_CRS_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_CRS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, const char*, int, const _icommon__layers_Layer_CoordinateReferenceSystems_CRS *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_CoordinateReferenceSystems_CRS * SOAP_FMAC4 soap_in__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, const char*, _icommon__layers_Layer_CoordinateReferenceSystems_CRS *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_CoordinateReferenceSystems_CRS * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_CoordinateReferenceSystems_CRS * soap_new__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_CoordinateReferenceSystems_CRS(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_CoordinateReferenceSystems_CRS * soap_new_req__icommon__layers_Layer_CoordinateReferenceSystems_CRS(
	struct soap *soap,
	const std::string& CRSName,
	const std::string& CRSLabel)
{
	_icommon__layers_Layer_CoordinateReferenceSystems_CRS *_p = ::soap_new__icommon__layers_Layer_CoordinateReferenceSystems_CRS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_CoordinateReferenceSystems_CRS::CRSName = CRSName;
		_p->_icommon__layers_Layer_CoordinateReferenceSystems_CRS::CRSLabel = CRSLabel;
	}
	return _p;
}

inline _icommon__layers_Layer_CoordinateReferenceSystems_CRS * soap_new_set__icommon__layers_Layer_CoordinateReferenceSystems_CRS(
	struct soap *soap,
	const std::string& CRSName,
	const std::string& CRSLabel)
{
	_icommon__layers_Layer_CoordinateReferenceSystems_CRS *_p = ::soap_new__icommon__layers_Layer_CoordinateReferenceSystems_CRS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_CoordinateReferenceSystems_CRS::CRSName = CRSName;
		_p->_icommon__layers_Layer_CoordinateReferenceSystems_CRS::CRSLabel = CRSLabel;
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, _icommon__layers_Layer_CoordinateReferenceSystems_CRS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems-CRS", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_CRS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems_CRS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems-CRS", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_CRS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems_CRS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems-CRS", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_CRS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems_CRS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems-CRS", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_CRS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_CoordinateReferenceSystems_CRS * SOAP_FMAC4 soap_get__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, _icommon__layers_Layer_CoordinateReferenceSystems_CRS *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, _icommon__layers_Layer_CoordinateReferenceSystems_CRS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_CoordinateReferenceSystems_CRS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems_CRS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_CoordinateReferenceSystems_CRS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, _icommon__layers_Layer_CoordinateReferenceSystems_CRS *p)
{
	if (::soap_read__icommon__layers_Layer_CoordinateReferenceSystems_CRS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer_CoordinateReferenceSystems(struct soap*, const char*, int, const _icommon__layers_Layer_CoordinateReferenceSystems *, const char*);
SOAP_FMAC3 _icommon__layers_Layer_CoordinateReferenceSystems * SOAP_FMAC4 soap_in__icommon__layers_Layer_CoordinateReferenceSystems(struct soap*, const char*, _icommon__layers_Layer_CoordinateReferenceSystems *, const char*);
SOAP_FMAC1 _icommon__layers_Layer_CoordinateReferenceSystems * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer_CoordinateReferenceSystems(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer_CoordinateReferenceSystems * soap_new__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer_CoordinateReferenceSystems(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer_CoordinateReferenceSystems * soap_new_req__icommon__layers_Layer_CoordinateReferenceSystems(
	struct soap *soap,
	const std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS> & CRS)
{
	_icommon__layers_Layer_CoordinateReferenceSystems *_p = ::soap_new__icommon__layers_Layer_CoordinateReferenceSystems(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_CoordinateReferenceSystems::CRS = CRS;
	}
	return _p;
}

inline _icommon__layers_Layer_CoordinateReferenceSystems * soap_new_set__icommon__layers_Layer_CoordinateReferenceSystems(
	struct soap *soap,
	const std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS> & CRS)
{
	_icommon__layers_Layer_CoordinateReferenceSystems *_p = ::soap_new__icommon__layers_Layer_CoordinateReferenceSystems(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer_CoordinateReferenceSystems::CRS = CRS;
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, _icommon__layers_Layer_CoordinateReferenceSystems const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer-CoordinateReferenceSystems", p->soap_type() == SOAP_TYPE__icommon__layers_Layer_CoordinateReferenceSystems ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer_CoordinateReferenceSystems * SOAP_FMAC4 soap_get__icommon__layers_Layer_CoordinateReferenceSystems(struct soap*, _icommon__layers_Layer_CoordinateReferenceSystems *, const char*, const char*);

inline int soap_read__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, _icommon__layers_Layer_CoordinateReferenceSystems *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer_CoordinateReferenceSystems(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, const char *URL, _icommon__layers_Layer_CoordinateReferenceSystems *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer_CoordinateReferenceSystems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer_CoordinateReferenceSystems(struct soap *soap, _icommon__layers_Layer_CoordinateReferenceSystems *p)
{
	if (::soap_read__icommon__layers_Layer_CoordinateReferenceSystems(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__layers_Layer_DEFINED
#define SOAP_TYPE__icommon__layers_Layer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__layers_Layer(struct soap*, const char*, int, const _icommon__layers_Layer *, const char*);
SOAP_FMAC3 _icommon__layers_Layer * SOAP_FMAC4 soap_in__icommon__layers_Layer(struct soap*, const char*, _icommon__layers_Layer *, const char*);
SOAP_FMAC1 _icommon__layers_Layer * SOAP_FMAC2 soap_instantiate__icommon__layers_Layer(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__layers_Layer * soap_new__icommon__layers_Layer(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__layers_Layer(soap, n, NULL, NULL, NULL);
}

inline _icommon__layers_Layer * soap_new_req__icommon__layers_Layer(
	struct soap *soap,
	const std::string& Name,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const _icommon__layers_Layer_CoordinateReferenceSystems& CoordinateReferenceSystems,
	const _icommon__layers_Layer_Styles& Styles)
{
	_icommon__layers_Layer *_p = ::soap_new__icommon__layers_Layer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer::Name = Name;
		_p->_icommon__layers_Layer::ResourceTitle = ResourceTitle;
		_p->_icommon__layers_Layer::ResourceAbstract = ResourceAbstract;
		_p->_icommon__layers_Layer::GeographicBoundingBox = GeographicBoundingBox;
		_p->_icommon__layers_Layer::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->_icommon__layers_Layer::CoordinateReferenceSystems = CoordinateReferenceSystems;
		_p->_icommon__layers_Layer::Styles = Styles;
	}
	return _p;
}

inline _icommon__layers_Layer * soap_new_set__icommon__layers_Layer(
	struct soap *soap,
	const std::string& Name,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const _icommon__layers_Layer_CoordinateReferenceSystems& CoordinateReferenceSystems,
	const _icommon__layers_Layer_Styles& Styles,
	std::string *layerName,
	bool *queryable)
{
	_icommon__layers_Layer *_p = ::soap_new__icommon__layers_Layer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__layers_Layer::Name = Name;
		_p->_icommon__layers_Layer::ResourceTitle = ResourceTitle;
		_p->_icommon__layers_Layer::ResourceAbstract = ResourceAbstract;
		_p->_icommon__layers_Layer::Keyword = Keyword;
		_p->_icommon__layers_Layer::GeographicBoundingBox = GeographicBoundingBox;
		_p->_icommon__layers_Layer::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->_icommon__layers_Layer::CoordinateReferenceSystems = CoordinateReferenceSystems;
		_p->_icommon__layers_Layer::Styles = Styles;
		_p->_icommon__layers_Layer::layerName = layerName;
		_p->_icommon__layers_Layer::queryable = queryable;
	}
	return _p;
}

inline int soap_write__icommon__layers_Layer(struct soap *soap, _icommon__layers_Layer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer", p->soap_type() == SOAP_TYPE__icommon__layers_Layer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__layers_Layer(struct soap *soap, const char *URL, _icommon__layers_Layer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer", p->soap_type() == SOAP_TYPE__icommon__layers_Layer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__layers_Layer(struct soap *soap, const char *URL, _icommon__layers_Layer const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer", p->soap_type() == SOAP_TYPE__icommon__layers_Layer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__layers_Layer(struct soap *soap, const char *URL, _icommon__layers_Layer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers-Layer", p->soap_type() == SOAP_TYPE__icommon__layers_Layer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__layers_Layer * SOAP_FMAC4 soap_get__icommon__layers_Layer(struct soap*, _icommon__layers_Layer *, const char*, const char*);

inline int soap_read__icommon__layers_Layer(struct soap *soap, _icommon__layers_Layer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__layers_Layer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__layers_Layer(struct soap *soap, const char *URL, _icommon__layers_Layer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__layers_Layer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__layers_Layer(struct soap *soap, _icommon__layers_Layer *p)
{
	if (::soap_read__icommon__layers_Layer(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___icommon__union_temporalExtent_DEFINED
#define SOAP_TYPE___icommon__union_temporalExtent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___icommon__union_temporalExtent(struct soap*, const char*, int, const __icommon__union_temporalExtent *, const char*);
SOAP_FMAC3 __icommon__union_temporalExtent * SOAP_FMAC4 soap_in___icommon__union_temporalExtent(struct soap*, const char*, __icommon__union_temporalExtent *, const char*);
SOAP_FMAC1 __icommon__union_temporalExtent * SOAP_FMAC2 soap_instantiate___icommon__union_temporalExtent(struct soap*, int, const char*, const char*, size_t*);

inline __icommon__union_temporalExtent * soap_new___icommon__union_temporalExtent(struct soap *soap, int n = -1)
{
	return soap_instantiate___icommon__union_temporalExtent(soap, n, NULL, NULL, NULL);
}

inline __icommon__union_temporalExtent * soap_new_req___icommon__union_temporalExtent(
	struct soap *soap,
	const union _icommon__union_temporalExtent& union_temporalExtent)
{
	__icommon__union_temporalExtent *_p = ::soap_new___icommon__union_temporalExtent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__icommon__union_temporalExtent::union_temporalExtent = union_temporalExtent;
	}
	return _p;
}

inline __icommon__union_temporalExtent * soap_new_set___icommon__union_temporalExtent(
	struct soap *soap,
	int __unionTemporalExtentElement,
	const union _icommon__union_temporalExtent& union_temporalExtent)
{
	__icommon__union_temporalExtent *_p = ::soap_new___icommon__union_temporalExtent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__icommon__union_temporalExtent::__unionTemporalExtentElement = __unionTemporalExtentElement;
		_p->__icommon__union_temporalExtent::union_temporalExtent = union_temporalExtent;
	}
	return _p;
}

inline int soap_write___icommon__union_temporalExtent(struct soap *soap, __icommon__union_temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-icommon:union-temporalExtent", p->soap_type() == SOAP_TYPE___icommon__union_temporalExtent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___icommon__union_temporalExtent(struct soap *soap, const char *URL, __icommon__union_temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-icommon:union-temporalExtent", p->soap_type() == SOAP_TYPE___icommon__union_temporalExtent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___icommon__union_temporalExtent(struct soap *soap, const char *URL, __icommon__union_temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-icommon:union-temporalExtent", p->soap_type() == SOAP_TYPE___icommon__union_temporalExtent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___icommon__union_temporalExtent(struct soap *soap, const char *URL, __icommon__union_temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-icommon:union-temporalExtent", p->soap_type() == SOAP_TYPE___icommon__union_temporalExtent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __icommon__union_temporalExtent * SOAP_FMAC4 soap_get___icommon__union_temporalExtent(struct soap*, __icommon__union_temporalExtent *, const char*, const char*);

inline int soap_read___icommon__union_temporalExtent(struct soap *soap, __icommon__union_temporalExtent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___icommon__union_temporalExtent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___icommon__union_temporalExtent(struct soap *soap, const char *URL, __icommon__union_temporalExtent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___icommon__union_temporalExtent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___icommon__union_temporalExtent(struct soap *soap, __icommon__union_temporalExtent *p)
{
	if (::soap_read___icommon__union_temporalExtent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__responsibleOrganisation_ResponsibleParty_DEFINED
#define SOAP_TYPE__icommon__responsibleOrganisation_ResponsibleParty_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__responsibleOrganisation_ResponsibleParty(struct soap*, const char*, int, const _icommon__responsibleOrganisation_ResponsibleParty *, const char*);
SOAP_FMAC3 _icommon__responsibleOrganisation_ResponsibleParty * SOAP_FMAC4 soap_in__icommon__responsibleOrganisation_ResponsibleParty(struct soap*, const char*, _icommon__responsibleOrganisation_ResponsibleParty *, const char*);
SOAP_FMAC1 _icommon__responsibleOrganisation_ResponsibleParty * SOAP_FMAC2 soap_instantiate__icommon__responsibleOrganisation_ResponsibleParty(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__responsibleOrganisation_ResponsibleParty * soap_new__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__responsibleOrganisation_ResponsibleParty(soap, n, NULL, NULL, NULL);
}

inline _icommon__responsibleOrganisation_ResponsibleParty * soap_new_req__icommon__responsibleOrganisation_ResponsibleParty(
	struct soap *soap,
	const std::string& OrganisationName,
	const std::string& EmailAddress)
{
	_icommon__responsibleOrganisation_ResponsibleParty *_p = ::soap_new__icommon__responsibleOrganisation_ResponsibleParty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__responsibleOrganisation_ResponsibleParty::OrganisationName = OrganisationName;
		_p->_icommon__responsibleOrganisation_ResponsibleParty::EmailAddress = EmailAddress;
	}
	return _p;
}

inline _icommon__responsibleOrganisation_ResponsibleParty * soap_new_set__icommon__responsibleOrganisation_ResponsibleParty(
	struct soap *soap,
	const std::string& OrganisationName,
	const std::string& EmailAddress)
{
	_icommon__responsibleOrganisation_ResponsibleParty *_p = ::soap_new__icommon__responsibleOrganisation_ResponsibleParty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__responsibleOrganisation_ResponsibleParty::OrganisationName = OrganisationName;
		_p->_icommon__responsibleOrganisation_ResponsibleParty::EmailAddress = EmailAddress;
	}
	return _p;
}

inline int soap_write__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, _icommon__responsibleOrganisation_ResponsibleParty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation-ResponsibleParty", p->soap_type() == SOAP_TYPE__icommon__responsibleOrganisation_ResponsibleParty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, const char *URL, _icommon__responsibleOrganisation_ResponsibleParty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation-ResponsibleParty", p->soap_type() == SOAP_TYPE__icommon__responsibleOrganisation_ResponsibleParty ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, const char *URL, _icommon__responsibleOrganisation_ResponsibleParty const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation-ResponsibleParty", p->soap_type() == SOAP_TYPE__icommon__responsibleOrganisation_ResponsibleParty ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, const char *URL, _icommon__responsibleOrganisation_ResponsibleParty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation-ResponsibleParty", p->soap_type() == SOAP_TYPE__icommon__responsibleOrganisation_ResponsibleParty ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__responsibleOrganisation_ResponsibleParty * SOAP_FMAC4 soap_get__icommon__responsibleOrganisation_ResponsibleParty(struct soap*, _icommon__responsibleOrganisation_ResponsibleParty *, const char*, const char*);

inline int soap_read__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, _icommon__responsibleOrganisation_ResponsibleParty *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__responsibleOrganisation_ResponsibleParty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, const char *URL, _icommon__responsibleOrganisation_ResponsibleParty *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__responsibleOrganisation_ResponsibleParty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__responsibleOrganisation_ResponsibleParty(struct soap *soap, _icommon__responsibleOrganisation_ResponsibleParty *p)
{
	if (::soap_read__icommon__responsibleOrganisation_ResponsibleParty(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__fes__TemporalOperandsType_TemporalOperand_DEFINED
#define SOAP_TYPE__fes__TemporalOperandsType_TemporalOperand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__TemporalOperandsType_TemporalOperand(struct soap*, const char*, int, const _fes__TemporalOperandsType_TemporalOperand *, const char*);
SOAP_FMAC3 _fes__TemporalOperandsType_TemporalOperand * SOAP_FMAC4 soap_in__fes__TemporalOperandsType_TemporalOperand(struct soap*, const char*, _fes__TemporalOperandsType_TemporalOperand *, const char*);
SOAP_FMAC1 _fes__TemporalOperandsType_TemporalOperand * SOAP_FMAC2 soap_instantiate__fes__TemporalOperandsType_TemporalOperand(struct soap*, int, const char*, const char*, size_t*);

inline _fes__TemporalOperandsType_TemporalOperand * soap_new__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, int n = -1)
{
	return soap_instantiate__fes__TemporalOperandsType_TemporalOperand(soap, n, NULL, NULL, NULL);
}

inline _fes__TemporalOperandsType_TemporalOperand * soap_new_req__fes__TemporalOperandsType_TemporalOperand(
	struct soap *soap,
	char *name)
{
	_fes__TemporalOperandsType_TemporalOperand *_p = ::soap_new__fes__TemporalOperandsType_TemporalOperand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_fes__TemporalOperandsType_TemporalOperand::name = name;
	}
	return _p;
}

inline _fes__TemporalOperandsType_TemporalOperand * soap_new_set__fes__TemporalOperandsType_TemporalOperand(
	struct soap *soap,
	char *name)
{
	_fes__TemporalOperandsType_TemporalOperand *_p = ::soap_new__fes__TemporalOperandsType_TemporalOperand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_fes__TemporalOperandsType_TemporalOperand::name = name;
	}
	return _p;
}

inline int soap_write__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, _fes__TemporalOperandsType_TemporalOperand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType-TemporalOperand", p->soap_type() == SOAP_TYPE__fes__TemporalOperandsType_TemporalOperand ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, const char *URL, _fes__TemporalOperandsType_TemporalOperand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType-TemporalOperand", p->soap_type() == SOAP_TYPE__fes__TemporalOperandsType_TemporalOperand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, const char *URL, _fes__TemporalOperandsType_TemporalOperand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType-TemporalOperand", p->soap_type() == SOAP_TYPE__fes__TemporalOperandsType_TemporalOperand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, const char *URL, _fes__TemporalOperandsType_TemporalOperand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType-TemporalOperand", p->soap_type() == SOAP_TYPE__fes__TemporalOperandsType_TemporalOperand ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _fes__TemporalOperandsType_TemporalOperand * SOAP_FMAC4 soap_get__fes__TemporalOperandsType_TemporalOperand(struct soap*, _fes__TemporalOperandsType_TemporalOperand *, const char*, const char*);

inline int soap_read__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, _fes__TemporalOperandsType_TemporalOperand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__fes__TemporalOperandsType_TemporalOperand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, const char *URL, _fes__TemporalOperandsType_TemporalOperand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__fes__TemporalOperandsType_TemporalOperand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__fes__TemporalOperandsType_TemporalOperand(struct soap *soap, _fes__TemporalOperandsType_TemporalOperand *p)
{
	if (::soap_read__fes__TemporalOperandsType_TemporalOperand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__fes__GeometryOperandsType_GeometryOperand_DEFINED
#define SOAP_TYPE__fes__GeometryOperandsType_GeometryOperand_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__GeometryOperandsType_GeometryOperand(struct soap*, const char*, int, const _fes__GeometryOperandsType_GeometryOperand *, const char*);
SOAP_FMAC3 _fes__GeometryOperandsType_GeometryOperand * SOAP_FMAC4 soap_in__fes__GeometryOperandsType_GeometryOperand(struct soap*, const char*, _fes__GeometryOperandsType_GeometryOperand *, const char*);
SOAP_FMAC1 _fes__GeometryOperandsType_GeometryOperand * SOAP_FMAC2 soap_instantiate__fes__GeometryOperandsType_GeometryOperand(struct soap*, int, const char*, const char*, size_t*);

inline _fes__GeometryOperandsType_GeometryOperand * soap_new__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, int n = -1)
{
	return soap_instantiate__fes__GeometryOperandsType_GeometryOperand(soap, n, NULL, NULL, NULL);
}

inline _fes__GeometryOperandsType_GeometryOperand * soap_new_req__fes__GeometryOperandsType_GeometryOperand(
	struct soap *soap,
	char *name)
{
	_fes__GeometryOperandsType_GeometryOperand *_p = ::soap_new__fes__GeometryOperandsType_GeometryOperand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_fes__GeometryOperandsType_GeometryOperand::name = name;
	}
	return _p;
}

inline _fes__GeometryOperandsType_GeometryOperand * soap_new_set__fes__GeometryOperandsType_GeometryOperand(
	struct soap *soap,
	char *name)
{
	_fes__GeometryOperandsType_GeometryOperand *_p = ::soap_new__fes__GeometryOperandsType_GeometryOperand(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_fes__GeometryOperandsType_GeometryOperand::name = name;
	}
	return _p;
}

inline int soap_write__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, _fes__GeometryOperandsType_GeometryOperand const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType-GeometryOperand", p->soap_type() == SOAP_TYPE__fes__GeometryOperandsType_GeometryOperand ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, const char *URL, _fes__GeometryOperandsType_GeometryOperand const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType-GeometryOperand", p->soap_type() == SOAP_TYPE__fes__GeometryOperandsType_GeometryOperand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, const char *URL, _fes__GeometryOperandsType_GeometryOperand const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType-GeometryOperand", p->soap_type() == SOAP_TYPE__fes__GeometryOperandsType_GeometryOperand ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, const char *URL, _fes__GeometryOperandsType_GeometryOperand const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType-GeometryOperand", p->soap_type() == SOAP_TYPE__fes__GeometryOperandsType_GeometryOperand ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _fes__GeometryOperandsType_GeometryOperand * SOAP_FMAC4 soap_get__fes__GeometryOperandsType_GeometryOperand(struct soap*, _fes__GeometryOperandsType_GeometryOperand *, const char*, const char*);

inline int soap_read__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, _fes__GeometryOperandsType_GeometryOperand *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__fes__GeometryOperandsType_GeometryOperand(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, const char *URL, _fes__GeometryOperandsType_GeometryOperand *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__fes__GeometryOperandsType_GeometryOperand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__fes__GeometryOperandsType_GeometryOperand(struct soap *soap, _fes__GeometryOperandsType_GeometryOperand *p)
{
	if (::soap_read__fes__GeometryOperandsType_GeometryOperand(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__union_FunctionType_DEFINED
#define SOAP_TYPE___fes__union_FunctionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__union_FunctionType(struct soap*, const char*, int, const __fes__union_FunctionType *, const char*);
SOAP_FMAC3 __fes__union_FunctionType * SOAP_FMAC4 soap_in___fes__union_FunctionType(struct soap*, const char*, __fes__union_FunctionType *, const char*);
SOAP_FMAC1 __fes__union_FunctionType * SOAP_FMAC2 soap_instantiate___fes__union_FunctionType(struct soap*, int, const char*, const char*, size_t*);

inline __fes__union_FunctionType * soap_new___fes__union_FunctionType(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__union_FunctionType(soap, n, NULL, NULL, NULL);
}

inline __fes__union_FunctionType * soap_new_req___fes__union_FunctionType(
	struct soap *soap,
	const union _fes__union_FunctionType& union_FunctionType)
{
	__fes__union_FunctionType *_p = ::soap_new___fes__union_FunctionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_FunctionType::union_FunctionType = union_FunctionType;
	}
	return _p;
}

inline __fes__union_FunctionType * soap_new_set___fes__union_FunctionType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_FunctionType& union_FunctionType)
{
	__fes__union_FunctionType *_p = ::soap_new___fes__union_FunctionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__fes__union_FunctionType::__unionexpression = __unionexpression;
		_p->__fes__union_FunctionType::union_FunctionType = union_FunctionType;
	}
	return _p;
}

inline int soap_write___fes__union_FunctionType(struct soap *soap, __fes__union_FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FunctionType", p->soap_type() == SOAP_TYPE___fes__union_FunctionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__union_FunctionType(struct soap *soap, const char *URL, __fes__union_FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FunctionType", p->soap_type() == SOAP_TYPE___fes__union_FunctionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__union_FunctionType(struct soap *soap, const char *URL, __fes__union_FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FunctionType", p->soap_type() == SOAP_TYPE___fes__union_FunctionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__union_FunctionType(struct soap *soap, const char *URL, __fes__union_FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-fes:union-FunctionType", p->soap_type() == SOAP_TYPE___fes__union_FunctionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __fes__union_FunctionType * SOAP_FMAC4 soap_get___fes__union_FunctionType(struct soap*, __fes__union_FunctionType *, const char*, const char*);

inline int soap_read___fes__union_FunctionType(struct soap *soap, __fes__union_FunctionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___fes__union_FunctionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__union_FunctionType(struct soap *soap, const char *URL, __fes__union_FunctionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__union_FunctionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__union_FunctionType(struct soap *soap, __fes__union_FunctionType *p)
{
	if (::soap_read___fes__union_FunctionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___xlink__union_arcType_DEFINED
#define SOAP_TYPE___xlink__union_arcType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xlink__union_arcType(struct soap*, const char*, int, const __xlink__union_arcType *, const char*);
SOAP_FMAC3 __xlink__union_arcType * SOAP_FMAC4 soap_in___xlink__union_arcType(struct soap*, const char*, __xlink__union_arcType *, const char*);
SOAP_FMAC1 __xlink__union_arcType * SOAP_FMAC2 soap_instantiate___xlink__union_arcType(struct soap*, int, const char*, const char*, size_t*);

inline __xlink__union_arcType * soap_new___xlink__union_arcType(struct soap *soap, int n = -1)
{
	return soap_instantiate___xlink__union_arcType(soap, n, NULL, NULL, NULL);
}

inline __xlink__union_arcType * soap_new_req___xlink__union_arcType(
	struct soap *soap,
	const union _xlink__union_arcType& union_arcType)
{
	__xlink__union_arcType *_p = ::soap_new___xlink__union_arcType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__xlink__union_arcType::union_arcType = union_arcType;
	}
	return _p;
}

inline __xlink__union_arcType * soap_new_set___xlink__union_arcType(
	struct soap *soap,
	int __uniontitle,
	const union _xlink__union_arcType& union_arcType)
{
	__xlink__union_arcType *_p = ::soap_new___xlink__union_arcType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__xlink__union_arcType::__uniontitle = __uniontitle;
		_p->__xlink__union_arcType::union_arcType = union_arcType;
	}
	return _p;
}

inline int soap_write___xlink__union_arcType(struct soap *soap, __xlink__union_arcType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-arcType", p->soap_type() == SOAP_TYPE___xlink__union_arcType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___xlink__union_arcType(struct soap *soap, const char *URL, __xlink__union_arcType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-arcType", p->soap_type() == SOAP_TYPE___xlink__union_arcType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___xlink__union_arcType(struct soap *soap, const char *URL, __xlink__union_arcType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-arcType", p->soap_type() == SOAP_TYPE___xlink__union_arcType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___xlink__union_arcType(struct soap *soap, const char *URL, __xlink__union_arcType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-arcType", p->soap_type() == SOAP_TYPE___xlink__union_arcType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __xlink__union_arcType * SOAP_FMAC4 soap_get___xlink__union_arcType(struct soap*, __xlink__union_arcType *, const char*, const char*);

inline int soap_read___xlink__union_arcType(struct soap *soap, __xlink__union_arcType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___xlink__union_arcType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___xlink__union_arcType(struct soap *soap, const char *URL, __xlink__union_arcType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___xlink__union_arcType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___xlink__union_arcType(struct soap *soap, __xlink__union_arcType *p)
{
	if (::soap_read___xlink__union_arcType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___xlink__union_locatorType_DEFINED
#define SOAP_TYPE___xlink__union_locatorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xlink__union_locatorType(struct soap*, const char*, int, const __xlink__union_locatorType *, const char*);
SOAP_FMAC3 __xlink__union_locatorType * SOAP_FMAC4 soap_in___xlink__union_locatorType(struct soap*, const char*, __xlink__union_locatorType *, const char*);
SOAP_FMAC1 __xlink__union_locatorType * SOAP_FMAC2 soap_instantiate___xlink__union_locatorType(struct soap*, int, const char*, const char*, size_t*);

inline __xlink__union_locatorType * soap_new___xlink__union_locatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate___xlink__union_locatorType(soap, n, NULL, NULL, NULL);
}

inline __xlink__union_locatorType * soap_new_req___xlink__union_locatorType(
	struct soap *soap,
	const union _xlink__union_locatorType& union_locatorType)
{
	__xlink__union_locatorType *_p = ::soap_new___xlink__union_locatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__xlink__union_locatorType::union_locatorType = union_locatorType;
	}
	return _p;
}

inline __xlink__union_locatorType * soap_new_set___xlink__union_locatorType(
	struct soap *soap,
	int __uniontitle,
	const union _xlink__union_locatorType& union_locatorType)
{
	__xlink__union_locatorType *_p = ::soap_new___xlink__union_locatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__xlink__union_locatorType::__uniontitle = __uniontitle;
		_p->__xlink__union_locatorType::union_locatorType = union_locatorType;
	}
	return _p;
}

inline int soap_write___xlink__union_locatorType(struct soap *soap, __xlink__union_locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-locatorType", p->soap_type() == SOAP_TYPE___xlink__union_locatorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___xlink__union_locatorType(struct soap *soap, const char *URL, __xlink__union_locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-locatorType", p->soap_type() == SOAP_TYPE___xlink__union_locatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___xlink__union_locatorType(struct soap *soap, const char *URL, __xlink__union_locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-locatorType", p->soap_type() == SOAP_TYPE___xlink__union_locatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___xlink__union_locatorType(struct soap *soap, const char *URL, __xlink__union_locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-locatorType", p->soap_type() == SOAP_TYPE___xlink__union_locatorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __xlink__union_locatorType * SOAP_FMAC4 soap_get___xlink__union_locatorType(struct soap*, __xlink__union_locatorType *, const char*, const char*);

inline int soap_read___xlink__union_locatorType(struct soap *soap, __xlink__union_locatorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___xlink__union_locatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___xlink__union_locatorType(struct soap *soap, const char *URL, __xlink__union_locatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___xlink__union_locatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___xlink__union_locatorType(struct soap *soap, __xlink__union_locatorType *p)
{
	if (::soap_read___xlink__union_locatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___xlink__union_extended_DEFINED
#define SOAP_TYPE___xlink__union_extended_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xlink__union_extended(struct soap*, const char*, int, const __xlink__union_extended *, const char*);
SOAP_FMAC3 __xlink__union_extended * SOAP_FMAC4 soap_in___xlink__union_extended(struct soap*, const char*, __xlink__union_extended *, const char*);
SOAP_FMAC1 __xlink__union_extended * SOAP_FMAC2 soap_instantiate___xlink__union_extended(struct soap*, int, const char*, const char*, size_t*);

inline __xlink__union_extended * soap_new___xlink__union_extended(struct soap *soap, int n = -1)
{
	return soap_instantiate___xlink__union_extended(soap, n, NULL, NULL, NULL);
}

inline __xlink__union_extended * soap_new_req___xlink__union_extended(
	struct soap *soap,
	const union _xlink__union_extended& union_extended)
{
	__xlink__union_extended *_p = ::soap_new___xlink__union_extended(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__xlink__union_extended::union_extended = union_extended;
	}
	return _p;
}

inline __xlink__union_extended * soap_new_set___xlink__union_extended(
	struct soap *soap,
	int __union_extended,
	const union _xlink__union_extended& union_extended)
{
	__xlink__union_extended *_p = ::soap_new___xlink__union_extended(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__xlink__union_extended::__union_extended = __union_extended;
		_p->__xlink__union_extended::union_extended = union_extended;
	}
	return _p;
}

inline int soap_write___xlink__union_extended(struct soap *soap, __xlink__union_extended const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-extended", p->soap_type() == SOAP_TYPE___xlink__union_extended ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___xlink__union_extended(struct soap *soap, const char *URL, __xlink__union_extended const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-extended", p->soap_type() == SOAP_TYPE___xlink__union_extended ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___xlink__union_extended(struct soap *soap, const char *URL, __xlink__union_extended const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-extended", p->soap_type() == SOAP_TYPE___xlink__union_extended ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___xlink__union_extended(struct soap *soap, const char *URL, __xlink__union_extended const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-xlink:union-extended", p->soap_type() == SOAP_TYPE___xlink__union_extended ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __xlink__union_extended * SOAP_FMAC4 soap_get___xlink__union_extended(struct soap*, __xlink__union_extended *, const char*, const char*);

inline int soap_read___xlink__union_extended(struct soap *soap, __xlink__union_extended *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___xlink__union_extended(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___xlink__union_extended(struct soap *soap, const char *URL, __xlink__union_extended *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___xlink__union_extended(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___xlink__union_extended(struct soap *soap, __xlink__union_extended *p)
{
	if (::soap_read___xlink__union_extended(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ows__union_AllowedValues_DEFINED
#define SOAP_TYPE___ows__union_AllowedValues_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ows__union_AllowedValues(struct soap*, const char*, int, const __ows__union_AllowedValues *, const char*);
SOAP_FMAC3 __ows__union_AllowedValues * SOAP_FMAC4 soap_in___ows__union_AllowedValues(struct soap*, const char*, __ows__union_AllowedValues *, const char*);
SOAP_FMAC1 __ows__union_AllowedValues * SOAP_FMAC2 soap_instantiate___ows__union_AllowedValues(struct soap*, int, const char*, const char*, size_t*);

inline __ows__union_AllowedValues * soap_new___ows__union_AllowedValues(struct soap *soap, int n = -1)
{
	return soap_instantiate___ows__union_AllowedValues(soap, n, NULL, NULL, NULL);
}

inline __ows__union_AllowedValues * soap_new_req___ows__union_AllowedValues(
	struct soap *soap,
	const union _ows__union_AllowedValues& union_AllowedValues)
{
	__ows__union_AllowedValues *_p = ::soap_new___ows__union_AllowedValues(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_AllowedValues::union_AllowedValues = union_AllowedValues;
	}
	return _p;
}

inline __ows__union_AllowedValues * soap_new_set___ows__union_AllowedValues(
	struct soap *soap,
	int __union_AllowedValues,
	const union _ows__union_AllowedValues& union_AllowedValues)
{
	__ows__union_AllowedValues *_p = ::soap_new___ows__union_AllowedValues(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_AllowedValues::__union_AllowedValues = __union_AllowedValues;
		_p->__ows__union_AllowedValues::union_AllowedValues = union_AllowedValues;
	}
	return _p;
}

inline int soap_write___ows__union_AllowedValues(struct soap *soap, __ows__union_AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-AllowedValues", p->soap_type() == SOAP_TYPE___ows__union_AllowedValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ows__union_AllowedValues(struct soap *soap, const char *URL, __ows__union_AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-AllowedValues", p->soap_type() == SOAP_TYPE___ows__union_AllowedValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ows__union_AllowedValues(struct soap *soap, const char *URL, __ows__union_AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-AllowedValues", p->soap_type() == SOAP_TYPE___ows__union_AllowedValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ows__union_AllowedValues(struct soap *soap, const char *URL, __ows__union_AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-AllowedValues", p->soap_type() == SOAP_TYPE___ows__union_AllowedValues ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __ows__union_AllowedValues * SOAP_FMAC4 soap_get___ows__union_AllowedValues(struct soap*, __ows__union_AllowedValues *, const char*, const char*);

inline int soap_read___ows__union_AllowedValues(struct soap *soap, __ows__union_AllowedValues *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___ows__union_AllowedValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ows__union_AllowedValues(struct soap *soap, const char *URL, __ows__union_AllowedValues *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ows__union_AllowedValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ows__union_AllowedValues(struct soap *soap, __ows__union_AllowedValues *p)
{
	if (::soap_read___ows__union_AllowedValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ows__union_HTTP_DEFINED
#define SOAP_TYPE___ows__union_HTTP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ows__union_HTTP(struct soap*, const char*, int, const __ows__union_HTTP *, const char*);
SOAP_FMAC3 __ows__union_HTTP * SOAP_FMAC4 soap_in___ows__union_HTTP(struct soap*, const char*, __ows__union_HTTP *, const char*);
SOAP_FMAC1 __ows__union_HTTP * SOAP_FMAC2 soap_instantiate___ows__union_HTTP(struct soap*, int, const char*, const char*, size_t*);

inline __ows__union_HTTP * soap_new___ows__union_HTTP(struct soap *soap, int n = -1)
{
	return soap_instantiate___ows__union_HTTP(soap, n, NULL, NULL, NULL);
}

inline __ows__union_HTTP * soap_new_req___ows__union_HTTP(
	struct soap *soap,
	const union _ows__union_HTTP& union_HTTP)
{
	__ows__union_HTTP *_p = ::soap_new___ows__union_HTTP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_HTTP::union_HTTP = union_HTTP;
	}
	return _p;
}

inline __ows__union_HTTP * soap_new_set___ows__union_HTTP(
	struct soap *soap,
	int __union_HTTP,
	const union _ows__union_HTTP& union_HTTP)
{
	__ows__union_HTTP *_p = ::soap_new___ows__union_HTTP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->__ows__union_HTTP::__union_HTTP = __union_HTTP;
		_p->__ows__union_HTTP::union_HTTP = union_HTTP;
	}
	return _p;
}

inline int soap_write___ows__union_HTTP(struct soap *soap, __ows__union_HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-HTTP", p->soap_type() == SOAP_TYPE___ows__union_HTTP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ows__union_HTTP(struct soap *soap, const char *URL, __ows__union_HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-HTTP", p->soap_type() == SOAP_TYPE___ows__union_HTTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ows__union_HTTP(struct soap *soap, const char *URL, __ows__union_HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-HTTP", p->soap_type() == SOAP_TYPE___ows__union_HTTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ows__union_HTTP(struct soap *soap, const char *URL, __ows__union_HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "-ows:union-HTTP", p->soap_type() == SOAP_TYPE___ows__union_HTTP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 __ows__union_HTTP * SOAP_FMAC4 soap_get___ows__union_HTTP(struct soap*, __ows__union_HTTP *, const char*, const char*);

inline int soap_read___ows__union_HTTP(struct soap *soap, __ows__union_HTTP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get___ows__union_HTTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ows__union_HTTP(struct soap *soap, const char *URL, __ows__union_HTTP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ows__union_HTTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ows__union_HTTP(struct soap *soap, __ows__union_HTTP *p)
{
	if (::soap_read___ows__union_HTTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__PropertyType_ValueReference_DEFINED
#define SOAP_TYPE__wfs__PropertyType_ValueReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__PropertyType_ValueReference(struct soap*, const char*, int, const _wfs__PropertyType_ValueReference *, const char*);
SOAP_FMAC3 _wfs__PropertyType_ValueReference * SOAP_FMAC4 soap_in__wfs__PropertyType_ValueReference(struct soap*, const char*, _wfs__PropertyType_ValueReference *, const char*);
SOAP_FMAC1 _wfs__PropertyType_ValueReference * SOAP_FMAC2 soap_instantiate__wfs__PropertyType_ValueReference(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__PropertyType_ValueReference * soap_new__wfs__PropertyType_ValueReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__PropertyType_ValueReference(soap, n, NULL, NULL, NULL);
}

inline _wfs__PropertyType_ValueReference * soap_new_req__wfs__PropertyType_ValueReference(
	struct soap *soap,
	const std::string& __item)
{
	_wfs__PropertyType_ValueReference *_p = ::soap_new__wfs__PropertyType_ValueReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__PropertyType_ValueReference::__item = __item;
	}
	return _p;
}

inline _wfs__PropertyType_ValueReference * soap_new_set__wfs__PropertyType_ValueReference(
	struct soap *soap,
	const std::string& __item,
	enum wfs__UpdateActionType action)
{
	_wfs__PropertyType_ValueReference *_p = ::soap_new__wfs__PropertyType_ValueReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__PropertyType_ValueReference::__item = __item;
		_p->_wfs__PropertyType_ValueReference::action = action;
	}
	return _p;
}

inline int soap_write__wfs__PropertyType_ValueReference(struct soap *soap, _wfs__PropertyType_ValueReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType-ValueReference", p->soap_type() == SOAP_TYPE__wfs__PropertyType_ValueReference ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__PropertyType_ValueReference(struct soap *soap, const char *URL, _wfs__PropertyType_ValueReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType-ValueReference", p->soap_type() == SOAP_TYPE__wfs__PropertyType_ValueReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__PropertyType_ValueReference(struct soap *soap, const char *URL, _wfs__PropertyType_ValueReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType-ValueReference", p->soap_type() == SOAP_TYPE__wfs__PropertyType_ValueReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__PropertyType_ValueReference(struct soap *soap, const char *URL, _wfs__PropertyType_ValueReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType-ValueReference", p->soap_type() == SOAP_TYPE__wfs__PropertyType_ValueReference ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__PropertyType_ValueReference * SOAP_FMAC4 soap_get__wfs__PropertyType_ValueReference(struct soap*, _wfs__PropertyType_ValueReference *, const char*, const char*);

inline int soap_read__wfs__PropertyType_ValueReference(struct soap *soap, _wfs__PropertyType_ValueReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__PropertyType_ValueReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__PropertyType_ValueReference(struct soap *soap, const char *URL, _wfs__PropertyType_ValueReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__PropertyType_ValueReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__PropertyType_ValueReference(struct soap *soap, _wfs__PropertyType_ValueReference *p)
{
	if (::soap_read__wfs__PropertyType_ValueReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__FeatureTypeType_NoCRS_DEFINED
#define SOAP_TYPE__wfs__FeatureTypeType_NoCRS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__FeatureTypeType_NoCRS(struct soap*, const char*, int, const _wfs__FeatureTypeType_NoCRS *, const char*);
SOAP_FMAC3 _wfs__FeatureTypeType_NoCRS * SOAP_FMAC4 soap_in__wfs__FeatureTypeType_NoCRS(struct soap*, const char*, _wfs__FeatureTypeType_NoCRS *, const char*);
SOAP_FMAC1 _wfs__FeatureTypeType_NoCRS * SOAP_FMAC2 soap_instantiate__wfs__FeatureTypeType_NoCRS(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__FeatureTypeType_NoCRS * soap_new__wfs__FeatureTypeType_NoCRS(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__FeatureTypeType_NoCRS(soap, n, NULL, NULL, NULL);
}

inline _wfs__FeatureTypeType_NoCRS * soap_new_req__wfs__FeatureTypeType_NoCRS(
	struct soap *soap)
{
	_wfs__FeatureTypeType_NoCRS *_p = ::soap_new__wfs__FeatureTypeType_NoCRS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wfs__FeatureTypeType_NoCRS * soap_new_set__wfs__FeatureTypeType_NoCRS(
	struct soap *soap)
{
	_wfs__FeatureTypeType_NoCRS *_p = ::soap_new__wfs__FeatureTypeType_NoCRS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__wfs__FeatureTypeType_NoCRS(struct soap *soap, _wfs__FeatureTypeType_NoCRS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType-NoCRS", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeType_NoCRS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__FeatureTypeType_NoCRS(struct soap *soap, const char *URL, _wfs__FeatureTypeType_NoCRS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType-NoCRS", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeType_NoCRS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__FeatureTypeType_NoCRS(struct soap *soap, const char *URL, _wfs__FeatureTypeType_NoCRS const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType-NoCRS", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeType_NoCRS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__FeatureTypeType_NoCRS(struct soap *soap, const char *URL, _wfs__FeatureTypeType_NoCRS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType-NoCRS", p->soap_type() == SOAP_TYPE__wfs__FeatureTypeType_NoCRS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__FeatureTypeType_NoCRS * SOAP_FMAC4 soap_get__wfs__FeatureTypeType_NoCRS(struct soap*, _wfs__FeatureTypeType_NoCRS *, const char*, const char*);

inline int soap_read__wfs__FeatureTypeType_NoCRS(struct soap *soap, _wfs__FeatureTypeType_NoCRS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__FeatureTypeType_NoCRS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__FeatureTypeType_NoCRS(struct soap *soap, const char *URL, _wfs__FeatureTypeType_NoCRS *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__FeatureTypeType_NoCRS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__FeatureTypeType_NoCRS(struct soap *soap, _wfs__FeatureTypeType_NoCRS *p)
{
	if (::soap_read__wfs__FeatureTypeType_NoCRS(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__euLanguageIETF__DEFINED
#define SOAP_TYPE_icommon__euLanguageIETF__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__euLanguageIETF_(struct soap*, const char*, int, const icommon__euLanguageIETF_ *, const char*);
SOAP_FMAC3 icommon__euLanguageIETF_ * SOAP_FMAC4 soap_in_icommon__euLanguageIETF_(struct soap*, const char*, icommon__euLanguageIETF_ *, const char*);
SOAP_FMAC1 icommon__euLanguageIETF_ * SOAP_FMAC2 soap_instantiate_icommon__euLanguageIETF_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__euLanguageIETF_ * soap_new_icommon__euLanguageIETF_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__euLanguageIETF_(soap, n, NULL, NULL, NULL);
}

inline icommon__euLanguageIETF_ * soap_new_req_icommon__euLanguageIETF_(
	struct soap *soap,
	enum icommon__euLanguageIETF __item)
{
	icommon__euLanguageIETF_ *_p = ::soap_new_icommon__euLanguageIETF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__euLanguageIETF_::__item = __item;
	}
	return _p;
}

inline icommon__euLanguageIETF_ * soap_new_set_icommon__euLanguageIETF_(
	struct soap *soap,
	enum icommon__euLanguageIETF __item,
	char *__item__1)
{
	icommon__euLanguageIETF_ *_p = ::soap_new_icommon__euLanguageIETF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__euLanguageIETF_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__euLanguageIETF_(struct soap *soap, icommon__euLanguageIETF_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageIETF", p->soap_type() == SOAP_TYPE_icommon__euLanguageIETF_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__euLanguageIETF_(struct soap *soap, const char *URL, icommon__euLanguageIETF_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageIETF", p->soap_type() == SOAP_TYPE_icommon__euLanguageIETF_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__euLanguageIETF_(struct soap *soap, const char *URL, icommon__euLanguageIETF_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageIETF", p->soap_type() == SOAP_TYPE_icommon__euLanguageIETF_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__euLanguageIETF_(struct soap *soap, const char *URL, icommon__euLanguageIETF_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageIETF", p->soap_type() == SOAP_TYPE_icommon__euLanguageIETF_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__euLanguageIETF_ * SOAP_FMAC4 soap_get_icommon__euLanguageIETF_(struct soap*, icommon__euLanguageIETF_ *, const char*, const char*);

inline int soap_read_icommon__euLanguageIETF_(struct soap *soap, icommon__euLanguageIETF_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__euLanguageIETF_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__euLanguageIETF_(struct soap *soap, const char *URL, icommon__euLanguageIETF_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__euLanguageIETF_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__euLanguageIETF_(struct soap *soap, icommon__euLanguageIETF_ *p)
{
	if (::soap_read_icommon__euLanguageIETF_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__euLanguageISO6392B__DEFINED
#define SOAP_TYPE_icommon__euLanguageISO6392B__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__euLanguageISO6392B_(struct soap*, const char*, int, const icommon__euLanguageISO6392B_ *, const char*);
SOAP_FMAC3 icommon__euLanguageISO6392B_ * SOAP_FMAC4 soap_in_icommon__euLanguageISO6392B_(struct soap*, const char*, icommon__euLanguageISO6392B_ *, const char*);
SOAP_FMAC1 icommon__euLanguageISO6392B_ * SOAP_FMAC2 soap_instantiate_icommon__euLanguageISO6392B_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__euLanguageISO6392B_ * soap_new_icommon__euLanguageISO6392B_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__euLanguageISO6392B_(soap, n, NULL, NULL, NULL);
}

inline icommon__euLanguageISO6392B_ * soap_new_req_icommon__euLanguageISO6392B_(
	struct soap *soap,
	enum icommon__euLanguageISO6392B __item)
{
	icommon__euLanguageISO6392B_ *_p = ::soap_new_icommon__euLanguageISO6392B_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__euLanguageISO6392B_::__item = __item;
	}
	return _p;
}

inline icommon__euLanguageISO6392B_ * soap_new_set_icommon__euLanguageISO6392B_(
	struct soap *soap,
	enum icommon__euLanguageISO6392B __item,
	char *__item__1)
{
	icommon__euLanguageISO6392B_ *_p = ::soap_new_icommon__euLanguageISO6392B_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__euLanguageISO6392B_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__euLanguageISO6392B_(struct soap *soap, icommon__euLanguageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageISO6392B", p->soap_type() == SOAP_TYPE_icommon__euLanguageISO6392B_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__euLanguageISO6392B_(struct soap *soap, const char *URL, icommon__euLanguageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageISO6392B", p->soap_type() == SOAP_TYPE_icommon__euLanguageISO6392B_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__euLanguageISO6392B_(struct soap *soap, const char *URL, icommon__euLanguageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageISO6392B", p->soap_type() == SOAP_TYPE_icommon__euLanguageISO6392B_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__euLanguageISO6392B_(struct soap *soap, const char *URL, icommon__euLanguageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:euLanguageISO6392B", p->soap_type() == SOAP_TYPE_icommon__euLanguageISO6392B_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__euLanguageISO6392B_ * SOAP_FMAC4 soap_get_icommon__euLanguageISO6392B_(struct soap*, icommon__euLanguageISO6392B_ *, const char*, const char*);

inline int soap_read_icommon__euLanguageISO6392B_(struct soap *soap, icommon__euLanguageISO6392B_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__euLanguageISO6392B_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__euLanguageISO6392B_(struct soap *soap, const char *URL, icommon__euLanguageISO6392B_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__euLanguageISO6392B_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__euLanguageISO6392B_(struct soap *soap, icommon__euLanguageISO6392B_ *p)
{
	if (::soap_read_icommon__euLanguageISO6392B_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__keywordValue___DEFINED
#define SOAP_TYPE_icommon__keywordValue___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__keywordValue__(struct soap*, const char*, int, const icommon__keywordValue__ *, const char*);
SOAP_FMAC3 icommon__keywordValue__ * SOAP_FMAC4 soap_in_icommon__keywordValue__(struct soap*, const char*, icommon__keywordValue__ *, const char*);
SOAP_FMAC1 icommon__keywordValue__ * SOAP_FMAC2 soap_instantiate_icommon__keywordValue__(struct soap*, int, const char*, const char*, size_t*);

inline icommon__keywordValue__ * soap_new_icommon__keywordValue__(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__keywordValue__(soap, n, NULL, NULL, NULL);
}

inline icommon__keywordValue__ * soap_new_req_icommon__keywordValue__(
	struct soap *soap,
	const std::string& __item)
{
	icommon__keywordValue__ *_p = ::soap_new_icommon__keywordValue__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__keywordValue__::__item = __item;
	}
	return _p;
}

inline icommon__keywordValue__ * soap_new_set_icommon__keywordValue__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	icommon__keywordValue__ *_p = ::soap_new_icommon__keywordValue__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__keywordValue__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__keywordValue__(struct soap *soap, icommon__keywordValue__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keywordValue", p->soap_type() == SOAP_TYPE_icommon__keywordValue__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__keywordValue__(struct soap *soap, const char *URL, icommon__keywordValue__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keywordValue", p->soap_type() == SOAP_TYPE_icommon__keywordValue__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__keywordValue__(struct soap *soap, const char *URL, icommon__keywordValue__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keywordValue", p->soap_type() == SOAP_TYPE_icommon__keywordValue__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__keywordValue__(struct soap *soap, const char *URL, icommon__keywordValue__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keywordValue", p->soap_type() == SOAP_TYPE_icommon__keywordValue__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__keywordValue__ * SOAP_FMAC4 soap_get_icommon__keywordValue__(struct soap*, icommon__keywordValue__ *, const char*, const char*);

inline int soap_read_icommon__keywordValue__(struct soap *soap, icommon__keywordValue__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__keywordValue__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__keywordValue__(struct soap *soap, const char *URL, icommon__keywordValue__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__keywordValue__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__keywordValue__(struct soap *soap, icommon__keywordValue__ *p)
{
	if (::soap_read_icommon__keywordValue__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* icommon__keywordValue is a typedef synonym of icommon__notEmptyString */

#ifndef SOAP_TYPE_icommon__keywordValue_DEFINED
#define SOAP_TYPE_icommon__keywordValue_DEFINED

#define soap_default_icommon__keywordValue soap_default_icommon__notEmptyString


#define soap_serialize_icommon__keywordValue soap_serialize_icommon__notEmptyString


#define soap_icommon__keywordValue2s(soap, a) ((a).c_str())

#define soap_out_icommon__keywordValue soap_out_icommon__notEmptyString


#define soap_s2icommon__keywordValue(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, -1, NULL)

#define soap_in_icommon__keywordValue soap_in_icommon__notEmptyString


#define soap_instantiate_icommon__keywordValue soap_instantiate_icommon__notEmptyString


#define soap_new_icommon__keywordValue soap_new_icommon__notEmptyString


#define soap_put_icommon__keywordValue soap_put_icommon__notEmptyString


#define soap_write_icommon__keywordValue soap_write_icommon__notEmptyString


#define soap_PUT_icommon__keywordValue soap_PUT_icommon__notEmptyString


#define soap_PATCH_icommon__keywordValue soap_PATCH_icommon__notEmptyString


#define soap_POST_send_icommon__keywordValue soap_POST_send_icommon__notEmptyString


#define soap_get_icommon__keywordValue soap_get_icommon__notEmptyString


#define soap_read_icommon__keywordValue soap_read_icommon__notEmptyString


#define soap_GET_icommon__keywordValue soap_GET_icommon__notEmptyString


#define soap_POST_recv_icommon__keywordValue soap_POST_recv_icommon__notEmptyString

#endif

#ifndef SOAP_TYPE_icommon__otherSpatialDataServiceType__DEFINED
#define SOAP_TYPE_icommon__otherSpatialDataServiceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__otherSpatialDataServiceType_(struct soap*, const char*, int, const icommon__otherSpatialDataServiceType_ *, const char*);
SOAP_FMAC3 icommon__otherSpatialDataServiceType_ * SOAP_FMAC4 soap_in_icommon__otherSpatialDataServiceType_(struct soap*, const char*, icommon__otherSpatialDataServiceType_ *, const char*);
SOAP_FMAC1 icommon__otherSpatialDataServiceType_ * SOAP_FMAC2 soap_instantiate_icommon__otherSpatialDataServiceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__otherSpatialDataServiceType_ * soap_new_icommon__otherSpatialDataServiceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__otherSpatialDataServiceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__otherSpatialDataServiceType_ * soap_new_req_icommon__otherSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__otherSpatialDataServiceType __item)
{
	icommon__otherSpatialDataServiceType_ *_p = ::soap_new_icommon__otherSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__otherSpatialDataServiceType_::__item = __item;
	}
	return _p;
}

inline icommon__otherSpatialDataServiceType_ * soap_new_set_icommon__otherSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__otherSpatialDataServiceType __item,
	char *__item__1)
{
	icommon__otherSpatialDataServiceType_ *_p = ::soap_new_icommon__otherSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__otherSpatialDataServiceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__otherSpatialDataServiceType_(struct soap *soap, icommon__otherSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__otherSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__otherSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__otherSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__otherSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__otherSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__otherSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__otherSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__otherSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__otherSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__otherSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__otherSpatialDataServiceType_ * SOAP_FMAC4 soap_get_icommon__otherSpatialDataServiceType_(struct soap*, icommon__otherSpatialDataServiceType_ *, const char*, const char*);

inline int soap_read_icommon__otherSpatialDataServiceType_(struct soap *soap, icommon__otherSpatialDataServiceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__otherSpatialDataServiceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__otherSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__otherSpatialDataServiceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__otherSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__otherSpatialDataServiceType_(struct soap *soap, icommon__otherSpatialDataServiceType_ *p)
{
	if (::soap_read_icommon__otherSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__invokeSpatialDataServiceType__DEFINED
#define SOAP_TYPE_icommon__invokeSpatialDataServiceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__invokeSpatialDataServiceType_(struct soap*, const char*, int, const icommon__invokeSpatialDataServiceType_ *, const char*);
SOAP_FMAC3 icommon__invokeSpatialDataServiceType_ * SOAP_FMAC4 soap_in_icommon__invokeSpatialDataServiceType_(struct soap*, const char*, icommon__invokeSpatialDataServiceType_ *, const char*);
SOAP_FMAC1 icommon__invokeSpatialDataServiceType_ * SOAP_FMAC2 soap_instantiate_icommon__invokeSpatialDataServiceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__invokeSpatialDataServiceType_ * soap_new_icommon__invokeSpatialDataServiceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__invokeSpatialDataServiceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__invokeSpatialDataServiceType_ * soap_new_req_icommon__invokeSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__invokeSpatialDataServiceType __item)
{
	icommon__invokeSpatialDataServiceType_ *_p = ::soap_new_icommon__invokeSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__invokeSpatialDataServiceType_::__item = __item;
	}
	return _p;
}

inline icommon__invokeSpatialDataServiceType_ * soap_new_set_icommon__invokeSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__invokeSpatialDataServiceType __item,
	char *__item__1)
{
	icommon__invokeSpatialDataServiceType_ *_p = ::soap_new_icommon__invokeSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__invokeSpatialDataServiceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__invokeSpatialDataServiceType_(struct soap *soap, icommon__invokeSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__invokeSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__invokeSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__invokeSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__invokeSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__invokeSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__invokeSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__invokeSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__invokeSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__invokeSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__invokeSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__invokeSpatialDataServiceType_ * SOAP_FMAC4 soap_get_icommon__invokeSpatialDataServiceType_(struct soap*, icommon__invokeSpatialDataServiceType_ *, const char*, const char*);

inline int soap_read_icommon__invokeSpatialDataServiceType_(struct soap *soap, icommon__invokeSpatialDataServiceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__invokeSpatialDataServiceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__invokeSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__invokeSpatialDataServiceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__invokeSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__invokeSpatialDataServiceType_(struct soap *soap, icommon__invokeSpatialDataServiceType_ *p)
{
	if (::soap_read_icommon__invokeSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__transformationSpatialDataServiceType__DEFINED
#define SOAP_TYPE_icommon__transformationSpatialDataServiceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__transformationSpatialDataServiceType_(struct soap*, const char*, int, const icommon__transformationSpatialDataServiceType_ *, const char*);
SOAP_FMAC3 icommon__transformationSpatialDataServiceType_ * SOAP_FMAC4 soap_in_icommon__transformationSpatialDataServiceType_(struct soap*, const char*, icommon__transformationSpatialDataServiceType_ *, const char*);
SOAP_FMAC1 icommon__transformationSpatialDataServiceType_ * SOAP_FMAC2 soap_instantiate_icommon__transformationSpatialDataServiceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__transformationSpatialDataServiceType_ * soap_new_icommon__transformationSpatialDataServiceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__transformationSpatialDataServiceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__transformationSpatialDataServiceType_ * soap_new_req_icommon__transformationSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__transformationSpatialDataServiceType __item)
{
	icommon__transformationSpatialDataServiceType_ *_p = ::soap_new_icommon__transformationSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__transformationSpatialDataServiceType_::__item = __item;
	}
	return _p;
}

inline icommon__transformationSpatialDataServiceType_ * soap_new_set_icommon__transformationSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__transformationSpatialDataServiceType __item,
	char *__item__1)
{
	icommon__transformationSpatialDataServiceType_ *_p = ::soap_new_icommon__transformationSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__transformationSpatialDataServiceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__transformationSpatialDataServiceType_(struct soap *soap, icommon__transformationSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__transformationSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__transformationSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__transformationSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__transformationSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__transformationSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__transformationSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__transformationSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__transformationSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__transformationSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__transformationSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__transformationSpatialDataServiceType_ * SOAP_FMAC4 soap_get_icommon__transformationSpatialDataServiceType_(struct soap*, icommon__transformationSpatialDataServiceType_ *, const char*, const char*);

inline int soap_read_icommon__transformationSpatialDataServiceType_(struct soap *soap, icommon__transformationSpatialDataServiceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__transformationSpatialDataServiceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__transformationSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__transformationSpatialDataServiceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__transformationSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__transformationSpatialDataServiceType_(struct soap *soap, icommon__transformationSpatialDataServiceType_ *p)
{
	if (::soap_read_icommon__transformationSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__discoverySpatialDataServiceType__DEFINED
#define SOAP_TYPE_icommon__discoverySpatialDataServiceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__discoverySpatialDataServiceType_(struct soap*, const char*, int, const icommon__discoverySpatialDataServiceType_ *, const char*);
SOAP_FMAC3 icommon__discoverySpatialDataServiceType_ * SOAP_FMAC4 soap_in_icommon__discoverySpatialDataServiceType_(struct soap*, const char*, icommon__discoverySpatialDataServiceType_ *, const char*);
SOAP_FMAC1 icommon__discoverySpatialDataServiceType_ * SOAP_FMAC2 soap_instantiate_icommon__discoverySpatialDataServiceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__discoverySpatialDataServiceType_ * soap_new_icommon__discoverySpatialDataServiceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__discoverySpatialDataServiceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__discoverySpatialDataServiceType_ * soap_new_req_icommon__discoverySpatialDataServiceType_(
	struct soap *soap,
	enum icommon__discoverySpatialDataServiceType __item)
{
	icommon__discoverySpatialDataServiceType_ *_p = ::soap_new_icommon__discoverySpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__discoverySpatialDataServiceType_::__item = __item;
	}
	return _p;
}

inline icommon__discoverySpatialDataServiceType_ * soap_new_set_icommon__discoverySpatialDataServiceType_(
	struct soap *soap,
	enum icommon__discoverySpatialDataServiceType __item,
	char *__item__1)
{
	icommon__discoverySpatialDataServiceType_ *_p = ::soap_new_icommon__discoverySpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__discoverySpatialDataServiceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__discoverySpatialDataServiceType_(struct soap *soap, icommon__discoverySpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoverySpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__discoverySpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__discoverySpatialDataServiceType_(struct soap *soap, const char *URL, icommon__discoverySpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoverySpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__discoverySpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__discoverySpatialDataServiceType_(struct soap *soap, const char *URL, icommon__discoverySpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoverySpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__discoverySpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__discoverySpatialDataServiceType_(struct soap *soap, const char *URL, icommon__discoverySpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoverySpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__discoverySpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__discoverySpatialDataServiceType_ * SOAP_FMAC4 soap_get_icommon__discoverySpatialDataServiceType_(struct soap*, icommon__discoverySpatialDataServiceType_ *, const char*, const char*);

inline int soap_read_icommon__discoverySpatialDataServiceType_(struct soap *soap, icommon__discoverySpatialDataServiceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__discoverySpatialDataServiceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__discoverySpatialDataServiceType_(struct soap *soap, const char *URL, icommon__discoverySpatialDataServiceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__discoverySpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__discoverySpatialDataServiceType_(struct soap *soap, icommon__discoverySpatialDataServiceType_ *p)
{
	if (::soap_read_icommon__discoverySpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__viewSpatialDataServiceType__DEFINED
#define SOAP_TYPE_icommon__viewSpatialDataServiceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__viewSpatialDataServiceType_(struct soap*, const char*, int, const icommon__viewSpatialDataServiceType_ *, const char*);
SOAP_FMAC3 icommon__viewSpatialDataServiceType_ * SOAP_FMAC4 soap_in_icommon__viewSpatialDataServiceType_(struct soap*, const char*, icommon__viewSpatialDataServiceType_ *, const char*);
SOAP_FMAC1 icommon__viewSpatialDataServiceType_ * SOAP_FMAC2 soap_instantiate_icommon__viewSpatialDataServiceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__viewSpatialDataServiceType_ * soap_new_icommon__viewSpatialDataServiceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__viewSpatialDataServiceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__viewSpatialDataServiceType_ * soap_new_req_icommon__viewSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__viewSpatialDataServiceType __item)
{
	icommon__viewSpatialDataServiceType_ *_p = ::soap_new_icommon__viewSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__viewSpatialDataServiceType_::__item = __item;
	}
	return _p;
}

inline icommon__viewSpatialDataServiceType_ * soap_new_set_icommon__viewSpatialDataServiceType_(
	struct soap *soap,
	enum icommon__viewSpatialDataServiceType __item,
	char *__item__1)
{
	icommon__viewSpatialDataServiceType_ *_p = ::soap_new_icommon__viewSpatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__viewSpatialDataServiceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__viewSpatialDataServiceType_(struct soap *soap, icommon__viewSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__viewSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__viewSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__viewSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__viewSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__viewSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__viewSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__viewSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__viewSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__viewSpatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewSpatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__viewSpatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__viewSpatialDataServiceType_ * SOAP_FMAC4 soap_get_icommon__viewSpatialDataServiceType_(struct soap*, icommon__viewSpatialDataServiceType_ *, const char*, const char*);

inline int soap_read_icommon__viewSpatialDataServiceType_(struct soap *soap, icommon__viewSpatialDataServiceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__viewSpatialDataServiceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__viewSpatialDataServiceType_(struct soap *soap, const char *URL, icommon__viewSpatialDataServiceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__viewSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__viewSpatialDataServiceType_(struct soap *soap, icommon__viewSpatialDataServiceType_ *p)
{
	if (::soap_read_icommon__viewSpatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__serviceSpatialDataResourceType__DEFINED
#define SOAP_TYPE_icommon__serviceSpatialDataResourceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__serviceSpatialDataResourceType_(struct soap*, const char*, int, const icommon__serviceSpatialDataResourceType_ *, const char*);
SOAP_FMAC3 icommon__serviceSpatialDataResourceType_ * SOAP_FMAC4 soap_in_icommon__serviceSpatialDataResourceType_(struct soap*, const char*, icommon__serviceSpatialDataResourceType_ *, const char*);
SOAP_FMAC1 icommon__serviceSpatialDataResourceType_ * SOAP_FMAC2 soap_instantiate_icommon__serviceSpatialDataResourceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__serviceSpatialDataResourceType_ * soap_new_icommon__serviceSpatialDataResourceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__serviceSpatialDataResourceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__serviceSpatialDataResourceType_ * soap_new_req_icommon__serviceSpatialDataResourceType_(
	struct soap *soap,
	enum icommon__serviceSpatialDataResourceType __item)
{
	icommon__serviceSpatialDataResourceType_ *_p = ::soap_new_icommon__serviceSpatialDataResourceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__serviceSpatialDataResourceType_::__item = __item;
	}
	return _p;
}

inline icommon__serviceSpatialDataResourceType_ * soap_new_set_icommon__serviceSpatialDataResourceType_(
	struct soap *soap,
	enum icommon__serviceSpatialDataResourceType __item,
	char *__item__1)
{
	icommon__serviceSpatialDataResourceType_ *_p = ::soap_new_icommon__serviceSpatialDataResourceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__serviceSpatialDataResourceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__serviceSpatialDataResourceType_(struct soap *soap, icommon__serviceSpatialDataResourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:serviceSpatialDataResourceType", p->soap_type() == SOAP_TYPE_icommon__serviceSpatialDataResourceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__serviceSpatialDataResourceType_(struct soap *soap, const char *URL, icommon__serviceSpatialDataResourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:serviceSpatialDataResourceType", p->soap_type() == SOAP_TYPE_icommon__serviceSpatialDataResourceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__serviceSpatialDataResourceType_(struct soap *soap, const char *URL, icommon__serviceSpatialDataResourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:serviceSpatialDataResourceType", p->soap_type() == SOAP_TYPE_icommon__serviceSpatialDataResourceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__serviceSpatialDataResourceType_(struct soap *soap, const char *URL, icommon__serviceSpatialDataResourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:serviceSpatialDataResourceType", p->soap_type() == SOAP_TYPE_icommon__serviceSpatialDataResourceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__serviceSpatialDataResourceType_ * SOAP_FMAC4 soap_get_icommon__serviceSpatialDataResourceType_(struct soap*, icommon__serviceSpatialDataResourceType_ *, const char*, const char*);

inline int soap_read_icommon__serviceSpatialDataResourceType_(struct soap *soap, icommon__serviceSpatialDataResourceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__serviceSpatialDataResourceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__serviceSpatialDataResourceType_(struct soap *soap, const char *URL, icommon__serviceSpatialDataResourceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__serviceSpatialDataResourceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__serviceSpatialDataResourceType_(struct soap *soap, icommon__serviceSpatialDataResourceType_ *p)
{
	if (::soap_read_icommon__serviceSpatialDataResourceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__geoBoxDigits___DEFINED
#define SOAP_TYPE_icommon__geoBoxDigits___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__geoBoxDigits__(struct soap*, const char*, int, const icommon__geoBoxDigits__ *, const char*);
SOAP_FMAC3 icommon__geoBoxDigits__ * SOAP_FMAC4 soap_in_icommon__geoBoxDigits__(struct soap*, const char*, icommon__geoBoxDigits__ *, const char*);
SOAP_FMAC1 icommon__geoBoxDigits__ * SOAP_FMAC2 soap_instantiate_icommon__geoBoxDigits__(struct soap*, int, const char*, const char*, size_t*);

inline icommon__geoBoxDigits__ * soap_new_icommon__geoBoxDigits__(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__geoBoxDigits__(soap, n, NULL, NULL, NULL);
}

inline icommon__geoBoxDigits__ * soap_new_req_icommon__geoBoxDigits__(
	struct soap *soap,
	const std::string& __item)
{
	icommon__geoBoxDigits__ *_p = ::soap_new_icommon__geoBoxDigits__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__geoBoxDigits__::__item = __item;
	}
	return _p;
}

inline icommon__geoBoxDigits__ * soap_new_set_icommon__geoBoxDigits__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	icommon__geoBoxDigits__ *_p = ::soap_new_icommon__geoBoxDigits__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__geoBoxDigits__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__geoBoxDigits__(struct soap *soap, icommon__geoBoxDigits__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geoBoxDigits", p->soap_type() == SOAP_TYPE_icommon__geoBoxDigits__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__geoBoxDigits__(struct soap *soap, const char *URL, icommon__geoBoxDigits__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geoBoxDigits", p->soap_type() == SOAP_TYPE_icommon__geoBoxDigits__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__geoBoxDigits__(struct soap *soap, const char *URL, icommon__geoBoxDigits__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geoBoxDigits", p->soap_type() == SOAP_TYPE_icommon__geoBoxDigits__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__geoBoxDigits__(struct soap *soap, const char *URL, icommon__geoBoxDigits__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geoBoxDigits", p->soap_type() == SOAP_TYPE_icommon__geoBoxDigits__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__geoBoxDigits__ * SOAP_FMAC4 soap_get_icommon__geoBoxDigits__(struct soap*, icommon__geoBoxDigits__ *, const char*, const char*);

inline int soap_read_icommon__geoBoxDigits__(struct soap *soap, icommon__geoBoxDigits__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__geoBoxDigits__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__geoBoxDigits__(struct soap *soap, const char *URL, icommon__geoBoxDigits__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__geoBoxDigits__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__geoBoxDigits__(struct soap *soap, icommon__geoBoxDigits__ *p)
{
	if (::soap_read_icommon__geoBoxDigits__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__geoBoxDigits_DEFINED
#define SOAP_TYPE_icommon__geoBoxDigits_DEFINED

inline void soap_default_icommon__geoBoxDigits(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_icommon__geoBoxDigits(struct soap*, const std::string *);

#define soap_icommon__geoBoxDigits2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__geoBoxDigits(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2icommon__geoBoxDigits(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "-?(0+|(0*[1-9]\\d*))(\\.\\d{2,})")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_icommon__geoBoxDigits(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_icommon__geoBoxDigits soap_instantiate_std__string


#define soap_new_icommon__geoBoxDigits soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__geoBoxDigits(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_icommon__geoBoxDigits(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__geoBoxDigits(soap, p, "icommon:geoBoxDigits", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__geoBoxDigits(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__geoBoxDigits(soap, p, "icommon:geoBoxDigits", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__geoBoxDigits(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__geoBoxDigits(soap, p, "icommon:geoBoxDigits", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__geoBoxDigits(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__geoBoxDigits(soap, p, "icommon:geoBoxDigits", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_icommon__geoBoxDigits(struct soap*, std::string *, const char*, const char*);

inline int soap_read_icommon__geoBoxDigits(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__geoBoxDigits(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__geoBoxDigits(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__geoBoxDigits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__geoBoxDigits(struct soap *soap, std::string *p)
{
	if (::soap_read_icommon__geoBoxDigits(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__responsiblePartyRole__DEFINED
#define SOAP_TYPE_icommon__responsiblePartyRole__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__responsiblePartyRole_(struct soap*, const char*, int, const icommon__responsiblePartyRole_ *, const char*);
SOAP_FMAC3 icommon__responsiblePartyRole_ * SOAP_FMAC4 soap_in_icommon__responsiblePartyRole_(struct soap*, const char*, icommon__responsiblePartyRole_ *, const char*);
SOAP_FMAC1 icommon__responsiblePartyRole_ * SOAP_FMAC2 soap_instantiate_icommon__responsiblePartyRole_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__responsiblePartyRole_ * soap_new_icommon__responsiblePartyRole_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__responsiblePartyRole_(soap, n, NULL, NULL, NULL);
}

inline icommon__responsiblePartyRole_ * soap_new_req_icommon__responsiblePartyRole_(
	struct soap *soap,
	enum icommon__responsiblePartyRole __item)
{
	icommon__responsiblePartyRole_ *_p = ::soap_new_icommon__responsiblePartyRole_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__responsiblePartyRole_::__item = __item;
	}
	return _p;
}

inline icommon__responsiblePartyRole_ * soap_new_set_icommon__responsiblePartyRole_(
	struct soap *soap,
	enum icommon__responsiblePartyRole __item,
	char *__item__1)
{
	icommon__responsiblePartyRole_ *_p = ::soap_new_icommon__responsiblePartyRole_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__responsiblePartyRole_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__responsiblePartyRole_(struct soap *soap, icommon__responsiblePartyRole_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsiblePartyRole", p->soap_type() == SOAP_TYPE_icommon__responsiblePartyRole_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__responsiblePartyRole_(struct soap *soap, const char *URL, icommon__responsiblePartyRole_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsiblePartyRole", p->soap_type() == SOAP_TYPE_icommon__responsiblePartyRole_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__responsiblePartyRole_(struct soap *soap, const char *URL, icommon__responsiblePartyRole_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsiblePartyRole", p->soap_type() == SOAP_TYPE_icommon__responsiblePartyRole_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__responsiblePartyRole_(struct soap *soap, const char *URL, icommon__responsiblePartyRole_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsiblePartyRole", p->soap_type() == SOAP_TYPE_icommon__responsiblePartyRole_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__responsiblePartyRole_ * SOAP_FMAC4 soap_get_icommon__responsiblePartyRole_(struct soap*, icommon__responsiblePartyRole_ *, const char*, const char*);

inline int soap_read_icommon__responsiblePartyRole_(struct soap *soap, icommon__responsiblePartyRole_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__responsiblePartyRole_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__responsiblePartyRole_(struct soap *soap, const char *URL, icommon__responsiblePartyRole_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__responsiblePartyRole_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__responsiblePartyRole_(struct soap *soap, icommon__responsiblePartyRole_ *p)
{
	if (::soap_read_icommon__responsiblePartyRole_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__languageIETF___DEFINED
#define SOAP_TYPE_icommon__languageIETF___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__languageIETF__(struct soap*, const char*, int, const icommon__languageIETF__ *, const char*);
SOAP_FMAC3 icommon__languageIETF__ * SOAP_FMAC4 soap_in_icommon__languageIETF__(struct soap*, const char*, icommon__languageIETF__ *, const char*);
SOAP_FMAC1 icommon__languageIETF__ * SOAP_FMAC2 soap_instantiate_icommon__languageIETF__(struct soap*, int, const char*, const char*, size_t*);

inline icommon__languageIETF__ * soap_new_icommon__languageIETF__(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__languageIETF__(soap, n, NULL, NULL, NULL);
}

inline icommon__languageIETF__ * soap_new_req_icommon__languageIETF__(
	struct soap *soap)
{
	icommon__languageIETF__ *_p = ::soap_new_icommon__languageIETF__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline icommon__languageIETF__ * soap_new_set_icommon__languageIETF__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	icommon__languageIETF__ *_p = ::soap_new_icommon__languageIETF__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageIETF__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__languageIETF__(struct soap *soap, icommon__languageIETF__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageIETF", p->soap_type() == SOAP_TYPE_icommon__languageIETF__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__languageIETF__(struct soap *soap, const char *URL, icommon__languageIETF__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageIETF", p->soap_type() == SOAP_TYPE_icommon__languageIETF__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__languageIETF__(struct soap *soap, const char *URL, icommon__languageIETF__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageIETF", p->soap_type() == SOAP_TYPE_icommon__languageIETF__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__languageIETF__(struct soap *soap, const char *URL, icommon__languageIETF__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageIETF", p->soap_type() == SOAP_TYPE_icommon__languageIETF__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__languageIETF__ * SOAP_FMAC4 soap_get_icommon__languageIETF__(struct soap*, icommon__languageIETF__ *, const char*, const char*);

inline int soap_read_icommon__languageIETF__(struct soap *soap, icommon__languageIETF__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__languageIETF__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__languageIETF__(struct soap *soap, const char *URL, icommon__languageIETF__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__languageIETF__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__languageIETF__(struct soap *soap, icommon__languageIETF__ *p)
{
	if (::soap_read_icommon__languageIETF__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__languageISO6392B__DEFINED
#define SOAP_TYPE_icommon__languageISO6392B__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__languageISO6392B_(struct soap*, const char*, int, const icommon__languageISO6392B_ *, const char*);
SOAP_FMAC3 icommon__languageISO6392B_ * SOAP_FMAC4 soap_in_icommon__languageISO6392B_(struct soap*, const char*, icommon__languageISO6392B_ *, const char*);
SOAP_FMAC1 icommon__languageISO6392B_ * SOAP_FMAC2 soap_instantiate_icommon__languageISO6392B_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__languageISO6392B_ * soap_new_icommon__languageISO6392B_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__languageISO6392B_(soap, n, NULL, NULL, NULL);
}

inline icommon__languageISO6392B_ * soap_new_req_icommon__languageISO6392B_(
	struct soap *soap,
	enum icommon__languageISO6392B __item)
{
	icommon__languageISO6392B_ *_p = ::soap_new_icommon__languageISO6392B_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageISO6392B_::__item = __item;
	}
	return _p;
}

inline icommon__languageISO6392B_ * soap_new_set_icommon__languageISO6392B_(
	struct soap *soap,
	enum icommon__languageISO6392B __item,
	char *__item__1)
{
	icommon__languageISO6392B_ *_p = ::soap_new_icommon__languageISO6392B_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageISO6392B_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__languageISO6392B_(struct soap *soap, icommon__languageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageISO6392B_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__languageISO6392B_(struct soap *soap, const char *URL, icommon__languageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageISO6392B_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__languageISO6392B_(struct soap *soap, const char *URL, icommon__languageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageISO6392B_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__languageISO6392B_(struct soap *soap, const char *URL, icommon__languageISO6392B_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageISO6392B_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__languageISO6392B_ * SOAP_FMAC4 soap_get_icommon__languageISO6392B_(struct soap*, icommon__languageISO6392B_ *, const char*, const char*);

inline int soap_read_icommon__languageISO6392B_(struct soap *soap, icommon__languageISO6392B_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__languageISO6392B_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__languageISO6392B_(struct soap *soap, const char *URL, icommon__languageISO6392B_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__languageISO6392B_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__languageISO6392B_(struct soap *soap, icommon__languageISO6392B_ *p)
{
	if (::soap_read_icommon__languageISO6392B_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__degreeOfConformity__DEFINED
#define SOAP_TYPE_icommon__degreeOfConformity__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__degreeOfConformity_(struct soap*, const char*, int, const icommon__degreeOfConformity_ *, const char*);
SOAP_FMAC3 icommon__degreeOfConformity_ * SOAP_FMAC4 soap_in_icommon__degreeOfConformity_(struct soap*, const char*, icommon__degreeOfConformity_ *, const char*);
SOAP_FMAC1 icommon__degreeOfConformity_ * SOAP_FMAC2 soap_instantiate_icommon__degreeOfConformity_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__degreeOfConformity_ * soap_new_icommon__degreeOfConformity_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__degreeOfConformity_(soap, n, NULL, NULL, NULL);
}

inline icommon__degreeOfConformity_ * soap_new_req_icommon__degreeOfConformity_(
	struct soap *soap,
	enum icommon__degreeOfConformity __item)
{
	icommon__degreeOfConformity_ *_p = ::soap_new_icommon__degreeOfConformity_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__degreeOfConformity_::__item = __item;
	}
	return _p;
}

inline icommon__degreeOfConformity_ * soap_new_set_icommon__degreeOfConformity_(
	struct soap *soap,
	enum icommon__degreeOfConformity __item,
	char *__item__1)
{
	icommon__degreeOfConformity_ *_p = ::soap_new_icommon__degreeOfConformity_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__degreeOfConformity_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__degreeOfConformity_(struct soap *soap, icommon__degreeOfConformity_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:degreeOfConformity", p->soap_type() == SOAP_TYPE_icommon__degreeOfConformity_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__degreeOfConformity_(struct soap *soap, const char *URL, icommon__degreeOfConformity_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:degreeOfConformity", p->soap_type() == SOAP_TYPE_icommon__degreeOfConformity_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__degreeOfConformity_(struct soap *soap, const char *URL, icommon__degreeOfConformity_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:degreeOfConformity", p->soap_type() == SOAP_TYPE_icommon__degreeOfConformity_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__degreeOfConformity_(struct soap *soap, const char *URL, icommon__degreeOfConformity_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:degreeOfConformity", p->soap_type() == SOAP_TYPE_icommon__degreeOfConformity_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__degreeOfConformity_ * SOAP_FMAC4 soap_get_icommon__degreeOfConformity_(struct soap*, icommon__degreeOfConformity_ *, const char*, const char*);

inline int soap_read_icommon__degreeOfConformity_(struct soap *soap, icommon__degreeOfConformity_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__degreeOfConformity_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__degreeOfConformity_(struct soap *soap, const char *URL, icommon__degreeOfConformity_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__degreeOfConformity_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__degreeOfConformity_(struct soap *soap, icommon__degreeOfConformity_ *p)
{
	if (::soap_read_icommon__degreeOfConformity_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__spatialDataServiceType__DEFINED
#define SOAP_TYPE_icommon__spatialDataServiceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__spatialDataServiceType_(struct soap*, const char*, int, const icommon__spatialDataServiceType_ *, const char*);
SOAP_FMAC3 icommon__spatialDataServiceType_ * SOAP_FMAC4 soap_in_icommon__spatialDataServiceType_(struct soap*, const char*, icommon__spatialDataServiceType_ *, const char*);
SOAP_FMAC1 icommon__spatialDataServiceType_ * SOAP_FMAC2 soap_instantiate_icommon__spatialDataServiceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__spatialDataServiceType_ * soap_new_icommon__spatialDataServiceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__spatialDataServiceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__spatialDataServiceType_ * soap_new_req_icommon__spatialDataServiceType_(
	struct soap *soap,
	enum icommon__spatialDataServiceType __item)
{
	icommon__spatialDataServiceType_ *_p = ::soap_new_icommon__spatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__spatialDataServiceType_::__item = __item;
	}
	return _p;
}

inline icommon__spatialDataServiceType_ * soap_new_set_icommon__spatialDataServiceType_(
	struct soap *soap,
	enum icommon__spatialDataServiceType __item,
	char *__item__1)
{
	icommon__spatialDataServiceType_ *_p = ::soap_new_icommon__spatialDataServiceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__spatialDataServiceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__spatialDataServiceType_(struct soap *soap, icommon__spatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__spatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__spatialDataServiceType_(struct soap *soap, const char *URL, icommon__spatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__spatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__spatialDataServiceType_(struct soap *soap, const char *URL, icommon__spatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__spatialDataServiceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__spatialDataServiceType_(struct soap *soap, const char *URL, icommon__spatialDataServiceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialDataServiceType", p->soap_type() == SOAP_TYPE_icommon__spatialDataServiceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__spatialDataServiceType_ * SOAP_FMAC4 soap_get_icommon__spatialDataServiceType_(struct soap*, icommon__spatialDataServiceType_ *, const char*, const char*);

inline int soap_read_icommon__spatialDataServiceType_(struct soap *soap, icommon__spatialDataServiceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__spatialDataServiceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__spatialDataServiceType_(struct soap *soap, const char *URL, icommon__spatialDataServiceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__spatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__spatialDataServiceType_(struct soap *soap, icommon__spatialDataServiceType_ *p)
{
	if (::soap_read_icommon__spatialDataServiceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resourceType__DEFINED
#define SOAP_TYPE_icommon__resourceType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resourceType_(struct soap*, const char*, int, const icommon__resourceType_ *, const char*);
SOAP_FMAC3 icommon__resourceType_ * SOAP_FMAC4 soap_in_icommon__resourceType_(struct soap*, const char*, icommon__resourceType_ *, const char*);
SOAP_FMAC1 icommon__resourceType_ * SOAP_FMAC2 soap_instantiate_icommon__resourceType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resourceType_ * soap_new_icommon__resourceType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resourceType_(soap, n, NULL, NULL, NULL);
}

inline icommon__resourceType_ * soap_new_req_icommon__resourceType_(
	struct soap *soap,
	enum icommon__resourceType __item)
{
	icommon__resourceType_ *_p = ::soap_new_icommon__resourceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resourceType_::__item = __item;
	}
	return _p;
}

inline icommon__resourceType_ * soap_new_set_icommon__resourceType_(
	struct soap *soap,
	enum icommon__resourceType __item,
	char *__item__1)
{
	icommon__resourceType_ *_p = ::soap_new_icommon__resourceType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resourceType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resourceType_(struct soap *soap, icommon__resourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceType", p->soap_type() == SOAP_TYPE_icommon__resourceType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resourceType_(struct soap *soap, const char *URL, icommon__resourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceType", p->soap_type() == SOAP_TYPE_icommon__resourceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resourceType_(struct soap *soap, const char *URL, icommon__resourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceType", p->soap_type() == SOAP_TYPE_icommon__resourceType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resourceType_(struct soap *soap, const char *URL, icommon__resourceType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceType", p->soap_type() == SOAP_TYPE_icommon__resourceType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resourceType_ * SOAP_FMAC4 soap_get_icommon__resourceType_(struct soap*, icommon__resourceType_ *, const char*, const char*);

inline int soap_read_icommon__resourceType_(struct soap *soap, icommon__resourceType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resourceType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resourceType_(struct soap *soap, const char *URL, icommon__resourceType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resourceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resourceType_(struct soap *soap, icommon__resourceType_ *p)
{
	if (::soap_read_icommon__resourceType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__iso8601Date___DEFINED
#define SOAP_TYPE_icommon__iso8601Date___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__iso8601Date__(struct soap*, const char*, int, const icommon__iso8601Date__ *, const char*);
SOAP_FMAC3 icommon__iso8601Date__ * SOAP_FMAC4 soap_in_icommon__iso8601Date__(struct soap*, const char*, icommon__iso8601Date__ *, const char*);
SOAP_FMAC1 icommon__iso8601Date__ * SOAP_FMAC2 soap_instantiate_icommon__iso8601Date__(struct soap*, int, const char*, const char*, size_t*);

inline icommon__iso8601Date__ * soap_new_icommon__iso8601Date__(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__iso8601Date__(soap, n, NULL, NULL, NULL);
}

inline icommon__iso8601Date__ * soap_new_req_icommon__iso8601Date__(
	struct soap *soap,
	const std::string& __item)
{
	icommon__iso8601Date__ *_p = ::soap_new_icommon__iso8601Date__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__iso8601Date__::__item = __item;
	}
	return _p;
}

inline icommon__iso8601Date__ * soap_new_set_icommon__iso8601Date__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	icommon__iso8601Date__ *_p = ::soap_new_icommon__iso8601Date__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__iso8601Date__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__iso8601Date__(struct soap *soap, icommon__iso8601Date__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:iso8601Date", p->soap_type() == SOAP_TYPE_icommon__iso8601Date__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__iso8601Date__(struct soap *soap, const char *URL, icommon__iso8601Date__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:iso8601Date", p->soap_type() == SOAP_TYPE_icommon__iso8601Date__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__iso8601Date__(struct soap *soap, const char *URL, icommon__iso8601Date__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:iso8601Date", p->soap_type() == SOAP_TYPE_icommon__iso8601Date__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__iso8601Date__(struct soap *soap, const char *URL, icommon__iso8601Date__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:iso8601Date", p->soap_type() == SOAP_TYPE_icommon__iso8601Date__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__iso8601Date__ * SOAP_FMAC4 soap_get_icommon__iso8601Date__(struct soap*, icommon__iso8601Date__ *, const char*, const char*);

inline int soap_read_icommon__iso8601Date__(struct soap *soap, icommon__iso8601Date__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__iso8601Date__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__iso8601Date__(struct soap *soap, const char *URL, icommon__iso8601Date__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__iso8601Date__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__iso8601Date__(struct soap *soap, icommon__iso8601Date__ *p)
{
	if (::soap_read_icommon__iso8601Date__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__iso8601Date_DEFINED
#define SOAP_TYPE_icommon__iso8601Date_DEFINED

inline void soap_default_icommon__iso8601Date(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_icommon__iso8601Date(struct soap*, const std::string *);

#define soap_icommon__iso8601Date2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__iso8601Date(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2icommon__iso8601Date(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "\\d{4}-(1[0-2]|0[1-9])-(3[0-1]|0[1-9]|[1-2][0-9])(T(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?)?(Z|([+|-](2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9])?)?)?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_icommon__iso8601Date(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_icommon__iso8601Date soap_instantiate_std__string


#define soap_new_icommon__iso8601Date soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__iso8601Date(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_icommon__iso8601Date(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__iso8601Date(soap, p, "icommon:iso8601Date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__iso8601Date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__iso8601Date(soap, p, "icommon:iso8601Date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__iso8601Date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__iso8601Date(soap, p, "icommon:iso8601Date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__iso8601Date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__iso8601Date(soap, p, "icommon:iso8601Date", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_icommon__iso8601Date(struct soap*, std::string *, const char*, const char*);

inline int soap_read_icommon__iso8601Date(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__iso8601Date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__iso8601Date(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__iso8601Date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__iso8601Date(struct soap *soap, std::string *p)
{
	if (::soap_read_icommon__iso8601Date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__emailType___DEFINED
#define SOAP_TYPE_icommon__emailType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__emailType__(struct soap*, const char*, int, const icommon__emailType__ *, const char*);
SOAP_FMAC3 icommon__emailType__ * SOAP_FMAC4 soap_in_icommon__emailType__(struct soap*, const char*, icommon__emailType__ *, const char*);
SOAP_FMAC1 icommon__emailType__ * SOAP_FMAC2 soap_instantiate_icommon__emailType__(struct soap*, int, const char*, const char*, size_t*);

inline icommon__emailType__ * soap_new_icommon__emailType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__emailType__(soap, n, NULL, NULL, NULL);
}

inline icommon__emailType__ * soap_new_req_icommon__emailType__(
	struct soap *soap,
	const std::string& __item)
{
	icommon__emailType__ *_p = ::soap_new_icommon__emailType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__emailType__::__item = __item;
	}
	return _p;
}

inline icommon__emailType__ * soap_new_set_icommon__emailType__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	icommon__emailType__ *_p = ::soap_new_icommon__emailType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__emailType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__emailType__(struct soap *soap, icommon__emailType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:emailType", p->soap_type() == SOAP_TYPE_icommon__emailType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__emailType__(struct soap *soap, const char *URL, icommon__emailType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:emailType", p->soap_type() == SOAP_TYPE_icommon__emailType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__emailType__(struct soap *soap, const char *URL, icommon__emailType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:emailType", p->soap_type() == SOAP_TYPE_icommon__emailType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__emailType__(struct soap *soap, const char *URL, icommon__emailType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:emailType", p->soap_type() == SOAP_TYPE_icommon__emailType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__emailType__ * SOAP_FMAC4 soap_get_icommon__emailType__(struct soap*, icommon__emailType__ *, const char*, const char*);

inline int soap_read_icommon__emailType__(struct soap *soap, icommon__emailType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__emailType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__emailType__(struct soap *soap, const char *URL, icommon__emailType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__emailType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__emailType__(struct soap *soap, icommon__emailType__ *p)
{
	if (::soap_read_icommon__emailType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__emailType_DEFINED
#define SOAP_TYPE_icommon__emailType_DEFINED

inline void soap_default_icommon__emailType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_icommon__emailType(struct soap*, const std::string *);

#define soap_icommon__emailType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__emailType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2icommon__emailType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[^@]+@[^\\.]+\\..+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_icommon__emailType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_icommon__emailType soap_instantiate_std__string


#define soap_new_icommon__emailType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__emailType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_icommon__emailType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__emailType(soap, p, "icommon:emailType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__emailType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__emailType(soap, p, "icommon:emailType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__emailType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__emailType(soap, p, "icommon:emailType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__emailType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__emailType(soap, p, "icommon:emailType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_icommon__emailType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_icommon__emailType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__emailType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__emailType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__emailType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__emailType(struct soap *soap, std::string *p)
{
	if (::soap_read_icommon__emailType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__mediaType__DEFINED
#define SOAP_TYPE_icommon__mediaType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__mediaType_(struct soap*, const char*, int, const icommon__mediaType_ *, const char*);
SOAP_FMAC3 icommon__mediaType_ * SOAP_FMAC4 soap_in_icommon__mediaType_(struct soap*, const char*, icommon__mediaType_ *, const char*);
SOAP_FMAC1 icommon__mediaType_ * SOAP_FMAC2 soap_instantiate_icommon__mediaType_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__mediaType_ * soap_new_icommon__mediaType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__mediaType_(soap, n, NULL, NULL, NULL);
}

inline icommon__mediaType_ * soap_new_req_icommon__mediaType_(
	struct soap *soap,
	enum icommon__mediaType __item)
{
	icommon__mediaType_ *_p = ::soap_new_icommon__mediaType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__mediaType_::__item = __item;
	}
	return _p;
}

inline icommon__mediaType_ * soap_new_set_icommon__mediaType_(
	struct soap *soap,
	enum icommon__mediaType __item,
	char *__item__1)
{
	icommon__mediaType_ *_p = ::soap_new_icommon__mediaType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__mediaType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__mediaType_(struct soap *soap, icommon__mediaType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:mediaType", p->soap_type() == SOAP_TYPE_icommon__mediaType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__mediaType_(struct soap *soap, const char *URL, icommon__mediaType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:mediaType", p->soap_type() == SOAP_TYPE_icommon__mediaType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__mediaType_(struct soap *soap, const char *URL, icommon__mediaType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:mediaType", p->soap_type() == SOAP_TYPE_icommon__mediaType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__mediaType_(struct soap *soap, const char *URL, icommon__mediaType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:mediaType", p->soap_type() == SOAP_TYPE_icommon__mediaType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__mediaType_ * SOAP_FMAC4 soap_get_icommon__mediaType_(struct soap*, icommon__mediaType_ *, const char*, const char*);

inline int soap_read_icommon__mediaType_(struct soap *soap, icommon__mediaType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__mediaType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__mediaType_(struct soap *soap, const char *URL, icommon__mediaType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__mediaType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__mediaType_(struct soap *soap, icommon__mediaType_ *p)
{
	if (::soap_read_icommon__mediaType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__notEmptyString___DEFINED
#define SOAP_TYPE_icommon__notEmptyString___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__notEmptyString__(struct soap*, const char*, int, const icommon__notEmptyString__ *, const char*);
SOAP_FMAC3 icommon__notEmptyString__ * SOAP_FMAC4 soap_in_icommon__notEmptyString__(struct soap*, const char*, icommon__notEmptyString__ *, const char*);
SOAP_FMAC1 icommon__notEmptyString__ * SOAP_FMAC2 soap_instantiate_icommon__notEmptyString__(struct soap*, int, const char*, const char*, size_t*);

inline icommon__notEmptyString__ * soap_new_icommon__notEmptyString__(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__notEmptyString__(soap, n, NULL, NULL, NULL);
}

inline icommon__notEmptyString__ * soap_new_req_icommon__notEmptyString__(
	struct soap *soap,
	const std::string& __item)
{
	icommon__notEmptyString__ *_p = ::soap_new_icommon__notEmptyString__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__notEmptyString__::__item = __item;
	}
	return _p;
}

inline icommon__notEmptyString__ * soap_new_set_icommon__notEmptyString__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	icommon__notEmptyString__ *_p = ::soap_new_icommon__notEmptyString__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__notEmptyString__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__notEmptyString__(struct soap *soap, icommon__notEmptyString__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:notEmptyString", p->soap_type() == SOAP_TYPE_icommon__notEmptyString__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__notEmptyString__(struct soap *soap, const char *URL, icommon__notEmptyString__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:notEmptyString", p->soap_type() == SOAP_TYPE_icommon__notEmptyString__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__notEmptyString__(struct soap *soap, const char *URL, icommon__notEmptyString__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:notEmptyString", p->soap_type() == SOAP_TYPE_icommon__notEmptyString__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__notEmptyString__(struct soap *soap, const char *URL, icommon__notEmptyString__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:notEmptyString", p->soap_type() == SOAP_TYPE_icommon__notEmptyString__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__notEmptyString__ * SOAP_FMAC4 soap_get_icommon__notEmptyString__(struct soap*, icommon__notEmptyString__ *, const char*, const char*);

inline int soap_read_icommon__notEmptyString__(struct soap *soap, icommon__notEmptyString__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__notEmptyString__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__notEmptyString__(struct soap *soap, const char *URL, icommon__notEmptyString__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__notEmptyString__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__notEmptyString__(struct soap *soap, icommon__notEmptyString__ *p)
{
	if (::soap_read_icommon__notEmptyString__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__notEmptyString_DEFINED
#define SOAP_TYPE_icommon__notEmptyString_DEFINED

inline void soap_default_icommon__notEmptyString(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_icommon__notEmptyString(struct soap*, const std::string *);

#define soap_icommon__notEmptyString2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__notEmptyString(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2icommon__notEmptyString(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_icommon__notEmptyString(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_icommon__notEmptyString soap_instantiate_std__string


#define soap_new_icommon__notEmptyString soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_icommon__notEmptyString(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_icommon__notEmptyString(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_icommon__notEmptyString(soap, p, "icommon:notEmptyString", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_icommon__notEmptyString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__notEmptyString(soap, p, "icommon:notEmptyString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__notEmptyString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__notEmptyString(soap, p, "icommon:notEmptyString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__notEmptyString(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_icommon__notEmptyString(soap, p, "icommon:notEmptyString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_icommon__notEmptyString(struct soap*, std::string *, const char*, const char*);

inline int soap_read_icommon__notEmptyString(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_icommon__notEmptyString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__notEmptyString(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__notEmptyString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__notEmptyString(struct soap *soap, std::string *p)
{
	if (::soap_read_icommon__notEmptyString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__topicCategory__DEFINED
#define SOAP_TYPE_icommon__topicCategory__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__topicCategory_(struct soap*, const char*, int, const icommon__topicCategory_ *, const char*);
SOAP_FMAC3 icommon__topicCategory_ * SOAP_FMAC4 soap_in_icommon__topicCategory_(struct soap*, const char*, icommon__topicCategory_ *, const char*);
SOAP_FMAC1 icommon__topicCategory_ * SOAP_FMAC2 soap_instantiate_icommon__topicCategory_(struct soap*, int, const char*, const char*, size_t*);

inline icommon__topicCategory_ * soap_new_icommon__topicCategory_(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__topicCategory_(soap, n, NULL, NULL, NULL);
}

inline icommon__topicCategory_ * soap_new_req_icommon__topicCategory_(
	struct soap *soap,
	enum icommon__topicCategory __item)
{
	icommon__topicCategory_ *_p = ::soap_new_icommon__topicCategory_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__topicCategory_::__item = __item;
	}
	return _p;
}

inline icommon__topicCategory_ * soap_new_set_icommon__topicCategory_(
	struct soap *soap,
	enum icommon__topicCategory __item,
	char *__item__1)
{
	icommon__topicCategory_ *_p = ::soap_new_icommon__topicCategory_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__topicCategory_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__topicCategory_(struct soap *soap, icommon__topicCategory_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:topicCategory", p->soap_type() == SOAP_TYPE_icommon__topicCategory_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__topicCategory_(struct soap *soap, const char *URL, icommon__topicCategory_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:topicCategory", p->soap_type() == SOAP_TYPE_icommon__topicCategory_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__topicCategory_(struct soap *soap, const char *URL, icommon__topicCategory_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:topicCategory", p->soap_type() == SOAP_TYPE_icommon__topicCategory_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__topicCategory_(struct soap *soap, const char *URL, icommon__topicCategory_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:topicCategory", p->soap_type() == SOAP_TYPE_icommon__topicCategory_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__topicCategory_ * SOAP_FMAC4 soap_get_icommon__topicCategory_(struct soap*, icommon__topicCategory_ *, const char*, const char*);

inline int soap_read_icommon__topicCategory_(struct soap *soap, icommon__topicCategory_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__topicCategory_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__topicCategory_(struct soap *soap, const char *URL, icommon__topicCategory_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__topicCategory_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__topicCategory_(struct soap *soap, icommon__topicCategory_ *p)
{
	if (::soap_read_icommon__topicCategory_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SortOrderType__DEFINED
#define SOAP_TYPE_fes__SortOrderType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SortOrderType_(struct soap*, const char*, int, const fes__SortOrderType_ *, const char*);
SOAP_FMAC3 fes__SortOrderType_ * SOAP_FMAC4 soap_in_fes__SortOrderType_(struct soap*, const char*, fes__SortOrderType_ *, const char*);
SOAP_FMAC1 fes__SortOrderType_ * SOAP_FMAC2 soap_instantiate_fes__SortOrderType_(struct soap*, int, const char*, const char*, size_t*);

inline fes__SortOrderType_ * soap_new_fes__SortOrderType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__SortOrderType_(soap, n, NULL, NULL, NULL);
}

inline fes__SortOrderType_ * soap_new_req_fes__SortOrderType_(
	struct soap *soap,
	enum fes__SortOrderType __item)
{
	fes__SortOrderType_ *_p = ::soap_new_fes__SortOrderType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SortOrderType_::__item = __item;
	}
	return _p;
}

inline fes__SortOrderType_ * soap_new_set_fes__SortOrderType_(
	struct soap *soap,
	enum fes__SortOrderType __item,
	char *__item__1)
{
	fes__SortOrderType_ *_p = ::soap_new_fes__SortOrderType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SortOrderType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__SortOrderType_(struct soap *soap, fes__SortOrderType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortOrderType", p->soap_type() == SOAP_TYPE_fes__SortOrderType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__SortOrderType_(struct soap *soap, const char *URL, fes__SortOrderType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortOrderType", p->soap_type() == SOAP_TYPE_fes__SortOrderType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SortOrderType_(struct soap *soap, const char *URL, fes__SortOrderType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortOrderType", p->soap_type() == SOAP_TYPE_fes__SortOrderType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SortOrderType_(struct soap *soap, const char *URL, fes__SortOrderType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortOrderType", p->soap_type() == SOAP_TYPE_fes__SortOrderType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__SortOrderType_ * SOAP_FMAC4 soap_get_fes__SortOrderType_(struct soap*, fes__SortOrderType_ *, const char*, const char*);

inline int soap_read_fes__SortOrderType_(struct soap *soap, fes__SortOrderType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__SortOrderType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SortOrderType_(struct soap *soap, const char *URL, fes__SortOrderType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SortOrderType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SortOrderType_(struct soap *soap, fes__SortOrderType_ *p)
{
	if (::soap_read_fes__SortOrderType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__UomURI___DEFINED
#define SOAP_TYPE_fes__UomURI___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__UomURI__(struct soap*, const char*, int, const fes__UomURI__ *, const char*);
SOAP_FMAC3 fes__UomURI__ * SOAP_FMAC4 soap_in_fes__UomURI__(struct soap*, const char*, fes__UomURI__ *, const char*);
SOAP_FMAC1 fes__UomURI__ * SOAP_FMAC2 soap_instantiate_fes__UomURI__(struct soap*, int, const char*, const char*, size_t*);

inline fes__UomURI__ * soap_new_fes__UomURI__(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__UomURI__(soap, n, NULL, NULL, NULL);
}

inline fes__UomURI__ * soap_new_req_fes__UomURI__(
	struct soap *soap)
{
	fes__UomURI__ *_p = ::soap_new_fes__UomURI__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__UomURI__ * soap_new_set_fes__UomURI__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	fes__UomURI__ *_p = ::soap_new_fes__UomURI__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__UomURI__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__UomURI__(struct soap *soap, fes__UomURI__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomURI", p->soap_type() == SOAP_TYPE_fes__UomURI__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__UomURI__(struct soap *soap, const char *URL, fes__UomURI__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomURI", p->soap_type() == SOAP_TYPE_fes__UomURI__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__UomURI__(struct soap *soap, const char *URL, fes__UomURI__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomURI", p->soap_type() == SOAP_TYPE_fes__UomURI__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__UomURI__(struct soap *soap, const char *URL, fes__UomURI__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomURI", p->soap_type() == SOAP_TYPE_fes__UomURI__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__UomURI__ * SOAP_FMAC4 soap_get_fes__UomURI__(struct soap*, fes__UomURI__ *, const char*, const char*);

inline int soap_read_fes__UomURI__(struct soap *soap, fes__UomURI__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__UomURI__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__UomURI__(struct soap *soap, const char *URL, fes__UomURI__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__UomURI__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__UomURI__(struct soap *soap, fes__UomURI__ *p)
{
	if (::soap_read_fes__UomURI__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__UomSymbol___DEFINED
#define SOAP_TYPE_fes__UomSymbol___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__UomSymbol__(struct soap*, const char*, int, const fes__UomSymbol__ *, const char*);
SOAP_FMAC3 fes__UomSymbol__ * SOAP_FMAC4 soap_in_fes__UomSymbol__(struct soap*, const char*, fes__UomSymbol__ *, const char*);
SOAP_FMAC1 fes__UomSymbol__ * SOAP_FMAC2 soap_instantiate_fes__UomSymbol__(struct soap*, int, const char*, const char*, size_t*);

inline fes__UomSymbol__ * soap_new_fes__UomSymbol__(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__UomSymbol__(soap, n, NULL, NULL, NULL);
}

inline fes__UomSymbol__ * soap_new_req_fes__UomSymbol__(
	struct soap *soap,
	const std::string& __item)
{
	fes__UomSymbol__ *_p = ::soap_new_fes__UomSymbol__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__UomSymbol__::__item = __item;
	}
	return _p;
}

inline fes__UomSymbol__ * soap_new_set_fes__UomSymbol__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	fes__UomSymbol__ *_p = ::soap_new_fes__UomSymbol__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__UomSymbol__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__UomSymbol__(struct soap *soap, fes__UomSymbol__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomSymbol", p->soap_type() == SOAP_TYPE_fes__UomSymbol__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__UomSymbol__(struct soap *soap, const char *URL, fes__UomSymbol__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomSymbol", p->soap_type() == SOAP_TYPE_fes__UomSymbol__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__UomSymbol__(struct soap *soap, const char *URL, fes__UomSymbol__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomSymbol", p->soap_type() == SOAP_TYPE_fes__UomSymbol__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__UomSymbol__(struct soap *soap, const char *URL, fes__UomSymbol__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UomSymbol", p->soap_type() == SOAP_TYPE_fes__UomSymbol__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__UomSymbol__ * SOAP_FMAC4 soap_get_fes__UomSymbol__(struct soap*, fes__UomSymbol__ *, const char*, const char*);

inline int soap_read_fes__UomSymbol__(struct soap *soap, fes__UomSymbol__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__UomSymbol__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__UomSymbol__(struct soap *soap, const char *URL, fes__UomSymbol__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__UomSymbol__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__UomSymbol__(struct soap *soap, fes__UomSymbol__ *p)
{
	if (::soap_read_fes__UomSymbol__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__UomSymbol_DEFINED
#define SOAP_TYPE_fes__UomSymbol_DEFINED

inline void soap_default_fes__UomSymbol(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__UomSymbol(struct soap*, const std::string *);

#define soap_fes__UomSymbol2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__UomSymbol(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__UomSymbol(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[^: \\n\\r\\t]+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__UomSymbol(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__UomSymbol soap_instantiate_std__string


#define soap_new_fes__UomSymbol soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__UomSymbol(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__UomSymbol(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__UomSymbol(soap, p, "fes:UomSymbol", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__UomSymbol(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomSymbol(soap, p, "fes:UomSymbol", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__UomSymbol(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomSymbol(soap, p, "fes:UomSymbol", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__UomSymbol(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomSymbol(soap, p, "fes:UomSymbol", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__UomSymbol(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__UomSymbol(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__UomSymbol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__UomSymbol(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__UomSymbol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__UomSymbol(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__UomSymbol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__MatchActionType__DEFINED
#define SOAP_TYPE_fes__MatchActionType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__MatchActionType_(struct soap*, const char*, int, const fes__MatchActionType_ *, const char*);
SOAP_FMAC3 fes__MatchActionType_ * SOAP_FMAC4 soap_in_fes__MatchActionType_(struct soap*, const char*, fes__MatchActionType_ *, const char*);
SOAP_FMAC1 fes__MatchActionType_ * SOAP_FMAC2 soap_instantiate_fes__MatchActionType_(struct soap*, int, const char*, const char*, size_t*);

inline fes__MatchActionType_ * soap_new_fes__MatchActionType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__MatchActionType_(soap, n, NULL, NULL, NULL);
}

inline fes__MatchActionType_ * soap_new_req_fes__MatchActionType_(
	struct soap *soap,
	enum fes__MatchActionType __item)
{
	fes__MatchActionType_ *_p = ::soap_new_fes__MatchActionType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__MatchActionType_::__item = __item;
	}
	return _p;
}

inline fes__MatchActionType_ * soap_new_set_fes__MatchActionType_(
	struct soap *soap,
	enum fes__MatchActionType __item,
	char *__item__1)
{
	fes__MatchActionType_ *_p = ::soap_new_fes__MatchActionType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__MatchActionType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__MatchActionType_(struct soap *soap, fes__MatchActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MatchActionType", p->soap_type() == SOAP_TYPE_fes__MatchActionType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__MatchActionType_(struct soap *soap, const char *URL, fes__MatchActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MatchActionType", p->soap_type() == SOAP_TYPE_fes__MatchActionType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__MatchActionType_(struct soap *soap, const char *URL, fes__MatchActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MatchActionType", p->soap_type() == SOAP_TYPE_fes__MatchActionType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__MatchActionType_(struct soap *soap, const char *URL, fes__MatchActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MatchActionType", p->soap_type() == SOAP_TYPE_fes__MatchActionType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__MatchActionType_ * SOAP_FMAC4 soap_get_fes__MatchActionType_(struct soap*, fes__MatchActionType_ *, const char*, const char*);

inline int soap_read_fes__MatchActionType_(struct soap *soap, fes__MatchActionType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__MatchActionType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__MatchActionType_(struct soap *soap, const char *URL, fes__MatchActionType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__MatchActionType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__MatchActionType_(struct soap *soap, fes__MatchActionType_ *p)
{
	if (::soap_read_fes__MatchActionType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__VersionActionTokens__DEFINED
#define SOAP_TYPE_fes__VersionActionTokens__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__VersionActionTokens_(struct soap*, const char*, int, const fes__VersionActionTokens_ *, const char*);
SOAP_FMAC3 fes__VersionActionTokens_ * SOAP_FMAC4 soap_in_fes__VersionActionTokens_(struct soap*, const char*, fes__VersionActionTokens_ *, const char*);
SOAP_FMAC1 fes__VersionActionTokens_ * SOAP_FMAC2 soap_instantiate_fes__VersionActionTokens_(struct soap*, int, const char*, const char*, size_t*);

inline fes__VersionActionTokens_ * soap_new_fes__VersionActionTokens_(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__VersionActionTokens_(soap, n, NULL, NULL, NULL);
}

inline fes__VersionActionTokens_ * soap_new_req_fes__VersionActionTokens_(
	struct soap *soap,
	enum fes__VersionActionTokens __item)
{
	fes__VersionActionTokens_ *_p = ::soap_new_fes__VersionActionTokens_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__VersionActionTokens_::__item = __item;
	}
	return _p;
}

inline fes__VersionActionTokens_ * soap_new_set_fes__VersionActionTokens_(
	struct soap *soap,
	enum fes__VersionActionTokens __item,
	char *__item__1)
{
	fes__VersionActionTokens_ *_p = ::soap_new_fes__VersionActionTokens_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__VersionActionTokens_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__VersionActionTokens_(struct soap *soap, fes__VersionActionTokens_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:VersionActionTokens", p->soap_type() == SOAP_TYPE_fes__VersionActionTokens_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__VersionActionTokens_(struct soap *soap, const char *URL, fes__VersionActionTokens_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:VersionActionTokens", p->soap_type() == SOAP_TYPE_fes__VersionActionTokens_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__VersionActionTokens_(struct soap *soap, const char *URL, fes__VersionActionTokens_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:VersionActionTokens", p->soap_type() == SOAP_TYPE_fes__VersionActionTokens_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__VersionActionTokens_(struct soap *soap, const char *URL, fes__VersionActionTokens_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:VersionActionTokens", p->soap_type() == SOAP_TYPE_fes__VersionActionTokens_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__VersionActionTokens_ * SOAP_FMAC4 soap_get_fes__VersionActionTokens_(struct soap*, fes__VersionActionTokens_ *, const char*, const char*);

inline int soap_read_fes__VersionActionTokens_(struct soap *soap, fes__VersionActionTokens_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__VersionActionTokens_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__VersionActionTokens_(struct soap *soap, const char *URL, fes__VersionActionTokens_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__VersionActionTokens_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__VersionActionTokens_(struct soap *soap, fes__VersionActionTokens_ *p)
{
	if (::soap_read_fes__VersionActionTokens_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SchemaElement___DEFINED
#define SOAP_TYPE_fes__SchemaElement___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SchemaElement__(struct soap*, const char*, int, const fes__SchemaElement__ *, const char*);
SOAP_FMAC3 fes__SchemaElement__ * SOAP_FMAC4 soap_in_fes__SchemaElement__(struct soap*, const char*, fes__SchemaElement__ *, const char*);
SOAP_FMAC1 fes__SchemaElement__ * SOAP_FMAC2 soap_instantiate_fes__SchemaElement__(struct soap*, int, const char*, const char*, size_t*);

inline fes__SchemaElement__ * soap_new_fes__SchemaElement__(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__SchemaElement__(soap, n, NULL, NULL, NULL);
}

inline fes__SchemaElement__ * soap_new_req_fes__SchemaElement__(
	struct soap *soap,
	const std::string& __item)
{
	fes__SchemaElement__ *_p = ::soap_new_fes__SchemaElement__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SchemaElement__::__item = __item;
	}
	return _p;
}

inline fes__SchemaElement__ * soap_new_set_fes__SchemaElement__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	fes__SchemaElement__ *_p = ::soap_new_fes__SchemaElement__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SchemaElement__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__SchemaElement__(struct soap *soap, fes__SchemaElement__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SchemaElement", p->soap_type() == SOAP_TYPE_fes__SchemaElement__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__SchemaElement__(struct soap *soap, const char *URL, fes__SchemaElement__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SchemaElement", p->soap_type() == SOAP_TYPE_fes__SchemaElement__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SchemaElement__(struct soap *soap, const char *URL, fes__SchemaElement__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SchemaElement", p->soap_type() == SOAP_TYPE_fes__SchemaElement__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SchemaElement__(struct soap *soap, const char *URL, fes__SchemaElement__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SchemaElement", p->soap_type() == SOAP_TYPE_fes__SchemaElement__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__SchemaElement__ * SOAP_FMAC4 soap_get_fes__SchemaElement__(struct soap*, fes__SchemaElement__ *, const char*, const char*);

inline int soap_read_fes__SchemaElement__(struct soap *soap, fes__SchemaElement__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__SchemaElement__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SchemaElement__(struct soap *soap, const char *URL, fes__SchemaElement__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SchemaElement__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SchemaElement__(struct soap *soap, fes__SchemaElement__ *p)
{
	if (::soap_read_fes__SchemaElement__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SchemaElement_DEFINED
#define SOAP_TYPE_fes__SchemaElement_DEFINED

inline void soap_default_fes__SchemaElement(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__SchemaElement(struct soap*, const std::string *);

#define soap_fes__SchemaElement2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SchemaElement(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__SchemaElement(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "schema\\-element\\(.+\\)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__SchemaElement(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__SchemaElement soap_instantiate_std__string


#define soap_new_fes__SchemaElement soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__SchemaElement(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__SchemaElement(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__SchemaElement(soap, p, "fes:SchemaElement", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__SchemaElement(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SchemaElement(soap, p, "fes:SchemaElement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SchemaElement(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SchemaElement(soap, p, "fes:SchemaElement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SchemaElement(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SchemaElement(soap, p, "fes:SchemaElement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__SchemaElement(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__SchemaElement(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__SchemaElement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SchemaElement(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SchemaElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SchemaElement(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__SchemaElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__toType___DEFINED
#define SOAP_TYPE_xlink__toType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__toType__(struct soap*, const char*, int, const xlink__toType__ *, const char*);
SOAP_FMAC3 xlink__toType__ * SOAP_FMAC4 soap_in_xlink__toType__(struct soap*, const char*, xlink__toType__ *, const char*);
SOAP_FMAC1 xlink__toType__ * SOAP_FMAC2 soap_instantiate_xlink__toType__(struct soap*, int, const char*, const char*, size_t*);

inline xlink__toType__ * soap_new_xlink__toType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__toType__(soap, n, NULL, NULL, NULL);
}

inline xlink__toType__ * soap_new_req_xlink__toType__(
	struct soap *soap)
{
	xlink__toType__ *_p = ::soap_new_xlink__toType__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xlink__toType__ * soap_new_set_xlink__toType__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xlink__toType__ *_p = ::soap_new_xlink__toType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__toType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__toType__(struct soap *soap, xlink__toType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:toType", p->soap_type() == SOAP_TYPE_xlink__toType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__toType__(struct soap *soap, const char *URL, xlink__toType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:toType", p->soap_type() == SOAP_TYPE_xlink__toType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__toType__(struct soap *soap, const char *URL, xlink__toType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:toType", p->soap_type() == SOAP_TYPE_xlink__toType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__toType__(struct soap *soap, const char *URL, xlink__toType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:toType", p->soap_type() == SOAP_TYPE_xlink__toType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__toType__ * SOAP_FMAC4 soap_get_xlink__toType__(struct soap*, xlink__toType__ *, const char*, const char*);

inline int soap_read_xlink__toType__(struct soap *soap, xlink__toType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__toType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__toType__(struct soap *soap, const char *URL, xlink__toType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__toType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__toType__(struct soap *soap, xlink__toType__ *p)
{
	if (::soap_read_xlink__toType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__fromType___DEFINED
#define SOAP_TYPE_xlink__fromType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__fromType__(struct soap*, const char*, int, const xlink__fromType__ *, const char*);
SOAP_FMAC3 xlink__fromType__ * SOAP_FMAC4 soap_in_xlink__fromType__(struct soap*, const char*, xlink__fromType__ *, const char*);
SOAP_FMAC1 xlink__fromType__ * SOAP_FMAC2 soap_instantiate_xlink__fromType__(struct soap*, int, const char*, const char*, size_t*);

inline xlink__fromType__ * soap_new_xlink__fromType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__fromType__(soap, n, NULL, NULL, NULL);
}

inline xlink__fromType__ * soap_new_req_xlink__fromType__(
	struct soap *soap)
{
	xlink__fromType__ *_p = ::soap_new_xlink__fromType__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xlink__fromType__ * soap_new_set_xlink__fromType__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xlink__fromType__ *_p = ::soap_new_xlink__fromType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__fromType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__fromType__(struct soap *soap, xlink__fromType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:fromType", p->soap_type() == SOAP_TYPE_xlink__fromType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__fromType__(struct soap *soap, const char *URL, xlink__fromType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:fromType", p->soap_type() == SOAP_TYPE_xlink__fromType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__fromType__(struct soap *soap, const char *URL, xlink__fromType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:fromType", p->soap_type() == SOAP_TYPE_xlink__fromType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__fromType__(struct soap *soap, const char *URL, xlink__fromType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:fromType", p->soap_type() == SOAP_TYPE_xlink__fromType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__fromType__ * SOAP_FMAC4 soap_get_xlink__fromType__(struct soap*, xlink__fromType__ *, const char*, const char*);

inline int soap_read_xlink__fromType__(struct soap *soap, xlink__fromType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__fromType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__fromType__(struct soap *soap, const char *URL, xlink__fromType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__fromType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__fromType__(struct soap *soap, xlink__fromType__ *p)
{
	if (::soap_read_xlink__fromType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__labelType___DEFINED
#define SOAP_TYPE_xlink__labelType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__labelType__(struct soap*, const char*, int, const xlink__labelType__ *, const char*);
SOAP_FMAC3 xlink__labelType__ * SOAP_FMAC4 soap_in_xlink__labelType__(struct soap*, const char*, xlink__labelType__ *, const char*);
SOAP_FMAC1 xlink__labelType__ * SOAP_FMAC2 soap_instantiate_xlink__labelType__(struct soap*, int, const char*, const char*, size_t*);

inline xlink__labelType__ * soap_new_xlink__labelType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__labelType__(soap, n, NULL, NULL, NULL);
}

inline xlink__labelType__ * soap_new_req_xlink__labelType__(
	struct soap *soap)
{
	xlink__labelType__ *_p = ::soap_new_xlink__labelType__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xlink__labelType__ * soap_new_set_xlink__labelType__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xlink__labelType__ *_p = ::soap_new_xlink__labelType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__labelType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__labelType__(struct soap *soap, xlink__labelType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:labelType", p->soap_type() == SOAP_TYPE_xlink__labelType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__labelType__(struct soap *soap, const char *URL, xlink__labelType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:labelType", p->soap_type() == SOAP_TYPE_xlink__labelType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__labelType__(struct soap *soap, const char *URL, xlink__labelType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:labelType", p->soap_type() == SOAP_TYPE_xlink__labelType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__labelType__(struct soap *soap, const char *URL, xlink__labelType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:labelType", p->soap_type() == SOAP_TYPE_xlink__labelType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__labelType__ * SOAP_FMAC4 soap_get_xlink__labelType__(struct soap*, xlink__labelType__ *, const char*, const char*);

inline int soap_read_xlink__labelType__(struct soap *soap, xlink__labelType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__labelType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__labelType__(struct soap *soap, const char *URL, xlink__labelType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__labelType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__labelType__(struct soap *soap, xlink__labelType__ *p)
{
	if (::soap_read_xlink__labelType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__actuateType__DEFINED
#define SOAP_TYPE_xlink__actuateType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__actuateType_(struct soap*, const char*, int, const xlink__actuateType_ *, const char*);
SOAP_FMAC3 xlink__actuateType_ * SOAP_FMAC4 soap_in_xlink__actuateType_(struct soap*, const char*, xlink__actuateType_ *, const char*);
SOAP_FMAC1 xlink__actuateType_ * SOAP_FMAC2 soap_instantiate_xlink__actuateType_(struct soap*, int, const char*, const char*, size_t*);

inline xlink__actuateType_ * soap_new_xlink__actuateType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__actuateType_(soap, n, NULL, NULL, NULL);
}

inline xlink__actuateType_ * soap_new_req_xlink__actuateType_(
	struct soap *soap,
	enum xlink__actuateType __item)
{
	xlink__actuateType_ *_p = ::soap_new_xlink__actuateType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__actuateType_::__item = __item;
	}
	return _p;
}

inline xlink__actuateType_ * soap_new_set_xlink__actuateType_(
	struct soap *soap,
	enum xlink__actuateType __item,
	char *__item__1)
{
	xlink__actuateType_ *_p = ::soap_new_xlink__actuateType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__actuateType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__actuateType_(struct soap *soap, xlink__actuateType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:actuateType", p->soap_type() == SOAP_TYPE_xlink__actuateType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__actuateType_(struct soap *soap, const char *URL, xlink__actuateType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:actuateType", p->soap_type() == SOAP_TYPE_xlink__actuateType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__actuateType_(struct soap *soap, const char *URL, xlink__actuateType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:actuateType", p->soap_type() == SOAP_TYPE_xlink__actuateType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__actuateType_(struct soap *soap, const char *URL, xlink__actuateType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:actuateType", p->soap_type() == SOAP_TYPE_xlink__actuateType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__actuateType_ * SOAP_FMAC4 soap_get_xlink__actuateType_(struct soap*, xlink__actuateType_ *, const char*, const char*);

inline int soap_read_xlink__actuateType_(struct soap *soap, xlink__actuateType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__actuateType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__actuateType_(struct soap *soap, const char *URL, xlink__actuateType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__actuateType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__actuateType_(struct soap *soap, xlink__actuateType_ *p)
{
	if (::soap_read_xlink__actuateType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__showType__DEFINED
#define SOAP_TYPE_xlink__showType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__showType_(struct soap*, const char*, int, const xlink__showType_ *, const char*);
SOAP_FMAC3 xlink__showType_ * SOAP_FMAC4 soap_in_xlink__showType_(struct soap*, const char*, xlink__showType_ *, const char*);
SOAP_FMAC1 xlink__showType_ * SOAP_FMAC2 soap_instantiate_xlink__showType_(struct soap*, int, const char*, const char*, size_t*);

inline xlink__showType_ * soap_new_xlink__showType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__showType_(soap, n, NULL, NULL, NULL);
}

inline xlink__showType_ * soap_new_req_xlink__showType_(
	struct soap *soap,
	enum xlink__showType __item)
{
	xlink__showType_ *_p = ::soap_new_xlink__showType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__showType_::__item = __item;
	}
	return _p;
}

inline xlink__showType_ * soap_new_set_xlink__showType_(
	struct soap *soap,
	enum xlink__showType __item,
	char *__item__1)
{
	xlink__showType_ *_p = ::soap_new_xlink__showType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__showType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__showType_(struct soap *soap, xlink__showType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:showType", p->soap_type() == SOAP_TYPE_xlink__showType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__showType_(struct soap *soap, const char *URL, xlink__showType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:showType", p->soap_type() == SOAP_TYPE_xlink__showType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__showType_(struct soap *soap, const char *URL, xlink__showType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:showType", p->soap_type() == SOAP_TYPE_xlink__showType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__showType_(struct soap *soap, const char *URL, xlink__showType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:showType", p->soap_type() == SOAP_TYPE_xlink__showType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__showType_ * SOAP_FMAC4 soap_get_xlink__showType_(struct soap*, xlink__showType_ *, const char*, const char*);

inline int soap_read_xlink__showType_(struct soap *soap, xlink__showType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__showType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__showType_(struct soap *soap, const char *URL, xlink__showType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__showType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__showType_(struct soap *soap, xlink__showType_ *p)
{
	if (::soap_read_xlink__showType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__titleAttrType___DEFINED
#define SOAP_TYPE_xlink__titleAttrType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__titleAttrType__(struct soap*, const char*, int, const xlink__titleAttrType__ *, const char*);
SOAP_FMAC3 xlink__titleAttrType__ * SOAP_FMAC4 soap_in_xlink__titleAttrType__(struct soap*, const char*, xlink__titleAttrType__ *, const char*);
SOAP_FMAC1 xlink__titleAttrType__ * SOAP_FMAC2 soap_instantiate_xlink__titleAttrType__(struct soap*, int, const char*, const char*, size_t*);

inline xlink__titleAttrType__ * soap_new_xlink__titleAttrType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__titleAttrType__(soap, n, NULL, NULL, NULL);
}

inline xlink__titleAttrType__ * soap_new_req_xlink__titleAttrType__(
	struct soap *soap,
	const std::string& __item)
{
	xlink__titleAttrType__ *_p = ::soap_new_xlink__titleAttrType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__titleAttrType__::__item = __item;
	}
	return _p;
}

inline xlink__titleAttrType__ * soap_new_set_xlink__titleAttrType__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	xlink__titleAttrType__ *_p = ::soap_new_xlink__titleAttrType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__titleAttrType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__titleAttrType__(struct soap *soap, xlink__titleAttrType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleAttrType", p->soap_type() == SOAP_TYPE_xlink__titleAttrType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__titleAttrType__(struct soap *soap, const char *URL, xlink__titleAttrType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleAttrType", p->soap_type() == SOAP_TYPE_xlink__titleAttrType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__titleAttrType__(struct soap *soap, const char *URL, xlink__titleAttrType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleAttrType", p->soap_type() == SOAP_TYPE_xlink__titleAttrType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__titleAttrType__(struct soap *soap, const char *URL, xlink__titleAttrType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleAttrType", p->soap_type() == SOAP_TYPE_xlink__titleAttrType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__titleAttrType__ * SOAP_FMAC4 soap_get_xlink__titleAttrType__(struct soap*, xlink__titleAttrType__ *, const char*, const char*);

inline int soap_read_xlink__titleAttrType__(struct soap *soap, xlink__titleAttrType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__titleAttrType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__titleAttrType__(struct soap *soap, const char *URL, xlink__titleAttrType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__titleAttrType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__titleAttrType__(struct soap *soap, xlink__titleAttrType__ *p)
{
	if (::soap_read_xlink__titleAttrType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__titleAttrType_DEFINED
#define SOAP_TYPE_xlink__titleAttrType_DEFINED

inline void soap_default_xlink__titleAttrType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xlink__titleAttrType(struct soap*, const std::string *);

#define soap_xlink__titleAttrType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__titleAttrType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xlink__titleAttrType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xlink__titleAttrType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xlink__titleAttrType soap_instantiate_std__string


#define soap_new_xlink__titleAttrType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xlink__titleAttrType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xlink__titleAttrType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xlink__titleAttrType(soap, p, "xlink:titleAttrType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xlink__titleAttrType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__titleAttrType(soap, p, "xlink:titleAttrType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__titleAttrType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__titleAttrType(soap, p, "xlink:titleAttrType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__titleAttrType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__titleAttrType(soap, p, "xlink:titleAttrType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xlink__titleAttrType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xlink__titleAttrType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xlink__titleAttrType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__titleAttrType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__titleAttrType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__titleAttrType(struct soap *soap, std::string *p)
{
	if (::soap_read_xlink__titleAttrType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__arcroleType___DEFINED
#define SOAP_TYPE_xlink__arcroleType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__arcroleType__(struct soap*, const char*, int, const xlink__arcroleType__ *, const char*);
SOAP_FMAC3 xlink__arcroleType__ * SOAP_FMAC4 soap_in_xlink__arcroleType__(struct soap*, const char*, xlink__arcroleType__ *, const char*);
SOAP_FMAC1 xlink__arcroleType__ * SOAP_FMAC2 soap_instantiate_xlink__arcroleType__(struct soap*, int, const char*, const char*, size_t*);

inline xlink__arcroleType__ * soap_new_xlink__arcroleType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__arcroleType__(soap, n, NULL, NULL, NULL);
}

inline xlink__arcroleType__ * soap_new_req_xlink__arcroleType__(
	struct soap *soap)
{
	xlink__arcroleType__ *_p = ::soap_new_xlink__arcroleType__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xlink__arcroleType__ * soap_new_set_xlink__arcroleType__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xlink__arcroleType__ *_p = ::soap_new_xlink__arcroleType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__arcroleType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__arcroleType__(struct soap *soap, xlink__arcroleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcroleType", p->soap_type() == SOAP_TYPE_xlink__arcroleType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__arcroleType__(struct soap *soap, const char *URL, xlink__arcroleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcroleType", p->soap_type() == SOAP_TYPE_xlink__arcroleType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__arcroleType__(struct soap *soap, const char *URL, xlink__arcroleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcroleType", p->soap_type() == SOAP_TYPE_xlink__arcroleType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__arcroleType__(struct soap *soap, const char *URL, xlink__arcroleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcroleType", p->soap_type() == SOAP_TYPE_xlink__arcroleType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__arcroleType__ * SOAP_FMAC4 soap_get_xlink__arcroleType__(struct soap*, xlink__arcroleType__ *, const char*, const char*);

inline int soap_read_xlink__arcroleType__(struct soap *soap, xlink__arcroleType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__arcroleType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__arcroleType__(struct soap *soap, const char *URL, xlink__arcroleType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__arcroleType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__arcroleType__(struct soap *soap, xlink__arcroleType__ *p)
{
	if (::soap_read_xlink__arcroleType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__roleType___DEFINED
#define SOAP_TYPE_xlink__roleType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__roleType__(struct soap*, const char*, int, const xlink__roleType__ *, const char*);
SOAP_FMAC3 xlink__roleType__ * SOAP_FMAC4 soap_in_xlink__roleType__(struct soap*, const char*, xlink__roleType__ *, const char*);
SOAP_FMAC1 xlink__roleType__ * SOAP_FMAC2 soap_instantiate_xlink__roleType__(struct soap*, int, const char*, const char*, size_t*);

inline xlink__roleType__ * soap_new_xlink__roleType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__roleType__(soap, n, NULL, NULL, NULL);
}

inline xlink__roleType__ * soap_new_req_xlink__roleType__(
	struct soap *soap)
{
	xlink__roleType__ *_p = ::soap_new_xlink__roleType__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xlink__roleType__ * soap_new_set_xlink__roleType__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xlink__roleType__ *_p = ::soap_new_xlink__roleType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__roleType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__roleType__(struct soap *soap, xlink__roleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:roleType", p->soap_type() == SOAP_TYPE_xlink__roleType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__roleType__(struct soap *soap, const char *URL, xlink__roleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:roleType", p->soap_type() == SOAP_TYPE_xlink__roleType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__roleType__(struct soap *soap, const char *URL, xlink__roleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:roleType", p->soap_type() == SOAP_TYPE_xlink__roleType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__roleType__(struct soap *soap, const char *URL, xlink__roleType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:roleType", p->soap_type() == SOAP_TYPE_xlink__roleType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__roleType__ * SOAP_FMAC4 soap_get_xlink__roleType__(struct soap*, xlink__roleType__ *, const char*, const char*);

inline int soap_read_xlink__roleType__(struct soap *soap, xlink__roleType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__roleType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__roleType__(struct soap *soap, const char *URL, xlink__roleType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__roleType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__roleType__(struct soap *soap, xlink__roleType__ *p)
{
	if (::soap_read_xlink__roleType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__hrefType___DEFINED
#define SOAP_TYPE_xlink__hrefType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__hrefType__(struct soap*, const char*, int, const xlink__hrefType__ *, const char*);
SOAP_FMAC3 xlink__hrefType__ * SOAP_FMAC4 soap_in_xlink__hrefType__(struct soap*, const char*, xlink__hrefType__ *, const char*);
SOAP_FMAC1 xlink__hrefType__ * SOAP_FMAC2 soap_instantiate_xlink__hrefType__(struct soap*, int, const char*, const char*, size_t*);

inline xlink__hrefType__ * soap_new_xlink__hrefType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__hrefType__(soap, n, NULL, NULL, NULL);
}

inline xlink__hrefType__ * soap_new_req_xlink__hrefType__(
	struct soap *soap)
{
	xlink__hrefType__ *_p = ::soap_new_xlink__hrefType__(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xlink__hrefType__ * soap_new_set_xlink__hrefType__(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xlink__hrefType__ *_p = ::soap_new_xlink__hrefType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__hrefType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__hrefType__(struct soap *soap, xlink__hrefType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:hrefType", p->soap_type() == SOAP_TYPE_xlink__hrefType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__hrefType__(struct soap *soap, const char *URL, xlink__hrefType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:hrefType", p->soap_type() == SOAP_TYPE_xlink__hrefType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__hrefType__(struct soap *soap, const char *URL, xlink__hrefType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:hrefType", p->soap_type() == SOAP_TYPE_xlink__hrefType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__hrefType__(struct soap *soap, const char *URL, xlink__hrefType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:hrefType", p->soap_type() == SOAP_TYPE_xlink__hrefType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__hrefType__ * SOAP_FMAC4 soap_get_xlink__hrefType__(struct soap*, xlink__hrefType__ *, const char*, const char*);

inline int soap_read_xlink__hrefType__(struct soap *soap, xlink__hrefType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__hrefType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__hrefType__(struct soap *soap, const char *URL, xlink__hrefType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__hrefType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__hrefType__(struct soap *soap, xlink__hrefType__ *p)
{
	if (::soap_read_xlink__hrefType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__typeType__DEFINED
#define SOAP_TYPE_xlink__typeType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__typeType_(struct soap*, const char*, int, const xlink__typeType_ *, const char*);
SOAP_FMAC3 xlink__typeType_ * SOAP_FMAC4 soap_in_xlink__typeType_(struct soap*, const char*, xlink__typeType_ *, const char*);
SOAP_FMAC1 xlink__typeType_ * SOAP_FMAC2 soap_instantiate_xlink__typeType_(struct soap*, int, const char*, const char*, size_t*);

inline xlink__typeType_ * soap_new_xlink__typeType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__typeType_(soap, n, NULL, NULL, NULL);
}

inline xlink__typeType_ * soap_new_req_xlink__typeType_(
	struct soap *soap,
	enum xlink__typeType __item)
{
	xlink__typeType_ *_p = ::soap_new_xlink__typeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__typeType_::__item = __item;
	}
	return _p;
}

inline xlink__typeType_ * soap_new_set_xlink__typeType_(
	struct soap *soap,
	enum xlink__typeType __item,
	char *__item__1)
{
	xlink__typeType_ *_p = ::soap_new_xlink__typeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__typeType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__typeType_(struct soap *soap, xlink__typeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:typeType", p->soap_type() == SOAP_TYPE_xlink__typeType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__typeType_(struct soap *soap, const char *URL, xlink__typeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:typeType", p->soap_type() == SOAP_TYPE_xlink__typeType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__typeType_(struct soap *soap, const char *URL, xlink__typeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:typeType", p->soap_type() == SOAP_TYPE_xlink__typeType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__typeType_(struct soap *soap, const char *URL, xlink__typeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:typeType", p->soap_type() == SOAP_TYPE_xlink__typeType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__typeType_ * SOAP_FMAC4 soap_get_xlink__typeType_(struct soap*, xlink__typeType_ *, const char*, const char*);

inline int soap_read_xlink__typeType_(struct soap *soap, xlink__typeType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__typeType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__typeType_(struct soap *soap, const char *URL, xlink__typeType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__typeType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__typeType_(struct soap *soap, xlink__typeType_ *p)
{
	if (::soap_read_xlink__typeType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__UpdateSequenceType___DEFINED
#define SOAP_TYPE_ows__UpdateSequenceType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__UpdateSequenceType__(struct soap*, const char*, int, const ows__UpdateSequenceType__ *, const char*);
SOAP_FMAC3 ows__UpdateSequenceType__ * SOAP_FMAC4 soap_in_ows__UpdateSequenceType__(struct soap*, const char*, ows__UpdateSequenceType__ *, const char*);
SOAP_FMAC1 ows__UpdateSequenceType__ * SOAP_FMAC2 soap_instantiate_ows__UpdateSequenceType__(struct soap*, int, const char*, const char*, size_t*);

inline ows__UpdateSequenceType__ * soap_new_ows__UpdateSequenceType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__UpdateSequenceType__(soap, n, NULL, NULL, NULL);
}

inline ows__UpdateSequenceType__ * soap_new_req_ows__UpdateSequenceType__(
	struct soap *soap,
	const std::string& __item)
{
	ows__UpdateSequenceType__ *_p = ::soap_new_ows__UpdateSequenceType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__UpdateSequenceType__::__item = __item;
	}
	return _p;
}

inline ows__UpdateSequenceType__ * soap_new_set_ows__UpdateSequenceType__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	ows__UpdateSequenceType__ *_p = ::soap_new_ows__UpdateSequenceType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__UpdateSequenceType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__UpdateSequenceType__(struct soap *soap, ows__UpdateSequenceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UpdateSequenceType", p->soap_type() == SOAP_TYPE_ows__UpdateSequenceType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__UpdateSequenceType__(struct soap *soap, const char *URL, ows__UpdateSequenceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UpdateSequenceType", p->soap_type() == SOAP_TYPE_ows__UpdateSequenceType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__UpdateSequenceType__(struct soap *soap, const char *URL, ows__UpdateSequenceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UpdateSequenceType", p->soap_type() == SOAP_TYPE_ows__UpdateSequenceType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__UpdateSequenceType__(struct soap *soap, const char *URL, ows__UpdateSequenceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UpdateSequenceType", p->soap_type() == SOAP_TYPE_ows__UpdateSequenceType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__UpdateSequenceType__ * SOAP_FMAC4 soap_get_ows__UpdateSequenceType__(struct soap*, ows__UpdateSequenceType__ *, const char*, const char*);

inline int soap_read_ows__UpdateSequenceType__(struct soap *soap, ows__UpdateSequenceType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__UpdateSequenceType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__UpdateSequenceType__(struct soap *soap, const char *URL, ows__UpdateSequenceType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__UpdateSequenceType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__UpdateSequenceType__(struct soap *soap, ows__UpdateSequenceType__ *p)
{
	if (::soap_read_ows__UpdateSequenceType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__UpdateSequenceType_DEFINED
#define SOAP_TYPE_ows__UpdateSequenceType_DEFINED

inline void soap_default_ows__UpdateSequenceType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ows__UpdateSequenceType(struct soap*, const std::string *);

#define soap_ows__UpdateSequenceType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__UpdateSequenceType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ows__UpdateSequenceType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ows__UpdateSequenceType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ows__UpdateSequenceType soap_instantiate_std__string


#define soap_new_ows__UpdateSequenceType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ows__UpdateSequenceType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ows__UpdateSequenceType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ows__UpdateSequenceType(soap, p, "ows:UpdateSequenceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ows__UpdateSequenceType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__UpdateSequenceType(soap, p, "ows:UpdateSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__UpdateSequenceType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__UpdateSequenceType(soap, p, "ows:UpdateSequenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__UpdateSequenceType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__UpdateSequenceType(soap, p, "ows:UpdateSequenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ows__UpdateSequenceType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ows__UpdateSequenceType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ows__UpdateSequenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__UpdateSequenceType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__UpdateSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__UpdateSequenceType(struct soap *soap, std::string *p)
{
	if (::soap_read_ows__UpdateSequenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ServiceType___DEFINED
#define SOAP_TYPE_ows__ServiceType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ServiceType__(struct soap*, const char*, int, const ows__ServiceType__ *, const char*);
SOAP_FMAC3 ows__ServiceType__ * SOAP_FMAC4 soap_in_ows__ServiceType__(struct soap*, const char*, ows__ServiceType__ *, const char*);
SOAP_FMAC1 ows__ServiceType__ * SOAP_FMAC2 soap_instantiate_ows__ServiceType__(struct soap*, int, const char*, const char*, size_t*);

inline ows__ServiceType__ * soap_new_ows__ServiceType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ServiceType__(soap, n, NULL, NULL, NULL);
}

inline ows__ServiceType__ * soap_new_req_ows__ServiceType__(
	struct soap *soap,
	const std::string& __item)
{
	ows__ServiceType__ *_p = ::soap_new_ows__ServiceType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ServiceType__::__item = __item;
	}
	return _p;
}

inline ows__ServiceType__ * soap_new_set_ows__ServiceType__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	ows__ServiceType__ *_p = ::soap_new_ows__ServiceType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ServiceType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__ServiceType__(struct soap *soap, ows__ServiceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceType", p->soap_type() == SOAP_TYPE_ows__ServiceType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ServiceType__(struct soap *soap, const char *URL, ows__ServiceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceType", p->soap_type() == SOAP_TYPE_ows__ServiceType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ServiceType__(struct soap *soap, const char *URL, ows__ServiceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceType", p->soap_type() == SOAP_TYPE_ows__ServiceType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ServiceType__(struct soap *soap, const char *URL, ows__ServiceType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceType", p->soap_type() == SOAP_TYPE_ows__ServiceType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ServiceType__ * SOAP_FMAC4 soap_get_ows__ServiceType__(struct soap*, ows__ServiceType__ *, const char*, const char*);

inline int soap_read_ows__ServiceType__(struct soap *soap, ows__ServiceType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ServiceType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ServiceType__(struct soap *soap, const char *URL, ows__ServiceType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ServiceType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ServiceType__(struct soap *soap, ows__ServiceType__ *p)
{
	if (::soap_read_ows__ServiceType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ServiceType_DEFINED
#define SOAP_TYPE_ows__ServiceType_DEFINED

inline void soap_default_ows__ServiceType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ows__ServiceType(struct soap*, const std::string *);

#define soap_ows__ServiceType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ServiceType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ows__ServiceType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ows__ServiceType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ows__ServiceType soap_instantiate_std__string


#define soap_new_ows__ServiceType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ows__ServiceType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ows__ServiceType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ows__ServiceType(soap, p, "ows:ServiceType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ows__ServiceType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__ServiceType(soap, p, "ows:ServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ServiceType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__ServiceType(soap, p, "ows:ServiceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ServiceType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__ServiceType(soap, p, "ows:ServiceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ows__ServiceType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ows__ServiceType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ows__ServiceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ServiceType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ServiceType(struct soap *soap, std::string *p)
{
	if (::soap_read_ows__ServiceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ows__PositionType2D is a typedef synonym of ows__PositionType */

#ifndef SOAP_TYPE_ows__PositionType2D_DEFINED
#define SOAP_TYPE_ows__PositionType2D_DEFINED

#define soap_default_ows__PositionType2D soap_default_ows__PositionType


#define soap_serialize_ows__PositionType2D soap_serialize_ows__PositionType


#define soap_ows__PositionType2D2s(soap, a) ((a).c_str())

#define soap_out_ows__PositionType2D soap_out_ows__PositionType


#define soap_s2ows__PositionType2D(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)

#define soap_in_ows__PositionType2D soap_in_ows__PositionType


#define soap_instantiate_ows__PositionType2D soap_instantiate_ows__PositionType


#define soap_new_ows__PositionType2D soap_new_ows__PositionType


#define soap_put_ows__PositionType2D soap_put_ows__PositionType


#define soap_write_ows__PositionType2D soap_write_ows__PositionType


#define soap_PUT_ows__PositionType2D soap_PUT_ows__PositionType


#define soap_PATCH_ows__PositionType2D soap_PATCH_ows__PositionType


#define soap_POST_send_ows__PositionType2D soap_POST_send_ows__PositionType


#define soap_get_ows__PositionType2D soap_get_ows__PositionType


#define soap_read_ows__PositionType2D soap_read_ows__PositionType


#define soap_GET_ows__PositionType2D soap_GET_ows__PositionType


#define soap_POST_recv_ows__PositionType2D soap_POST_recv_ows__PositionType

#endif

#ifndef SOAP_TYPE_ows__VersionType___DEFINED
#define SOAP_TYPE_ows__VersionType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__VersionType__(struct soap*, const char*, int, const ows__VersionType__ *, const char*);
SOAP_FMAC3 ows__VersionType__ * SOAP_FMAC4 soap_in_ows__VersionType__(struct soap*, const char*, ows__VersionType__ *, const char*);
SOAP_FMAC1 ows__VersionType__ * SOAP_FMAC2 soap_instantiate_ows__VersionType__(struct soap*, int, const char*, const char*, size_t*);

inline ows__VersionType__ * soap_new_ows__VersionType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__VersionType__(soap, n, NULL, NULL, NULL);
}

inline ows__VersionType__ * soap_new_req_ows__VersionType__(
	struct soap *soap,
	const std::string& __item)
{
	ows__VersionType__ *_p = ::soap_new_ows__VersionType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__VersionType__::__item = __item;
	}
	return _p;
}

inline ows__VersionType__ * soap_new_set_ows__VersionType__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	ows__VersionType__ *_p = ::soap_new_ows__VersionType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__VersionType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__VersionType__(struct soap *soap, ows__VersionType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:VersionType", p->soap_type() == SOAP_TYPE_ows__VersionType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__VersionType__(struct soap *soap, const char *URL, ows__VersionType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:VersionType", p->soap_type() == SOAP_TYPE_ows__VersionType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__VersionType__(struct soap *soap, const char *URL, ows__VersionType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:VersionType", p->soap_type() == SOAP_TYPE_ows__VersionType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__VersionType__(struct soap *soap, const char *URL, ows__VersionType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:VersionType", p->soap_type() == SOAP_TYPE_ows__VersionType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__VersionType__ * SOAP_FMAC4 soap_get_ows__VersionType__(struct soap*, ows__VersionType__ *, const char*, const char*);

inline int soap_read_ows__VersionType__(struct soap *soap, ows__VersionType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__VersionType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__VersionType__(struct soap *soap, const char *URL, ows__VersionType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__VersionType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__VersionType__(struct soap *soap, ows__VersionType__ *p)
{
	if (::soap_read_ows__VersionType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__VersionType_DEFINED
#define SOAP_TYPE_ows__VersionType_DEFINED

inline void soap_default_ows__VersionType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ows__VersionType(struct soap*, const std::string *);

#define soap_ows__VersionType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__VersionType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ows__VersionType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "\\d+\\.\\d?\\d\\.\\d?\\d")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ows__VersionType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ows__VersionType soap_instantiate_std__string


#define soap_new_ows__VersionType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ows__VersionType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ows__VersionType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ows__VersionType(soap, p, "ows:VersionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ows__VersionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__VersionType(soap, p, "ows:VersionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__VersionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__VersionType(soap, p, "ows:VersionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__VersionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__VersionType(soap, p, "ows:VersionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ows__VersionType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ows__VersionType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ows__VersionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__VersionType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__VersionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__VersionType(struct soap *soap, std::string *p)
{
	if (::soap_read_ows__VersionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__MimeType___DEFINED
#define SOAP_TYPE_ows__MimeType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__MimeType__(struct soap*, const char*, int, const ows__MimeType__ *, const char*);
SOAP_FMAC3 ows__MimeType__ * SOAP_FMAC4 soap_in_ows__MimeType__(struct soap*, const char*, ows__MimeType__ *, const char*);
SOAP_FMAC1 ows__MimeType__ * SOAP_FMAC2 soap_instantiate_ows__MimeType__(struct soap*, int, const char*, const char*, size_t*);

inline ows__MimeType__ * soap_new_ows__MimeType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__MimeType__(soap, n, NULL, NULL, NULL);
}

inline ows__MimeType__ * soap_new_req_ows__MimeType__(
	struct soap *soap,
	const std::string& __item)
{
	ows__MimeType__ *_p = ::soap_new_ows__MimeType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__MimeType__::__item = __item;
	}
	return _p;
}

inline ows__MimeType__ * soap_new_set_ows__MimeType__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	ows__MimeType__ *_p = ::soap_new_ows__MimeType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__MimeType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__MimeType__(struct soap *soap, ows__MimeType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MimeType", p->soap_type() == SOAP_TYPE_ows__MimeType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__MimeType__(struct soap *soap, const char *URL, ows__MimeType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MimeType", p->soap_type() == SOAP_TYPE_ows__MimeType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__MimeType__(struct soap *soap, const char *URL, ows__MimeType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MimeType", p->soap_type() == SOAP_TYPE_ows__MimeType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__MimeType__(struct soap *soap, const char *URL, ows__MimeType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MimeType", p->soap_type() == SOAP_TYPE_ows__MimeType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__MimeType__ * SOAP_FMAC4 soap_get_ows__MimeType__(struct soap*, ows__MimeType__ *, const char*, const char*);

inline int soap_read_ows__MimeType__(struct soap *soap, ows__MimeType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__MimeType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__MimeType__(struct soap *soap, const char *URL, ows__MimeType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__MimeType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__MimeType__(struct soap *soap, ows__MimeType__ *p)
{
	if (::soap_read_ows__MimeType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__MimeType_DEFINED
#define SOAP_TYPE_ows__MimeType_DEFINED

inline void soap_default_ows__MimeType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ows__MimeType(struct soap*, const std::string *);

#define soap_ows__MimeType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__MimeType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ows__MimeType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "(application|audio|image|text|video|message|multipart|model)/.+(;\\s*.+=.+)*")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ows__MimeType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ows__MimeType soap_instantiate_std__string


#define soap_new_ows__MimeType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ows__MimeType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ows__MimeType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ows__MimeType(soap, p, "ows:MimeType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ows__MimeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__MimeType(soap, p, "ows:MimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__MimeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__MimeType(soap, p, "ows:MimeType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__MimeType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__MimeType(soap, p, "ows:MimeType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ows__MimeType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ows__MimeType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ows__MimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__MimeType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__MimeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__MimeType(struct soap *soap, std::string *p)
{
	if (::soap_read_ows__MimeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__UpdateActionType__DEFINED
#define SOAP_TYPE_wfs__UpdateActionType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__UpdateActionType_(struct soap*, const char*, int, const wfs__UpdateActionType_ *, const char*);
SOAP_FMAC3 wfs__UpdateActionType_ * SOAP_FMAC4 soap_in_wfs__UpdateActionType_(struct soap*, const char*, wfs__UpdateActionType_ *, const char*);
SOAP_FMAC1 wfs__UpdateActionType_ * SOAP_FMAC2 soap_instantiate_wfs__UpdateActionType_(struct soap*, int, const char*, const char*, size_t*);

inline wfs__UpdateActionType_ * soap_new_wfs__UpdateActionType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__UpdateActionType_(soap, n, NULL, NULL, NULL);
}

inline wfs__UpdateActionType_ * soap_new_req_wfs__UpdateActionType_(
	struct soap *soap,
	enum wfs__UpdateActionType __item)
{
	wfs__UpdateActionType_ *_p = ::soap_new_wfs__UpdateActionType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__UpdateActionType_::__item = __item;
	}
	return _p;
}

inline wfs__UpdateActionType_ * soap_new_set_wfs__UpdateActionType_(
	struct soap *soap,
	enum wfs__UpdateActionType __item,
	char *__item__1)
{
	wfs__UpdateActionType_ *_p = ::soap_new_wfs__UpdateActionType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__UpdateActionType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__UpdateActionType_(struct soap *soap, wfs__UpdateActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateActionType", p->soap_type() == SOAP_TYPE_wfs__UpdateActionType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__UpdateActionType_(struct soap *soap, const char *URL, wfs__UpdateActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateActionType", p->soap_type() == SOAP_TYPE_wfs__UpdateActionType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__UpdateActionType_(struct soap *soap, const char *URL, wfs__UpdateActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateActionType", p->soap_type() == SOAP_TYPE_wfs__UpdateActionType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__UpdateActionType_(struct soap *soap, const char *URL, wfs__UpdateActionType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateActionType", p->soap_type() == SOAP_TYPE_wfs__UpdateActionType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__UpdateActionType_ * SOAP_FMAC4 soap_get_wfs__UpdateActionType_(struct soap*, wfs__UpdateActionType_ *, const char*, const char*);

inline int soap_read_wfs__UpdateActionType_(struct soap *soap, wfs__UpdateActionType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__UpdateActionType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__UpdateActionType_(struct soap *soap, const char *URL, wfs__UpdateActionType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__UpdateActionType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__UpdateActionType_(struct soap *soap, wfs__UpdateActionType_ *p)
{
	if (::soap_read_wfs__UpdateActionType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__AllSomeType__DEFINED
#define SOAP_TYPE_wfs__AllSomeType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__AllSomeType_(struct soap*, const char*, int, const wfs__AllSomeType_ *, const char*);
SOAP_FMAC3 wfs__AllSomeType_ * SOAP_FMAC4 soap_in_wfs__AllSomeType_(struct soap*, const char*, wfs__AllSomeType_ *, const char*);
SOAP_FMAC1 wfs__AllSomeType_ * SOAP_FMAC2 soap_instantiate_wfs__AllSomeType_(struct soap*, int, const char*, const char*, size_t*);

inline wfs__AllSomeType_ * soap_new_wfs__AllSomeType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__AllSomeType_(soap, n, NULL, NULL, NULL);
}

inline wfs__AllSomeType_ * soap_new_req_wfs__AllSomeType_(
	struct soap *soap,
	enum wfs__AllSomeType __item)
{
	wfs__AllSomeType_ *_p = ::soap_new_wfs__AllSomeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__AllSomeType_::__item = __item;
	}
	return _p;
}

inline wfs__AllSomeType_ * soap_new_set_wfs__AllSomeType_(
	struct soap *soap,
	enum wfs__AllSomeType __item,
	char *__item__1)
{
	wfs__AllSomeType_ *_p = ::soap_new_wfs__AllSomeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__AllSomeType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__AllSomeType_(struct soap *soap, wfs__AllSomeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AllSomeType", p->soap_type() == SOAP_TYPE_wfs__AllSomeType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__AllSomeType_(struct soap *soap, const char *URL, wfs__AllSomeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AllSomeType", p->soap_type() == SOAP_TYPE_wfs__AllSomeType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__AllSomeType_(struct soap *soap, const char *URL, wfs__AllSomeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AllSomeType", p->soap_type() == SOAP_TYPE_wfs__AllSomeType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__AllSomeType_(struct soap *soap, const char *URL, wfs__AllSomeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AllSomeType", p->soap_type() == SOAP_TYPE_wfs__AllSomeType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__AllSomeType_ * SOAP_FMAC4 soap_get_wfs__AllSomeType_(struct soap*, wfs__AllSomeType_ *, const char*, const char*);

inline int soap_read_wfs__AllSomeType_(struct soap *soap, wfs__AllSomeType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__AllSomeType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__AllSomeType_(struct soap *soap, const char *URL, wfs__AllSomeType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__AllSomeType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__AllSomeType_(struct soap *soap, wfs__AllSomeType_ *p)
{
	if (::soap_read_wfs__AllSomeType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__StarStringType__DEFINED
#define SOAP_TYPE_wfs__StarStringType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__StarStringType_(struct soap*, const char*, int, const wfs__StarStringType_ *, const char*);
SOAP_FMAC3 wfs__StarStringType_ * SOAP_FMAC4 soap_in_wfs__StarStringType_(struct soap*, const char*, wfs__StarStringType_ *, const char*);
SOAP_FMAC1 wfs__StarStringType_ * SOAP_FMAC2 soap_instantiate_wfs__StarStringType_(struct soap*, int, const char*, const char*, size_t*);

inline wfs__StarStringType_ * soap_new_wfs__StarStringType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__StarStringType_(soap, n, NULL, NULL, NULL);
}

inline wfs__StarStringType_ * soap_new_req_wfs__StarStringType_(
	struct soap *soap,
	enum wfs__StarStringType __item)
{
	wfs__StarStringType_ *_p = ::soap_new_wfs__StarStringType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StarStringType_::__item = __item;
	}
	return _p;
}

inline wfs__StarStringType_ * soap_new_set_wfs__StarStringType_(
	struct soap *soap,
	enum wfs__StarStringType __item,
	char *__item__1)
{
	wfs__StarStringType_ *_p = ::soap_new_wfs__StarStringType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StarStringType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__StarStringType_(struct soap *soap, wfs__StarStringType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StarStringType", p->soap_type() == SOAP_TYPE_wfs__StarStringType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__StarStringType_(struct soap *soap, const char *URL, wfs__StarStringType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StarStringType", p->soap_type() == SOAP_TYPE_wfs__StarStringType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__StarStringType_(struct soap *soap, const char *URL, wfs__StarStringType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StarStringType", p->soap_type() == SOAP_TYPE_wfs__StarStringType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__StarStringType_(struct soap *soap, const char *URL, wfs__StarStringType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StarStringType", p->soap_type() == SOAP_TYPE_wfs__StarStringType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__StarStringType_ * SOAP_FMAC4 soap_get_wfs__StarStringType_(struct soap*, wfs__StarStringType_ *, const char*, const char*);

inline int soap_read_wfs__StarStringType_(struct soap *soap, wfs__StarStringType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__StarStringType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__StarStringType_(struct soap *soap, const char *URL, wfs__StarStringType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__StarStringType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__StarStringType_(struct soap *soap, wfs__StarStringType_ *p)
{
	if (::soap_read_wfs__StarStringType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ResolveValueType__DEFINED
#define SOAP_TYPE_wfs__ResolveValueType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ResolveValueType_(struct soap*, const char*, int, const wfs__ResolveValueType_ *, const char*);
SOAP_FMAC3 wfs__ResolveValueType_ * SOAP_FMAC4 soap_in_wfs__ResolveValueType_(struct soap*, const char*, wfs__ResolveValueType_ *, const char*);
SOAP_FMAC1 wfs__ResolveValueType_ * SOAP_FMAC2 soap_instantiate_wfs__ResolveValueType_(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ResolveValueType_ * soap_new_wfs__ResolveValueType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ResolveValueType_(soap, n, NULL, NULL, NULL);
}

inline wfs__ResolveValueType_ * soap_new_req_wfs__ResolveValueType_(
	struct soap *soap,
	enum wfs__ResolveValueType __item)
{
	wfs__ResolveValueType_ *_p = ::soap_new_wfs__ResolveValueType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ResolveValueType_::__item = __item;
	}
	return _p;
}

inline wfs__ResolveValueType_ * soap_new_set_wfs__ResolveValueType_(
	struct soap *soap,
	enum wfs__ResolveValueType __item,
	char *__item__1)
{
	wfs__ResolveValueType_ *_p = ::soap_new_wfs__ResolveValueType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ResolveValueType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ResolveValueType_(struct soap *soap, wfs__ResolveValueType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResolveValueType", p->soap_type() == SOAP_TYPE_wfs__ResolveValueType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ResolveValueType_(struct soap *soap, const char *URL, wfs__ResolveValueType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResolveValueType", p->soap_type() == SOAP_TYPE_wfs__ResolveValueType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ResolveValueType_(struct soap *soap, const char *URL, wfs__ResolveValueType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResolveValueType", p->soap_type() == SOAP_TYPE_wfs__ResolveValueType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ResolveValueType_(struct soap *soap, const char *URL, wfs__ResolveValueType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResolveValueType", p->soap_type() == SOAP_TYPE_wfs__ResolveValueType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ResolveValueType_ * SOAP_FMAC4 soap_get_wfs__ResolveValueType_(struct soap*, wfs__ResolveValueType_ *, const char*, const char*);

inline int soap_read_wfs__ResolveValueType_(struct soap *soap, wfs__ResolveValueType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ResolveValueType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ResolveValueType_(struct soap *soap, const char *URL, wfs__ResolveValueType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ResolveValueType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ResolveValueType_(struct soap *soap, wfs__ResolveValueType_ *p)
{
	if (::soap_read_wfs__ResolveValueType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ResultTypeType__DEFINED
#define SOAP_TYPE_wfs__ResultTypeType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ResultTypeType_(struct soap*, const char*, int, const wfs__ResultTypeType_ *, const char*);
SOAP_FMAC3 wfs__ResultTypeType_ * SOAP_FMAC4 soap_in_wfs__ResultTypeType_(struct soap*, const char*, wfs__ResultTypeType_ *, const char*);
SOAP_FMAC1 wfs__ResultTypeType_ * SOAP_FMAC2 soap_instantiate_wfs__ResultTypeType_(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ResultTypeType_ * soap_new_wfs__ResultTypeType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ResultTypeType_(soap, n, NULL, NULL, NULL);
}

inline wfs__ResultTypeType_ * soap_new_req_wfs__ResultTypeType_(
	struct soap *soap,
	enum wfs__ResultTypeType __item)
{
	wfs__ResultTypeType_ *_p = ::soap_new_wfs__ResultTypeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ResultTypeType_::__item = __item;
	}
	return _p;
}

inline wfs__ResultTypeType_ * soap_new_set_wfs__ResultTypeType_(
	struct soap *soap,
	enum wfs__ResultTypeType __item,
	char *__item__1)
{
	wfs__ResultTypeType_ *_p = ::soap_new_wfs__ResultTypeType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ResultTypeType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ResultTypeType_(struct soap *soap, wfs__ResultTypeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResultTypeType", p->soap_type() == SOAP_TYPE_wfs__ResultTypeType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ResultTypeType_(struct soap *soap, const char *URL, wfs__ResultTypeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResultTypeType", p->soap_type() == SOAP_TYPE_wfs__ResultTypeType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ResultTypeType_(struct soap *soap, const char *URL, wfs__ResultTypeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResultTypeType", p->soap_type() == SOAP_TYPE_wfs__ResultTypeType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ResultTypeType_(struct soap *soap, const char *URL, wfs__ResultTypeType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ResultTypeType", p->soap_type() == SOAP_TYPE_wfs__ResultTypeType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ResultTypeType_ * SOAP_FMAC4 soap_get_wfs__ResultTypeType_(struct soap*, wfs__ResultTypeType_ *, const char*, const char*);

inline int soap_read_wfs__ResultTypeType_(struct soap *soap, wfs__ResultTypeType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ResultTypeType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ResultTypeType_(struct soap *soap, const char *URL, wfs__ResultTypeType_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ResultTypeType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ResultTypeType_(struct soap *soap, wfs__ResultTypeType_ *p)
{
	if (::soap_read_wfs__ResultTypeType_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__VersionStringType___DEFINED
#define SOAP_TYPE_wfs__VersionStringType___DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__VersionStringType__(struct soap*, const char*, int, const wfs__VersionStringType__ *, const char*);
SOAP_FMAC3 wfs__VersionStringType__ * SOAP_FMAC4 soap_in_wfs__VersionStringType__(struct soap*, const char*, wfs__VersionStringType__ *, const char*);
SOAP_FMAC1 wfs__VersionStringType__ * SOAP_FMAC2 soap_instantiate_wfs__VersionStringType__(struct soap*, int, const char*, const char*, size_t*);

inline wfs__VersionStringType__ * soap_new_wfs__VersionStringType__(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__VersionStringType__(soap, n, NULL, NULL, NULL);
}

inline wfs__VersionStringType__ * soap_new_req_wfs__VersionStringType__(
	struct soap *soap,
	const std::string& __item)
{
	wfs__VersionStringType__ *_p = ::soap_new_wfs__VersionStringType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__VersionStringType__::__item = __item;
	}
	return _p;
}

inline wfs__VersionStringType__ * soap_new_set_wfs__VersionStringType__(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	wfs__VersionStringType__ *_p = ::soap_new_wfs__VersionStringType__(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__VersionStringType__::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__VersionStringType__(struct soap *soap, wfs__VersionStringType__ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:VersionStringType", p->soap_type() == SOAP_TYPE_wfs__VersionStringType__ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__VersionStringType__(struct soap *soap, const char *URL, wfs__VersionStringType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:VersionStringType", p->soap_type() == SOAP_TYPE_wfs__VersionStringType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__VersionStringType__(struct soap *soap, const char *URL, wfs__VersionStringType__ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:VersionStringType", p->soap_type() == SOAP_TYPE_wfs__VersionStringType__ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__VersionStringType__(struct soap *soap, const char *URL, wfs__VersionStringType__ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:VersionStringType", p->soap_type() == SOAP_TYPE_wfs__VersionStringType__ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__VersionStringType__ * SOAP_FMAC4 soap_get_wfs__VersionStringType__(struct soap*, wfs__VersionStringType__ *, const char*, const char*);

inline int soap_read_wfs__VersionStringType__(struct soap *soap, wfs__VersionStringType__ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__VersionStringType__(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__VersionStringType__(struct soap *soap, const char *URL, wfs__VersionStringType__ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__VersionStringType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__VersionStringType__(struct soap *soap, wfs__VersionStringType__ *p)
{
	if (::soap_read_wfs__VersionStringType__(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__VersionStringType_DEFINED
#define SOAP_TYPE_wfs__VersionStringType_DEFINED

inline void soap_default_wfs__VersionStringType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wfs__VersionStringType(struct soap*, const std::string *);

#define soap_wfs__VersionStringType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__VersionStringType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wfs__VersionStringType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "2\\.0\\.\\d+")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wfs__VersionStringType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wfs__VersionStringType soap_instantiate_std__string


#define soap_new_wfs__VersionStringType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__VersionStringType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wfs__VersionStringType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__VersionStringType(soap, p, "wfs:VersionStringType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__VersionStringType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__VersionStringType(soap, p, "wfs:VersionStringType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__VersionStringType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__VersionStringType(soap, p, "wfs:VersionStringType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__VersionStringType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__VersionStringType(soap, p, "wfs:VersionStringType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wfs__VersionStringType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wfs__VersionStringType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__VersionStringType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__VersionStringType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__VersionStringType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__VersionStringType(struct soap *soap, std::string *p)
{
	if (::soap_read_wfs__VersionStringType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__TemporalOperatorNameType_DEFINED
#define SOAP_TYPE_fes__TemporalOperatorNameType_DEFINED

inline void soap_default_fes__TemporalOperatorNameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__TemporalOperatorNameType(struct soap*, const std::string *);

#define soap_fes__TemporalOperatorNameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__TemporalOperatorNameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__TemporalOperatorNameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__TemporalOperatorNameType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__TemporalOperatorNameType soap_instantiate_std__string


#define soap_new_fes__TemporalOperatorNameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__TemporalOperatorNameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__TemporalOperatorNameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__TemporalOperatorNameType(soap, p, "fes:TemporalOperatorNameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__TemporalOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TemporalOperatorNameType(soap, p, "fes:TemporalOperatorNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__TemporalOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TemporalOperatorNameType(soap, p, "fes:TemporalOperatorNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__TemporalOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TemporalOperatorNameType(soap, p, "fes:TemporalOperatorNameType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__TemporalOperatorNameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__TemporalOperatorNameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__TemporalOperatorNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__TemporalOperatorNameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__TemporalOperatorNameType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__TemporalOperatorNameType(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__TemporalOperatorNameType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SpatialOperatorNameType_DEFINED
#define SOAP_TYPE_fes__SpatialOperatorNameType_DEFINED

inline void soap_default_fes__SpatialOperatorNameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__SpatialOperatorNameType(struct soap*, const std::string *);

#define soap_fes__SpatialOperatorNameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SpatialOperatorNameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__SpatialOperatorNameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__SpatialOperatorNameType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__SpatialOperatorNameType soap_instantiate_std__string


#define soap_new_fes__SpatialOperatorNameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__SpatialOperatorNameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__SpatialOperatorNameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__SpatialOperatorNameType(soap, p, "fes:SpatialOperatorNameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__SpatialOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SpatialOperatorNameType(soap, p, "fes:SpatialOperatorNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SpatialOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SpatialOperatorNameType(soap, p, "fes:SpatialOperatorNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SpatialOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__SpatialOperatorNameType(soap, p, "fes:SpatialOperatorNameType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__SpatialOperatorNameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__SpatialOperatorNameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__SpatialOperatorNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SpatialOperatorNameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SpatialOperatorNameType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SpatialOperatorNameType(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__SpatialOperatorNameType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ComparisonOperatorNameType_DEFINED
#define SOAP_TYPE_fes__ComparisonOperatorNameType_DEFINED

inline void soap_default_fes__ComparisonOperatorNameType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__ComparisonOperatorNameType(struct soap*, const std::string *);

#define soap_fes__ComparisonOperatorNameType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ComparisonOperatorNameType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__ComparisonOperatorNameType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__ComparisonOperatorNameType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__ComparisonOperatorNameType soap_instantiate_std__string


#define soap_new_fes__ComparisonOperatorNameType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__ComparisonOperatorNameType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__ComparisonOperatorNameType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__ComparisonOperatorNameType(soap, p, "fes:ComparisonOperatorNameType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__ComparisonOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__ComparisonOperatorNameType(soap, p, "fes:ComparisonOperatorNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ComparisonOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__ComparisonOperatorNameType(soap, p, "fes:ComparisonOperatorNameType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ComparisonOperatorNameType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__ComparisonOperatorNameType(soap, p, "fes:ComparisonOperatorNameType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__ComparisonOperatorNameType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__ComparisonOperatorNameType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__ComparisonOperatorNameType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ComparisonOperatorNameType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ComparisonOperatorNameType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ComparisonOperatorNameType(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__ComparisonOperatorNameType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__UomIdentifier_DEFINED
#define SOAP_TYPE_fes__UomIdentifier_DEFINED

inline void soap_default_fes__UomIdentifier(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__UomIdentifier(struct soap*, const std::string *);

#define soap_fes__UomIdentifier2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__UomIdentifier(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__UomIdentifier(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__UomIdentifier(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__UomIdentifier soap_instantiate_std__string


#define soap_new_fes__UomIdentifier soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__UomIdentifier(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__UomIdentifier(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__UomIdentifier(soap, p, "fes:UomIdentifier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__UomIdentifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomIdentifier(soap, p, "fes:UomIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__UomIdentifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomIdentifier(soap, p, "fes:UomIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__UomIdentifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomIdentifier(soap, p, "fes:UomIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__UomIdentifier(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__UomIdentifier(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__UomIdentifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__UomIdentifier(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__UomIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__UomIdentifier(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__UomIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__VersionType_DEFINED
#define SOAP_TYPE_fes__VersionType_DEFINED

inline void soap_default_fes__VersionType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__VersionType(struct soap*, const std::string *);

#define soap_fes__VersionType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__VersionType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__VersionType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__VersionType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__VersionType soap_instantiate_std__string


#define soap_new_fes__VersionType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__VersionType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__VersionType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__VersionType(soap, p, "fes:VersionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__VersionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__VersionType(soap, p, "fes:VersionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__VersionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__VersionType(soap, p, "fes:VersionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__VersionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__VersionType(soap, p, "fes:VersionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__VersionType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__VersionType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__VersionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__VersionType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__VersionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__VersionType(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__VersionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AliasesType_DEFINED
#define SOAP_TYPE_fes__AliasesType_DEFINED

inline void soap_default_fes__AliasesType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__AliasesType(struct soap*, const std::string *);

#define soap_fes__AliasesType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AliasesType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__AliasesType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__AliasesType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__AliasesType soap_instantiate_std__string


#define soap_new_fes__AliasesType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__AliasesType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__AliasesType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__AliasesType(soap, p, "fes:AliasesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__AliasesType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__AliasesType(soap, p, "fes:AliasesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AliasesType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__AliasesType(soap, p, "fes:AliasesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AliasesType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__AliasesType(soap, p, "fes:AliasesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__AliasesType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__AliasesType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__AliasesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AliasesType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AliasesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AliasesType(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__AliasesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__TypeNamesType_DEFINED
#define SOAP_TYPE_fes__TypeNamesType_DEFINED

inline void soap_default_fes__TypeNamesType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__TypeNamesType(struct soap*, const std::string *);

#define soap_fes__TypeNamesType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__TypeNamesType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__TypeNamesType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__TypeNamesType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__TypeNamesType soap_instantiate_std__string


#define soap_new_fes__TypeNamesType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__TypeNamesType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__TypeNamesType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__TypeNamesType(soap, p, "fes:TypeNamesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__TypeNamesType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TypeNamesType(soap, p, "fes:TypeNamesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__TypeNamesType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TypeNamesType(soap, p, "fes:TypeNamesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__TypeNamesType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TypeNamesType(soap, p, "fes:TypeNamesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__TypeNamesType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__TypeNamesType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__TypeNamesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__TypeNamesType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__TypeNamesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__TypeNamesType(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__TypeNamesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__TypeNamesListType_DEFINED
#define SOAP_TYPE_fes__TypeNamesListType_DEFINED

inline void soap_default_fes__TypeNamesListType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fes__TypeNamesListType(struct soap*, const std::string *);

#define soap_fes__TypeNamesListType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__TypeNamesListType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2fes__TypeNamesListType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_fes__TypeNamesListType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_fes__TypeNamesListType soap_instantiate_std__string


#define soap_new_fes__TypeNamesListType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__TypeNamesListType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_fes__TypeNamesListType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__TypeNamesListType(soap, p, "fes:TypeNamesListType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__TypeNamesListType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TypeNamesListType(soap, p, "fes:TypeNamesListType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__TypeNamesListType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TypeNamesListType(soap, p, "fes:TypeNamesListType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__TypeNamesListType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__TypeNamesListType(soap, p, "fes:TypeNamesListType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_fes__TypeNamesListType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_fes__TypeNamesListType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__TypeNamesListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__TypeNamesListType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__TypeNamesListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__TypeNamesListType(struct soap *soap, std::string *p)
{
	if (::soap_read_fes__TypeNamesListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__PositionType_DEFINED
#define SOAP_TYPE_ows__PositionType_DEFINED

inline void soap_default_ows__PositionType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ows__PositionType(struct soap*, const std::string *);

#define soap_ows__PositionType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__PositionType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ows__PositionType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ows__PositionType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ows__PositionType soap_instantiate_std__string


#define soap_new_ows__PositionType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ows__PositionType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ows__PositionType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ows__PositionType(soap, p, "ows:PositionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ows__PositionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__PositionType(soap, p, "ows:PositionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__PositionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__PositionType(soap, p, "ows:PositionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__PositionType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ows__PositionType(soap, p, "ows:PositionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ows__PositionType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ows__PositionType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ows__PositionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__PositionType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__PositionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__PositionType(struct soap *soap, std::string *p)
{
	if (::soap_read_ows__PositionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__StateValueType_DEFINED
#define SOAP_TYPE_wfs__StateValueType_DEFINED

inline void soap_default_wfs__StateValueType(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wfs__StateValueType(struct soap*, const std::string *);

#define soap_wfs__StateValueType2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__StateValueType(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wfs__StateValueType(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wfs__StateValueType(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wfs__StateValueType soap_instantiate_std__string


#define soap_new_wfs__StateValueType soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__StateValueType(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wfs__StateValueType(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__StateValueType(soap, p, "wfs:StateValueType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__StateValueType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__StateValueType(soap, p, "wfs:StateValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__StateValueType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__StateValueType(soap, p, "wfs:StateValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__StateValueType(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__StateValueType(soap, p, "wfs:StateValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wfs__StateValueType(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wfs__StateValueType(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__StateValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__StateValueType(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__StateValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__StateValueType(struct soap *soap, std::string *p)
{
	if (::soap_read_wfs__StateValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__nonNegativeIntegerOrUnknown_DEFINED
#define SOAP_TYPE_wfs__nonNegativeIntegerOrUnknown_DEFINED

inline void soap_default_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wfs__nonNegativeIntegerOrUnknown(struct soap*, const std::string *);

#define soap_wfs__nonNegativeIntegerOrUnknown2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__nonNegativeIntegerOrUnknown(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wfs__nonNegativeIntegerOrUnknown(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wfs__nonNegativeIntegerOrUnknown(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wfs__nonNegativeIntegerOrUnknown soap_instantiate_std__string


#define soap_new_wfs__nonNegativeIntegerOrUnknown soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__nonNegativeIntegerOrUnknown(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__nonNegativeIntegerOrUnknown(soap, p, "wfs:nonNegativeIntegerOrUnknown", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__nonNegativeIntegerOrUnknown(soap, p, "wfs:nonNegativeIntegerOrUnknown", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__nonNegativeIntegerOrUnknown(soap, p, "wfs:nonNegativeIntegerOrUnknown", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__nonNegativeIntegerOrUnknown(soap, p, "wfs:nonNegativeIntegerOrUnknown", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wfs__nonNegativeIntegerOrUnknown(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__nonNegativeIntegerOrUnknown(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__nonNegativeIntegerOrUnknown(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__nonNegativeIntegerOrUnknown(struct soap *soap, std::string *p)
{
	if (::soap_read_wfs__nonNegativeIntegerOrUnknown(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__positiveIntegerWithStar_DEFINED
#define SOAP_TYPE_wfs__positiveIntegerWithStar_DEFINED

inline void soap_default_wfs__positiveIntegerWithStar(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wfs__positiveIntegerWithStar(struct soap*, const std::string *);

#define soap_wfs__positiveIntegerWithStar2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__positiveIntegerWithStar(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2wfs__positiveIntegerWithStar(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wfs__positiveIntegerWithStar(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_wfs__positiveIntegerWithStar soap_instantiate_std__string


#define soap_new_wfs__positiveIntegerWithStar soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wfs__positiveIntegerWithStar(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_wfs__positiveIntegerWithStar(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wfs__positiveIntegerWithStar(soap, p, "wfs:positiveIntegerWithStar", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wfs__positiveIntegerWithStar(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__positiveIntegerWithStar(soap, p, "wfs:positiveIntegerWithStar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__positiveIntegerWithStar(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__positiveIntegerWithStar(soap, p, "wfs:positiveIntegerWithStar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__positiveIntegerWithStar(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wfs__positiveIntegerWithStar(soap, p, "wfs:positiveIntegerWithStar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wfs__positiveIntegerWithStar(struct soap*, std::string *, const char*, const char*);

inline int soap_read_wfs__positiveIntegerWithStar(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wfs__positiveIntegerWithStar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__positiveIntegerWithStar(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__positiveIntegerWithStar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__positiveIntegerWithStar(struct soap *soap, std::string *p)
{
	if (::soap_read_wfs__positiveIntegerWithStar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__IntervalOfDates_DEFINED
#define SOAP_TYPE__icommon__IntervalOfDates_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__IntervalOfDates(struct soap*, const char*, int, const _icommon__IntervalOfDates *, const char*);
SOAP_FMAC3 _icommon__IntervalOfDates * SOAP_FMAC4 soap_in__icommon__IntervalOfDates(struct soap*, const char*, _icommon__IntervalOfDates *, const char*);
SOAP_FMAC1 _icommon__IntervalOfDates * SOAP_FMAC2 soap_instantiate__icommon__IntervalOfDates(struct soap*, int, const char*, const char*, size_t*);

inline _icommon__IntervalOfDates * soap_new__icommon__IntervalOfDates(struct soap *soap, int n = -1)
{
	return soap_instantiate__icommon__IntervalOfDates(soap, n, NULL, NULL, NULL);
}

inline _icommon__IntervalOfDates * soap_new_req__icommon__IntervalOfDates(
	struct soap *soap,
	const std::string& StartingDate,
	const std::string& EndDate)
{
	_icommon__IntervalOfDates *_p = ::soap_new__icommon__IntervalOfDates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__IntervalOfDates::StartingDate = StartingDate;
		_p->_icommon__IntervalOfDates::EndDate = EndDate;
	}
	return _p;
}

inline _icommon__IntervalOfDates * soap_new_set__icommon__IntervalOfDates(
	struct soap *soap,
	const std::string& StartingDate,
	const std::string& EndDate)
{
	_icommon__IntervalOfDates *_p = ::soap_new__icommon__IntervalOfDates(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_icommon__IntervalOfDates::StartingDate = StartingDate;
		_p->_icommon__IntervalOfDates::EndDate = EndDate;
	}
	return _p;
}

inline int soap_write__icommon__IntervalOfDates(struct soap *soap, _icommon__IntervalOfDates const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:IntervalOfDates", p->soap_type() == SOAP_TYPE__icommon__IntervalOfDates ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__icommon__IntervalOfDates(struct soap *soap, const char *URL, _icommon__IntervalOfDates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:IntervalOfDates", p->soap_type() == SOAP_TYPE__icommon__IntervalOfDates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__icommon__IntervalOfDates(struct soap *soap, const char *URL, _icommon__IntervalOfDates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:IntervalOfDates", p->soap_type() == SOAP_TYPE__icommon__IntervalOfDates ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__icommon__IntervalOfDates(struct soap *soap, const char *URL, _icommon__IntervalOfDates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:IntervalOfDates", p->soap_type() == SOAP_TYPE__icommon__IntervalOfDates ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _icommon__IntervalOfDates * SOAP_FMAC4 soap_get__icommon__IntervalOfDates(struct soap*, _icommon__IntervalOfDates *, const char*, const char*);

inline int soap_read__icommon__IntervalOfDates(struct soap *soap, _icommon__IntervalOfDates *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__icommon__IntervalOfDates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__icommon__IntervalOfDates(struct soap *soap, const char *URL, _icommon__IntervalOfDates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__icommon__IntervalOfDates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__icommon__IntervalOfDates(struct soap *soap, _icommon__IntervalOfDates *p)
{
	if (::soap_read__icommon__IntervalOfDates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fswe_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fswe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fswe *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fswe * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fswe *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fswe * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fswe * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fswe(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fswe * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fswe(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fswe& union_citationInspireInteroperabilityRegulation_x005fswe,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fswe *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fswe *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fswe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::union_citationInspireInteroperabilityRegulation_x005fswe = union_citationInspireInteroperabilityRegulation_x005fswe;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fswe * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fswe(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fswe,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fswe& union_citationInspireInteroperabilityRegulation_x005fswe,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fswe *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fswe *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fswe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::__union_citationInspireInteroperabilityRegulation_x005fswe = __union_citationInspireInteroperabilityRegulation_x005fswe;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::union_citationInspireInteroperabilityRegulation_x005fswe = union_citationInspireInteroperabilityRegulation_x005fswe;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fswe::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fswe * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fswe *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fswe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fswe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fswe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fswe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fswe(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fswe *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fswe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fswe_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fswe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fswe *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fswe * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fswe *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fswe * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fswe * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fswe(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fswe * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fswe(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fswe *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fswe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fswe::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fswe::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fswe * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fswe(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fswe_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fswe *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fswe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fswe::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fswe::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_swe", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fswe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fswe * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fswe *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fswe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fswe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fswe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fswe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fswe *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fswe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fswe_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fswe_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fswe(struct soap*, const char*, int, const icommon__inspireTheme_x005fswe *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fswe * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fswe(struct soap*, const char*, icommon__inspireTheme_x005fswe *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fswe * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fswe(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fswe * soap_new_icommon__inspireTheme_x005fswe(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fswe(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fswe * soap_new_req_icommon__inspireTheme_x005fswe(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fswe_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fswe *_p = ::soap_new_icommon__inspireTheme_x005fswe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fswe::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fswe::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fswe * soap_new_set_icommon__inspireTheme_x005fswe(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fswe_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fswe *_p = ::soap_new_icommon__inspireTheme_x005fswe(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fswe::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fswe::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fswe(struct soap *soap, icommon__inspireTheme_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_swe", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fswe ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fswe(struct soap *soap, const char *URL, icommon__inspireTheme_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_swe", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fswe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fswe(struct soap *soap, const char *URL, icommon__inspireTheme_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_swe", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fswe ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fswe(struct soap *soap, const char *URL, icommon__inspireTheme_x005fswe const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_swe", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fswe ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fswe * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fswe(struct soap*, icommon__inspireTheme_x005fswe *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fswe(struct soap *soap, icommon__inspireTheme_x005fswe *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fswe(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fswe(struct soap *soap, const char *URL, icommon__inspireTheme_x005fswe *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fswe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fswe(struct soap *soap, icommon__inspireTheme_x005fswe *p)
{
	if (::soap_read_icommon__inspireTheme_x005fswe(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fspa_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fspa_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fspa *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fspa * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fspa *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fspa * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fspa * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fspa(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fspa * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fspa(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fspa *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fspa(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fspa::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fspa::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fspa * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fspa(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fspa_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fspa *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fspa(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fspa::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fspa::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fspa * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fspa *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fspa *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fspa(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fspa *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fspa(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fspa *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fspa(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fspa_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fspa_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fspa *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fspa * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fspa *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fspa * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fspa * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fspa(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fspa * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fspa(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fspa& union_citationInspireInteroperabilityRegulation_x005fspa,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fspa *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fspa *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fspa(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::union_citationInspireInteroperabilityRegulation_x005fspa = union_citationInspireInteroperabilityRegulation_x005fspa;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fspa * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fspa(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fspa,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fspa& union_citationInspireInteroperabilityRegulation_x005fspa,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fspa *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fspa *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fspa(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::__union_citationInspireInteroperabilityRegulation_x005fspa = __union_citationInspireInteroperabilityRegulation_x005fspa;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::union_citationInspireInteroperabilityRegulation_x005fspa = union_citationInspireInteroperabilityRegulation_x005fspa;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fspa::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_spa", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fspa ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fspa * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fspa *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fspa *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fspa(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fspa *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fspa(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fspa(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fspa *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fspa(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fspa_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fspa_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fspa(struct soap*, const char*, int, const icommon__inspireTheme_x005fspa *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fspa * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fspa(struct soap*, const char*, icommon__inspireTheme_x005fspa *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fspa * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fspa(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fspa * soap_new_icommon__inspireTheme_x005fspa(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fspa(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fspa * soap_new_req_icommon__inspireTheme_x005fspa(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fspa_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fspa *_p = ::soap_new_icommon__inspireTheme_x005fspa(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fspa::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fspa::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fspa * soap_new_set_icommon__inspireTheme_x005fspa(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fspa_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fspa *_p = ::soap_new_icommon__inspireTheme_x005fspa(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fspa::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fspa::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fspa(struct soap *soap, icommon__inspireTheme_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_spa", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fspa ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fspa(struct soap *soap, const char *URL, icommon__inspireTheme_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_spa", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fspa ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fspa(struct soap *soap, const char *URL, icommon__inspireTheme_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_spa", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fspa ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fspa(struct soap *soap, const char *URL, icommon__inspireTheme_x005fspa const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_spa", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fspa ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fspa * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fspa(struct soap*, icommon__inspireTheme_x005fspa *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fspa(struct soap *soap, icommon__inspireTheme_x005fspa *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fspa(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fspa(struct soap *soap, const char *URL, icommon__inspireTheme_x005fspa *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fspa(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fspa(struct soap *soap, icommon__inspireTheme_x005fspa *p)
{
	if (::soap_read_icommon__inspireTheme_x005fspa(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslv_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslv_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fslv *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fslv * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fslv *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fslv * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fslv * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fslv(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fslv * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fslv(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslv& union_citationInspireInteroperabilityRegulation_x005fslv,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fslv *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fslv *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fslv(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::union_citationInspireInteroperabilityRegulation_x005fslv = union_citationInspireInteroperabilityRegulation_x005fslv;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fslv * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fslv(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fslv,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslv& union_citationInspireInteroperabilityRegulation_x005fslv,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fslv *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fslv *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fslv(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::__union_citationInspireInteroperabilityRegulation_x005fslv = __union_citationInspireInteroperabilityRegulation_x005fslv;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::union_citationInspireInteroperabilityRegulation_x005fslv = union_citationInspireInteroperabilityRegulation_x005fslv;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslv::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fslv * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fslv *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fslv *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fslv(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslv *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fslv(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fslv(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fslv *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fslv(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslv_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslv_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fslv *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslv * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fslv *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fslv * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fslv * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fslv(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fslv * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fslv(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fslv *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fslv(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslv::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslv::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fslv * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fslv(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslv_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fslv *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fslv(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslv::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslv::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slv", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslv ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslv * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslv *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fslv *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fslv(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslv *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fslv(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fslv *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fslv(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fslv_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fslv_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fslv(struct soap*, const char*, int, const icommon__inspireTheme_x005fslv *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fslv * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fslv(struct soap*, const char*, icommon__inspireTheme_x005fslv *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fslv * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fslv(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fslv * soap_new_icommon__inspireTheme_x005fslv(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fslv(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fslv * soap_new_req_icommon__inspireTheme_x005fslv(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fslv_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fslv *_p = ::soap_new_icommon__inspireTheme_x005fslv(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fslv::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fslv::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fslv * soap_new_set_icommon__inspireTheme_x005fslv(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fslv_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fslv *_p = ::soap_new_icommon__inspireTheme_x005fslv(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fslv::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fslv::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fslv(struct soap *soap, icommon__inspireTheme_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slv", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslv ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fslv(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slv", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslv ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fslv(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slv", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslv ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fslv(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslv const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slv", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslv ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fslv * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fslv(struct soap*, icommon__inspireTheme_x005fslv *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fslv(struct soap *soap, icommon__inspireTheme_x005fslv *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fslv(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fslv(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslv *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fslv(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fslv(struct soap *soap, icommon__inspireTheme_x005fslv *p)
{
	if (::soap_read_icommon__inspireTheme_x005fslv(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslo_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fslo *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fslo * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fslo *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fslo * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fslo * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fslo(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fslo * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fslo(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslo& union_citationInspireInteroperabilityRegulation_x005fslo,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fslo *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fslo *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fslo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::union_citationInspireInteroperabilityRegulation_x005fslo = union_citationInspireInteroperabilityRegulation_x005fslo;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fslo * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fslo(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fslo,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslo& union_citationInspireInteroperabilityRegulation_x005fslo,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fslo *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fslo *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fslo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::__union_citationInspireInteroperabilityRegulation_x005fslo = __union_citationInspireInteroperabilityRegulation_x005fslo;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::union_citationInspireInteroperabilityRegulation_x005fslo = union_citationInspireInteroperabilityRegulation_x005fslo;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fslo::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fslo * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fslo *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fslo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fslo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fslo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fslo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fslo(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fslo *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fslo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslo_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fslo *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslo * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fslo *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fslo * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fslo * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fslo(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fslo * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fslo(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fslo *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fslo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslo::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslo::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fslo * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fslo(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fslo_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fslo *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fslo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslo::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fslo::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_slo", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fslo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslo * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslo *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fslo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fslo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fslo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fslo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fslo *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fslo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fslo_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fslo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fslo(struct soap*, const char*, int, const icommon__inspireTheme_x005fslo *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fslo * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fslo(struct soap*, const char*, icommon__inspireTheme_x005fslo *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fslo * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fslo(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fslo * soap_new_icommon__inspireTheme_x005fslo(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fslo(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fslo * soap_new_req_icommon__inspireTheme_x005fslo(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fslo_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fslo *_p = ::soap_new_icommon__inspireTheme_x005fslo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fslo::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fslo::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fslo * soap_new_set_icommon__inspireTheme_x005fslo(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fslo_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fslo *_p = ::soap_new_icommon__inspireTheme_x005fslo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fslo::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fslo::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fslo(struct soap *soap, icommon__inspireTheme_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slo", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fslo(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slo", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fslo(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slo", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fslo(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_slo", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fslo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fslo * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fslo(struct soap*, icommon__inspireTheme_x005fslo *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fslo(struct soap *soap, icommon__inspireTheme_x005fslo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fslo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fslo(struct soap *soap, const char *URL, icommon__inspireTheme_x005fslo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fslo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fslo(struct soap *soap, icommon__inspireTheme_x005fslo *p)
{
	if (::soap_read_icommon__inspireTheme_x005fslo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005frum_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005frum_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005frum *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005frum * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005frum *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005frum * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005frum * soap_new_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005frum(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005frum * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005frum(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005frum& union_citationInspireInteroperabilityRegulation_x005frum,
	enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005frum *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005frum *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005frum(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::union_citationInspireInteroperabilityRegulation_x005frum = union_citationInspireInteroperabilityRegulation_x005frum;
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005frum * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005frum(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005frum_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005frum,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005frum& union_citationInspireInteroperabilityRegulation_x005frum,
	enum _icommon__citationInspireInteroperabilityRegulation_x005frum_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005frum *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005frum *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005frum(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::__union_citationInspireInteroperabilityRegulation_x005frum = __union_citationInspireInteroperabilityRegulation_x005frum;
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::union_citationInspireInteroperabilityRegulation_x005frum = union_citationInspireInteroperabilityRegulation_x005frum;
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005frum::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005frum * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005frum *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005frum *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005frum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005frum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005frum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005frum(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005frum *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005frum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005frum_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005frum_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005frum *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005frum * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005frum *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005frum * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005frum * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005frum(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005frum * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005frum(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005frum *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005frum(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005frum::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005frum::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005frum * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005frum(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005frum_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005frum *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005frum(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005frum::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005frum::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_rum", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005frum ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005frum * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005frum *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005frum *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005frum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005frum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005frum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005frum *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005frum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005frum_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005frum_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005frum(struct soap*, const char*, int, const icommon__inspireTheme_x005frum *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005frum * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005frum(struct soap*, const char*, icommon__inspireTheme_x005frum *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005frum * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005frum(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005frum * soap_new_icommon__inspireTheme_x005frum(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005frum(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005frum * soap_new_req_icommon__inspireTheme_x005frum(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005frum_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005frum *_p = ::soap_new_icommon__inspireTheme_x005frum(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005frum::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005frum::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005frum * soap_new_set_icommon__inspireTheme_x005frum(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005frum_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005frum *_p = ::soap_new_icommon__inspireTheme_x005frum(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005frum::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005frum::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005frum(struct soap *soap, icommon__inspireTheme_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_rum", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005frum ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005frum(struct soap *soap, const char *URL, icommon__inspireTheme_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_rum", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005frum ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005frum(struct soap *soap, const char *URL, icommon__inspireTheme_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_rum", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005frum ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005frum(struct soap *soap, const char *URL, icommon__inspireTheme_x005frum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_rum", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005frum ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005frum * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005frum(struct soap*, icommon__inspireTheme_x005frum *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005frum(struct soap *soap, icommon__inspireTheme_x005frum *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005frum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005frum(struct soap *soap, const char *URL, icommon__inspireTheme_x005frum *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005frum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005frum(struct soap *soap, icommon__inspireTheme_x005frum *p)
{
	if (::soap_read_icommon__inspireTheme_x005frum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpor_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fpor *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fpor * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fpor *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fpor * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fpor * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fpor(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fpor * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fpor(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpor& union_citationInspireInteroperabilityRegulation_x005fpor,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fpor *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fpor *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fpor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::union_citationInspireInteroperabilityRegulation_x005fpor = union_citationInspireInteroperabilityRegulation_x005fpor;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fpor * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fpor(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fpor,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpor& union_citationInspireInteroperabilityRegulation_x005fpor,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fpor *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fpor *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fpor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::__union_citationInspireInteroperabilityRegulation_x005fpor = __union_citationInspireInteroperabilityRegulation_x005fpor;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::union_citationInspireInteroperabilityRegulation_x005fpor = union_citationInspireInteroperabilityRegulation_x005fpor;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpor::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fpor * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fpor *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fpor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fpor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpor *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fpor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fpor(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fpor *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fpor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpor_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fpor *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpor * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fpor *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fpor * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fpor * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fpor(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fpor * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fpor(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fpor *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fpor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpor::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpor::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fpor * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fpor(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpor_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fpor *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fpor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpor::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpor::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_por", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpor ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpor * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpor *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fpor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fpor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpor *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fpor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fpor *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fpor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fpor_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fpor_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fpor(struct soap*, const char*, int, const icommon__inspireTheme_x005fpor *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fpor * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fpor(struct soap*, const char*, icommon__inspireTheme_x005fpor *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fpor * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fpor(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fpor * soap_new_icommon__inspireTheme_x005fpor(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fpor(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fpor * soap_new_req_icommon__inspireTheme_x005fpor(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fpor_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fpor *_p = ::soap_new_icommon__inspireTheme_x005fpor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fpor::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fpor::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fpor * soap_new_set_icommon__inspireTheme_x005fpor(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fpor_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fpor *_p = ::soap_new_icommon__inspireTheme_x005fpor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fpor::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fpor::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fpor(struct soap *soap, icommon__inspireTheme_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_por", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpor ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fpor(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_por", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fpor(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_por", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpor ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fpor(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpor const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_por", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpor ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fpor * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fpor(struct soap*, icommon__inspireTheme_x005fpor *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fpor(struct soap *soap, icommon__inspireTheme_x005fpor *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fpor(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fpor(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpor *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fpor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fpor(struct soap *soap, icommon__inspireTheme_x005fpor *p)
{
	if (::soap_read_icommon__inspireTheme_x005fpor(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpol_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpol_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fpol *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fpol * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fpol *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fpol * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fpol * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fpol(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fpol * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fpol(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpol& union_citationInspireInteroperabilityRegulation_x005fpol,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fpol *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fpol *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fpol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::union_citationInspireInteroperabilityRegulation_x005fpol = union_citationInspireInteroperabilityRegulation_x005fpol;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fpol * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fpol(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fpol,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpol& union_citationInspireInteroperabilityRegulation_x005fpol,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fpol *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fpol *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fpol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::__union_citationInspireInteroperabilityRegulation_x005fpol = __union_citationInspireInteroperabilityRegulation_x005fpol;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::union_citationInspireInteroperabilityRegulation_x005fpol = union_citationInspireInteroperabilityRegulation_x005fpol;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fpol::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fpol * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fpol *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fpol *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fpol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fpol *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fpol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fpol(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fpol *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fpol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpol_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpol_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fpol *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpol * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fpol *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fpol * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fpol * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fpol(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fpol * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fpol(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fpol *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fpol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpol::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpol::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fpol * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fpol(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fpol_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fpol *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fpol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpol::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fpol::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_pol", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fpol ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpol * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpol *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fpol *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fpol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fpol *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fpol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fpol *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fpol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fpol_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fpol_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fpol(struct soap*, const char*, int, const icommon__inspireTheme_x005fpol *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fpol * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fpol(struct soap*, const char*, icommon__inspireTheme_x005fpol *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fpol * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fpol(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fpol * soap_new_icommon__inspireTheme_x005fpol(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fpol(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fpol * soap_new_req_icommon__inspireTheme_x005fpol(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fpol_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fpol *_p = ::soap_new_icommon__inspireTheme_x005fpol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fpol::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fpol::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fpol * soap_new_set_icommon__inspireTheme_x005fpol(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fpol_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fpol *_p = ::soap_new_icommon__inspireTheme_x005fpol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fpol::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fpol::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fpol(struct soap *soap, icommon__inspireTheme_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_pol", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpol ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fpol(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_pol", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fpol(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_pol", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fpol(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpol const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_pol", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fpol ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fpol * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fpol(struct soap*, icommon__inspireTheme_x005fpol *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fpol(struct soap *soap, icommon__inspireTheme_x005fpol *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fpol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fpol(struct soap *soap, const char *URL, icommon__inspireTheme_x005fpol *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fpol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fpol(struct soap *soap, icommon__inspireTheme_x005fpol *p)
{
	if (::soap_read_icommon__inspireTheme_x005fpol(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fmlt *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fmlt * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fmlt *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fmlt * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fmlt * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fmlt(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fmlt * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fmlt(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fmlt& union_citationInspireInteroperabilityRegulation_x005fmlt,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fmlt *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fmlt *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fmlt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::union_citationInspireInteroperabilityRegulation_x005fmlt = union_citationInspireInteroperabilityRegulation_x005fmlt;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fmlt * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fmlt(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fmlt,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fmlt& union_citationInspireInteroperabilityRegulation_x005fmlt,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fmlt *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fmlt *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fmlt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::__union_citationInspireInteroperabilityRegulation_x005fmlt = __union_citationInspireInteroperabilityRegulation_x005fmlt;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::union_citationInspireInteroperabilityRegulation_x005fmlt = union_citationInspireInteroperabilityRegulation_x005fmlt;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fmlt::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fmlt * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fmlt *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fmlt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fmlt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fmlt *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fmlt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fmlt *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fmlt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fmlt_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fmlt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fmlt *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fmlt * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fmlt * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fmlt * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fmlt * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fmlt *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fmlt::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fmlt::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fmlt * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fmlt_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fmlt *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fmlt::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fmlt::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_mlt", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fmlt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fmlt * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fmlt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fmlt_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fmlt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fmlt(struct soap*, const char*, int, const icommon__inspireTheme_x005fmlt *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fmlt * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fmlt(struct soap*, const char*, icommon__inspireTheme_x005fmlt *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fmlt * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fmlt(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fmlt * soap_new_icommon__inspireTheme_x005fmlt(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fmlt(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fmlt * soap_new_req_icommon__inspireTheme_x005fmlt(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fmlt_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fmlt *_p = ::soap_new_icommon__inspireTheme_x005fmlt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fmlt::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fmlt::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fmlt * soap_new_set_icommon__inspireTheme_x005fmlt(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fmlt_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fmlt *_p = ::soap_new_icommon__inspireTheme_x005fmlt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fmlt::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fmlt::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fmlt(struct soap *soap, icommon__inspireTheme_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_mlt", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fmlt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fmlt(struct soap *soap, const char *URL, icommon__inspireTheme_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_mlt", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fmlt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fmlt(struct soap *soap, const char *URL, icommon__inspireTheme_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_mlt", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fmlt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fmlt(struct soap *soap, const char *URL, icommon__inspireTheme_x005fmlt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_mlt", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fmlt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fmlt * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fmlt(struct soap*, icommon__inspireTheme_x005fmlt *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fmlt(struct soap *soap, icommon__inspireTheme_x005fmlt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fmlt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fmlt(struct soap *soap, const char *URL, icommon__inspireTheme_x005fmlt *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fmlt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fmlt(struct soap *soap, icommon__inspireTheme_x005fmlt *p)
{
	if (::soap_read_icommon__inspireTheme_x005fmlt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flit_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005flit *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005flit * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005flit *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005flit * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005flit * soap_new_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005flit(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005flit * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005flit(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005flit& union_citationInspireInteroperabilityRegulation_x005flit,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005flit *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005flit *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005flit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::union_citationInspireInteroperabilityRegulation_x005flit = union_citationInspireInteroperabilityRegulation_x005flit;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005flit * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005flit(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flit_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005flit,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005flit& union_citationInspireInteroperabilityRegulation_x005flit,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flit_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005flit *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005flit *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005flit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::__union_citationInspireInteroperabilityRegulation_x005flit = __union_citationInspireInteroperabilityRegulation_x005flit;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::union_citationInspireInteroperabilityRegulation_x005flit = union_citationInspireInteroperabilityRegulation_x005flit;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flit::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005flit * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005flit *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005flit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005flit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flit *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005flit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005flit(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005flit *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005flit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flit_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005flit *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flit * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005flit *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005flit * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005flit * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005flit(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005flit * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005flit(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005flit *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005flit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flit::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flit::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005flit * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005flit(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flit_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005flit *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005flit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flit::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flit::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lit", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flit ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flit * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flit *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005flit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005flit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flit *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005flit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005flit *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005flit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005flit_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005flit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005flit(struct soap*, const char*, int, const icommon__inspireTheme_x005flit *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005flit * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005flit(struct soap*, const char*, icommon__inspireTheme_x005flit *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005flit * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005flit(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005flit * soap_new_icommon__inspireTheme_x005flit(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005flit(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005flit * soap_new_req_icommon__inspireTheme_x005flit(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005flit_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005flit *_p = ::soap_new_icommon__inspireTheme_x005flit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005flit::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005flit::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005flit * soap_new_set_icommon__inspireTheme_x005flit(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005flit_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005flit *_p = ::soap_new_icommon__inspireTheme_x005flit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005flit::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005flit::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005flit(struct soap *soap, icommon__inspireTheme_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lit", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005flit(struct soap *soap, const char *URL, icommon__inspireTheme_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lit", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005flit(struct soap *soap, const char *URL, icommon__inspireTheme_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lit", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005flit(struct soap *soap, const char *URL, icommon__inspireTheme_x005flit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lit", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flit ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005flit * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005flit(struct soap*, icommon__inspireTheme_x005flit *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005flit(struct soap *soap, icommon__inspireTheme_x005flit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005flit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005flit(struct soap *soap, const char *URL, icommon__inspireTheme_x005flit *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005flit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005flit(struct soap *soap, icommon__inspireTheme_x005flit *p)
{
	if (::soap_read_icommon__inspireTheme_x005flit(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flav_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flav_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005flav *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005flav * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005flav *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005flav * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005flav * soap_new_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005flav(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005flav * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005flav(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005flav& union_citationInspireInteroperabilityRegulation_x005flav,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005flav *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005flav *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005flav(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::union_citationInspireInteroperabilityRegulation_x005flav = union_citationInspireInteroperabilityRegulation_x005flav;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005flav * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005flav(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flav_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005flav,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005flav& union_citationInspireInteroperabilityRegulation_x005flav,
	enum _icommon__citationInspireInteroperabilityRegulation_x005flav_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005flav *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005flav *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005flav(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::__union_citationInspireInteroperabilityRegulation_x005flav = __union_citationInspireInteroperabilityRegulation_x005flav;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::union_citationInspireInteroperabilityRegulation_x005flav = union_citationInspireInteroperabilityRegulation_x005flav;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005flav::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005flav * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005flav *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005flav *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005flav(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005flav *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005flav(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005flav(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005flav *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005flav(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flav_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flav_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005flav *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flav * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005flav *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005flav * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005flav * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005flav(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005flav * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005flav(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005flav *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005flav(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flav::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flav::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005flav * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005flav(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005flav_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005flav *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005flav(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flav::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005flav::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_lav", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005flav ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flav * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flav *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005flav *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005flav(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005flav *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005flav(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005flav *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005flav(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005flav_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005flav_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005flav(struct soap*, const char*, int, const icommon__inspireTheme_x005flav *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005flav * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005flav(struct soap*, const char*, icommon__inspireTheme_x005flav *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005flav * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005flav(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005flav * soap_new_icommon__inspireTheme_x005flav(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005flav(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005flav * soap_new_req_icommon__inspireTheme_x005flav(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005flav_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005flav *_p = ::soap_new_icommon__inspireTheme_x005flav(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005flav::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005flav::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005flav * soap_new_set_icommon__inspireTheme_x005flav(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005flav_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005flav *_p = ::soap_new_icommon__inspireTheme_x005flav(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005flav::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005flav::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005flav(struct soap *soap, icommon__inspireTheme_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lav", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flav ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005flav(struct soap *soap, const char *URL, icommon__inspireTheme_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lav", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flav ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005flav(struct soap *soap, const char *URL, icommon__inspireTheme_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lav", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flav ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005flav(struct soap *soap, const char *URL, icommon__inspireTheme_x005flav const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_lav", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005flav ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005flav * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005flav(struct soap*, icommon__inspireTheme_x005flav *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005flav(struct soap *soap, icommon__inspireTheme_x005flav *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005flav(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005flav(struct soap *soap, const char *URL, icommon__inspireTheme_x005flav *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005flav(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005flav(struct soap *soap, icommon__inspireTheme_x005flav *p)
{
	if (::soap_read_icommon__inspireTheme_x005flav(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fita_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fita_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fita *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fita * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fita *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fita * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fita * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fita(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fita * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fita(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fita& union_citationInspireInteroperabilityRegulation_x005fita,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fita *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fita *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fita(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::union_citationInspireInteroperabilityRegulation_x005fita = union_citationInspireInteroperabilityRegulation_x005fita;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fita * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fita(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fita_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fita,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fita& union_citationInspireInteroperabilityRegulation_x005fita,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fita_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fita *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fita *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fita(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::__union_citationInspireInteroperabilityRegulation_x005fita = __union_citationInspireInteroperabilityRegulation_x005fita;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::union_citationInspireInteroperabilityRegulation_x005fita = union_citationInspireInteroperabilityRegulation_x005fita;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fita::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fita * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fita *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fita *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fita(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fita *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fita(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fita(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fita *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fita(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fita_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fita_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fita *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fita * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fita *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fita * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fita * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fita(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fita * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fita(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fita *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fita(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fita::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fita::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fita * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fita(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fita_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fita *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fita(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fita::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fita::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ita", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fita ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fita * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fita *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fita *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fita(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fita *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fita(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fita *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fita(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fita_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fita_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fita(struct soap*, const char*, int, const icommon__inspireTheme_x005fita *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fita * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fita(struct soap*, const char*, icommon__inspireTheme_x005fita *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fita * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fita(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fita * soap_new_icommon__inspireTheme_x005fita(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fita(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fita * soap_new_req_icommon__inspireTheme_x005fita(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fita_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fita *_p = ::soap_new_icommon__inspireTheme_x005fita(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fita::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fita::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fita * soap_new_set_icommon__inspireTheme_x005fita(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fita_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fita *_p = ::soap_new_icommon__inspireTheme_x005fita(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fita::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fita::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fita(struct soap *soap, icommon__inspireTheme_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ita", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fita ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fita(struct soap *soap, const char *URL, icommon__inspireTheme_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ita", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fita ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fita(struct soap *soap, const char *URL, icommon__inspireTheme_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ita", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fita ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fita(struct soap *soap, const char *URL, icommon__inspireTheme_x005fita const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ita", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fita ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fita * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fita(struct soap*, icommon__inspireTheme_x005fita *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fita(struct soap *soap, icommon__inspireTheme_x005fita *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fita(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fita(struct soap *soap, const char *URL, icommon__inspireTheme_x005fita *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fita(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fita(struct soap *soap, icommon__inspireTheme_x005fita *p)
{
	if (::soap_read_icommon__inspireTheme_x005fita(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fhun_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fhun_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fhun *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fhun * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fhun *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fhun * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fhun * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fhun(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fhun * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fhun(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fhun& union_citationInspireInteroperabilityRegulation_x005fhun,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fhun *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fhun *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fhun(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::union_citationInspireInteroperabilityRegulation_x005fhun = union_citationInspireInteroperabilityRegulation_x005fhun;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fhun * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fhun(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fhun,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fhun& union_citationInspireInteroperabilityRegulation_x005fhun,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fhun *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fhun *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fhun(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::__union_citationInspireInteroperabilityRegulation_x005fhun = __union_citationInspireInteroperabilityRegulation_x005fhun;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::union_citationInspireInteroperabilityRegulation_x005fhun = union_citationInspireInteroperabilityRegulation_x005fhun;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fhun::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fhun * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fhun *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fhun *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fhun(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fhun *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fhun(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fhun(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fhun *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fhun(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fhun_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fhun_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fhun *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fhun * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fhun *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fhun * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fhun * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fhun(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fhun * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fhun(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fhun *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fhun(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fhun::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fhun::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fhun * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fhun(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fhun_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fhun *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fhun(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fhun::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fhun::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_hun", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fhun ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fhun * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fhun *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fhun *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fhun(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fhun *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fhun(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fhun *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fhun(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fhun_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fhun_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fhun(struct soap*, const char*, int, const icommon__inspireTheme_x005fhun *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fhun * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fhun(struct soap*, const char*, icommon__inspireTheme_x005fhun *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fhun * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fhun(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fhun * soap_new_icommon__inspireTheme_x005fhun(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fhun(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fhun * soap_new_req_icommon__inspireTheme_x005fhun(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fhun_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fhun *_p = ::soap_new_icommon__inspireTheme_x005fhun(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fhun::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fhun::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fhun * soap_new_set_icommon__inspireTheme_x005fhun(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fhun_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fhun *_p = ::soap_new_icommon__inspireTheme_x005fhun(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fhun::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fhun::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fhun(struct soap *soap, icommon__inspireTheme_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_hun", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fhun ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fhun(struct soap *soap, const char *URL, icommon__inspireTheme_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_hun", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fhun ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fhun(struct soap *soap, const char *URL, icommon__inspireTheme_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_hun", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fhun ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fhun(struct soap *soap, const char *URL, icommon__inspireTheme_x005fhun const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_hun", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fhun ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fhun * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fhun(struct soap*, icommon__inspireTheme_x005fhun *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fhun(struct soap *soap, icommon__inspireTheme_x005fhun *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fhun(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fhun(struct soap *soap, const char *URL, icommon__inspireTheme_x005fhun *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fhun(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fhun(struct soap *soap, icommon__inspireTheme_x005fhun *p)
{
	if (::soap_read_icommon__inspireTheme_x005fhun(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgre_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgre_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fgre *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fgre * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fgre *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fgre * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fgre * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fgre(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fgre * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fgre(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgre& union_citationInspireInteroperabilityRegulation_x005fgre,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fgre *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fgre *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fgre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::union_citationInspireInteroperabilityRegulation_x005fgre = union_citationInspireInteroperabilityRegulation_x005fgre;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fgre * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fgre(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fgre,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgre& union_citationInspireInteroperabilityRegulation_x005fgre,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fgre *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fgre *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fgre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::__union_citationInspireInteroperabilityRegulation_x005fgre = __union_citationInspireInteroperabilityRegulation_x005fgre;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::union_citationInspireInteroperabilityRegulation_x005fgre = union_citationInspireInteroperabilityRegulation_x005fgre;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgre::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fgre * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fgre *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fgre *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fgre(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgre *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fgre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fgre(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fgre *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fgre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgre_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgre_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fgre *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgre * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fgre *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fgre * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fgre * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fgre(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fgre * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fgre(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fgre *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fgre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgre::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgre::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fgre * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fgre(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgre_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fgre *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fgre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgre::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgre::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgre ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgre * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgre *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fgre *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fgre(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgre *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fgre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fgre *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fgre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fgre_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fgre_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fgre(struct soap*, const char*, int, const icommon__inspireTheme_x005fgre *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fgre * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fgre(struct soap*, const char*, icommon__inspireTheme_x005fgre *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fgre * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fgre(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fgre * soap_new_icommon__inspireTheme_x005fgre(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fgre(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fgre * soap_new_req_icommon__inspireTheme_x005fgre(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fgre_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fgre *_p = ::soap_new_icommon__inspireTheme_x005fgre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fgre::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fgre::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fgre * soap_new_set_icommon__inspireTheme_x005fgre(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fgre_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fgre *_p = ::soap_new_icommon__inspireTheme_x005fgre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fgre::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fgre::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fgre(struct soap *soap, icommon__inspireTheme_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgre ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fgre(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fgre(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fgre(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgre const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgre ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fgre * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fgre(struct soap*, icommon__inspireTheme_x005fgre *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fgre(struct soap *soap, icommon__inspireTheme_x005fgre *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fgre(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fgre(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgre *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fgre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fgre(struct soap *soap, icommon__inspireTheme_x005fgre *p)
{
	if (::soap_read_icommon__inspireTheme_x005fgre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgle_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fgle *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fgle * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fgle *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fgle * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fgle * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fgle(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fgle * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fgle(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgle& union_citationInspireInteroperabilityRegulation_x005fgle,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fgle *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fgle *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fgle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::union_citationInspireInteroperabilityRegulation_x005fgle = union_citationInspireInteroperabilityRegulation_x005fgle;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fgle * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fgle(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fgle,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgle& union_citationInspireInteroperabilityRegulation_x005fgle,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fgle *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fgle *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fgle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::__union_citationInspireInteroperabilityRegulation_x005fgle = __union_citationInspireInteroperabilityRegulation_x005fgle;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::union_citationInspireInteroperabilityRegulation_x005fgle = union_citationInspireInteroperabilityRegulation_x005fgle;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fgle::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fgle * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fgle *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fgle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fgle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fgle *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fgle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fgle(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fgle *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fgle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgle_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fgle *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgle * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fgle *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fgle * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fgle * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fgle(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fgle * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fgle(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fgle *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fgle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgle::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgle::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fgle * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fgle(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fgle_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fgle *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fgle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgle::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fgle::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_gle", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fgle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgle * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgle *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fgle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fgle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fgle *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fgle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fgle *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fgle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fgle_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fgle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fgle(struct soap*, const char*, int, const icommon__inspireTheme_x005fgle *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fgle * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fgle(struct soap*, const char*, icommon__inspireTheme_x005fgle *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fgle * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fgle(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fgle * soap_new_icommon__inspireTheme_x005fgle(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fgle(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fgle * soap_new_req_icommon__inspireTheme_x005fgle(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fgle_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fgle *_p = ::soap_new_icommon__inspireTheme_x005fgle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fgle::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fgle::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fgle * soap_new_set_icommon__inspireTheme_x005fgle(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fgle_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fgle *_p = ::soap_new_icommon__inspireTheme_x005fgle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fgle::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fgle::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fgle(struct soap *soap, icommon__inspireTheme_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gle", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fgle(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gle", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fgle(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gle", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fgle(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_gle", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fgle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fgle * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fgle(struct soap*, icommon__inspireTheme_x005fgle *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fgle(struct soap *soap, icommon__inspireTheme_x005fgle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fgle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fgle(struct soap *soap, const char *URL, icommon__inspireTheme_x005fgle *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fgle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fgle(struct soap *soap, icommon__inspireTheme_x005fgle *p)
{
	if (::soap_read_icommon__inspireTheme_x005fgle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fger_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fger_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fger *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fger * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fger *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fger * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fger * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fger(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fger * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fger(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fger& union_citationInspireInteroperabilityRegulation_x005fger,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fger *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fger *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::union_citationInspireInteroperabilityRegulation_x005fger = union_citationInspireInteroperabilityRegulation_x005fger;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fger * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fger(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fger_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fger,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fger& union_citationInspireInteroperabilityRegulation_x005fger,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fger_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fger *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fger *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::__union_citationInspireInteroperabilityRegulation_x005fger = __union_citationInspireInteroperabilityRegulation_x005fger;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::union_citationInspireInteroperabilityRegulation_x005fger = union_citationInspireInteroperabilityRegulation_x005fger;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fger::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fger * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fger *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fger *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fger *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fger(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fger *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fger_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fger_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fger *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fger * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fger *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fger * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fger * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fger(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fger * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fger(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fger *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fger::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fger::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fger * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fger(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fger_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fger *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fger::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fger::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_ger", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fger ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fger * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fger *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fger *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fger *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fger *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fger_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fger_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fger(struct soap*, const char*, int, const icommon__inspireTheme_x005fger *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fger * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fger(struct soap*, const char*, icommon__inspireTheme_x005fger *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fger * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fger(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fger * soap_new_icommon__inspireTheme_x005fger(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fger(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fger * soap_new_req_icommon__inspireTheme_x005fger(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fger_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fger *_p = ::soap_new_icommon__inspireTheme_x005fger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fger::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fger::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fger * soap_new_set_icommon__inspireTheme_x005fger(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fger_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fger *_p = ::soap_new_icommon__inspireTheme_x005fger(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fger::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fger::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fger(struct soap *soap, icommon__inspireTheme_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ger", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fger ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fger(struct soap *soap, const char *URL, icommon__inspireTheme_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ger", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fger(struct soap *soap, const char *URL, icommon__inspireTheme_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ger", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fger ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fger(struct soap *soap, const char *URL, icommon__inspireTheme_x005fger const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_ger", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fger ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fger * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fger(struct soap*, icommon__inspireTheme_x005fger *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fger(struct soap *soap, icommon__inspireTheme_x005fger *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fger(struct soap *soap, const char *URL, icommon__inspireTheme_x005fger *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fger(struct soap *soap, icommon__inspireTheme_x005fger *p)
{
	if (::soap_read_icommon__inspireTheme_x005fger(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffre_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffre_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005ffre *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005ffre * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005ffre *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005ffre * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005ffre * soap_new_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005ffre(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005ffre * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005ffre(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffre& union_citationInspireInteroperabilityRegulation_x005ffre,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005ffre *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005ffre *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005ffre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::union_citationInspireInteroperabilityRegulation_x005ffre = union_citationInspireInteroperabilityRegulation_x005ffre;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005ffre * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005ffre(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005ffre,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffre& union_citationInspireInteroperabilityRegulation_x005ffre,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005ffre *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005ffre *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005ffre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::__union_citationInspireInteroperabilityRegulation_x005ffre = __union_citationInspireInteroperabilityRegulation_x005ffre;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::union_citationInspireInteroperabilityRegulation_x005ffre = union_citationInspireInteroperabilityRegulation_x005ffre;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffre::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005ffre * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005ffre *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005ffre *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005ffre(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffre *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005ffre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005ffre(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005ffre *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005ffre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffre_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffre_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005ffre *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffre * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005ffre *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005ffre * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005ffre * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005ffre(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005ffre * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005ffre(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005ffre *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005ffre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffre::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffre::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005ffre * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005ffre(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffre_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005ffre *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005ffre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffre::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffre::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fre", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffre ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffre * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffre *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005ffre *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005ffre(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffre *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005ffre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005ffre *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005ffre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005ffre_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005ffre_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005ffre(struct soap*, const char*, int, const icommon__inspireTheme_x005ffre *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005ffre * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005ffre(struct soap*, const char*, icommon__inspireTheme_x005ffre *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005ffre * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005ffre(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005ffre * soap_new_icommon__inspireTheme_x005ffre(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005ffre(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005ffre * soap_new_req_icommon__inspireTheme_x005ffre(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005ffre_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005ffre *_p = ::soap_new_icommon__inspireTheme_x005ffre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005ffre::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005ffre::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005ffre * soap_new_set_icommon__inspireTheme_x005ffre(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005ffre_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005ffre *_p = ::soap_new_icommon__inspireTheme_x005ffre(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005ffre::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005ffre::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005ffre(struct soap *soap, icommon__inspireTheme_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffre ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005ffre(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005ffre(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffre ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005ffre(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffre const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fre", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffre ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005ffre * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005ffre(struct soap*, icommon__inspireTheme_x005ffre *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005ffre(struct soap *soap, icommon__inspireTheme_x005ffre *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005ffre(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005ffre(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffre *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005ffre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005ffre(struct soap *soap, icommon__inspireTheme_x005ffre *p)
{
	if (::soap_read_icommon__inspireTheme_x005ffre(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffin_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005ffin *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005ffin * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005ffin *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005ffin * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005ffin * soap_new_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005ffin(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005ffin * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005ffin(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffin& union_citationInspireInteroperabilityRegulation_x005ffin,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005ffin *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005ffin *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005ffin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::union_citationInspireInteroperabilityRegulation_x005ffin = union_citationInspireInteroperabilityRegulation_x005ffin;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005ffin * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005ffin(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005ffin,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffin& union_citationInspireInteroperabilityRegulation_x005ffin,
	enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005ffin *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005ffin *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005ffin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::__union_citationInspireInteroperabilityRegulation_x005ffin = __union_citationInspireInteroperabilityRegulation_x005ffin;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::union_citationInspireInteroperabilityRegulation_x005ffin = union_citationInspireInteroperabilityRegulation_x005ffin;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005ffin::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005ffin * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005ffin *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005ffin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005ffin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005ffin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005ffin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005ffin(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005ffin *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005ffin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffin_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005ffin *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffin * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005ffin *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005ffin * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005ffin * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005ffin(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005ffin * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005ffin(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005ffin *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005ffin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffin::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffin::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005ffin * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005ffin(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005ffin_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005ffin *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005ffin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffin::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005ffin::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_fin", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005ffin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffin * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffin *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005ffin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005ffin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005ffin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005ffin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005ffin *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005ffin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005ffin_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005ffin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005ffin(struct soap*, const char*, int, const icommon__inspireTheme_x005ffin *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005ffin * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005ffin(struct soap*, const char*, icommon__inspireTheme_x005ffin *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005ffin * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005ffin(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005ffin * soap_new_icommon__inspireTheme_x005ffin(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005ffin(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005ffin * soap_new_req_icommon__inspireTheme_x005ffin(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005ffin_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005ffin *_p = ::soap_new_icommon__inspireTheme_x005ffin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005ffin::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005ffin::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005ffin * soap_new_set_icommon__inspireTheme_x005ffin(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005ffin_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005ffin *_p = ::soap_new_icommon__inspireTheme_x005ffin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005ffin::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005ffin::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005ffin(struct soap *soap, icommon__inspireTheme_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fin", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005ffin(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fin", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005ffin(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fin", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005ffin(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_fin", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005ffin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005ffin * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005ffin(struct soap*, icommon__inspireTheme_x005ffin *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005ffin(struct soap *soap, icommon__inspireTheme_x005ffin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005ffin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005ffin(struct soap *soap, const char *URL, icommon__inspireTheme_x005ffin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005ffin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005ffin(struct soap *soap, icommon__inspireTheme_x005ffin *p)
{
	if (::soap_read_icommon__inspireTheme_x005ffin(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fest_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fest *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fest * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fest *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fest * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fest * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fest(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fest * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fest(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fest& union_citationInspireInteroperabilityRegulation_x005fest,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fest *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fest *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::union_citationInspireInteroperabilityRegulation_x005fest = union_citationInspireInteroperabilityRegulation_x005fest;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fest * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fest(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fest_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fest,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fest& union_citationInspireInteroperabilityRegulation_x005fest,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fest_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fest *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fest *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::__union_citationInspireInteroperabilityRegulation_x005fest = __union_citationInspireInteroperabilityRegulation_x005fest;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::union_citationInspireInteroperabilityRegulation_x005fest = union_citationInspireInteroperabilityRegulation_x005fest;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fest::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fest * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fest *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fest(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fest *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fest_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fest *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fest * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fest *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fest * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fest * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fest(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fest * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fest(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fest *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fest::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fest::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fest * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fest(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fest_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fest *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fest::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fest::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_est", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fest * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fest *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fest *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fest_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fest(struct soap*, const char*, int, const icommon__inspireTheme_x005fest *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fest * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fest(struct soap*, const char*, icommon__inspireTheme_x005fest *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fest * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fest(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fest * soap_new_icommon__inspireTheme_x005fest(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fest(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fest * soap_new_req_icommon__inspireTheme_x005fest(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fest_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fest *_p = ::soap_new_icommon__inspireTheme_x005fest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fest::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fest::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fest * soap_new_set_icommon__inspireTheme_x005fest(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fest_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fest *_p = ::soap_new_icommon__inspireTheme_x005fest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fest::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fest::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fest(struct soap *soap, icommon__inspireTheme_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_est", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fest(struct soap *soap, const char *URL, icommon__inspireTheme_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_est", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fest(struct soap *soap, const char *URL, icommon__inspireTheme_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_est", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fest(struct soap *soap, const char *URL, icommon__inspireTheme_x005fest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_est", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fest * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fest(struct soap*, icommon__inspireTheme_x005fest *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fest(struct soap *soap, icommon__inspireTheme_x005fest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fest(struct soap *soap, const char *URL, icommon__inspireTheme_x005fest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fest(struct soap *soap, icommon__inspireTheme_x005fest *p)
{
	if (::soap_read_icommon__inspireTheme_x005fest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005feng_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005feng_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005feng *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005feng * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005feng *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005feng * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005feng * soap_new_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005feng(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005feng * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005feng(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005feng& union_citationInspireInteroperabilityRegulation_x005feng,
	enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005feng *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005feng *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::union_citationInspireInteroperabilityRegulation_x005feng = union_citationInspireInteroperabilityRegulation_x005feng;
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005feng * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005feng(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005feng_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005feng,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005feng& union_citationInspireInteroperabilityRegulation_x005feng,
	enum _icommon__citationInspireInteroperabilityRegulation_x005feng_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005feng *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005feng *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::__union_citationInspireInteroperabilityRegulation_x005feng = __union_citationInspireInteroperabilityRegulation_x005feng;
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::union_citationInspireInteroperabilityRegulation_x005feng = union_citationInspireInteroperabilityRegulation_x005feng;
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005feng::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005feng * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005feng *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005feng *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005feng(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005feng *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005feng(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005feng *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005feng_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005feng_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005feng *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005feng * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005feng *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005feng * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005feng * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005feng(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005feng * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005feng(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005feng *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005feng::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005feng::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005feng * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005feng(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005feng_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005feng *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005feng::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005feng::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_eng", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005feng * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005feng *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005feng *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005feng(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005feng *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005feng *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationGEMETInspireThemes_x005feng_DEFINED
#define SOAP_TYPE_icommon__citationGEMETInspireThemes_x005feng_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationGEMETInspireThemes_x005feng(struct soap*, const char*, int, const icommon__citationGEMETInspireThemes_x005feng *, const char*);
SOAP_FMAC3 icommon__citationGEMETInspireThemes_x005feng * SOAP_FMAC4 soap_in_icommon__citationGEMETInspireThemes_x005feng(struct soap*, const char*, icommon__citationGEMETInspireThemes_x005feng *, const char*);
SOAP_FMAC1 icommon__citationGEMETInspireThemes_x005feng * SOAP_FMAC2 soap_instantiate_icommon__citationGEMETInspireThemes_x005feng(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationGEMETInspireThemes_x005feng * soap_new_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationGEMETInspireThemes_x005feng(soap, n, NULL, NULL, NULL);
}

inline icommon__citationGEMETInspireThemes_x005feng * soap_new_req_icommon__citationGEMETInspireThemes_x005feng(
	struct soap *soap,
	enum _icommon__citationGEMETInspireThemes_x005feng_Title Title,
	const union _icommon__union_citationGEMETInspireThemes_x005feng& union_citationGEMETInspireThemes_x005feng,
	icommon__resLocGEMETInspireThemes_x005feng *ResourceLocator)
{
	icommon__citationGEMETInspireThemes_x005feng *_p = ::soap_new_icommon__citationGEMETInspireThemes_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationGEMETInspireThemes_x005feng::Title = Title;
		_p->icommon__citationGEMETInspireThemes_x005feng::union_citationGEMETInspireThemes_x005feng = union_citationGEMETInspireThemes_x005feng;
		_p->icommon__citationGEMETInspireThemes_x005feng::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationGEMETInspireThemes_x005feng * soap_new_set_icommon__citationGEMETInspireThemes_x005feng(
	struct soap *soap,
	enum _icommon__citationGEMETInspireThemes_x005feng_Title Title,
	int __union_citationGEMETInspireThemes_x005feng,
	const union _icommon__union_citationGEMETInspireThemes_x005feng& union_citationGEMETInspireThemes_x005feng,
	const std::vector<char *> & URI,
	icommon__resLocGEMETInspireThemes_x005feng *ResourceLocator,
	char *__item__1)
{
	icommon__citationGEMETInspireThemes_x005feng *_p = ::soap_new_icommon__citationGEMETInspireThemes_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationGEMETInspireThemes_x005feng::Title = Title;
		_p->icommon__citationGEMETInspireThemes_x005feng::__union_citationGEMETInspireThemes_x005feng = __union_citationGEMETInspireThemes_x005feng;
		_p->icommon__citationGEMETInspireThemes_x005feng::union_citationGEMETInspireThemes_x005feng = union_citationGEMETInspireThemes_x005feng;
		_p->icommon__citationGEMETInspireThemes_x005feng::URI = URI;
		_p->icommon__citationGEMETInspireThemes_x005feng::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, icommon__citationGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__citationGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__citationGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__citationGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__citationGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__citationGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__citationGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__citationGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationGEMETInspireThemes_x005feng * SOAP_FMAC4 soap_get_icommon__citationGEMETInspireThemes_x005feng(struct soap*, icommon__citationGEMETInspireThemes_x005feng *, const char*, const char*);

inline int soap_read_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, icommon__citationGEMETInspireThemes_x005feng *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationGEMETInspireThemes_x005feng(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__citationGEMETInspireThemes_x005feng *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationGEMETInspireThemes_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationGEMETInspireThemes_x005feng(struct soap *soap, icommon__citationGEMETInspireThemes_x005feng *p)
{
	if (::soap_read_icommon__citationGEMETInspireThemes_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocGEMETInspireThemes_x005feng_DEFINED
#define SOAP_TYPE_icommon__resLocGEMETInspireThemes_x005feng_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocGEMETInspireThemes_x005feng(struct soap*, const char*, int, const icommon__resLocGEMETInspireThemes_x005feng *, const char*);
SOAP_FMAC3 icommon__resLocGEMETInspireThemes_x005feng * SOAP_FMAC4 soap_in_icommon__resLocGEMETInspireThemes_x005feng(struct soap*, const char*, icommon__resLocGEMETInspireThemes_x005feng *, const char*);
SOAP_FMAC1 icommon__resLocGEMETInspireThemes_x005feng * SOAP_FMAC2 soap_instantiate_icommon__resLocGEMETInspireThemes_x005feng(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocGEMETInspireThemes_x005feng * soap_new_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocGEMETInspireThemes_x005feng(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocGEMETInspireThemes_x005feng * soap_new_req_icommon__resLocGEMETInspireThemes_x005feng(
	struct soap *soap,
	enum _icommon__resLocGEMETInspireThemes_x005feng_URL URL,
	enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType MediaType)
{
	icommon__resLocGEMETInspireThemes_x005feng *_p = ::soap_new_icommon__resLocGEMETInspireThemes_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocGEMETInspireThemes_x005feng::URL = URL;
		_p->icommon__resLocGEMETInspireThemes_x005feng::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocGEMETInspireThemes_x005feng * soap_new_set_icommon__resLocGEMETInspireThemes_x005feng(
	struct soap *soap,
	enum _icommon__resLocGEMETInspireThemes_x005feng_URL URL,
	enum _icommon__resLocGEMETInspireThemes_x005feng_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocGEMETInspireThemes_x005feng *_p = ::soap_new_icommon__resLocGEMETInspireThemes_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocGEMETInspireThemes_x005feng::URL = URL;
		_p->icommon__resLocGEMETInspireThemes_x005feng::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, icommon__resLocGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__resLocGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__resLocGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__resLocGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__resLocGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__resLocGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__resLocGEMETInspireThemes_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocGEMETInspireThemes_eng", p->soap_type() == SOAP_TYPE_icommon__resLocGEMETInspireThemes_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocGEMETInspireThemes_x005feng * SOAP_FMAC4 soap_get_icommon__resLocGEMETInspireThemes_x005feng(struct soap*, icommon__resLocGEMETInspireThemes_x005feng *, const char*, const char*);

inline int soap_read_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, icommon__resLocGEMETInspireThemes_x005feng *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocGEMETInspireThemes_x005feng(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, const char *URL, icommon__resLocGEMETInspireThemes_x005feng *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocGEMETInspireThemes_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocGEMETInspireThemes_x005feng(struct soap *soap, icommon__resLocGEMETInspireThemes_x005feng *p)
{
	if (::soap_read_icommon__resLocGEMETInspireThemes_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005feng_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005feng_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005feng(struct soap*, const char*, int, const icommon__inspireTheme_x005feng *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005feng * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005feng(struct soap*, const char*, icommon__inspireTheme_x005feng *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005feng * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005feng(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005feng * soap_new_icommon__inspireTheme_x005feng(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005feng(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005feng * soap_new_req_icommon__inspireTheme_x005feng(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005feng_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005feng *_p = ::soap_new_icommon__inspireTheme_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005feng::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005feng::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005feng * soap_new_set_icommon__inspireTheme_x005feng(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005feng_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005feng *_p = ::soap_new_icommon__inspireTheme_x005feng(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005feng::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005feng::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005feng(struct soap *soap, icommon__inspireTheme_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_eng", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005feng(struct soap *soap, const char *URL, icommon__inspireTheme_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_eng", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005feng(struct soap *soap, const char *URL, icommon__inspireTheme_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_eng", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005feng ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005feng(struct soap *soap, const char *URL, icommon__inspireTheme_x005feng const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_eng", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005feng ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005feng * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005feng(struct soap*, icommon__inspireTheme_x005feng *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005feng(struct soap *soap, icommon__inspireTheme_x005feng *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005feng(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005feng(struct soap *soap, const char *URL, icommon__inspireTheme_x005feng *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005feng(struct soap *soap, icommon__inspireTheme_x005feng *p)
{
	if (::soap_read_icommon__inspireTheme_x005feng(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdut_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdut_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fdut *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fdut * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fdut *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fdut * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fdut * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fdut(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fdut * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fdut(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdut& union_citationInspireInteroperabilityRegulation_x005fdut,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fdut *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fdut *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fdut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::union_citationInspireInteroperabilityRegulation_x005fdut = union_citationInspireInteroperabilityRegulation_x005fdut;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fdut * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fdut(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fdut,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdut& union_citationInspireInteroperabilityRegulation_x005fdut,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fdut *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fdut *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fdut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::__union_citationInspireInteroperabilityRegulation_x005fdut = __union_citationInspireInteroperabilityRegulation_x005fdut;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::union_citationInspireInteroperabilityRegulation_x005fdut = union_citationInspireInteroperabilityRegulation_x005fdut;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdut::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fdut * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fdut *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fdut *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fdut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fdut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fdut(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fdut *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fdut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdut_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdut_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fdut *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdut * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fdut *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fdut * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fdut * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fdut(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fdut * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fdut(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fdut *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fdut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdut::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdut::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fdut * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fdut(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdut_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fdut *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fdut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdut::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdut::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dut", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdut ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdut * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdut *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fdut *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fdut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fdut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fdut *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fdut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fdut_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fdut_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fdut(struct soap*, const char*, int, const icommon__inspireTheme_x005fdut *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fdut * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fdut(struct soap*, const char*, icommon__inspireTheme_x005fdut *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fdut * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fdut(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fdut * soap_new_icommon__inspireTheme_x005fdut(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fdut(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fdut * soap_new_req_icommon__inspireTheme_x005fdut(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fdut_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fdut *_p = ::soap_new_icommon__inspireTheme_x005fdut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fdut::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fdut::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fdut * soap_new_set_icommon__inspireTheme_x005fdut(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fdut_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fdut *_p = ::soap_new_icommon__inspireTheme_x005fdut(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fdut::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fdut::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fdut(struct soap *soap, icommon__inspireTheme_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dut", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdut ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fdut(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dut", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fdut(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dut", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdut ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fdut(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdut const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dut", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdut ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fdut * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fdut(struct soap*, icommon__inspireTheme_x005fdut *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fdut(struct soap *soap, icommon__inspireTheme_x005fdut *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fdut(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fdut(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdut *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fdut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fdut(struct soap *soap, icommon__inspireTheme_x005fdut *p)
{
	if (::soap_read_icommon__inspireTheme_x005fdut(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdan_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdan_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fdan *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fdan * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fdan *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fdan * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fdan * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fdan(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fdan * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fdan(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdan& union_citationInspireInteroperabilityRegulation_x005fdan,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fdan *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fdan *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fdan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::union_citationInspireInteroperabilityRegulation_x005fdan = union_citationInspireInteroperabilityRegulation_x005fdan;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fdan * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fdan(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fdan,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdan& union_citationInspireInteroperabilityRegulation_x005fdan,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fdan *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fdan *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fdan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::__union_citationInspireInteroperabilityRegulation_x005fdan = __union_citationInspireInteroperabilityRegulation_x005fdan;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::union_citationInspireInteroperabilityRegulation_x005fdan = union_citationInspireInteroperabilityRegulation_x005fdan;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fdan::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fdan * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fdan *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fdan *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fdan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fdan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fdan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fdan(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fdan *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fdan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdan_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdan_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fdan *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdan * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fdan *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fdan * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fdan * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fdan(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fdan * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fdan(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fdan *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fdan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdan::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdan::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fdan * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fdan(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fdan_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fdan *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fdan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdan::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fdan::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_dan", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fdan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdan * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdan *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fdan *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fdan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fdan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fdan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fdan *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fdan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fdan_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fdan_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fdan(struct soap*, const char*, int, const icommon__inspireTheme_x005fdan *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fdan * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fdan(struct soap*, const char*, icommon__inspireTheme_x005fdan *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fdan * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fdan(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fdan * soap_new_icommon__inspireTheme_x005fdan(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fdan(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fdan * soap_new_req_icommon__inspireTheme_x005fdan(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fdan_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fdan *_p = ::soap_new_icommon__inspireTheme_x005fdan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fdan::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fdan::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fdan * soap_new_set_icommon__inspireTheme_x005fdan(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fdan_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fdan *_p = ::soap_new_icommon__inspireTheme_x005fdan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fdan::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fdan::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fdan(struct soap *soap, icommon__inspireTheme_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dan", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fdan(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dan", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fdan(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dan", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fdan(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_dan", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fdan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fdan * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fdan(struct soap*, icommon__inspireTheme_x005fdan *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fdan(struct soap *soap, icommon__inspireTheme_x005fdan *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fdan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fdan(struct soap *soap, const char *URL, icommon__inspireTheme_x005fdan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fdan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fdan(struct soap *soap, icommon__inspireTheme_x005fdan *p)
{
	if (::soap_read_icommon__inspireTheme_x005fdan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fcze_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fcze_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fcze *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fcze * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fcze *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fcze * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fcze * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fcze(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fcze * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fcze(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fcze& union_citationInspireInteroperabilityRegulation_x005fcze,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fcze *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fcze *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fcze(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::union_citationInspireInteroperabilityRegulation_x005fcze = union_citationInspireInteroperabilityRegulation_x005fcze;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fcze * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fcze(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fcze,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fcze& union_citationInspireInteroperabilityRegulation_x005fcze,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fcze *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fcze *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fcze(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::__union_citationInspireInteroperabilityRegulation_x005fcze = __union_citationInspireInteroperabilityRegulation_x005fcze;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::union_citationInspireInteroperabilityRegulation_x005fcze = union_citationInspireInteroperabilityRegulation_x005fcze;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fcze::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fcze * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fcze *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fcze *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fcze(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fcze *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fcze(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fcze(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fcze *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fcze(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fcze_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fcze_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fcze *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fcze * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fcze *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fcze * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fcze * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fcze(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fcze * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fcze(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fcze *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fcze(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fcze::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fcze::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fcze * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fcze(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fcze_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fcze *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fcze(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fcze::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fcze::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_cze", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fcze ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fcze * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fcze *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fcze *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fcze(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fcze *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fcze(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fcze *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fcze(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fcze_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fcze_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fcze(struct soap*, const char*, int, const icommon__inspireTheme_x005fcze *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fcze * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fcze(struct soap*, const char*, icommon__inspireTheme_x005fcze *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fcze * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fcze(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fcze * soap_new_icommon__inspireTheme_x005fcze(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fcze(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fcze * soap_new_req_icommon__inspireTheme_x005fcze(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fcze_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fcze *_p = ::soap_new_icommon__inspireTheme_x005fcze(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fcze::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fcze::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fcze * soap_new_set_icommon__inspireTheme_x005fcze(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fcze_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fcze *_p = ::soap_new_icommon__inspireTheme_x005fcze(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fcze::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fcze::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fcze(struct soap *soap, icommon__inspireTheme_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_cze", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fcze ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fcze(struct soap *soap, const char *URL, icommon__inspireTheme_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_cze", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fcze ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fcze(struct soap *soap, const char *URL, icommon__inspireTheme_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_cze", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fcze ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fcze(struct soap *soap, const char *URL, icommon__inspireTheme_x005fcze const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_cze", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fcze ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fcze * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fcze(struct soap*, icommon__inspireTheme_x005fcze *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fcze(struct soap *soap, icommon__inspireTheme_x005fcze *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fcze(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fcze(struct soap *soap, const char *URL, icommon__inspireTheme_x005fcze *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fcze(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fcze(struct soap *soap, icommon__inspireTheme_x005fcze *p)
{
	if (::soap_read_icommon__inspireTheme_x005fcze(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fbul_DEFINED
#define SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fbul_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap*, const char*, int, const icommon__citationInspireInteroperabilityRegulation_x005fbul *, const char*);
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fbul * SOAP_FMAC4 soap_in_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap*, const char*, icommon__citationInspireInteroperabilityRegulation_x005fbul *, const char*);
SOAP_FMAC1 icommon__citationInspireInteroperabilityRegulation_x005fbul * SOAP_FMAC2 soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationInspireInteroperabilityRegulation_x005fbul * soap_new_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationInspireInteroperabilityRegulation_x005fbul(soap, n, NULL, NULL, NULL);
}

inline icommon__citationInspireInteroperabilityRegulation_x005fbul * soap_new_req_icommon__citationInspireInteroperabilityRegulation_x005fbul(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title Title,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fbul& union_citationInspireInteroperabilityRegulation_x005fbul,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fbul *ResourceLocator)
{
	icommon__citationInspireInteroperabilityRegulation_x005fbul *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fbul(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::union_citationInspireInteroperabilityRegulation_x005fbul = union_citationInspireInteroperabilityRegulation_x005fbul;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::ResourceLocator = ResourceLocator;
	}
	return _p;
}

inline icommon__citationInspireInteroperabilityRegulation_x005fbul * soap_new_set_icommon__citationInspireInteroperabilityRegulation_x005fbul(
	struct soap *soap,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_Title Title,
	int __union_citationInspireInteroperabilityRegulation_x005fbul,
	const union _icommon__union_citationInspireInteroperabilityRegulation_x005fbul& union_citationInspireInteroperabilityRegulation_x005fbul,
	enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_URI URI,
	icommon__resLocInspireInteroperabilityRegulation_x005fbul *ResourceLocator,
	char *__item__1)
{
	icommon__citationInspireInteroperabilityRegulation_x005fbul *_p = ::soap_new_icommon__citationInspireInteroperabilityRegulation_x005fbul(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::Title = Title;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::__union_citationInspireInteroperabilityRegulation_x005fbul = __union_citationInspireInteroperabilityRegulation_x005fbul;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::union_citationInspireInteroperabilityRegulation_x005fbul = union_citationInspireInteroperabilityRegulation_x005fbul;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::URI = URI;
		_p->icommon__citationInspireInteroperabilityRegulation_x005fbul::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__citationInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationInspireInteroperabilityRegulation_x005fbul * SOAP_FMAC4 soap_get_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap*, icommon__citationInspireInteroperabilityRegulation_x005fbul *, const char*, const char*);

inline int soap_read_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fbul *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationInspireInteroperabilityRegulation_x005fbul(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__citationInspireInteroperabilityRegulation_x005fbul *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fbul(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationInspireInteroperabilityRegulation_x005fbul(struct soap *soap, icommon__citationInspireInteroperabilityRegulation_x005fbul *p)
{
	if (::soap_read_icommon__citationInspireInteroperabilityRegulation_x005fbul(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fbul_DEFINED
#define SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fbul_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, const char*, int, const icommon__resLocInspireInteroperabilityRegulation_x005fbul *, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fbul * SOAP_FMAC4 soap_in_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fbul *, const char*);
SOAP_FMAC1 icommon__resLocInspireInteroperabilityRegulation_x005fbul * SOAP_FMAC2 soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resLocInspireInteroperabilityRegulation_x005fbul * soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resLocInspireInteroperabilityRegulation_x005fbul(soap, n, NULL, NULL, NULL);
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fbul * soap_new_req_icommon__resLocInspireInteroperabilityRegulation_x005fbul(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType MediaType)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fbul *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fbul(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fbul::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fbul::MediaType = MediaType;
	}
	return _p;
}

inline icommon__resLocInspireInteroperabilityRegulation_x005fbul * soap_new_set_icommon__resLocInspireInteroperabilityRegulation_x005fbul(
	struct soap *soap,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_URL URL,
	enum _icommon__resLocInspireInteroperabilityRegulation_x005fbul_MediaType MediaType,
	char *__item__1)
{
	icommon__resLocInspireInteroperabilityRegulation_x005fbul *_p = ::soap_new_icommon__resLocInspireInteroperabilityRegulation_x005fbul(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fbul::URL = URL;
		_p->icommon__resLocInspireInteroperabilityRegulation_x005fbul::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resLocInspireInteroperabilityRegulation_bul", p->soap_type() == SOAP_TYPE_icommon__resLocInspireInteroperabilityRegulation_x005fbul ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fbul * SOAP_FMAC4 soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fbul *, const char*, const char*);

inline int soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fbul *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resLocInspireInteroperabilityRegulation_x005fbul(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, const char *URL, icommon__resLocInspireInteroperabilityRegulation_x005fbul *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fbul(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap *soap, icommon__resLocInspireInteroperabilityRegulation_x005fbul *p)
{
	if (::soap_read_icommon__resLocInspireInteroperabilityRegulation_x005fbul(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_x005fbul_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_x005fbul_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme_x005fbul(struct soap*, const char*, int, const icommon__inspireTheme_x005fbul *, const char*);
SOAP_FMAC3 icommon__inspireTheme_x005fbul * SOAP_FMAC4 soap_in_icommon__inspireTheme_x005fbul(struct soap*, const char*, icommon__inspireTheme_x005fbul *, const char*);
SOAP_FMAC1 icommon__inspireTheme_x005fbul * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme_x005fbul(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme_x005fbul * soap_new_icommon__inspireTheme_x005fbul(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme_x005fbul(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme_x005fbul * soap_new_req_icommon__inspireTheme_x005fbul(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fbul_KeywordValue KeywordValue)
{
	icommon__inspireTheme_x005fbul *_p = ::soap_new_icommon__inspireTheme_x005fbul(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fbul::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fbul::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme_x005fbul * soap_new_set_icommon__inspireTheme_x005fbul(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	enum _icommon__inspireTheme_x005fbul_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme_x005fbul *_p = ::soap_new_icommon__inspireTheme_x005fbul(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme_x005fbul::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme_x005fbul::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme_x005fbul(struct soap *soap, icommon__inspireTheme_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_bul", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fbul ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme_x005fbul(struct soap *soap, const char *URL, icommon__inspireTheme_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_bul", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fbul ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme_x005fbul(struct soap *soap, const char *URL, icommon__inspireTheme_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_bul", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fbul ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme_x005fbul(struct soap *soap, const char *URL, icommon__inspireTheme_x005fbul const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme_bul", p->soap_type() == SOAP_TYPE_icommon__inspireTheme_x005fbul ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme_x005fbul * SOAP_FMAC4 soap_get_icommon__inspireTheme_x005fbul(struct soap*, icommon__inspireTheme_x005fbul *, const char*, const char*);

inline int soap_read_icommon__inspireTheme_x005fbul(struct soap *soap, icommon__inspireTheme_x005fbul *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme_x005fbul(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme_x005fbul(struct soap *soap, const char *URL, icommon__inspireTheme_x005fbul *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme_x005fbul(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme_x005fbul(struct soap *soap, icommon__inspireTheme_x005fbul *p)
{
	if (::soap_read_icommon__inspireTheme_x005fbul(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__otherService_DEFINED
#define SOAP_TYPE_icommon__otherService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__otherService(struct soap*, const char*, int, const icommon__otherService *, const char*);
SOAP_FMAC3 icommon__otherService * SOAP_FMAC4 soap_in_icommon__otherService(struct soap*, const char*, icommon__otherService *, const char*);
SOAP_FMAC1 icommon__otherService * SOAP_FMAC2 soap_instantiate_icommon__otherService(struct soap*, int, const char*, const char*, size_t*);

inline icommon__otherService * soap_new_icommon__otherService(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__otherService(soap, n, NULL, NULL, NULL);
}

inline icommon__otherService * soap_new_req_icommon__otherService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	enum icommon__discoverySpatialDataServiceType SpatialDataServiceType)
{
	icommon__otherService *_p = ::soap_new_icommon__otherService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__otherService::ResourceTitle = ResourceTitle;
		_p->icommon__otherService::ResourceAbstract = ResourceAbstract;
		_p->icommon__otherService::ResourceType = ResourceType;
		_p->icommon__otherService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__otherService::TemporalReference = TemporalReference;
		_p->icommon__otherService::Conformity = Conformity;
		_p->icommon__otherService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__otherService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__otherService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__otherService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__otherService::MetadataDate = MetadataDate;
		_p->icommon__otherService::MetadataLanguage = MetadataLanguage;
		_p->icommon__otherService::SpatialDataServiceType = SpatialDataServiceType;
	}
	return _p;
}

inline icommon__otherService * soap_new_set_icommon__otherService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__discoverySpatialDataServiceType SpatialDataServiceType,
	char *__item__1)
{
	icommon__otherService *_p = ::soap_new_icommon__otherService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__otherService::ResourceTitle = ResourceTitle;
		_p->icommon__otherService::ResourceAbstract = ResourceAbstract;
		_p->icommon__otherService::ResourceType = ResourceType;
		_p->icommon__otherService::ResourceLocator = ResourceLocator;
		_p->icommon__otherService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__otherService::Keyword = Keyword;
		_p->icommon__otherService::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__otherService::TemporalReference = TemporalReference;
		_p->icommon__otherService::SpatialResolution = SpatialResolution;
		_p->icommon__otherService::Conformity = Conformity;
		_p->icommon__otherService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__otherService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__otherService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__otherService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__otherService::MetadataDate = MetadataDate;
		_p->icommon__otherService::MetadataLanguage = MetadataLanguage;
		_p->icommon__otherService::CoupledResource = CoupledResource;
		_p->icommon__otherService::SpatialDataServiceType = SpatialDataServiceType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__otherService(struct soap *soap, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService", p->soap_type() == SOAP_TYPE_icommon__otherService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__otherService(struct soap *soap, const char *URL, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService", p->soap_type() == SOAP_TYPE_icommon__otherService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__otherService(struct soap *soap, const char *URL, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService", p->soap_type() == SOAP_TYPE_icommon__otherService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__otherService(struct soap *soap, const char *URL, icommon__otherService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService", p->soap_type() == SOAP_TYPE_icommon__otherService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__otherService * SOAP_FMAC4 soap_get_icommon__otherService(struct soap*, icommon__otherService *, const char*, const char*);

inline int soap_read_icommon__otherService(struct soap *soap, icommon__otherService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__otherService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__otherService(struct soap *soap, const char *URL, icommon__otherService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__otherService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__otherService(struct soap *soap, icommon__otherService *p)
{
	if (::soap_read_icommon__otherService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__otherService_x005fext_DEFINED
#define SOAP_TYPE_icommon__otherService_x005fext_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__otherService_x005fext(struct soap*, const char*, int, const icommon__otherService_x005fext *, const char*);
SOAP_FMAC3 icommon__otherService_x005fext * SOAP_FMAC4 soap_in_icommon__otherService_x005fext(struct soap*, const char*, icommon__otherService_x005fext *, const char*);
SOAP_FMAC1 icommon__otherService_x005fext * SOAP_FMAC2 soap_instantiate_icommon__otherService_x005fext(struct soap*, int, const char*, const char*, size_t*);

inline icommon__otherService_x005fext * soap_new_icommon__otherService_x005fext(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__otherService_x005fext(soap, n, NULL, NULL, NULL);
}

inline icommon__otherService_x005fext * soap_new_req_icommon__otherService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1)
{
	icommon__otherService_x005fext *_p = ::soap_new_icommon__otherService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
	}
	return _p;
}

inline icommon__otherService_x005fext * soap_new_set_icommon__otherService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1,
	char *__item__2)
{
	icommon__otherService_x005fext *_p = ::soap_new_icommon__otherService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::ResourceLocator = ResourceLocator__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::Keyword = Keyword__1;
		_p->icommon__service::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::SpatialResolution = SpatialResolution__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::CoupledResource = CoupledResource__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__otherService_x005fext(struct soap *soap, icommon__otherService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService_ext", p->soap_type() == SOAP_TYPE_icommon__otherService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__otherService_x005fext(struct soap *soap, const char *URL, icommon__otherService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService_ext", p->soap_type() == SOAP_TYPE_icommon__otherService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__otherService_x005fext(struct soap *soap, const char *URL, icommon__otherService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService_ext", p->soap_type() == SOAP_TYPE_icommon__otherService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__otherService_x005fext(struct soap *soap, const char *URL, icommon__otherService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:otherService_ext", p->soap_type() == SOAP_TYPE_icommon__otherService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__otherService_x005fext * SOAP_FMAC4 soap_get_icommon__otherService_x005fext(struct soap*, icommon__otherService_x005fext *, const char*, const char*);

inline int soap_read_icommon__otherService_x005fext(struct soap *soap, icommon__otherService_x005fext *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__otherService_x005fext(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__otherService_x005fext(struct soap *soap, const char *URL, icommon__otherService_x005fext *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__otherService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__otherService_x005fext(struct soap *soap, icommon__otherService_x005fext *p)
{
	if (::soap_read_icommon__otherService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__invokeService_DEFINED
#define SOAP_TYPE_icommon__invokeService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__invokeService(struct soap*, const char*, int, const icommon__invokeService *, const char*);
SOAP_FMAC3 icommon__invokeService * SOAP_FMAC4 soap_in_icommon__invokeService(struct soap*, const char*, icommon__invokeService *, const char*);
SOAP_FMAC1 icommon__invokeService * SOAP_FMAC2 soap_instantiate_icommon__invokeService(struct soap*, int, const char*, const char*, size_t*);

inline icommon__invokeService * soap_new_icommon__invokeService(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__invokeService(soap, n, NULL, NULL, NULL);
}

inline icommon__invokeService * soap_new_req_icommon__invokeService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	enum icommon__discoverySpatialDataServiceType SpatialDataServiceType)
{
	icommon__invokeService *_p = ::soap_new_icommon__invokeService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__invokeService::ResourceTitle = ResourceTitle;
		_p->icommon__invokeService::ResourceAbstract = ResourceAbstract;
		_p->icommon__invokeService::ResourceType = ResourceType;
		_p->icommon__invokeService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__invokeService::TemporalReference = TemporalReference;
		_p->icommon__invokeService::Conformity = Conformity;
		_p->icommon__invokeService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__invokeService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__invokeService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__invokeService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__invokeService::MetadataDate = MetadataDate;
		_p->icommon__invokeService::MetadataLanguage = MetadataLanguage;
		_p->icommon__invokeService::SpatialDataServiceType = SpatialDataServiceType;
	}
	return _p;
}

inline icommon__invokeService * soap_new_set_icommon__invokeService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__discoverySpatialDataServiceType SpatialDataServiceType,
	char *__item__1)
{
	icommon__invokeService *_p = ::soap_new_icommon__invokeService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__invokeService::ResourceTitle = ResourceTitle;
		_p->icommon__invokeService::ResourceAbstract = ResourceAbstract;
		_p->icommon__invokeService::ResourceType = ResourceType;
		_p->icommon__invokeService::ResourceLocator = ResourceLocator;
		_p->icommon__invokeService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__invokeService::Keyword = Keyword;
		_p->icommon__invokeService::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__invokeService::TemporalReference = TemporalReference;
		_p->icommon__invokeService::SpatialResolution = SpatialResolution;
		_p->icommon__invokeService::Conformity = Conformity;
		_p->icommon__invokeService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__invokeService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__invokeService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__invokeService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__invokeService::MetadataDate = MetadataDate;
		_p->icommon__invokeService::MetadataLanguage = MetadataLanguage;
		_p->icommon__invokeService::CoupledResource = CoupledResource;
		_p->icommon__invokeService::SpatialDataServiceType = SpatialDataServiceType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__invokeService(struct soap *soap, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService", p->soap_type() == SOAP_TYPE_icommon__invokeService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__invokeService(struct soap *soap, const char *URL, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService", p->soap_type() == SOAP_TYPE_icommon__invokeService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__invokeService(struct soap *soap, const char *URL, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService", p->soap_type() == SOAP_TYPE_icommon__invokeService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__invokeService(struct soap *soap, const char *URL, icommon__invokeService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService", p->soap_type() == SOAP_TYPE_icommon__invokeService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__invokeService * SOAP_FMAC4 soap_get_icommon__invokeService(struct soap*, icommon__invokeService *, const char*, const char*);

inline int soap_read_icommon__invokeService(struct soap *soap, icommon__invokeService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__invokeService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__invokeService(struct soap *soap, const char *URL, icommon__invokeService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__invokeService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__invokeService(struct soap *soap, icommon__invokeService *p)
{
	if (::soap_read_icommon__invokeService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__invokeService_x005fext_DEFINED
#define SOAP_TYPE_icommon__invokeService_x005fext_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__invokeService_x005fext(struct soap*, const char*, int, const icommon__invokeService_x005fext *, const char*);
SOAP_FMAC3 icommon__invokeService_x005fext * SOAP_FMAC4 soap_in_icommon__invokeService_x005fext(struct soap*, const char*, icommon__invokeService_x005fext *, const char*);
SOAP_FMAC1 icommon__invokeService_x005fext * SOAP_FMAC2 soap_instantiate_icommon__invokeService_x005fext(struct soap*, int, const char*, const char*, size_t*);

inline icommon__invokeService_x005fext * soap_new_icommon__invokeService_x005fext(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__invokeService_x005fext(soap, n, NULL, NULL, NULL);
}

inline icommon__invokeService_x005fext * soap_new_req_icommon__invokeService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1)
{
	icommon__invokeService_x005fext *_p = ::soap_new_icommon__invokeService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
	}
	return _p;
}

inline icommon__invokeService_x005fext * soap_new_set_icommon__invokeService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1,
	char *__item__2)
{
	icommon__invokeService_x005fext *_p = ::soap_new_icommon__invokeService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::ResourceLocator = ResourceLocator__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::Keyword = Keyword__1;
		_p->icommon__service::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::SpatialResolution = SpatialResolution__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::CoupledResource = CoupledResource__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__invokeService_x005fext(struct soap *soap, icommon__invokeService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService_ext", p->soap_type() == SOAP_TYPE_icommon__invokeService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__invokeService_x005fext(struct soap *soap, const char *URL, icommon__invokeService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService_ext", p->soap_type() == SOAP_TYPE_icommon__invokeService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__invokeService_x005fext(struct soap *soap, const char *URL, icommon__invokeService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService_ext", p->soap_type() == SOAP_TYPE_icommon__invokeService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__invokeService_x005fext(struct soap *soap, const char *URL, icommon__invokeService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:invokeService_ext", p->soap_type() == SOAP_TYPE_icommon__invokeService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__invokeService_x005fext * SOAP_FMAC4 soap_get_icommon__invokeService_x005fext(struct soap*, icommon__invokeService_x005fext *, const char*, const char*);

inline int soap_read_icommon__invokeService_x005fext(struct soap *soap, icommon__invokeService_x005fext *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__invokeService_x005fext(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__invokeService_x005fext(struct soap *soap, const char *URL, icommon__invokeService_x005fext *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__invokeService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__invokeService_x005fext(struct soap *soap, icommon__invokeService_x005fext *p)
{
	if (::soap_read_icommon__invokeService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__transformationService_DEFINED
#define SOAP_TYPE_icommon__transformationService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__transformationService(struct soap*, const char*, int, const icommon__transformationService *, const char*);
SOAP_FMAC3 icommon__transformationService * SOAP_FMAC4 soap_in_icommon__transformationService(struct soap*, const char*, icommon__transformationService *, const char*);
SOAP_FMAC1 icommon__transformationService * SOAP_FMAC2 soap_instantiate_icommon__transformationService(struct soap*, int, const char*, const char*, size_t*);

inline icommon__transformationService * soap_new_icommon__transformationService(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__transformationService(soap, n, NULL, NULL, NULL);
}

inline icommon__transformationService * soap_new_req_icommon__transformationService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	enum icommon__transformationSpatialDataServiceType SpatialDataServiceType)
{
	icommon__transformationService *_p = ::soap_new_icommon__transformationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__transformationService::ResourceTitle = ResourceTitle;
		_p->icommon__transformationService::ResourceAbstract = ResourceAbstract;
		_p->icommon__transformationService::ResourceType = ResourceType;
		_p->icommon__transformationService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__transformationService::TemporalReference = TemporalReference;
		_p->icommon__transformationService::Conformity = Conformity;
		_p->icommon__transformationService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__transformationService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__transformationService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__transformationService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__transformationService::MetadataDate = MetadataDate;
		_p->icommon__transformationService::MetadataLanguage = MetadataLanguage;
		_p->icommon__transformationService::SpatialDataServiceType = SpatialDataServiceType;
	}
	return _p;
}

inline icommon__transformationService * soap_new_set_icommon__transformationService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__transformationSpatialDataServiceType SpatialDataServiceType,
	char *__item__1)
{
	icommon__transformationService *_p = ::soap_new_icommon__transformationService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__transformationService::ResourceTitle = ResourceTitle;
		_p->icommon__transformationService::ResourceAbstract = ResourceAbstract;
		_p->icommon__transformationService::ResourceType = ResourceType;
		_p->icommon__transformationService::ResourceLocator = ResourceLocator;
		_p->icommon__transformationService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__transformationService::Keyword = Keyword;
		_p->icommon__transformationService::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__transformationService::TemporalReference = TemporalReference;
		_p->icommon__transformationService::SpatialResolution = SpatialResolution;
		_p->icommon__transformationService::Conformity = Conformity;
		_p->icommon__transformationService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__transformationService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__transformationService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__transformationService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__transformationService::MetadataDate = MetadataDate;
		_p->icommon__transformationService::MetadataLanguage = MetadataLanguage;
		_p->icommon__transformationService::CoupledResource = CoupledResource;
		_p->icommon__transformationService::SpatialDataServiceType = SpatialDataServiceType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__transformationService(struct soap *soap, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService", p->soap_type() == SOAP_TYPE_icommon__transformationService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__transformationService(struct soap *soap, const char *URL, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService", p->soap_type() == SOAP_TYPE_icommon__transformationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__transformationService(struct soap *soap, const char *URL, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService", p->soap_type() == SOAP_TYPE_icommon__transformationService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__transformationService(struct soap *soap, const char *URL, icommon__transformationService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService", p->soap_type() == SOAP_TYPE_icommon__transformationService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__transformationService * SOAP_FMAC4 soap_get_icommon__transformationService(struct soap*, icommon__transformationService *, const char*, const char*);

inline int soap_read_icommon__transformationService(struct soap *soap, icommon__transformationService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__transformationService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__transformationService(struct soap *soap, const char *URL, icommon__transformationService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__transformationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__transformationService(struct soap *soap, icommon__transformationService *p)
{
	if (::soap_read_icommon__transformationService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__transformationService_x005fext_DEFINED
#define SOAP_TYPE_icommon__transformationService_x005fext_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__transformationService_x005fext(struct soap*, const char*, int, const icommon__transformationService_x005fext *, const char*);
SOAP_FMAC3 icommon__transformationService_x005fext * SOAP_FMAC4 soap_in_icommon__transformationService_x005fext(struct soap*, const char*, icommon__transformationService_x005fext *, const char*);
SOAP_FMAC1 icommon__transformationService_x005fext * SOAP_FMAC2 soap_instantiate_icommon__transformationService_x005fext(struct soap*, int, const char*, const char*, size_t*);

inline icommon__transformationService_x005fext * soap_new_icommon__transformationService_x005fext(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__transformationService_x005fext(soap, n, NULL, NULL, NULL);
}

inline icommon__transformationService_x005fext * soap_new_req_icommon__transformationService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1)
{
	icommon__transformationService_x005fext *_p = ::soap_new_icommon__transformationService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
	}
	return _p;
}

inline icommon__transformationService_x005fext * soap_new_set_icommon__transformationService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1,
	char *__item__2)
{
	icommon__transformationService_x005fext *_p = ::soap_new_icommon__transformationService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::ResourceLocator = ResourceLocator__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::Keyword = Keyword__1;
		_p->icommon__service::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::SpatialResolution = SpatialResolution__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::CoupledResource = CoupledResource__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__transformationService_x005fext(struct soap *soap, icommon__transformationService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService_ext", p->soap_type() == SOAP_TYPE_icommon__transformationService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__transformationService_x005fext(struct soap *soap, const char *URL, icommon__transformationService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService_ext", p->soap_type() == SOAP_TYPE_icommon__transformationService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__transformationService_x005fext(struct soap *soap, const char *URL, icommon__transformationService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService_ext", p->soap_type() == SOAP_TYPE_icommon__transformationService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__transformationService_x005fext(struct soap *soap, const char *URL, icommon__transformationService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:transformationService_ext", p->soap_type() == SOAP_TYPE_icommon__transformationService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__transformationService_x005fext * SOAP_FMAC4 soap_get_icommon__transformationService_x005fext(struct soap*, icommon__transformationService_x005fext *, const char*, const char*);

inline int soap_read_icommon__transformationService_x005fext(struct soap *soap, icommon__transformationService_x005fext *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__transformationService_x005fext(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__transformationService_x005fext(struct soap *soap, const char *URL, icommon__transformationService_x005fext *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__transformationService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__transformationService_x005fext(struct soap *soap, icommon__transformationService_x005fext *p)
{
	if (::soap_read_icommon__transformationService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__downloadService_DEFINED
#define SOAP_TYPE_icommon__downloadService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__downloadService(struct soap*, const char*, int, const icommon__downloadService *, const char*);
SOAP_FMAC3 icommon__downloadService * SOAP_FMAC4 soap_in_icommon__downloadService(struct soap*, const char*, icommon__downloadService *, const char*);
SOAP_FMAC1 icommon__downloadService * SOAP_FMAC2 soap_instantiate_icommon__downloadService(struct soap*, int, const char*, const char*, size_t*);

inline icommon__downloadService * soap_new_icommon__downloadService(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__downloadService(soap, n, NULL, NULL, NULL);
}

inline icommon__downloadService * soap_new_req_icommon__downloadService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	enum icommon__transformationSpatialDataServiceType SpatialDataServiceType)
{
	icommon__downloadService *_p = ::soap_new_icommon__downloadService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__downloadService::ResourceTitle = ResourceTitle;
		_p->icommon__downloadService::ResourceAbstract = ResourceAbstract;
		_p->icommon__downloadService::ResourceType = ResourceType;
		_p->icommon__downloadService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__downloadService::TemporalReference = TemporalReference;
		_p->icommon__downloadService::Conformity = Conformity;
		_p->icommon__downloadService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__downloadService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__downloadService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__downloadService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__downloadService::MetadataDate = MetadataDate;
		_p->icommon__downloadService::MetadataLanguage = MetadataLanguage;
		_p->icommon__downloadService::SpatialDataServiceType = SpatialDataServiceType;
	}
	return _p;
}

inline icommon__downloadService * soap_new_set_icommon__downloadService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__transformationSpatialDataServiceType SpatialDataServiceType,
	char *__item__1)
{
	icommon__downloadService *_p = ::soap_new_icommon__downloadService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__downloadService::ResourceTitle = ResourceTitle;
		_p->icommon__downloadService::ResourceAbstract = ResourceAbstract;
		_p->icommon__downloadService::ResourceType = ResourceType;
		_p->icommon__downloadService::ResourceLocator = ResourceLocator;
		_p->icommon__downloadService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__downloadService::Keyword = Keyword;
		_p->icommon__downloadService::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__downloadService::TemporalReference = TemporalReference;
		_p->icommon__downloadService::SpatialResolution = SpatialResolution;
		_p->icommon__downloadService::Conformity = Conformity;
		_p->icommon__downloadService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__downloadService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__downloadService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__downloadService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__downloadService::MetadataDate = MetadataDate;
		_p->icommon__downloadService::MetadataLanguage = MetadataLanguage;
		_p->icommon__downloadService::CoupledResource = CoupledResource;
		_p->icommon__downloadService::SpatialDataServiceType = SpatialDataServiceType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__downloadService(struct soap *soap, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService", p->soap_type() == SOAP_TYPE_icommon__downloadService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__downloadService(struct soap *soap, const char *URL, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService", p->soap_type() == SOAP_TYPE_icommon__downloadService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__downloadService(struct soap *soap, const char *URL, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService", p->soap_type() == SOAP_TYPE_icommon__downloadService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__downloadService(struct soap *soap, const char *URL, icommon__downloadService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService", p->soap_type() == SOAP_TYPE_icommon__downloadService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__downloadService * SOAP_FMAC4 soap_get_icommon__downloadService(struct soap*, icommon__downloadService *, const char*, const char*);

inline int soap_read_icommon__downloadService(struct soap *soap, icommon__downloadService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__downloadService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__downloadService(struct soap *soap, const char *URL, icommon__downloadService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__downloadService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__downloadService(struct soap *soap, icommon__downloadService *p)
{
	if (::soap_read_icommon__downloadService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__downloadService_x005fext_DEFINED
#define SOAP_TYPE_icommon__downloadService_x005fext_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__downloadService_x005fext(struct soap*, const char*, int, const icommon__downloadService_x005fext *, const char*);
SOAP_FMAC3 icommon__downloadService_x005fext * SOAP_FMAC4 soap_in_icommon__downloadService_x005fext(struct soap*, const char*, icommon__downloadService_x005fext *, const char*);
SOAP_FMAC1 icommon__downloadService_x005fext * SOAP_FMAC2 soap_instantiate_icommon__downloadService_x005fext(struct soap*, int, const char*, const char*, size_t*);

inline icommon__downloadService_x005fext * soap_new_icommon__downloadService_x005fext(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__downloadService_x005fext(soap, n, NULL, NULL, NULL);
}

inline icommon__downloadService_x005fext * soap_new_req_icommon__downloadService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1)
{
	icommon__downloadService_x005fext *_p = ::soap_new_icommon__downloadService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
	}
	return _p;
}

inline icommon__downloadService_x005fext * soap_new_set_icommon__downloadService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1,
	char *__item__2)
{
	icommon__downloadService_x005fext *_p = ::soap_new_icommon__downloadService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::ResourceLocator = ResourceLocator__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::Keyword = Keyword__1;
		_p->icommon__service::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::SpatialResolution = SpatialResolution__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::CoupledResource = CoupledResource__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__downloadService_x005fext(struct soap *soap, icommon__downloadService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService_ext", p->soap_type() == SOAP_TYPE_icommon__downloadService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__downloadService_x005fext(struct soap *soap, const char *URL, icommon__downloadService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService_ext", p->soap_type() == SOAP_TYPE_icommon__downloadService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__downloadService_x005fext(struct soap *soap, const char *URL, icommon__downloadService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService_ext", p->soap_type() == SOAP_TYPE_icommon__downloadService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__downloadService_x005fext(struct soap *soap, const char *URL, icommon__downloadService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:downloadService_ext", p->soap_type() == SOAP_TYPE_icommon__downloadService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__downloadService_x005fext * SOAP_FMAC4 soap_get_icommon__downloadService_x005fext(struct soap*, icommon__downloadService_x005fext *, const char*, const char*);

inline int soap_read_icommon__downloadService_x005fext(struct soap *soap, icommon__downloadService_x005fext *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__downloadService_x005fext(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__downloadService_x005fext(struct soap *soap, const char *URL, icommon__downloadService_x005fext *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__downloadService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__downloadService_x005fext(struct soap *soap, icommon__downloadService_x005fext *p)
{
	if (::soap_read_icommon__downloadService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__viewService_DEFINED
#define SOAP_TYPE_icommon__viewService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__viewService(struct soap*, const char*, int, const icommon__viewService *, const char*);
SOAP_FMAC3 icommon__viewService * SOAP_FMAC4 soap_in_icommon__viewService(struct soap*, const char*, icommon__viewService *, const char*);
SOAP_FMAC1 icommon__viewService * SOAP_FMAC2 soap_instantiate_icommon__viewService(struct soap*, int, const char*, const char*, size_t*);

inline icommon__viewService * soap_new_icommon__viewService(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__viewService(soap, n, NULL, NULL, NULL);
}

inline icommon__viewService * soap_new_req_icommon__viewService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	enum icommon__viewSpatialDataServiceType SpatialDataServiceType,
	icommon__layers *Layers)
{
	icommon__viewService *_p = ::soap_new_icommon__viewService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__viewService::ResourceTitle = ResourceTitle;
		_p->icommon__viewService::ResourceAbstract = ResourceAbstract;
		_p->icommon__viewService::ResourceType = ResourceType;
		_p->icommon__viewService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__viewService::TemporalReference = TemporalReference;
		_p->icommon__viewService::Conformity = Conformity;
		_p->icommon__viewService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__viewService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__viewService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__viewService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__viewService::MetadataDate = MetadataDate;
		_p->icommon__viewService::MetadataLanguage = MetadataLanguage;
		_p->icommon__viewService::SpatialDataServiceType = SpatialDataServiceType;
		_p->icommon__viewService::Layers = Layers;
	}
	return _p;
}

inline icommon__viewService * soap_new_set_icommon__viewService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__viewSpatialDataServiceType SpatialDataServiceType,
	icommon__layers *Layers,
	char *__item__1)
{
	icommon__viewService *_p = ::soap_new_icommon__viewService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__viewService::ResourceTitle = ResourceTitle;
		_p->icommon__viewService::ResourceAbstract = ResourceAbstract;
		_p->icommon__viewService::ResourceType = ResourceType;
		_p->icommon__viewService::ResourceLocator = ResourceLocator;
		_p->icommon__viewService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__viewService::Keyword = Keyword;
		_p->icommon__viewService::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__viewService::TemporalReference = TemporalReference;
		_p->icommon__viewService::SpatialResolution = SpatialResolution;
		_p->icommon__viewService::Conformity = Conformity;
		_p->icommon__viewService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__viewService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__viewService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__viewService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__viewService::MetadataDate = MetadataDate;
		_p->icommon__viewService::MetadataLanguage = MetadataLanguage;
		_p->icommon__viewService::CoupledResource = CoupledResource;
		_p->icommon__viewService::SpatialDataServiceType = SpatialDataServiceType;
		_p->icommon__viewService::Layers = Layers;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__viewService(struct soap *soap, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService", p->soap_type() == SOAP_TYPE_icommon__viewService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__viewService(struct soap *soap, const char *URL, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService", p->soap_type() == SOAP_TYPE_icommon__viewService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__viewService(struct soap *soap, const char *URL, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService", p->soap_type() == SOAP_TYPE_icommon__viewService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__viewService(struct soap *soap, const char *URL, icommon__viewService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService", p->soap_type() == SOAP_TYPE_icommon__viewService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__viewService * SOAP_FMAC4 soap_get_icommon__viewService(struct soap*, icommon__viewService *, const char*, const char*);

inline int soap_read_icommon__viewService(struct soap *soap, icommon__viewService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__viewService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__viewService(struct soap *soap, const char *URL, icommon__viewService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__viewService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__viewService(struct soap *soap, icommon__viewService *p)
{
	if (::soap_read_icommon__viewService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__viewService_x005fext_DEFINED
#define SOAP_TYPE_icommon__viewService_x005fext_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__viewService_x005fext(struct soap*, const char*, int, const icommon__viewService_x005fext *, const char*);
SOAP_FMAC3 icommon__viewService_x005fext * SOAP_FMAC4 soap_in_icommon__viewService_x005fext(struct soap*, const char*, icommon__viewService_x005fext *, const char*);
SOAP_FMAC1 icommon__viewService_x005fext * SOAP_FMAC2 soap_instantiate_icommon__viewService_x005fext(struct soap*, int, const char*, const char*, size_t*);

inline icommon__viewService_x005fext * soap_new_icommon__viewService_x005fext(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__viewService_x005fext(soap, n, NULL, NULL, NULL);
}

inline icommon__viewService_x005fext * soap_new_req_icommon__viewService_x005fext(
	struct soap *soap,
	icommon__layers *Layers,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1)
{
	icommon__viewService_x005fext *_p = ::soap_new_icommon__viewService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__viewService_x005fext::Layers = Layers;
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
	}
	return _p;
}

inline icommon__viewService_x005fext * soap_new_set_icommon__viewService_x005fext(
	struct soap *soap,
	icommon__layers *Layers,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1,
	char *__item__2)
{
	icommon__viewService_x005fext *_p = ::soap_new_icommon__viewService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__viewService_x005fext::Layers = Layers;
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::ResourceLocator = ResourceLocator__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::Keyword = Keyword__1;
		_p->icommon__service::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::SpatialResolution = SpatialResolution__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::CoupledResource = CoupledResource__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__viewService_x005fext(struct soap *soap, icommon__viewService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService_ext", p->soap_type() == SOAP_TYPE_icommon__viewService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__viewService_x005fext(struct soap *soap, const char *URL, icommon__viewService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService_ext", p->soap_type() == SOAP_TYPE_icommon__viewService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__viewService_x005fext(struct soap *soap, const char *URL, icommon__viewService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService_ext", p->soap_type() == SOAP_TYPE_icommon__viewService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__viewService_x005fext(struct soap *soap, const char *URL, icommon__viewService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:viewService_ext", p->soap_type() == SOAP_TYPE_icommon__viewService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__viewService_x005fext * SOAP_FMAC4 soap_get_icommon__viewService_x005fext(struct soap*, icommon__viewService_x005fext *, const char*, const char*);

inline int soap_read_icommon__viewService_x005fext(struct soap *soap, icommon__viewService_x005fext *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__viewService_x005fext(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__viewService_x005fext(struct soap *soap, const char *URL, icommon__viewService_x005fext *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__viewService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__viewService_x005fext(struct soap *soap, icommon__viewService_x005fext *p)
{
	if (::soap_read_icommon__viewService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__layers_DEFINED
#define SOAP_TYPE_icommon__layers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__layers(struct soap*, const char*, int, const icommon__layers *, const char*);
SOAP_FMAC3 icommon__layers * SOAP_FMAC4 soap_in_icommon__layers(struct soap*, const char*, icommon__layers *, const char*);
SOAP_FMAC1 icommon__layers * SOAP_FMAC2 soap_instantiate_icommon__layers(struct soap*, int, const char*, const char*, size_t*);

inline icommon__layers * soap_new_icommon__layers(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__layers(soap, n, NULL, NULL, NULL);
}

inline icommon__layers * soap_new_req_icommon__layers(
	struct soap *soap,
	const _icommon__layers_Layer& Layer)
{
	icommon__layers *_p = ::soap_new_icommon__layers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__layers::Layer = Layer;
	}
	return _p;
}

inline icommon__layers * soap_new_set_icommon__layers(
	struct soap *soap,
	const _icommon__layers_Layer& Layer,
	char *__item__1)
{
	icommon__layers *_p = ::soap_new_icommon__layers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__layers::Layer = Layer;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__layers(struct soap *soap, icommon__layers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers", p->soap_type() == SOAP_TYPE_icommon__layers ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__layers(struct soap *soap, const char *URL, icommon__layers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers", p->soap_type() == SOAP_TYPE_icommon__layers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__layers(struct soap *soap, const char *URL, icommon__layers const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers", p->soap_type() == SOAP_TYPE_icommon__layers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__layers(struct soap *soap, const char *URL, icommon__layers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:layers", p->soap_type() == SOAP_TYPE_icommon__layers ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__layers * SOAP_FMAC4 soap_get_icommon__layers(struct soap*, icommon__layers *, const char*, const char*);

inline int soap_read_icommon__layers(struct soap *soap, icommon__layers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__layers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__layers(struct soap *soap, const char *URL, icommon__layers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__layers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__layers(struct soap *soap, icommon__layers *p)
{
	if (::soap_read_icommon__layers(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__discoveryService_DEFINED
#define SOAP_TYPE_icommon__discoveryService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__discoveryService(struct soap*, const char*, int, const icommon__discoveryService *, const char*);
SOAP_FMAC3 icommon__discoveryService * SOAP_FMAC4 soap_in_icommon__discoveryService(struct soap*, const char*, icommon__discoveryService *, const char*);
SOAP_FMAC1 icommon__discoveryService * SOAP_FMAC2 soap_instantiate_icommon__discoveryService(struct soap*, int, const char*, const char*, size_t*);

inline icommon__discoveryService * soap_new_icommon__discoveryService(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__discoveryService(soap, n, NULL, NULL, NULL);
}

inline icommon__discoveryService * soap_new_req_icommon__discoveryService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	enum icommon__discoverySpatialDataServiceType SpatialDataServiceType)
{
	icommon__discoveryService *_p = ::soap_new_icommon__discoveryService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__discoveryService::ResourceTitle = ResourceTitle;
		_p->icommon__discoveryService::ResourceAbstract = ResourceAbstract;
		_p->icommon__discoveryService::ResourceType = ResourceType;
		_p->icommon__discoveryService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__discoveryService::TemporalReference = TemporalReference;
		_p->icommon__discoveryService::Conformity = Conformity;
		_p->icommon__discoveryService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__discoveryService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__discoveryService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__discoveryService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__discoveryService::MetadataDate = MetadataDate;
		_p->icommon__discoveryService::MetadataLanguage = MetadataLanguage;
		_p->icommon__discoveryService::SpatialDataServiceType = SpatialDataServiceType;
	}
	return _p;
}

inline icommon__discoveryService * soap_new_set_icommon__discoveryService(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__discoverySpatialDataServiceType SpatialDataServiceType,
	char *__item__1)
{
	icommon__discoveryService *_p = ::soap_new_icommon__discoveryService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__discoveryService::ResourceTitle = ResourceTitle;
		_p->icommon__discoveryService::ResourceAbstract = ResourceAbstract;
		_p->icommon__discoveryService::ResourceType = ResourceType;
		_p->icommon__discoveryService::ResourceLocator = ResourceLocator;
		_p->icommon__discoveryService::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__discoveryService::Keyword = Keyword;
		_p->icommon__discoveryService::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__discoveryService::TemporalReference = TemporalReference;
		_p->icommon__discoveryService::SpatialResolution = SpatialResolution;
		_p->icommon__discoveryService::Conformity = Conformity;
		_p->icommon__discoveryService::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__discoveryService::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__discoveryService::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__discoveryService::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__discoveryService::MetadataDate = MetadataDate;
		_p->icommon__discoveryService::MetadataLanguage = MetadataLanguage;
		_p->icommon__discoveryService::CoupledResource = CoupledResource;
		_p->icommon__discoveryService::SpatialDataServiceType = SpatialDataServiceType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__discoveryService(struct soap *soap, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService", p->soap_type() == SOAP_TYPE_icommon__discoveryService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__discoveryService(struct soap *soap, const char *URL, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService", p->soap_type() == SOAP_TYPE_icommon__discoveryService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__discoveryService(struct soap *soap, const char *URL, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService", p->soap_type() == SOAP_TYPE_icommon__discoveryService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__discoveryService(struct soap *soap, const char *URL, icommon__discoveryService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService", p->soap_type() == SOAP_TYPE_icommon__discoveryService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__discoveryService * SOAP_FMAC4 soap_get_icommon__discoveryService(struct soap*, icommon__discoveryService *, const char*, const char*);

inline int soap_read_icommon__discoveryService(struct soap *soap, icommon__discoveryService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__discoveryService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__discoveryService(struct soap *soap, const char *URL, icommon__discoveryService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__discoveryService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__discoveryService(struct soap *soap, icommon__discoveryService *p)
{
	if (::soap_read_icommon__discoveryService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__discoveryService_x005fext_DEFINED
#define SOAP_TYPE_icommon__discoveryService_x005fext_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__discoveryService_x005fext(struct soap*, const char*, int, const icommon__discoveryService_x005fext *, const char*);
SOAP_FMAC3 icommon__discoveryService_x005fext * SOAP_FMAC4 soap_in_icommon__discoveryService_x005fext(struct soap*, const char*, icommon__discoveryService_x005fext *, const char*);
SOAP_FMAC1 icommon__discoveryService_x005fext * SOAP_FMAC2 soap_instantiate_icommon__discoveryService_x005fext(struct soap*, int, const char*, const char*, size_t*);

inline icommon__discoveryService_x005fext * soap_new_icommon__discoveryService_x005fext(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__discoveryService_x005fext(soap, n, NULL, NULL, NULL);
}

inline icommon__discoveryService_x005fext * soap_new_req_icommon__discoveryService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1)
{
	icommon__discoveryService_x005fext *_p = ::soap_new_icommon__discoveryService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
	}
	return _p;
}

inline icommon__discoveryService_x005fext * soap_new_set_icommon__discoveryService_x005fext(
	struct soap *soap,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__serviceSpatialDataResourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource__1,
	enum icommon__spatialDataServiceType SpatialDataServiceType__1,
	char *__item__2)
{
	icommon__discoveryService_x005fext *_p = ::soap_new_icommon__discoveryService_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle__1;
		_p->icommon__service::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__service::ResourceType = ResourceType__1;
		_p->icommon__service::ResourceLocator = ResourceLocator__1;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__service::Keyword = Keyword__1;
		_p->icommon__service::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__service::TemporalReference = TemporalReference__1;
		_p->icommon__service::SpatialResolution = SpatialResolution__1;
		_p->icommon__service::Conformity = Conformity__1;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__service::MetadataDate = MetadataDate__1;
		_p->icommon__service::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__service::CoupledResource = CoupledResource__1;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__discoveryService_x005fext(struct soap *soap, icommon__discoveryService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService_ext", p->soap_type() == SOAP_TYPE_icommon__discoveryService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__discoveryService_x005fext(struct soap *soap, const char *URL, icommon__discoveryService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService_ext", p->soap_type() == SOAP_TYPE_icommon__discoveryService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__discoveryService_x005fext(struct soap *soap, const char *URL, icommon__discoveryService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService_ext", p->soap_type() == SOAP_TYPE_icommon__discoveryService_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__discoveryService_x005fext(struct soap *soap, const char *URL, icommon__discoveryService_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:discoveryService_ext", p->soap_type() == SOAP_TYPE_icommon__discoveryService_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__discoveryService_x005fext * SOAP_FMAC4 soap_get_icommon__discoveryService_x005fext(struct soap*, icommon__discoveryService_x005fext *, const char*, const char*);

inline int soap_read_icommon__discoveryService_x005fext(struct soap *soap, icommon__discoveryService_x005fext *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__discoveryService_x005fext(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__discoveryService_x005fext(struct soap *soap, const char *URL, icommon__discoveryService_x005fext *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__discoveryService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__discoveryService_x005fext(struct soap *soap, icommon__discoveryService_x005fext *p)
{
	if (::soap_read_icommon__discoveryService_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__supportedLanguagesType_DEFINED
#define SOAP_TYPE_icommon__supportedLanguagesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__supportedLanguagesType(struct soap*, const char*, int, const icommon__supportedLanguagesType *, const char*);
SOAP_FMAC3 icommon__supportedLanguagesType * SOAP_FMAC4 soap_in_icommon__supportedLanguagesType(struct soap*, const char*, icommon__supportedLanguagesType *, const char*);
SOAP_FMAC1 icommon__supportedLanguagesType * SOAP_FMAC2 soap_instantiate_icommon__supportedLanguagesType(struct soap*, int, const char*, const char*, size_t*);

inline icommon__supportedLanguagesType * soap_new_icommon__supportedLanguagesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__supportedLanguagesType(soap, n, NULL, NULL, NULL);
}

inline icommon__supportedLanguagesType * soap_new_req_icommon__supportedLanguagesType(
	struct soap *soap,
	icommon__languageElementISO6392B *DefaultLanguage)
{
	icommon__supportedLanguagesType *_p = ::soap_new_icommon__supportedLanguagesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__supportedLanguagesType::DefaultLanguage = DefaultLanguage;
	}
	return _p;
}

inline icommon__supportedLanguagesType * soap_new_set_icommon__supportedLanguagesType(
	struct soap *soap,
	icommon__languageElementISO6392B *DefaultLanguage,
	const std::vector<icommon__languageElementISO6392B *> & SupportedLanguage,
	char *__item__1)
{
	icommon__supportedLanguagesType *_p = ::soap_new_icommon__supportedLanguagesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__supportedLanguagesType::DefaultLanguage = DefaultLanguage;
		_p->icommon__supportedLanguagesType::SupportedLanguage = SupportedLanguage;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__supportedLanguagesType(struct soap *soap, icommon__supportedLanguagesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:supportedLanguagesType", p->soap_type() == SOAP_TYPE_icommon__supportedLanguagesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__supportedLanguagesType(struct soap *soap, const char *URL, icommon__supportedLanguagesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:supportedLanguagesType", p->soap_type() == SOAP_TYPE_icommon__supportedLanguagesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__supportedLanguagesType(struct soap *soap, const char *URL, icommon__supportedLanguagesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:supportedLanguagesType", p->soap_type() == SOAP_TYPE_icommon__supportedLanguagesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__supportedLanguagesType(struct soap *soap, const char *URL, icommon__supportedLanguagesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:supportedLanguagesType", p->soap_type() == SOAP_TYPE_icommon__supportedLanguagesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__supportedLanguagesType * SOAP_FMAC4 soap_get_icommon__supportedLanguagesType(struct soap*, icommon__supportedLanguagesType *, const char*, const char*);

inline int soap_read_icommon__supportedLanguagesType(struct soap *soap, icommon__supportedLanguagesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__supportedLanguagesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__supportedLanguagesType(struct soap *soap, const char *URL, icommon__supportedLanguagesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__supportedLanguagesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__supportedLanguagesType(struct soap *soap, icommon__supportedLanguagesType *p)
{
	if (::soap_read_icommon__supportedLanguagesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__ExtendedCapabilitiesType_DEFINED
#define SOAP_TYPE_icommon__ExtendedCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__ExtendedCapabilitiesType(struct soap*, const char*, int, const icommon__ExtendedCapabilitiesType *, const char*);
SOAP_FMAC3 icommon__ExtendedCapabilitiesType * SOAP_FMAC4 soap_in_icommon__ExtendedCapabilitiesType(struct soap*, const char*, icommon__ExtendedCapabilitiesType *, const char*);
SOAP_FMAC1 icommon__ExtendedCapabilitiesType * SOAP_FMAC2 soap_instantiate_icommon__ExtendedCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline icommon__ExtendedCapabilitiesType * soap_new_icommon__ExtendedCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__ExtendedCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline icommon__ExtendedCapabilitiesType * soap_new_req_icommon__ExtendedCapabilitiesType(
	struct soap *soap)
{
	icommon__ExtendedCapabilitiesType *_p = ::soap_new_icommon__ExtendedCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline icommon__ExtendedCapabilitiesType * soap_new_set_icommon__ExtendedCapabilitiesType(
	struct soap *soap,
	icommon__resourceLocatorType *MetadataUrl,
	icommon__supportedLanguagesType *SupportedLanguages,
	icommon__languageElementISO6392B *ResponseLanguage,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	enum icommon__serviceSpatialDataResourceType *ResourceType,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	std::string *MetadataDate,
	enum icommon__spatialDataServiceType *SpatialDataServiceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	icommon__supportedLanguagesType *SupportedLanguages_,
	icommon__languageElementISO6392B *ResponseLanguage_,
	icommon__resourceLocatorType *MetadataUrl_,
	char *__item__1)
{
	icommon__ExtendedCapabilitiesType *_p = ::soap_new_icommon__ExtendedCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__ExtendedCapabilitiesType::MetadataUrl = MetadataUrl;
		_p->icommon__ExtendedCapabilitiesType::SupportedLanguages = SupportedLanguages;
		_p->icommon__ExtendedCapabilitiesType::ResponseLanguage = ResponseLanguage;
		_p->icommon__ExtendedCapabilitiesType::ResourceLocator = ResourceLocator;
		_p->icommon__ExtendedCapabilitiesType::ResourceType = ResourceType;
		_p->icommon__ExtendedCapabilitiesType::TemporalReference = TemporalReference;
		_p->icommon__ExtendedCapabilitiesType::Conformity = Conformity;
		_p->icommon__ExtendedCapabilitiesType::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__ExtendedCapabilitiesType::MetadataDate = MetadataDate;
		_p->icommon__ExtendedCapabilitiesType::SpatialDataServiceType = SpatialDataServiceType;
		_p->icommon__ExtendedCapabilitiesType::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__ExtendedCapabilitiesType::Keyword = Keyword;
		_p->icommon__ExtendedCapabilitiesType::SupportedLanguages_ = SupportedLanguages_;
		_p->icommon__ExtendedCapabilitiesType::ResponseLanguage_ = ResponseLanguage_;
		_p->icommon__ExtendedCapabilitiesType::MetadataUrl_ = MetadataUrl_;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__ExtendedCapabilitiesType(struct soap *soap, icommon__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_icommon__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__ExtendedCapabilitiesType(struct soap *soap, const char *URL, icommon__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_icommon__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__ExtendedCapabilitiesType(struct soap *soap, const char *URL, icommon__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_icommon__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__ExtendedCapabilitiesType(struct soap *soap, const char *URL, icommon__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_icommon__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__ExtendedCapabilitiesType * SOAP_FMAC4 soap_get_icommon__ExtendedCapabilitiesType(struct soap*, icommon__ExtendedCapabilitiesType *, const char*, const char*);

inline int soap_read_icommon__ExtendedCapabilitiesType(struct soap *soap, icommon__ExtendedCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__ExtendedCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__ExtendedCapabilitiesType(struct soap *soap, const char *URL, icommon__ExtendedCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__ExtendedCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__ExtendedCapabilitiesType(struct soap *soap, icommon__ExtendedCapabilitiesType *p)
{
	if (::soap_read_icommon__ExtendedCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__inspireTheme_DEFINED
#define SOAP_TYPE_icommon__inspireTheme_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__inspireTheme(struct soap*, const char*, int, const icommon__inspireTheme *, const char*);
SOAP_FMAC3 icommon__inspireTheme * SOAP_FMAC4 soap_in_icommon__inspireTheme(struct soap*, const char*, icommon__inspireTheme *, const char*);
SOAP_FMAC1 icommon__inspireTheme * SOAP_FMAC2 soap_instantiate_icommon__inspireTheme(struct soap*, int, const char*, const char*, size_t*);

inline icommon__inspireTheme * soap_new_icommon__inspireTheme(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__inspireTheme(soap, n, NULL, NULL, NULL);
}

inline icommon__inspireTheme * soap_new_req_icommon__inspireTheme(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	const std::string& KeywordValue)
{
	icommon__inspireTheme *_p = ::soap_new_icommon__inspireTheme(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__inspireTheme * soap_new_set_icommon__inspireTheme(
	struct soap *soap,
	icommon__originatingControlledVocabularyGemetInspireThemes *OriginatingControlledVocabulary,
	const std::string& KeywordValue,
	char *__item__1)
{
	icommon__inspireTheme *_p = ::soap_new_icommon__inspireTheme(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__inspireTheme::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__inspireTheme::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__inspireTheme(struct soap *soap, icommon__inspireTheme const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme", p->soap_type() == SOAP_TYPE_icommon__inspireTheme ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__inspireTheme(struct soap *soap, const char *URL, icommon__inspireTheme const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme", p->soap_type() == SOAP_TYPE_icommon__inspireTheme ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__inspireTheme(struct soap *soap, const char *URL, icommon__inspireTheme const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme", p->soap_type() == SOAP_TYPE_icommon__inspireTheme ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__inspireTheme(struct soap *soap, const char *URL, icommon__inspireTheme const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:inspireTheme", p->soap_type() == SOAP_TYPE_icommon__inspireTheme ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__inspireTheme * SOAP_FMAC4 soap_get_icommon__inspireTheme(struct soap*, icommon__inspireTheme *, const char*, const char*);

inline int soap_read_icommon__inspireTheme(struct soap *soap, icommon__inspireTheme *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__inspireTheme(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__inspireTheme(struct soap *soap, const char *URL, icommon__inspireTheme *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__inspireTheme(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__inspireTheme(struct soap *soap, icommon__inspireTheme *p)
{
	if (::soap_read_icommon__inspireTheme(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__uniqueResourceIdentifier_DEFINED
#define SOAP_TYPE_icommon__uniqueResourceIdentifier_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__uniqueResourceIdentifier(struct soap*, const char*, int, const icommon__uniqueResourceIdentifier *, const char*);
SOAP_FMAC3 icommon__uniqueResourceIdentifier * SOAP_FMAC4 soap_in_icommon__uniqueResourceIdentifier(struct soap*, const char*, icommon__uniqueResourceIdentifier *, const char*);
SOAP_FMAC1 icommon__uniqueResourceIdentifier * SOAP_FMAC2 soap_instantiate_icommon__uniqueResourceIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline icommon__uniqueResourceIdentifier * soap_new_icommon__uniqueResourceIdentifier(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__uniqueResourceIdentifier(soap, n, NULL, NULL, NULL);
}

inline icommon__uniqueResourceIdentifier * soap_new_req_icommon__uniqueResourceIdentifier(
	struct soap *soap,
	const std::string& Code)
{
	icommon__uniqueResourceIdentifier *_p = ::soap_new_icommon__uniqueResourceIdentifier(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__uniqueResourceIdentifier::Code = Code;
	}
	return _p;
}

inline icommon__uniqueResourceIdentifier * soap_new_set_icommon__uniqueResourceIdentifier(
	struct soap *soap,
	const std::string& Code,
	char **Namespace,
	char **metadataURL,
	char *__item__1)
{
	icommon__uniqueResourceIdentifier *_p = ::soap_new_icommon__uniqueResourceIdentifier(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__uniqueResourceIdentifier::Code = Code;
		_p->icommon__uniqueResourceIdentifier::Namespace = Namespace;
		_p->icommon__uniqueResourceIdentifier::metadataURL = metadataURL;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__uniqueResourceIdentifier(struct soap *soap, icommon__uniqueResourceIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:uniqueResourceIdentifier", p->soap_type() == SOAP_TYPE_icommon__uniqueResourceIdentifier ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__uniqueResourceIdentifier(struct soap *soap, const char *URL, icommon__uniqueResourceIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:uniqueResourceIdentifier", p->soap_type() == SOAP_TYPE_icommon__uniqueResourceIdentifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__uniqueResourceIdentifier(struct soap *soap, const char *URL, icommon__uniqueResourceIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:uniqueResourceIdentifier", p->soap_type() == SOAP_TYPE_icommon__uniqueResourceIdentifier ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__uniqueResourceIdentifier(struct soap *soap, const char *URL, icommon__uniqueResourceIdentifier const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:uniqueResourceIdentifier", p->soap_type() == SOAP_TYPE_icommon__uniqueResourceIdentifier ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__uniqueResourceIdentifier * SOAP_FMAC4 soap_get_icommon__uniqueResourceIdentifier(struct soap*, icommon__uniqueResourceIdentifier *, const char*, const char*);

inline int soap_read_icommon__uniqueResourceIdentifier(struct soap *soap, icommon__uniqueResourceIdentifier *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__uniqueResourceIdentifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__uniqueResourceIdentifier(struct soap *soap, const char *URL, icommon__uniqueResourceIdentifier *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__uniqueResourceIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__uniqueResourceIdentifier(struct soap *soap, icommon__uniqueResourceIdentifier *p)
{
	if (::soap_read_icommon__uniqueResourceIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__spatialResolution_DEFINED
#define SOAP_TYPE_icommon__spatialResolution_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__spatialResolution(struct soap*, const char*, int, const icommon__spatialResolution *, const char*);
SOAP_FMAC3 icommon__spatialResolution * SOAP_FMAC4 soap_in_icommon__spatialResolution(struct soap*, const char*, icommon__spatialResolution *, const char*);
SOAP_FMAC1 icommon__spatialResolution * SOAP_FMAC2 soap_instantiate_icommon__spatialResolution(struct soap*, int, const char*, const char*, size_t*);

inline icommon__spatialResolution * soap_new_icommon__spatialResolution(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__spatialResolution(soap, n, NULL, NULL, NULL);
}

inline icommon__spatialResolution * soap_new_req_icommon__spatialResolution(
	struct soap *soap)
{
	icommon__spatialResolution *_p = ::soap_new_icommon__spatialResolution(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline icommon__spatialResolution * soap_new_set_icommon__spatialResolution(
	struct soap *soap,
	long *EquivalentScale,
	long *ResolutionDistance,
	std::string *UnitOfMeasure,
	std::string *abstract,
	char *__item__1)
{
	icommon__spatialResolution *_p = ::soap_new_icommon__spatialResolution(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__spatialResolution::EquivalentScale = EquivalentScale;
		_p->icommon__spatialResolution::ResolutionDistance = ResolutionDistance;
		_p->icommon__spatialResolution::UnitOfMeasure = UnitOfMeasure;
		_p->icommon__spatialResolution::abstract = abstract;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__spatialResolution(struct soap *soap, icommon__spatialResolution const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialResolution", p->soap_type() == SOAP_TYPE_icommon__spatialResolution ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__spatialResolution(struct soap *soap, const char *URL, icommon__spatialResolution const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialResolution", p->soap_type() == SOAP_TYPE_icommon__spatialResolution ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__spatialResolution(struct soap *soap, const char *URL, icommon__spatialResolution const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialResolution", p->soap_type() == SOAP_TYPE_icommon__spatialResolution ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__spatialResolution(struct soap *soap, const char *URL, icommon__spatialResolution const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:spatialResolution", p->soap_type() == SOAP_TYPE_icommon__spatialResolution ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__spatialResolution * SOAP_FMAC4 soap_get_icommon__spatialResolution(struct soap*, icommon__spatialResolution *, const char*, const char*);

inline int soap_read_icommon__spatialResolution(struct soap *soap, icommon__spatialResolution *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__spatialResolution(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__spatialResolution(struct soap *soap, const char *URL, icommon__spatialResolution *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__spatialResolution(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__spatialResolution(struct soap *soap, icommon__spatialResolution *p)
{
	if (::soap_read_icommon__spatialResolution(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__geographicBoundingBox_DEFINED
#define SOAP_TYPE_icommon__geographicBoundingBox_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__geographicBoundingBox(struct soap*, const char*, int, const icommon__geographicBoundingBox *, const char*);
SOAP_FMAC3 icommon__geographicBoundingBox * SOAP_FMAC4 soap_in_icommon__geographicBoundingBox(struct soap*, const char*, icommon__geographicBoundingBox *, const char*);
SOAP_FMAC1 icommon__geographicBoundingBox * SOAP_FMAC2 soap_instantiate_icommon__geographicBoundingBox(struct soap*, int, const char*, const char*, size_t*);

inline icommon__geographicBoundingBox * soap_new_icommon__geographicBoundingBox(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__geographicBoundingBox(soap, n, NULL, NULL, NULL);
}

inline icommon__geographicBoundingBox * soap_new_req_icommon__geographicBoundingBox(
	struct soap *soap,
	const std::string& East,
	const std::string& West,
	const std::string& North,
	const std::string& South)
{
	icommon__geographicBoundingBox *_p = ::soap_new_icommon__geographicBoundingBox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__geographicBoundingBox::East = East;
		_p->icommon__geographicBoundingBox::West = West;
		_p->icommon__geographicBoundingBox::North = North;
		_p->icommon__geographicBoundingBox::South = South;
	}
	return _p;
}

inline icommon__geographicBoundingBox * soap_new_set_icommon__geographicBoundingBox(
	struct soap *soap,
	const std::string& East,
	const std::string& West,
	const std::string& North,
	const std::string& South,
	char *__item__1)
{
	icommon__geographicBoundingBox *_p = ::soap_new_icommon__geographicBoundingBox(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__geographicBoundingBox::East = East;
		_p->icommon__geographicBoundingBox::West = West;
		_p->icommon__geographicBoundingBox::North = North;
		_p->icommon__geographicBoundingBox::South = South;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__geographicBoundingBox(struct soap *soap, icommon__geographicBoundingBox const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geographicBoundingBox", p->soap_type() == SOAP_TYPE_icommon__geographicBoundingBox ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__geographicBoundingBox(struct soap *soap, const char *URL, icommon__geographicBoundingBox const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geographicBoundingBox", p->soap_type() == SOAP_TYPE_icommon__geographicBoundingBox ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__geographicBoundingBox(struct soap *soap, const char *URL, icommon__geographicBoundingBox const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geographicBoundingBox", p->soap_type() == SOAP_TYPE_icommon__geographicBoundingBox ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__geographicBoundingBox(struct soap *soap, const char *URL, icommon__geographicBoundingBox const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:geographicBoundingBox", p->soap_type() == SOAP_TYPE_icommon__geographicBoundingBox ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__geographicBoundingBox * SOAP_FMAC4 soap_get_icommon__geographicBoundingBox(struct soap*, icommon__geographicBoundingBox *, const char*, const char*);

inline int soap_read_icommon__geographicBoundingBox(struct soap *soap, icommon__geographicBoundingBox *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__geographicBoundingBox(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__geographicBoundingBox(struct soap *soap, const char *URL, icommon__geographicBoundingBox *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__geographicBoundingBox(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__geographicBoundingBox(struct soap *soap, icommon__geographicBoundingBox *p)
{
	if (::soap_read_icommon__geographicBoundingBox(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__languageElementIETF_DEFINED
#define SOAP_TYPE_icommon__languageElementIETF_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__languageElementIETF(struct soap*, const char*, int, const icommon__languageElementIETF *, const char*);
SOAP_FMAC3 icommon__languageElementIETF * SOAP_FMAC4 soap_in_icommon__languageElementIETF(struct soap*, const char*, icommon__languageElementIETF *, const char*);
SOAP_FMAC1 icommon__languageElementIETF * SOAP_FMAC2 soap_instantiate_icommon__languageElementIETF(struct soap*, int, const char*, const char*, size_t*);

inline icommon__languageElementIETF * soap_new_icommon__languageElementIETF(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__languageElementIETF(soap, n, NULL, NULL, NULL);
}

inline icommon__languageElementIETF * soap_new_req_icommon__languageElementIETF(
	struct soap *soap,
	enum icommon__euLanguageIETF Language)
{
	icommon__languageElementIETF *_p = ::soap_new_icommon__languageElementIETF(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageElementIETF::Language = Language;
	}
	return _p;
}

inline icommon__languageElementIETF * soap_new_set_icommon__languageElementIETF(
	struct soap *soap,
	enum icommon__euLanguageIETF Language,
	char *__item__1)
{
	icommon__languageElementIETF *_p = ::soap_new_icommon__languageElementIETF(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageElementIETF::Language = Language;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__languageElementIETF(struct soap *soap, icommon__languageElementIETF const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementIETF", p->soap_type() == SOAP_TYPE_icommon__languageElementIETF ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__languageElementIETF(struct soap *soap, const char *URL, icommon__languageElementIETF const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementIETF", p->soap_type() == SOAP_TYPE_icommon__languageElementIETF ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__languageElementIETF(struct soap *soap, const char *URL, icommon__languageElementIETF const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementIETF", p->soap_type() == SOAP_TYPE_icommon__languageElementIETF ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__languageElementIETF(struct soap *soap, const char *URL, icommon__languageElementIETF const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementIETF", p->soap_type() == SOAP_TYPE_icommon__languageElementIETF ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__languageElementIETF * SOAP_FMAC4 soap_get_icommon__languageElementIETF(struct soap*, icommon__languageElementIETF *, const char*, const char*);

inline int soap_read_icommon__languageElementIETF(struct soap *soap, icommon__languageElementIETF *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__languageElementIETF(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__languageElementIETF(struct soap *soap, const char *URL, icommon__languageElementIETF *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__languageElementIETF(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__languageElementIETF(struct soap *soap, icommon__languageElementIETF *p)
{
	if (::soap_read_icommon__languageElementIETF(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__languageElementISO6392B_DEFINED
#define SOAP_TYPE_icommon__languageElementISO6392B_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__languageElementISO6392B(struct soap*, const char*, int, const icommon__languageElementISO6392B *, const char*);
SOAP_FMAC3 icommon__languageElementISO6392B * SOAP_FMAC4 soap_in_icommon__languageElementISO6392B(struct soap*, const char*, icommon__languageElementISO6392B *, const char*);
SOAP_FMAC1 icommon__languageElementISO6392B * SOAP_FMAC2 soap_instantiate_icommon__languageElementISO6392B(struct soap*, int, const char*, const char*, size_t*);

inline icommon__languageElementISO6392B * soap_new_icommon__languageElementISO6392B(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__languageElementISO6392B(soap, n, NULL, NULL, NULL);
}

inline icommon__languageElementISO6392B * soap_new_req_icommon__languageElementISO6392B(
	struct soap *soap,
	enum icommon__euLanguageISO6392B Language)
{
	icommon__languageElementISO6392B *_p = ::soap_new_icommon__languageElementISO6392B(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageElementISO6392B::Language = Language;
	}
	return _p;
}

inline icommon__languageElementISO6392B * soap_new_set_icommon__languageElementISO6392B(
	struct soap *soap,
	enum icommon__euLanguageISO6392B Language,
	char *__item__1)
{
	icommon__languageElementISO6392B *_p = ::soap_new_icommon__languageElementISO6392B(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageElementISO6392B::Language = Language;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__languageElementISO6392B(struct soap *soap, icommon__languageElementISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageElementISO6392B ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__languageElementISO6392B(struct soap *soap, const char *URL, icommon__languageElementISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageElementISO6392B ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__languageElementISO6392B(struct soap *soap, const char *URL, icommon__languageElementISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageElementISO6392B ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__languageElementISO6392B(struct soap *soap, const char *URL, icommon__languageElementISO6392B const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElementISO6392B", p->soap_type() == SOAP_TYPE_icommon__languageElementISO6392B ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__languageElementISO6392B * SOAP_FMAC4 soap_get_icommon__languageElementISO6392B(struct soap*, icommon__languageElementISO6392B *, const char*, const char*);

inline int soap_read_icommon__languageElementISO6392B(struct soap *soap, icommon__languageElementISO6392B *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__languageElementISO6392B(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__languageElementISO6392B(struct soap *soap, const char *URL, icommon__languageElementISO6392B *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__languageElementISO6392B(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__languageElementISO6392B(struct soap *soap, icommon__languageElementISO6392B *p)
{
	if (::soap_read_icommon__languageElementISO6392B(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__languageElement_DEFINED
#define SOAP_TYPE_icommon__languageElement_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__languageElement(struct soap*, const char*, int, const icommon__languageElement *, const char*);
SOAP_FMAC3 icommon__languageElement * SOAP_FMAC4 soap_in_icommon__languageElement(struct soap*, const char*, icommon__languageElement *, const char*);
SOAP_FMAC1 icommon__languageElement * SOAP_FMAC2 soap_instantiate_icommon__languageElement(struct soap*, int, const char*, const char*, size_t*);

inline icommon__languageElement * soap_new_icommon__languageElement(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__languageElement(soap, n, NULL, NULL, NULL);
}

inline icommon__languageElement * soap_new_req_icommon__languageElement(
	struct soap *soap,
	const std::string& Language)
{
	icommon__languageElement *_p = ::soap_new_icommon__languageElement(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageElement::Language = Language;
	}
	return _p;
}

inline icommon__languageElement * soap_new_set_icommon__languageElement(
	struct soap *soap,
	const std::string& Language,
	char *__item__1)
{
	icommon__languageElement *_p = ::soap_new_icommon__languageElement(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__languageElement::Language = Language;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__languageElement(struct soap *soap, icommon__languageElement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElement", p->soap_type() == SOAP_TYPE_icommon__languageElement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__languageElement(struct soap *soap, const char *URL, icommon__languageElement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElement", p->soap_type() == SOAP_TYPE_icommon__languageElement ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__languageElement(struct soap *soap, const char *URL, icommon__languageElement const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElement", p->soap_type() == SOAP_TYPE_icommon__languageElement ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__languageElement(struct soap *soap, const char *URL, icommon__languageElement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:languageElement", p->soap_type() == SOAP_TYPE_icommon__languageElement ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__languageElement * SOAP_FMAC4 soap_get_icommon__languageElement(struct soap*, icommon__languageElement *, const char*, const char*);

inline int soap_read_icommon__languageElement(struct soap *soap, icommon__languageElement *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__languageElement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__languageElement(struct soap *soap, const char *URL, icommon__languageElement *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__languageElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__languageElement(struct soap *soap, icommon__languageElement *p)
{
	if (::soap_read_icommon__languageElement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resourceLocatorType_DEFINED
#define SOAP_TYPE_icommon__resourceLocatorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resourceLocatorType(struct soap*, const char*, int, const icommon__resourceLocatorType *, const char*);
SOAP_FMAC3 icommon__resourceLocatorType * SOAP_FMAC4 soap_in_icommon__resourceLocatorType(struct soap*, const char*, icommon__resourceLocatorType *, const char*);
SOAP_FMAC1 icommon__resourceLocatorType * SOAP_FMAC2 soap_instantiate_icommon__resourceLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resourceLocatorType * soap_new_icommon__resourceLocatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resourceLocatorType(soap, n, NULL, NULL, NULL);
}

inline icommon__resourceLocatorType * soap_new_req_icommon__resourceLocatorType(
	struct soap *soap,
	char *URL)
{
	icommon__resourceLocatorType *_p = ::soap_new_icommon__resourceLocatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resourceLocatorType::URL = URL;
	}
	return _p;
}

inline icommon__resourceLocatorType * soap_new_set_icommon__resourceLocatorType(
	struct soap *soap,
	char *URL,
	const std::vector<enum icommon__mediaType> & MediaType,
	char *__item__1)
{
	icommon__resourceLocatorType *_p = ::soap_new_icommon__resourceLocatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resourceLocatorType::URL = URL;
		_p->icommon__resourceLocatorType::MediaType = MediaType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resourceLocatorType(struct soap *soap, icommon__resourceLocatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceLocatorType", p->soap_type() == SOAP_TYPE_icommon__resourceLocatorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resourceLocatorType(struct soap *soap, const char *URL, icommon__resourceLocatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceLocatorType", p->soap_type() == SOAP_TYPE_icommon__resourceLocatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resourceLocatorType(struct soap *soap, const char *URL, icommon__resourceLocatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceLocatorType", p->soap_type() == SOAP_TYPE_icommon__resourceLocatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resourceLocatorType(struct soap *soap, const char *URL, icommon__resourceLocatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resourceLocatorType", p->soap_type() == SOAP_TYPE_icommon__resourceLocatorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resourceLocatorType * SOAP_FMAC4 soap_get_icommon__resourceLocatorType(struct soap*, icommon__resourceLocatorType *, const char*, const char*);

inline int soap_read_icommon__resourceLocatorType(struct soap *soap, icommon__resourceLocatorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resourceLocatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resourceLocatorType(struct soap *soap, const char *URL, icommon__resourceLocatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resourceLocatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resourceLocatorType(struct soap *soap, icommon__resourceLocatorType *p)
{
	if (::soap_read_icommon__resourceLocatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__classificationOfSpatialDataService_DEFINED
#define SOAP_TYPE_icommon__classificationOfSpatialDataService_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__classificationOfSpatialDataService(struct soap*, const char*, int, const icommon__classificationOfSpatialDataService *, const char*);
SOAP_FMAC3 icommon__classificationOfSpatialDataService * SOAP_FMAC4 soap_in_icommon__classificationOfSpatialDataService(struct soap*, const char*, icommon__classificationOfSpatialDataService *, const char*);
SOAP_FMAC1 icommon__classificationOfSpatialDataService * SOAP_FMAC2 soap_instantiate_icommon__classificationOfSpatialDataService(struct soap*, int, const char*, const char*, size_t*);

inline icommon__classificationOfSpatialDataService * soap_new_icommon__classificationOfSpatialDataService(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__classificationOfSpatialDataService(soap, n, NULL, NULL, NULL);
}

inline icommon__classificationOfSpatialDataService * soap_new_req_icommon__classificationOfSpatialDataService(
	struct soap *soap,
	enum _icommon__classificationOfSpatialDataService_KeywordValue KeywordValue)
{
	icommon__classificationOfSpatialDataService *_p = ::soap_new_icommon__classificationOfSpatialDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__classificationOfSpatialDataService::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__classificationOfSpatialDataService * soap_new_set_icommon__classificationOfSpatialDataService(
	struct soap *soap,
	const std::vector<icommon__originatingControlledVocabulary *> & OriginatingControlledVocabulary,
	enum _icommon__classificationOfSpatialDataService_KeywordValue KeywordValue,
	char *__item__1)
{
	icommon__classificationOfSpatialDataService *_p = ::soap_new_icommon__classificationOfSpatialDataService(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__classificationOfSpatialDataService::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__classificationOfSpatialDataService::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__classificationOfSpatialDataService(struct soap *soap, icommon__classificationOfSpatialDataService const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:classificationOfSpatialDataService", p->soap_type() == SOAP_TYPE_icommon__classificationOfSpatialDataService ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__classificationOfSpatialDataService(struct soap *soap, const char *URL, icommon__classificationOfSpatialDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:classificationOfSpatialDataService", p->soap_type() == SOAP_TYPE_icommon__classificationOfSpatialDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__classificationOfSpatialDataService(struct soap *soap, const char *URL, icommon__classificationOfSpatialDataService const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:classificationOfSpatialDataService", p->soap_type() == SOAP_TYPE_icommon__classificationOfSpatialDataService ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__classificationOfSpatialDataService(struct soap *soap, const char *URL, icommon__classificationOfSpatialDataService const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:classificationOfSpatialDataService", p->soap_type() == SOAP_TYPE_icommon__classificationOfSpatialDataService ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__classificationOfSpatialDataService * SOAP_FMAC4 soap_get_icommon__classificationOfSpatialDataService(struct soap*, icommon__classificationOfSpatialDataService *, const char*, const char*);

inline int soap_read_icommon__classificationOfSpatialDataService(struct soap *soap, icommon__classificationOfSpatialDataService *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__classificationOfSpatialDataService(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__classificationOfSpatialDataService(struct soap *soap, const char *URL, icommon__classificationOfSpatialDataService *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__classificationOfSpatialDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__classificationOfSpatialDataService(struct soap *soap, icommon__classificationOfSpatialDataService *p)
{
	if (::soap_read_icommon__classificationOfSpatialDataService(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__keyword_DEFINED
#define SOAP_TYPE_icommon__keyword_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__keyword(struct soap*, const char*, int, const icommon__keyword *, const char*);
SOAP_FMAC3 icommon__keyword * SOAP_FMAC4 soap_in_icommon__keyword(struct soap*, const char*, icommon__keyword *, const char*);
SOAP_FMAC1 icommon__keyword * SOAP_FMAC2 soap_instantiate_icommon__keyword(struct soap*, int, const char*, const char*, size_t*);

inline icommon__keyword * soap_new_icommon__keyword(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__keyword(soap, n, NULL, NULL, NULL);
}

inline icommon__keyword * soap_new_req_icommon__keyword(
	struct soap *soap,
	const std::string& KeywordValue)
{
	icommon__keyword *_p = ::soap_new_icommon__keyword(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__keyword::KeywordValue = KeywordValue;
	}
	return _p;
}

inline icommon__keyword * soap_new_set_icommon__keyword(
	struct soap *soap,
	icommon__originatingControlledVocabulary *OriginatingControlledVocabulary,
	const std::string& KeywordValue,
	char *__item__1)
{
	icommon__keyword *_p = ::soap_new_icommon__keyword(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__keyword::OriginatingControlledVocabulary = OriginatingControlledVocabulary;
		_p->icommon__keyword::KeywordValue = KeywordValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__keyword(struct soap *soap, icommon__keyword const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keyword", p->soap_type() == SOAP_TYPE_icommon__keyword ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__keyword(struct soap *soap, const char *URL, icommon__keyword const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keyword", p->soap_type() == SOAP_TYPE_icommon__keyword ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__keyword(struct soap *soap, const char *URL, icommon__keyword const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keyword", p->soap_type() == SOAP_TYPE_icommon__keyword ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__keyword(struct soap *soap, const char *URL, icommon__keyword const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:keyword", p->soap_type() == SOAP_TYPE_icommon__keyword ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__keyword * SOAP_FMAC4 soap_get_icommon__keyword(struct soap*, icommon__keyword *, const char*, const char*);

inline int soap_read_icommon__keyword(struct soap *soap, icommon__keyword *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__keyword(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__keyword(struct soap *soap, const char *URL, icommon__keyword *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__keyword(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__keyword(struct soap *soap, icommon__keyword *p)
{
	if (::soap_read_icommon__keyword(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__temporalExtent_DEFINED
#define SOAP_TYPE_icommon__temporalExtent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__temporalExtent(struct soap*, const char*, int, const icommon__temporalExtent *, const char*);
SOAP_FMAC3 icommon__temporalExtent * SOAP_FMAC4 soap_in_icommon__temporalExtent(struct soap*, const char*, icommon__temporalExtent *, const char*);
SOAP_FMAC1 icommon__temporalExtent * SOAP_FMAC2 soap_instantiate_icommon__temporalExtent(struct soap*, int, const char*, const char*, size_t*);

inline icommon__temporalExtent * soap_new_icommon__temporalExtent(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__temporalExtent(soap, n, NULL, NULL, NULL);
}

inline icommon__temporalExtent * soap_new_req_icommon__temporalExtent(
	struct soap *soap,
	int __sizeTemporalExtentElement,
	__icommon__union_temporalExtent *__union_temporalExtent)
{
	icommon__temporalExtent *_p = ::soap_new_icommon__temporalExtent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__temporalExtent::__sizeTemporalExtentElement = __sizeTemporalExtentElement;
		_p->icommon__temporalExtent::__union_temporalExtent = __union_temporalExtent;
	}
	return _p;
}

inline icommon__temporalExtent * soap_new_set_icommon__temporalExtent(
	struct soap *soap,
	int __sizeTemporalExtentElement,
	__icommon__union_temporalExtent *__union_temporalExtent,
	char *__item__1)
{
	icommon__temporalExtent *_p = ::soap_new_icommon__temporalExtent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__temporalExtent::__sizeTemporalExtentElement = __sizeTemporalExtentElement;
		_p->icommon__temporalExtent::__union_temporalExtent = __union_temporalExtent;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__temporalExtent(struct soap *soap, icommon__temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalExtent", p->soap_type() == SOAP_TYPE_icommon__temporalExtent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__temporalExtent(struct soap *soap, const char *URL, icommon__temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalExtent", p->soap_type() == SOAP_TYPE_icommon__temporalExtent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__temporalExtent(struct soap *soap, const char *URL, icommon__temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalExtent", p->soap_type() == SOAP_TYPE_icommon__temporalExtent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__temporalExtent(struct soap *soap, const char *URL, icommon__temporalExtent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalExtent", p->soap_type() == SOAP_TYPE_icommon__temporalExtent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__temporalExtent * SOAP_FMAC4 soap_get_icommon__temporalExtent(struct soap*, icommon__temporalExtent *, const char*, const char*);

inline int soap_read_icommon__temporalExtent(struct soap *soap, icommon__temporalExtent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__temporalExtent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__temporalExtent(struct soap *soap, const char *URL, icommon__temporalExtent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__temporalExtent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__temporalExtent(struct soap *soap, icommon__temporalExtent *p)
{
	if (::soap_read_icommon__temporalExtent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__temporalReference_DEFINED
#define SOAP_TYPE_icommon__temporalReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__temporalReference(struct soap*, const char*, int, const icommon__temporalReference *, const char*);
SOAP_FMAC3 icommon__temporalReference * SOAP_FMAC4 soap_in_icommon__temporalReference(struct soap*, const char*, icommon__temporalReference *, const char*);
SOAP_FMAC1 icommon__temporalReference * SOAP_FMAC2 soap_instantiate_icommon__temporalReference(struct soap*, int, const char*, const char*, size_t*);

inline icommon__temporalReference * soap_new_icommon__temporalReference(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__temporalReference(soap, n, NULL, NULL, NULL);
}

inline icommon__temporalReference * soap_new_req_icommon__temporalReference(
	struct soap *soap)
{
	icommon__temporalReference *_p = ::soap_new_icommon__temporalReference(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline icommon__temporalReference * soap_new_set_icommon__temporalReference(
	struct soap *soap,
	std::string *DateOfCreation,
	std::string *DateOfLastRevision,
	const std::vector<std::string> & DateOfPublication,
	const std::vector<icommon__temporalExtent *> & TemporalExtent,
	char *__item__1)
{
	icommon__temporalReference *_p = ::soap_new_icommon__temporalReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__temporalReference::DateOfCreation = DateOfCreation;
		_p->icommon__temporalReference::DateOfLastRevision = DateOfLastRevision;
		_p->icommon__temporalReference::DateOfPublication = DateOfPublication;
		_p->icommon__temporalReference::TemporalExtent = TemporalExtent;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__temporalReference(struct soap *soap, icommon__temporalReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalReference", p->soap_type() == SOAP_TYPE_icommon__temporalReference ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__temporalReference(struct soap *soap, const char *URL, icommon__temporalReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalReference", p->soap_type() == SOAP_TYPE_icommon__temporalReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__temporalReference(struct soap *soap, const char *URL, icommon__temporalReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalReference", p->soap_type() == SOAP_TYPE_icommon__temporalReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__temporalReference(struct soap *soap, const char *URL, icommon__temporalReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:temporalReference", p->soap_type() == SOAP_TYPE_icommon__temporalReference ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__temporalReference * SOAP_FMAC4 soap_get_icommon__temporalReference(struct soap*, icommon__temporalReference *, const char*, const char*);

inline int soap_read_icommon__temporalReference(struct soap *soap, icommon__temporalReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__temporalReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__temporalReference(struct soap *soap, const char *URL, icommon__temporalReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__temporalReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__temporalReference(struct soap *soap, icommon__temporalReference *p)
{
	if (::soap_read_icommon__temporalReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__originatingControlledVocabularyMD_DEFINED
#define SOAP_TYPE_icommon__originatingControlledVocabularyMD_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__originatingControlledVocabularyMD(struct soap*, const char*, int, const icommon__originatingControlledVocabularyMD *, const char*);
SOAP_FMAC3 icommon__originatingControlledVocabularyMD * SOAP_FMAC4 soap_in_icommon__originatingControlledVocabularyMD(struct soap*, const char*, icommon__originatingControlledVocabularyMD *, const char*);
SOAP_FMAC1 icommon__originatingControlledVocabularyMD * SOAP_FMAC2 soap_instantiate_icommon__originatingControlledVocabularyMD(struct soap*, int, const char*, const char*, size_t*);

inline icommon__originatingControlledVocabularyMD * soap_new_icommon__originatingControlledVocabularyMD(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__originatingControlledVocabularyMD(soap, n, NULL, NULL, NULL);
}

inline icommon__originatingControlledVocabularyMD * soap_new_req_icommon__originatingControlledVocabularyMD(
	struct soap *soap,
	enum _icommon__originatingControlledVocabularyMD_Title Title,
	const union _icommon__union_originatingControlledVocabularyMD& union_originatingControlledVocabularyMD)
{
	icommon__originatingControlledVocabularyMD *_p = ::soap_new_icommon__originatingControlledVocabularyMD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__originatingControlledVocabularyMD::Title = Title;
		_p->icommon__originatingControlledVocabularyMD::union_originatingControlledVocabularyMD = union_originatingControlledVocabularyMD;
	}
	return _p;
}

inline icommon__originatingControlledVocabularyMD * soap_new_set_icommon__originatingControlledVocabularyMD(
	struct soap *soap,
	enum _icommon__originatingControlledVocabularyMD_Title Title,
	int __union_originatingControlledVocabularyMD,
	const union _icommon__union_originatingControlledVocabularyMD& union_originatingControlledVocabularyMD,
	char *__item__1)
{
	icommon__originatingControlledVocabularyMD *_p = ::soap_new_icommon__originatingControlledVocabularyMD(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__originatingControlledVocabularyMD::Title = Title;
		_p->icommon__originatingControlledVocabularyMD::__union_originatingControlledVocabularyMD = __union_originatingControlledVocabularyMD;
		_p->icommon__originatingControlledVocabularyMD::union_originatingControlledVocabularyMD = union_originatingControlledVocabularyMD;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__originatingControlledVocabularyMD(struct soap *soap, icommon__originatingControlledVocabularyMD const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyMD", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyMD ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__originatingControlledVocabularyMD(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyMD const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyMD", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyMD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__originatingControlledVocabularyMD(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyMD const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyMD", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyMD ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__originatingControlledVocabularyMD(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyMD const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyMD", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyMD ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__originatingControlledVocabularyMD * SOAP_FMAC4 soap_get_icommon__originatingControlledVocabularyMD(struct soap*, icommon__originatingControlledVocabularyMD *, const char*, const char*);

inline int soap_read_icommon__originatingControlledVocabularyMD(struct soap *soap, icommon__originatingControlledVocabularyMD *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__originatingControlledVocabularyMD(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__originatingControlledVocabularyMD(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyMD *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__originatingControlledVocabularyMD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__originatingControlledVocabularyMD(struct soap *soap, icommon__originatingControlledVocabularyMD *p)
{
	if (::soap_read_icommon__originatingControlledVocabularyMD(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__originatingControlledVocabularyGemetInspireThemes_DEFINED
#define SOAP_TYPE_icommon__originatingControlledVocabularyGemetInspireThemes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, const char*, int, const icommon__originatingControlledVocabularyGemetInspireThemes *, const char*);
SOAP_FMAC3 icommon__originatingControlledVocabularyGemetInspireThemes * SOAP_FMAC4 soap_in_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, const char*, icommon__originatingControlledVocabularyGemetInspireThemes *, const char*);
SOAP_FMAC1 icommon__originatingControlledVocabularyGemetInspireThemes * SOAP_FMAC2 soap_instantiate_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, int, const char*, const char*, size_t*);

inline icommon__originatingControlledVocabularyGemetInspireThemes * soap_new_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__originatingControlledVocabularyGemetInspireThemes(soap, n, NULL, NULL, NULL);
}

inline icommon__originatingControlledVocabularyGemetInspireThemes * soap_new_req_icommon__originatingControlledVocabularyGemetInspireThemes(
	struct soap *soap,
	enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title Title,
	const union _icommon__union_originatingControlledVocabularyGemetInspireThemes& union_originatingControlledVocabularyGemetInspireThemes)
{
	icommon__originatingControlledVocabularyGemetInspireThemes *_p = ::soap_new_icommon__originatingControlledVocabularyGemetInspireThemes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__originatingControlledVocabularyGemetInspireThemes::Title = Title;
		_p->icommon__originatingControlledVocabularyGemetInspireThemes::union_originatingControlledVocabularyGemetInspireThemes = union_originatingControlledVocabularyGemetInspireThemes;
	}
	return _p;
}

inline icommon__originatingControlledVocabularyGemetInspireThemes * soap_new_set_icommon__originatingControlledVocabularyGemetInspireThemes(
	struct soap *soap,
	enum _icommon__originatingControlledVocabularyGemetInspireThemes_Title Title,
	int __union_originatingControlledVocabularyGemetInspireThemes,
	const union _icommon__union_originatingControlledVocabularyGemetInspireThemes& union_originatingControlledVocabularyGemetInspireThemes,
	char *__item__1)
{
	icommon__originatingControlledVocabularyGemetInspireThemes *_p = ::soap_new_icommon__originatingControlledVocabularyGemetInspireThemes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__originatingControlledVocabularyGemetInspireThemes::Title = Title;
		_p->icommon__originatingControlledVocabularyGemetInspireThemes::__union_originatingControlledVocabularyGemetInspireThemes = __union_originatingControlledVocabularyGemetInspireThemes;
		_p->icommon__originatingControlledVocabularyGemetInspireThemes::union_originatingControlledVocabularyGemetInspireThemes = union_originatingControlledVocabularyGemetInspireThemes;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, icommon__originatingControlledVocabularyGemetInspireThemes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyGemetInspireThemes", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyGemetInspireThemes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyGemetInspireThemes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyGemetInspireThemes", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyGemetInspireThemes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyGemetInspireThemes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyGemetInspireThemes", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyGemetInspireThemes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyGemetInspireThemes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabularyGemetInspireThemes", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabularyGemetInspireThemes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__originatingControlledVocabularyGemetInspireThemes * SOAP_FMAC4 soap_get_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, icommon__originatingControlledVocabularyGemetInspireThemes *, const char*, const char*);

inline int soap_read_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, icommon__originatingControlledVocabularyGemetInspireThemes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__originatingControlledVocabularyGemetInspireThemes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, const char *URL, icommon__originatingControlledVocabularyGemetInspireThemes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__originatingControlledVocabularyGemetInspireThemes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__originatingControlledVocabularyGemetInspireThemes(struct soap *soap, icommon__originatingControlledVocabularyGemetInspireThemes *p)
{
	if (::soap_read_icommon__originatingControlledVocabularyGemetInspireThemes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__originatingControlledVocabulary_DEFINED
#define SOAP_TYPE_icommon__originatingControlledVocabulary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__originatingControlledVocabulary(struct soap*, const char*, int, const icommon__originatingControlledVocabulary *, const char*);
SOAP_FMAC3 icommon__originatingControlledVocabulary * SOAP_FMAC4 soap_in_icommon__originatingControlledVocabulary(struct soap*, const char*, icommon__originatingControlledVocabulary *, const char*);
SOAP_FMAC1 icommon__originatingControlledVocabulary * SOAP_FMAC2 soap_instantiate_icommon__originatingControlledVocabulary(struct soap*, int, const char*, const char*, size_t*);

inline icommon__originatingControlledVocabulary * soap_new_icommon__originatingControlledVocabulary(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__originatingControlledVocabulary(soap, n, NULL, NULL, NULL);
}

inline icommon__originatingControlledVocabulary * soap_new_req_icommon__originatingControlledVocabulary(
	struct soap *soap,
	const std::string& Title,
	const union _icommon__union_originatingControlledVocabulary& union_originatingControlledVocabulary)
{
	icommon__originatingControlledVocabulary *_p = ::soap_new_icommon__originatingControlledVocabulary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__originatingControlledVocabulary::Title = Title;
		_p->icommon__originatingControlledVocabulary::union_originatingControlledVocabulary = union_originatingControlledVocabulary;
	}
	return _p;
}

inline icommon__originatingControlledVocabulary * soap_new_set_icommon__originatingControlledVocabulary(
	struct soap *soap,
	const std::string& Title,
	int __union_originatingControlledVocabulary,
	const union _icommon__union_originatingControlledVocabulary& union_originatingControlledVocabulary,
	const std::vector<char *> & URI,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	char *__item__1)
{
	icommon__originatingControlledVocabulary *_p = ::soap_new_icommon__originatingControlledVocabulary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__originatingControlledVocabulary::Title = Title;
		_p->icommon__originatingControlledVocabulary::__union_originatingControlledVocabulary = __union_originatingControlledVocabulary;
		_p->icommon__originatingControlledVocabulary::union_originatingControlledVocabulary = union_originatingControlledVocabulary;
		_p->icommon__originatingControlledVocabulary::URI = URI;
		_p->icommon__originatingControlledVocabulary::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__originatingControlledVocabulary(struct soap *soap, icommon__originatingControlledVocabulary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabulary", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabulary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__originatingControlledVocabulary(struct soap *soap, const char *URL, icommon__originatingControlledVocabulary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabulary", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabulary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__originatingControlledVocabulary(struct soap *soap, const char *URL, icommon__originatingControlledVocabulary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabulary", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabulary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__originatingControlledVocabulary(struct soap *soap, const char *URL, icommon__originatingControlledVocabulary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:originatingControlledVocabulary", p->soap_type() == SOAP_TYPE_icommon__originatingControlledVocabulary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__originatingControlledVocabulary * SOAP_FMAC4 soap_get_icommon__originatingControlledVocabulary(struct soap*, icommon__originatingControlledVocabulary *, const char*, const char*);

inline int soap_read_icommon__originatingControlledVocabulary(struct soap *soap, icommon__originatingControlledVocabulary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__originatingControlledVocabulary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__originatingControlledVocabulary(struct soap *soap, const char *URL, icommon__originatingControlledVocabulary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__originatingControlledVocabulary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__originatingControlledVocabulary(struct soap *soap, icommon__originatingControlledVocabulary *p)
{
	if (::soap_read_icommon__originatingControlledVocabulary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__conformity_DEFINED
#define SOAP_TYPE_icommon__conformity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__conformity(struct soap*, const char*, int, const icommon__conformity *, const char*);
SOAP_FMAC3 icommon__conformity * SOAP_FMAC4 soap_in_icommon__conformity(struct soap*, const char*, icommon__conformity *, const char*);
SOAP_FMAC1 icommon__conformity * SOAP_FMAC2 soap_instantiate_icommon__conformity(struct soap*, int, const char*, const char*, size_t*);

inline icommon__conformity * soap_new_icommon__conformity(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__conformity(soap, n, NULL, NULL, NULL);
}

inline icommon__conformity * soap_new_req_icommon__conformity(
	struct soap *soap,
	icommon__citationConformity *Specification,
	enum icommon__degreeOfConformity Degree)
{
	icommon__conformity *_p = ::soap_new_icommon__conformity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__conformity::Specification = Specification;
		_p->icommon__conformity::Degree = Degree;
	}
	return _p;
}

inline icommon__conformity * soap_new_set_icommon__conformity(
	struct soap *soap,
	icommon__citationConformity *Specification,
	enum icommon__degreeOfConformity Degree,
	char *__item__1)
{
	icommon__conformity *_p = ::soap_new_icommon__conformity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__conformity::Specification = Specification;
		_p->icommon__conformity::Degree = Degree;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__conformity(struct soap *soap, icommon__conformity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:conformity", p->soap_type() == SOAP_TYPE_icommon__conformity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__conformity(struct soap *soap, const char *URL, icommon__conformity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:conformity", p->soap_type() == SOAP_TYPE_icommon__conformity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__conformity(struct soap *soap, const char *URL, icommon__conformity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:conformity", p->soap_type() == SOAP_TYPE_icommon__conformity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__conformity(struct soap *soap, const char *URL, icommon__conformity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:conformity", p->soap_type() == SOAP_TYPE_icommon__conformity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__conformity * SOAP_FMAC4 soap_get_icommon__conformity(struct soap*, icommon__conformity *, const char*, const char*);

inline int soap_read_icommon__conformity(struct soap *soap, icommon__conformity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__conformity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__conformity(struct soap *soap, const char *URL, icommon__conformity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__conformity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__conformity(struct soap *soap, icommon__conformity *p)
{
	if (::soap_read_icommon__conformity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citationConformity_DEFINED
#define SOAP_TYPE_icommon__citationConformity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citationConformity(struct soap*, const char*, int, const icommon__citationConformity *, const char*);
SOAP_FMAC3 icommon__citationConformity * SOAP_FMAC4 soap_in_icommon__citationConformity(struct soap*, const char*, icommon__citationConformity *, const char*);
SOAP_FMAC1 icommon__citationConformity * SOAP_FMAC2 soap_instantiate_icommon__citationConformity(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citationConformity * soap_new_icommon__citationConformity(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citationConformity(soap, n, NULL, NULL, NULL);
}

inline icommon__citationConformity * soap_new_req_icommon__citationConformity(
	struct soap *soap,
	const std::string& Title,
	const union _icommon__union_citationConformity& union_citationConformity)
{
	icommon__citationConformity *_p = ::soap_new_icommon__citationConformity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationConformity::Title = Title;
		_p->icommon__citationConformity::union_citationConformity = union_citationConformity;
	}
	return _p;
}

inline icommon__citationConformity * soap_new_set_icommon__citationConformity(
	struct soap *soap,
	const std::string& Title,
	int __union_citationConformity,
	const union _icommon__union_citationConformity& union_citationConformity,
	const std::vector<char *> & URI,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	char *__item__1)
{
	icommon__citationConformity *_p = ::soap_new_icommon__citationConformity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citationConformity::Title = Title;
		_p->icommon__citationConformity::__union_citationConformity = __union_citationConformity;
		_p->icommon__citationConformity::union_citationConformity = union_citationConformity;
		_p->icommon__citationConformity::URI = URI;
		_p->icommon__citationConformity::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citationConformity(struct soap *soap, icommon__citationConformity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationConformity", p->soap_type() == SOAP_TYPE_icommon__citationConformity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citationConformity(struct soap *soap, const char *URL, icommon__citationConformity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationConformity", p->soap_type() == SOAP_TYPE_icommon__citationConformity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citationConformity(struct soap *soap, const char *URL, icommon__citationConformity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationConformity", p->soap_type() == SOAP_TYPE_icommon__citationConformity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citationConformity(struct soap *soap, const char *URL, icommon__citationConformity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citationConformity", p->soap_type() == SOAP_TYPE_icommon__citationConformity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citationConformity * SOAP_FMAC4 soap_get_icommon__citationConformity(struct soap*, icommon__citationConformity *, const char*, const char*);

inline int soap_read_icommon__citationConformity(struct soap *soap, icommon__citationConformity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citationConformity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citationConformity(struct soap *soap, const char *URL, icommon__citationConformity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citationConformity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citationConformity(struct soap *soap, icommon__citationConformity *p)
{
	if (::soap_read_icommon__citationConformity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__citation_DEFINED
#define SOAP_TYPE_icommon__citation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__citation(struct soap*, const char*, int, const icommon__citation *, const char*);
SOAP_FMAC3 icommon__citation * SOAP_FMAC4 soap_in_icommon__citation(struct soap*, const char*, icommon__citation *, const char*);
SOAP_FMAC1 icommon__citation * SOAP_FMAC2 soap_instantiate_icommon__citation(struct soap*, int, const char*, const char*, size_t*);

inline icommon__citation * soap_new_icommon__citation(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__citation(soap, n, NULL, NULL, NULL);
}

inline icommon__citation * soap_new_req_icommon__citation(
	struct soap *soap,
	const std::string& Title,
	const union _icommon__union_citation& union_citation)
{
	icommon__citation *_p = ::soap_new_icommon__citation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citation::Title = Title;
		_p->icommon__citation::union_citation = union_citation;
	}
	return _p;
}

inline icommon__citation * soap_new_set_icommon__citation(
	struct soap *soap,
	const std::string& Title,
	int __union_citation,
	const union _icommon__union_citation& union_citation,
	const std::vector<char *> & URI,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	char *__item__1)
{
	icommon__citation *_p = ::soap_new_icommon__citation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__citation::Title = Title;
		_p->icommon__citation::__union_citation = __union_citation;
		_p->icommon__citation::union_citation = union_citation;
		_p->icommon__citation::URI = URI;
		_p->icommon__citation::ResourceLocator = ResourceLocator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__citation(struct soap *soap, icommon__citation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citation", p->soap_type() == SOAP_TYPE_icommon__citation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__citation(struct soap *soap, const char *URL, icommon__citation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citation", p->soap_type() == SOAP_TYPE_icommon__citation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__citation(struct soap *soap, const char *URL, icommon__citation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citation", p->soap_type() == SOAP_TYPE_icommon__citation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__citation(struct soap *soap, const char *URL, icommon__citation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:citation", p->soap_type() == SOAP_TYPE_icommon__citation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__citation * SOAP_FMAC4 soap_get_icommon__citation(struct soap*, icommon__citation *, const char*, const char*);

inline int soap_read_icommon__citation(struct soap *soap, icommon__citation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__citation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__citation(struct soap *soap, const char *URL, icommon__citation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__citation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__citation(struct soap *soap, icommon__citation *p)
{
	if (::soap_read_icommon__citation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__responsibleOrganisation_DEFINED
#define SOAP_TYPE_icommon__responsibleOrganisation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__responsibleOrganisation(struct soap*, const char*, int, const icommon__responsibleOrganisation *, const char*);
SOAP_FMAC3 icommon__responsibleOrganisation * SOAP_FMAC4 soap_in_icommon__responsibleOrganisation(struct soap*, const char*, icommon__responsibleOrganisation *, const char*);
SOAP_FMAC1 icommon__responsibleOrganisation * SOAP_FMAC2 soap_instantiate_icommon__responsibleOrganisation(struct soap*, int, const char*, const char*, size_t*);

inline icommon__responsibleOrganisation * soap_new_icommon__responsibleOrganisation(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__responsibleOrganisation(soap, n, NULL, NULL, NULL);
}

inline icommon__responsibleOrganisation * soap_new_req_icommon__responsibleOrganisation(
	struct soap *soap,
	const _icommon__responsibleOrganisation_ResponsibleParty& ResponsibleParty,
	enum icommon__responsiblePartyRole ResponsiblePartyRole)
{
	icommon__responsibleOrganisation *_p = ::soap_new_icommon__responsibleOrganisation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__responsibleOrganisation::ResponsibleParty = ResponsibleParty;
		_p->icommon__responsibleOrganisation::ResponsiblePartyRole = ResponsiblePartyRole;
	}
	return _p;
}

inline icommon__responsibleOrganisation * soap_new_set_icommon__responsibleOrganisation(
	struct soap *soap,
	const _icommon__responsibleOrganisation_ResponsibleParty& ResponsibleParty,
	enum icommon__responsiblePartyRole ResponsiblePartyRole,
	char *__item__1)
{
	icommon__responsibleOrganisation *_p = ::soap_new_icommon__responsibleOrganisation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__responsibleOrganisation::ResponsibleParty = ResponsibleParty;
		_p->icommon__responsibleOrganisation::ResponsiblePartyRole = ResponsiblePartyRole;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__responsibleOrganisation(struct soap *soap, icommon__responsibleOrganisation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation", p->soap_type() == SOAP_TYPE_icommon__responsibleOrganisation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__responsibleOrganisation(struct soap *soap, const char *URL, icommon__responsibleOrganisation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation", p->soap_type() == SOAP_TYPE_icommon__responsibleOrganisation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__responsibleOrganisation(struct soap *soap, const char *URL, icommon__responsibleOrganisation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation", p->soap_type() == SOAP_TYPE_icommon__responsibleOrganisation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__responsibleOrganisation(struct soap *soap, const char *URL, icommon__responsibleOrganisation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:responsibleOrganisation", p->soap_type() == SOAP_TYPE_icommon__responsibleOrganisation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__responsibleOrganisation * SOAP_FMAC4 soap_get_icommon__responsibleOrganisation(struct soap*, icommon__responsibleOrganisation *, const char*, const char*);

inline int soap_read_icommon__responsibleOrganisation(struct soap *soap, icommon__responsibleOrganisation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__responsibleOrganisation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__responsibleOrganisation(struct soap *soap, const char *URL, icommon__responsibleOrganisation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__responsibleOrganisation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__responsibleOrganisation(struct soap *soap, icommon__responsibleOrganisation *p)
{
	if (::soap_read_icommon__responsibleOrganisation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__metadataPointOfContact_DEFINED
#define SOAP_TYPE_icommon__metadataPointOfContact_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__metadataPointOfContact(struct soap*, const char*, int, const icommon__metadataPointOfContact *, const char*);
SOAP_FMAC3 icommon__metadataPointOfContact * SOAP_FMAC4 soap_in_icommon__metadataPointOfContact(struct soap*, const char*, icommon__metadataPointOfContact *, const char*);
SOAP_FMAC1 icommon__metadataPointOfContact * SOAP_FMAC2 soap_instantiate_icommon__metadataPointOfContact(struct soap*, int, const char*, const char*, size_t*);

inline icommon__metadataPointOfContact * soap_new_icommon__metadataPointOfContact(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__metadataPointOfContact(soap, n, NULL, NULL, NULL);
}

inline icommon__metadataPointOfContact * soap_new_req_icommon__metadataPointOfContact(
	struct soap *soap,
	const std::string& OrganisationName,
	const std::string& EmailAddress)
{
	icommon__metadataPointOfContact *_p = ::soap_new_icommon__metadataPointOfContact(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__metadataPointOfContact::OrganisationName = OrganisationName;
		_p->icommon__metadataPointOfContact::EmailAddress = EmailAddress;
	}
	return _p;
}

inline icommon__metadataPointOfContact * soap_new_set_icommon__metadataPointOfContact(
	struct soap *soap,
	const std::string& OrganisationName,
	const std::string& EmailAddress,
	char *__item__1)
{
	icommon__metadataPointOfContact *_p = ::soap_new_icommon__metadataPointOfContact(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__metadataPointOfContact::OrganisationName = OrganisationName;
		_p->icommon__metadataPointOfContact::EmailAddress = EmailAddress;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__metadataPointOfContact(struct soap *soap, icommon__metadataPointOfContact const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:metadataPointOfContact", p->soap_type() == SOAP_TYPE_icommon__metadataPointOfContact ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__metadataPointOfContact(struct soap *soap, const char *URL, icommon__metadataPointOfContact const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:metadataPointOfContact", p->soap_type() == SOAP_TYPE_icommon__metadataPointOfContact ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__metadataPointOfContact(struct soap *soap, const char *URL, icommon__metadataPointOfContact const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:metadataPointOfContact", p->soap_type() == SOAP_TYPE_icommon__metadataPointOfContact ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__metadataPointOfContact(struct soap *soap, const char *URL, icommon__metadataPointOfContact const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:metadataPointOfContact", p->soap_type() == SOAP_TYPE_icommon__metadataPointOfContact ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__metadataPointOfContact * SOAP_FMAC4 soap_get_icommon__metadataPointOfContact(struct soap*, icommon__metadataPointOfContact *, const char*, const char*);

inline int soap_read_icommon__metadataPointOfContact(struct soap *soap, icommon__metadataPointOfContact *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__metadataPointOfContact(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__metadataPointOfContact(struct soap *soap, const char *URL, icommon__metadataPointOfContact *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__metadataPointOfContact(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__metadataPointOfContact(struct soap *soap, icommon__metadataPointOfContact *p)
{
	if (::soap_read_icommon__metadataPointOfContact(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__service_DEFINED
#define SOAP_TYPE_icommon__service_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__service(struct soap*, const char*, int, const icommon__service *, const char*);
SOAP_FMAC3 icommon__service * SOAP_FMAC4 soap_in_icommon__service(struct soap*, const char*, icommon__service *, const char*);
SOAP_FMAC1 icommon__service * SOAP_FMAC2 soap_instantiate_icommon__service(struct soap*, int, const char*, const char*, size_t*);

inline icommon__service * soap_new_icommon__service(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__service(soap, n, NULL, NULL, NULL);
}

inline icommon__service * soap_new_req_icommon__service(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	enum icommon__spatialDataServiceType SpatialDataServiceType)
{
	icommon__service *_p = ::soap_new_icommon__service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle;
		_p->icommon__service::ResourceAbstract = ResourceAbstract;
		_p->icommon__service::ResourceType = ResourceType;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__service::TemporalReference = TemporalReference;
		_p->icommon__service::Conformity = Conformity;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__service::MetadataDate = MetadataDate;
		_p->icommon__service::MetadataLanguage = MetadataLanguage;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType;
	}
	return _p;
}

inline icommon__service * soap_new_set_icommon__service(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__serviceSpatialDataResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__spatialDataServiceType SpatialDataServiceType,
	char *__item__1)
{
	icommon__service *_p = ::soap_new_icommon__service(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service::ResourceTitle = ResourceTitle;
		_p->icommon__service::ResourceAbstract = ResourceAbstract;
		_p->icommon__service::ResourceType = ResourceType;
		_p->icommon__service::ResourceLocator = ResourceLocator;
		_p->icommon__service::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__service::Keyword = Keyword;
		_p->icommon__service::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__service::TemporalReference = TemporalReference;
		_p->icommon__service::SpatialResolution = SpatialResolution;
		_p->icommon__service::Conformity = Conformity;
		_p->icommon__service::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__service::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__service::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__service::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__service::MetadataDate = MetadataDate;
		_p->icommon__service::MetadataLanguage = MetadataLanguage;
		_p->icommon__service::CoupledResource = CoupledResource;
		_p->icommon__service::SpatialDataServiceType = SpatialDataServiceType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__service(struct soap *soap, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service", p->soap_type() == SOAP_TYPE_icommon__service ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__service(struct soap *soap, const char *URL, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service", p->soap_type() == SOAP_TYPE_icommon__service ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__service(struct soap *soap, const char *URL, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service", p->soap_type() == SOAP_TYPE_icommon__service ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__service(struct soap *soap, const char *URL, icommon__service const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service", p->soap_type() == SOAP_TYPE_icommon__service ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__service * SOAP_FMAC4 soap_get_icommon__service(struct soap*, icommon__service *, const char*, const char*);

inline int soap_read_icommon__service(struct soap *soap, icommon__service *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__service(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__service(struct soap *soap, const char *URL, icommon__service *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__service(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__service(struct soap *soap, icommon__service *p)
{
	if (::soap_read_icommon__service(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__service_x005fext_DEFINED
#define SOAP_TYPE_icommon__service_x005fext_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__service_x005fext(struct soap*, const char*, int, const icommon__service_x005fext *, const char*);
SOAP_FMAC3 icommon__service_x005fext * SOAP_FMAC4 soap_in_icommon__service_x005fext(struct soap*, const char*, icommon__service_x005fext *, const char*);
SOAP_FMAC1 icommon__service_x005fext * SOAP_FMAC2 soap_instantiate_icommon__service_x005fext(struct soap*, int, const char*, const char*, size_t*);

inline icommon__service_x005fext * soap_new_icommon__service_x005fext(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__service_x005fext(soap, n, NULL, NULL, NULL);
}

inline icommon__service_x005fext * soap_new_req_icommon__service_x005fext(
	struct soap *soap,
	enum icommon__spatialDataServiceType SpatialDataServiceType,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__resourceType ResourceType__1,
	const std::vector<icommon__keyword *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1)
{
	icommon__service_x005fext *_p = ::soap_new_icommon__service_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service_x005fext::SpatialDataServiceType = SpatialDataServiceType;
		_p->icommon__resource::ResourceTitle = ResourceTitle__1;
		_p->icommon__resource::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__resource::ResourceType = ResourceType__1;
		_p->icommon__resource::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__resource::TemporalReference = TemporalReference__1;
		_p->icommon__resource::Conformity = Conformity__1;
		_p->icommon__resource::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__resource::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__resource::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__resource::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__resource::MetadataDate = MetadataDate__1;
		_p->icommon__resource::MetadataLanguage = MetadataLanguage__1;
	}
	return _p;
}

inline icommon__service_x005fext * soap_new_set_icommon__service_x005fext(
	struct soap *soap,
	const std::vector<icommon__uniqueResourceIdentifier *> & CoupledResource,
	enum icommon__spatialDataServiceType SpatialDataServiceType,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__resourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__keyword *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	char **xml__lang__1,
	char *__item__2)
{
	icommon__service_x005fext *_p = ::soap_new_icommon__service_x005fext(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__service_x005fext::CoupledResource = CoupledResource;
		_p->icommon__service_x005fext::SpatialDataServiceType = SpatialDataServiceType;
		_p->icommon__resource::ResourceTitle = ResourceTitle__1;
		_p->icommon__resource::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__resource::ResourceType = ResourceType__1;
		_p->icommon__resource::ResourceLocator = ResourceLocator__1;
		_p->icommon__resource::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__resource::Keyword = Keyword__1;
		_p->icommon__resource::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__resource::TemporalReference = TemporalReference__1;
		_p->icommon__resource::SpatialResolution = SpatialResolution__1;
		_p->icommon__resource::Conformity = Conformity__1;
		_p->icommon__resource::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__resource::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__resource::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__resource::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__resource::MetadataDate = MetadataDate__1;
		_p->icommon__resource::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__resource::xml__lang = xml__lang__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__service_x005fext(struct soap *soap, icommon__service_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service_ext", p->soap_type() == SOAP_TYPE_icommon__service_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__service_x005fext(struct soap *soap, const char *URL, icommon__service_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service_ext", p->soap_type() == SOAP_TYPE_icommon__service_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__service_x005fext(struct soap *soap, const char *URL, icommon__service_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service_ext", p->soap_type() == SOAP_TYPE_icommon__service_x005fext ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__service_x005fext(struct soap *soap, const char *URL, icommon__service_x005fext const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:service_ext", p->soap_type() == SOAP_TYPE_icommon__service_x005fext ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__service_x005fext * SOAP_FMAC4 soap_get_icommon__service_x005fext(struct soap*, icommon__service_x005fext *, const char*, const char*);

inline int soap_read_icommon__service_x005fext(struct soap *soap, icommon__service_x005fext *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__service_x005fext(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__service_x005fext(struct soap *soap, const char *URL, icommon__service_x005fext *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__service_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__service_x005fext(struct soap *soap, icommon__service_x005fext *p)
{
	if (::soap_read_icommon__service_x005fext(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__series_DEFINED
#define SOAP_TYPE_icommon__series_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__series(struct soap*, const char*, int, const icommon__series *, const char*);
SOAP_FMAC3 icommon__series * SOAP_FMAC4 soap_in_icommon__series(struct soap*, const char*, icommon__series *, const char*);
SOAP_FMAC1 icommon__series * SOAP_FMAC2 soap_instantiate_icommon__series(struct soap*, int, const char*, const char*, size_t*);

inline icommon__series * soap_new_icommon__series(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__series(soap, n, NULL, NULL, NULL);
}

inline icommon__series * soap_new_req_icommon__series(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum _icommon__series_ResourceType ResourceType,
	const std::vector<icommon__inspireTheme *> & MandatoryKeyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const std::vector<enum icommon__topicCategory> & TopicCategory,
	const std::string& Lineage)
{
	icommon__series *_p = ::soap_new_icommon__series(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__series::ResourceTitle = ResourceTitle;
		_p->icommon__series::ResourceAbstract = ResourceAbstract;
		_p->icommon__series::ResourceType = ResourceType;
		_p->icommon__series::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__series::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__series::TemporalReference = TemporalReference;
		_p->icommon__series::Conformity = Conformity;
		_p->icommon__series::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__series::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__series::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__series::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__series::MetadataDate = MetadataDate;
		_p->icommon__series::MetadataLanguage = MetadataLanguage;
		_p->icommon__series::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->icommon__series::TopicCategory = TopicCategory;
		_p->icommon__series::Lineage = Lineage;
	}
	return _p;
}

inline icommon__series * soap_new_set_icommon__series(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum _icommon__series_ResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__inspireTheme *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const std::vector<enum icommon__languageISO6392B> & ResourceLanguage,
	const std::vector<enum icommon__topicCategory> & TopicCategory,
	const std::string& Lineage,
	char *__item__1)
{
	icommon__series *_p = ::soap_new_icommon__series(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__series::ResourceTitle = ResourceTitle;
		_p->icommon__series::ResourceAbstract = ResourceAbstract;
		_p->icommon__series::ResourceType = ResourceType;
		_p->icommon__series::ResourceLocator = ResourceLocator;
		_p->icommon__series::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__series::Keyword = Keyword;
		_p->icommon__series::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__series::TemporalReference = TemporalReference;
		_p->icommon__series::SpatialResolution = SpatialResolution;
		_p->icommon__series::Conformity = Conformity;
		_p->icommon__series::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__series::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__series::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__series::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__series::MetadataDate = MetadataDate;
		_p->icommon__series::MetadataLanguage = MetadataLanguage;
		_p->icommon__series::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->icommon__series::ResourceLanguage = ResourceLanguage;
		_p->icommon__series::TopicCategory = TopicCategory;
		_p->icommon__series::Lineage = Lineage;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__series(struct soap *soap, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:series", p->soap_type() == SOAP_TYPE_icommon__series ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__series(struct soap *soap, const char *URL, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:series", p->soap_type() == SOAP_TYPE_icommon__series ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__series(struct soap *soap, const char *URL, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:series", p->soap_type() == SOAP_TYPE_icommon__series ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__series(struct soap *soap, const char *URL, icommon__series const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:series", p->soap_type() == SOAP_TYPE_icommon__series ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__series * SOAP_FMAC4 soap_get_icommon__series(struct soap*, icommon__series *, const char*, const char*);

inline int soap_read_icommon__series(struct soap *soap, icommon__series *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__series(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__series(struct soap *soap, const char *URL, icommon__series *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__series(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__series(struct soap *soap, icommon__series *p)
{
	if (::soap_read_icommon__series(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__dataset_DEFINED
#define SOAP_TYPE_icommon__dataset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__dataset(struct soap*, const char*, int, const icommon__dataset *, const char*);
SOAP_FMAC3 icommon__dataset * SOAP_FMAC4 soap_in_icommon__dataset(struct soap*, const char*, icommon__dataset *, const char*);
SOAP_FMAC1 icommon__dataset * SOAP_FMAC2 soap_instantiate_icommon__dataset(struct soap*, int, const char*, const char*, size_t*);

inline icommon__dataset * soap_new_icommon__dataset(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__dataset(soap, n, NULL, NULL, NULL);
}

inline icommon__dataset * soap_new_req_icommon__dataset(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum _icommon__dataset_ResourceType ResourceType,
	const std::vector<icommon__inspireTheme *> & MandatoryKeyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const std::vector<enum icommon__topicCategory> & TopicCategory,
	const std::string& Lineage)
{
	icommon__dataset *_p = ::soap_new_icommon__dataset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__dataset::ResourceTitle = ResourceTitle;
		_p->icommon__dataset::ResourceAbstract = ResourceAbstract;
		_p->icommon__dataset::ResourceType = ResourceType;
		_p->icommon__dataset::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__dataset::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__dataset::TemporalReference = TemporalReference;
		_p->icommon__dataset::Conformity = Conformity;
		_p->icommon__dataset::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__dataset::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__dataset::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__dataset::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__dataset::MetadataDate = MetadataDate;
		_p->icommon__dataset::MetadataLanguage = MetadataLanguage;
		_p->icommon__dataset::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->icommon__dataset::TopicCategory = TopicCategory;
		_p->icommon__dataset::Lineage = Lineage;
	}
	return _p;
}

inline icommon__dataset * soap_new_set_icommon__dataset(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum _icommon__dataset_ResourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__inspireTheme *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const std::vector<enum icommon__languageISO6392B> & ResourceLanguage,
	const std::vector<enum icommon__topicCategory> & TopicCategory,
	const std::string& Lineage,
	char *__item__1)
{
	icommon__dataset *_p = ::soap_new_icommon__dataset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__dataset::ResourceTitle = ResourceTitle;
		_p->icommon__dataset::ResourceAbstract = ResourceAbstract;
		_p->icommon__dataset::ResourceType = ResourceType;
		_p->icommon__dataset::ResourceLocator = ResourceLocator;
		_p->icommon__dataset::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__dataset::Keyword = Keyword;
		_p->icommon__dataset::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__dataset::TemporalReference = TemporalReference;
		_p->icommon__dataset::SpatialResolution = SpatialResolution;
		_p->icommon__dataset::Conformity = Conformity;
		_p->icommon__dataset::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__dataset::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__dataset::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__dataset::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__dataset::MetadataDate = MetadataDate;
		_p->icommon__dataset::MetadataLanguage = MetadataLanguage;
		_p->icommon__dataset::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->icommon__dataset::ResourceLanguage = ResourceLanguage;
		_p->icommon__dataset::TopicCategory = TopicCategory;
		_p->icommon__dataset::Lineage = Lineage;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__dataset(struct soap *soap, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:dataset", p->soap_type() == SOAP_TYPE_icommon__dataset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__dataset(struct soap *soap, const char *URL, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:dataset", p->soap_type() == SOAP_TYPE_icommon__dataset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__dataset(struct soap *soap, const char *URL, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:dataset", p->soap_type() == SOAP_TYPE_icommon__dataset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__dataset(struct soap *soap, const char *URL, icommon__dataset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:dataset", p->soap_type() == SOAP_TYPE_icommon__dataset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__dataset * SOAP_FMAC4 soap_get_icommon__dataset(struct soap*, icommon__dataset *, const char*, const char*);

inline int soap_read_icommon__dataset(struct soap *soap, icommon__dataset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__dataset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__dataset(struct soap *soap, const char *URL, icommon__dataset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__dataset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__dataset(struct soap *soap, icommon__dataset *p)
{
	if (::soap_read_icommon__dataset(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__data_DEFINED
#define SOAP_TYPE_icommon__data_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__data(struct soap*, const char*, int, const icommon__data *, const char*);
SOAP_FMAC3 icommon__data * SOAP_FMAC4 soap_in_icommon__data(struct soap*, const char*, icommon__data *, const char*);
SOAP_FMAC1 icommon__data * SOAP_FMAC2 soap_instantiate_icommon__data(struct soap*, int, const char*, const char*, size_t*);

inline icommon__data * soap_new_icommon__data(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__data(soap, n, NULL, NULL, NULL);
}

inline icommon__data * soap_new_req_icommon__data(
	struct soap *soap,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const std::vector<enum icommon__topicCategory> & TopicCategory,
	const std::string& Lineage,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__resourceType ResourceType__1,
	const std::vector<icommon__keyword *> & MandatoryKeyword__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1)
{
	icommon__data *_p = ::soap_new_icommon__data(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__data::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->icommon__data::TopicCategory = TopicCategory;
		_p->icommon__data::Lineage = Lineage;
		_p->icommon__resource::ResourceTitle = ResourceTitle__1;
		_p->icommon__resource::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__resource::ResourceType = ResourceType__1;
		_p->icommon__resource::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__resource::TemporalReference = TemporalReference__1;
		_p->icommon__resource::Conformity = Conformity__1;
		_p->icommon__resource::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__resource::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__resource::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__resource::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__resource::MetadataDate = MetadataDate__1;
		_p->icommon__resource::MetadataLanguage = MetadataLanguage__1;
	}
	return _p;
}

inline icommon__data * soap_new_set_icommon__data(
	struct soap *soap,
	const std::vector<icommon__uniqueResourceIdentifier *> & UniqueResourceIdentifier,
	const std::vector<enum icommon__languageISO6392B> & ResourceLanguage,
	const std::vector<enum icommon__topicCategory> & TopicCategory,
	const std::string& Lineage,
	const std::string& ResourceTitle__1,
	const std::string& ResourceAbstract__1,
	enum icommon__resourceType ResourceType__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	const std::vector<icommon__keyword *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__spatialResolution *> & SpatialResolution__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<std::string> & ConditionsForAccessAndUse__1,
	const std::vector<std::string> & LimitationsOnPublicAccess__1,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	const std::string& MetadataDate__1,
	enum icommon__euLanguageISO6392B MetadataLanguage__1,
	char **xml__lang__1,
	char *__item__2)
{
	icommon__data *_p = ::soap_new_icommon__data(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__data::UniqueResourceIdentifier = UniqueResourceIdentifier;
		_p->icommon__data::ResourceLanguage = ResourceLanguage;
		_p->icommon__data::TopicCategory = TopicCategory;
		_p->icommon__data::Lineage = Lineage;
		_p->icommon__resource::ResourceTitle = ResourceTitle__1;
		_p->icommon__resource::ResourceAbstract = ResourceAbstract__1;
		_p->icommon__resource::ResourceType = ResourceType__1;
		_p->icommon__resource::ResourceLocator = ResourceLocator__1;
		_p->icommon__resource::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__resource::Keyword = Keyword__1;
		_p->icommon__resource::GeographicBoundingBox = GeographicBoundingBox__1;
		_p->icommon__resource::TemporalReference = TemporalReference__1;
		_p->icommon__resource::SpatialResolution = SpatialResolution__1;
		_p->icommon__resource::Conformity = Conformity__1;
		_p->icommon__resource::ConditionsForAccessAndUse = ConditionsForAccessAndUse__1;
		_p->icommon__resource::LimitationsOnPublicAccess = LimitationsOnPublicAccess__1;
		_p->icommon__resource::ResponsibleOrganisation = ResponsibleOrganisation__1;
		_p->icommon__resource::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__resource::MetadataDate = MetadataDate__1;
		_p->icommon__resource::MetadataLanguage = MetadataLanguage__1;
		_p->icommon__resource::xml__lang = xml__lang__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_icommon__data(struct soap *soap, icommon__data const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:data", p->soap_type() == SOAP_TYPE_icommon__data ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__data(struct soap *soap, const char *URL, icommon__data const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:data", p->soap_type() == SOAP_TYPE_icommon__data ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__data(struct soap *soap, const char *URL, icommon__data const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:data", p->soap_type() == SOAP_TYPE_icommon__data ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__data(struct soap *soap, const char *URL, icommon__data const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:data", p->soap_type() == SOAP_TYPE_icommon__data ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__data * SOAP_FMAC4 soap_get_icommon__data(struct soap*, icommon__data *, const char*, const char*);

inline int soap_read_icommon__data(struct soap *soap, icommon__data *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__data(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__data(struct soap *soap, const char *URL, icommon__data *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__data(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__data(struct soap *soap, icommon__data *p)
{
	if (::soap_read_icommon__data(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_icommon__resource_DEFINED
#define SOAP_TYPE_icommon__resource_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_icommon__resource(struct soap*, const char*, int, const icommon__resource *, const char*);
SOAP_FMAC3 icommon__resource * SOAP_FMAC4 soap_in_icommon__resource(struct soap*, const char*, icommon__resource *, const char*);
SOAP_FMAC1 icommon__resource * SOAP_FMAC2 soap_instantiate_icommon__resource(struct soap*, int, const char*, const char*, size_t*);

inline icommon__resource * soap_new_icommon__resource(struct soap *soap, int n = -1)
{
	return soap_instantiate_icommon__resource(soap, n, NULL, NULL, NULL);
}

inline icommon__resource * soap_new_req_icommon__resource(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__resourceType ResourceType,
	const std::vector<icommon__keyword *> & MandatoryKeyword,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage)
{
	icommon__resource *_p = ::soap_new_icommon__resource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resource::ResourceTitle = ResourceTitle;
		_p->icommon__resource::ResourceAbstract = ResourceAbstract;
		_p->icommon__resource::ResourceType = ResourceType;
		_p->icommon__resource::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__resource::TemporalReference = TemporalReference;
		_p->icommon__resource::Conformity = Conformity;
		_p->icommon__resource::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__resource::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__resource::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__resource::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__resource::MetadataDate = MetadataDate;
		_p->icommon__resource::MetadataLanguage = MetadataLanguage;
	}
	return _p;
}

inline icommon__resource * soap_new_set_icommon__resource(
	struct soap *soap,
	const std::string& ResourceTitle,
	const std::string& ResourceAbstract,
	enum icommon__resourceType ResourceType,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator,
	const std::vector<icommon__keyword *> & MandatoryKeyword,
	const std::vector<icommon__keyword *> & Keyword,
	const std::vector<icommon__geographicBoundingBox *> & GeographicBoundingBox,
	const std::vector<icommon__temporalReference *> & TemporalReference,
	const std::vector<icommon__spatialResolution *> & SpatialResolution,
	const std::vector<icommon__conformity *> & Conformity,
	const std::vector<std::string> & ConditionsForAccessAndUse,
	const std::vector<std::string> & LimitationsOnPublicAccess,
	const std::vector<icommon__responsibleOrganisation *> & ResponsibleOrganisation,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact,
	const std::string& MetadataDate,
	enum icommon__euLanguageISO6392B MetadataLanguage,
	char **xml__lang,
	char *__item__1)
{
	icommon__resource *_p = ::soap_new_icommon__resource(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->icommon__resource::ResourceTitle = ResourceTitle;
		_p->icommon__resource::ResourceAbstract = ResourceAbstract;
		_p->icommon__resource::ResourceType = ResourceType;
		_p->icommon__resource::ResourceLocator = ResourceLocator;
		_p->icommon__resource::MandatoryKeyword = MandatoryKeyword;
		_p->icommon__resource::Keyword = Keyword;
		_p->icommon__resource::GeographicBoundingBox = GeographicBoundingBox;
		_p->icommon__resource::TemporalReference = TemporalReference;
		_p->icommon__resource::SpatialResolution = SpatialResolution;
		_p->icommon__resource::Conformity = Conformity;
		_p->icommon__resource::ConditionsForAccessAndUse = ConditionsForAccessAndUse;
		_p->icommon__resource::LimitationsOnPublicAccess = LimitationsOnPublicAccess;
		_p->icommon__resource::ResponsibleOrganisation = ResponsibleOrganisation;
		_p->icommon__resource::MetadataPointOfContact = MetadataPointOfContact;
		_p->icommon__resource::MetadataDate = MetadataDate;
		_p->icommon__resource::MetadataLanguage = MetadataLanguage;
		_p->icommon__resource::xml__lang = xml__lang;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_icommon__resource(struct soap *soap, icommon__resource const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resource", p->soap_type() == SOAP_TYPE_icommon__resource ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_icommon__resource(struct soap *soap, const char *URL, icommon__resource const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resource", p->soap_type() == SOAP_TYPE_icommon__resource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_icommon__resource(struct soap *soap, const char *URL, icommon__resource const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resource", p->soap_type() == SOAP_TYPE_icommon__resource ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_icommon__resource(struct soap *soap, const char *URL, icommon__resource const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "icommon:resource", p->soap_type() == SOAP_TYPE_icommon__resource ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 icommon__resource * SOAP_FMAC4 soap_get_icommon__resource(struct soap*, icommon__resource *, const char*, const char*);

inline int soap_read_icommon__resource(struct soap *soap, icommon__resource *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_icommon__resource(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_icommon__resource(struct soap *soap, const char *URL, icommon__resource *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_icommon__resource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_icommon__resource(struct soap *soap, icommon__resource *p)
{
	if (::soap_read_icommon__resource(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__fes__LogicalOperators_DEFINED
#define SOAP_TYPE__fes__LogicalOperators_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__LogicalOperators(struct soap*, const char*, int, const _fes__LogicalOperators *, const char*);
SOAP_FMAC3 _fes__LogicalOperators * SOAP_FMAC4 soap_in__fes__LogicalOperators(struct soap*, const char*, _fes__LogicalOperators *, const char*);
SOAP_FMAC1 _fes__LogicalOperators * SOAP_FMAC2 soap_instantiate__fes__LogicalOperators(struct soap*, int, const char*, const char*, size_t*);

inline _fes__LogicalOperators * soap_new__fes__LogicalOperators(struct soap *soap, int n = -1)
{
	return soap_instantiate__fes__LogicalOperators(soap, n, NULL, NULL, NULL);
}

inline _fes__LogicalOperators * soap_new_req__fes__LogicalOperators(
	struct soap *soap)
{
	_fes__LogicalOperators *_p = ::soap_new__fes__LogicalOperators(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _fes__LogicalOperators * soap_new_set__fes__LogicalOperators(
	struct soap *soap)
{
	_fes__LogicalOperators *_p = ::soap_new__fes__LogicalOperators(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__fes__LogicalOperators(struct soap *soap, _fes__LogicalOperators const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicalOperators", p->soap_type() == SOAP_TYPE__fes__LogicalOperators ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__LogicalOperators(struct soap *soap, const char *URL, _fes__LogicalOperators const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicalOperators", p->soap_type() == SOAP_TYPE__fes__LogicalOperators ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__LogicalOperators(struct soap *soap, const char *URL, _fes__LogicalOperators const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicalOperators", p->soap_type() == SOAP_TYPE__fes__LogicalOperators ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__LogicalOperators(struct soap *soap, const char *URL, _fes__LogicalOperators const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicalOperators", p->soap_type() == SOAP_TYPE__fes__LogicalOperators ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _fes__LogicalOperators * SOAP_FMAC4 soap_get__fes__LogicalOperators(struct soap*, _fes__LogicalOperators *, const char*, const char*);

inline int soap_read__fes__LogicalOperators(struct soap *soap, _fes__LogicalOperators *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__fes__LogicalOperators(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__fes__LogicalOperators(struct soap *soap, const char *URL, _fes__LogicalOperators *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__fes__LogicalOperators(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__fes__LogicalOperators(struct soap *soap, _fes__LogicalOperators *p)
{
	if (::soap_read__fes__LogicalOperators(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__fes__Filter_x005fCapabilities_DEFINED
#define SOAP_TYPE__fes__Filter_x005fCapabilities_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__Filter_x005fCapabilities(struct soap*, const char*, int, const _fes__Filter_x005fCapabilities *, const char*);
SOAP_FMAC3 _fes__Filter_x005fCapabilities * SOAP_FMAC4 soap_in__fes__Filter_x005fCapabilities(struct soap*, const char*, _fes__Filter_x005fCapabilities *, const char*);
SOAP_FMAC1 _fes__Filter_x005fCapabilities * SOAP_FMAC2 soap_instantiate__fes__Filter_x005fCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _fes__Filter_x005fCapabilities * soap_new__fes__Filter_x005fCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate__fes__Filter_x005fCapabilities(soap, n, NULL, NULL, NULL);
}

inline _fes__Filter_x005fCapabilities * soap_new_req__fes__Filter_x005fCapabilities(
	struct soap *soap,
	fes__ConformanceType *Conformance)
{
	_fes__Filter_x005fCapabilities *_p = ::soap_new__fes__Filter_x005fCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_fes__Filter_x005fCapabilities::Conformance = Conformance;
	}
	return _p;
}

inline _fes__Filter_x005fCapabilities * soap_new_set__fes__Filter_x005fCapabilities(
	struct soap *soap,
	fes__ConformanceType *Conformance,
	fes__Id_x005fCapabilitiesType *Id_x005fCapabilities,
	fes__Scalar_x005fCapabilitiesType *Scalar_x005fCapabilities,
	fes__Spatial_x005fCapabilitiesType *Spatial_x005fCapabilities,
	fes__Temporal_x005fCapabilitiesType *Temporal_x005fCapabilities,
	fes__AvailableFunctionsType *Functions,
	fes__Extended_x005fCapabilitiesType *Extended_x005fCapabilities)
{
	_fes__Filter_x005fCapabilities *_p = ::soap_new__fes__Filter_x005fCapabilities(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_fes__Filter_x005fCapabilities::Conformance = Conformance;
		_p->_fes__Filter_x005fCapabilities::Id_x005fCapabilities = Id_x005fCapabilities;
		_p->_fes__Filter_x005fCapabilities::Scalar_x005fCapabilities = Scalar_x005fCapabilities;
		_p->_fes__Filter_x005fCapabilities::Spatial_x005fCapabilities = Spatial_x005fCapabilities;
		_p->_fes__Filter_x005fCapabilities::Temporal_x005fCapabilities = Temporal_x005fCapabilities;
		_p->_fes__Filter_x005fCapabilities::Functions = Functions;
		_p->_fes__Filter_x005fCapabilities::Extended_x005fCapabilities = Extended_x005fCapabilities;
	}
	return _p;
}

inline int soap_write__fes__Filter_x005fCapabilities(struct soap *soap, _fes__Filter_x005fCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter_Capabilities", p->soap_type() == SOAP_TYPE__fes__Filter_x005fCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__fes__Filter_x005fCapabilities(struct soap *soap, const char *URL, _fes__Filter_x005fCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter_Capabilities", p->soap_type() == SOAP_TYPE__fes__Filter_x005fCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__fes__Filter_x005fCapabilities(struct soap *soap, const char *URL, _fes__Filter_x005fCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter_Capabilities", p->soap_type() == SOAP_TYPE__fes__Filter_x005fCapabilities ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__fes__Filter_x005fCapabilities(struct soap *soap, const char *URL, _fes__Filter_x005fCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Filter_Capabilities", p->soap_type() == SOAP_TYPE__fes__Filter_x005fCapabilities ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _fes__Filter_x005fCapabilities * SOAP_FMAC4 soap_get__fes__Filter_x005fCapabilities(struct soap*, _fes__Filter_x005fCapabilities *, const char*, const char*);

inline int soap_read__fes__Filter_x005fCapabilities(struct soap *soap, _fes__Filter_x005fCapabilities *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__fes__Filter_x005fCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__fes__Filter_x005fCapabilities(struct soap *soap, const char *URL, _fes__Filter_x005fCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__fes__Filter_x005fCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__fes__Filter_x005fCapabilities(struct soap *soap, _fes__Filter_x005fCapabilities *p)
{
	if (::soap_read__fes__Filter_x005fCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SortPropertyType_DEFINED
#define SOAP_TYPE_fes__SortPropertyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SortPropertyType(struct soap*, const char*, int, const fes__SortPropertyType *, const char*);
SOAP_FMAC3 fes__SortPropertyType * SOAP_FMAC4 soap_in_fes__SortPropertyType(struct soap*, const char*, fes__SortPropertyType *, const char*);
SOAP_FMAC1 fes__SortPropertyType * SOAP_FMAC2 soap_instantiate_fes__SortPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline fes__SortPropertyType * soap_new_fes__SortPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__SortPropertyType(soap, n, NULL, NULL, NULL);
}

inline fes__SortPropertyType * soap_new_req_fes__SortPropertyType(
	struct soap *soap,
	const std::string& ValueReference)
{
	fes__SortPropertyType *_p = ::soap_new_fes__SortPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SortPropertyType::ValueReference = ValueReference;
	}
	return _p;
}

inline fes__SortPropertyType * soap_new_set_fes__SortPropertyType(
	struct soap *soap,
	const std::string& ValueReference,
	enum fes__SortOrderType *SortOrder,
	char *__item__1)
{
	fes__SortPropertyType *_p = ::soap_new_fes__SortPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SortPropertyType::ValueReference = ValueReference;
		_p->fes__SortPropertyType::SortOrder = SortOrder;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__SortPropertyType(struct soap *soap, fes__SortPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortPropertyType", p->soap_type() == SOAP_TYPE_fes__SortPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__SortPropertyType(struct soap *soap, const char *URL, fes__SortPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortPropertyType", p->soap_type() == SOAP_TYPE_fes__SortPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SortPropertyType(struct soap *soap, const char *URL, fes__SortPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortPropertyType", p->soap_type() == SOAP_TYPE_fes__SortPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SortPropertyType(struct soap *soap, const char *URL, fes__SortPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortPropertyType", p->soap_type() == SOAP_TYPE_fes__SortPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__SortPropertyType * SOAP_FMAC4 soap_get_fes__SortPropertyType(struct soap*, fes__SortPropertyType *, const char*, const char*);

inline int soap_read_fes__SortPropertyType(struct soap *soap, fes__SortPropertyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__SortPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SortPropertyType(struct soap *soap, const char *URL, fes__SortPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SortPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SortPropertyType(struct soap *soap, fes__SortPropertyType *p)
{
	if (::soap_read_fes__SortPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SortByType_DEFINED
#define SOAP_TYPE_fes__SortByType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SortByType(struct soap*, const char*, int, const fes__SortByType *, const char*);
SOAP_FMAC3 fes__SortByType * SOAP_FMAC4 soap_in_fes__SortByType(struct soap*, const char*, fes__SortByType *, const char*);
SOAP_FMAC1 fes__SortByType * SOAP_FMAC2 soap_instantiate_fes__SortByType(struct soap*, int, const char*, const char*, size_t*);

inline fes__SortByType * soap_new_fes__SortByType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__SortByType(soap, n, NULL, NULL, NULL);
}

inline fes__SortByType * soap_new_req_fes__SortByType(
	struct soap *soap,
	const std::vector<fes__SortPropertyType *> & SortProperty)
{
	fes__SortByType *_p = ::soap_new_fes__SortByType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SortByType::SortProperty = SortProperty;
	}
	return _p;
}

inline fes__SortByType * soap_new_set_fes__SortByType(
	struct soap *soap,
	const std::vector<fes__SortPropertyType *> & SortProperty,
	char *__item__1)
{
	fes__SortByType *_p = ::soap_new_fes__SortByType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SortByType::SortProperty = SortProperty;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__SortByType(struct soap *soap, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortByType", p->soap_type() == SOAP_TYPE_fes__SortByType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__SortByType(struct soap *soap, const char *URL, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortByType", p->soap_type() == SOAP_TYPE_fes__SortByType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SortByType(struct soap *soap, const char *URL, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortByType", p->soap_type() == SOAP_TYPE_fes__SortByType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SortByType(struct soap *soap, const char *URL, fes__SortByType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SortByType", p->soap_type() == SOAP_TYPE_fes__SortByType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__SortByType * SOAP_FMAC4 soap_get_fes__SortByType(struct soap*, fes__SortByType *, const char*, const char*);

inline int soap_read_fes__SortByType(struct soap *soap, fes__SortByType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__SortByType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SortByType(struct soap *soap, const char *URL, fes__SortByType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SortByType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SortByType(struct soap *soap, fes__SortByType *p)
{
	if (::soap_read_fes__SortByType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ExtensionOperatorType_DEFINED
#define SOAP_TYPE_fes__ExtensionOperatorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ExtensionOperatorType(struct soap*, const char*, int, const fes__ExtensionOperatorType *, const char*);
SOAP_FMAC3 fes__ExtensionOperatorType * SOAP_FMAC4 soap_in_fes__ExtensionOperatorType(struct soap*, const char*, fes__ExtensionOperatorType *, const char*);
SOAP_FMAC1 fes__ExtensionOperatorType * SOAP_FMAC2 soap_instantiate_fes__ExtensionOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ExtensionOperatorType * soap_new_fes__ExtensionOperatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ExtensionOperatorType(soap, n, NULL, NULL, NULL);
}

inline fes__ExtensionOperatorType * soap_new_req_fes__ExtensionOperatorType(
	struct soap *soap,
	char *name)
{
	fes__ExtensionOperatorType *_p = ::soap_new_fes__ExtensionOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ExtensionOperatorType::name = name;
	}
	return _p;
}

inline fes__ExtensionOperatorType * soap_new_set_fes__ExtensionOperatorType(
	struct soap *soap,
	char *name,
	char *__item__1)
{
	fes__ExtensionOperatorType *_p = ::soap_new_fes__ExtensionOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ExtensionOperatorType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ExtensionOperatorType(struct soap *soap, fes__ExtensionOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOperatorType", p->soap_type() == SOAP_TYPE_fes__ExtensionOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ExtensionOperatorType(struct soap *soap, const char *URL, fes__ExtensionOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOperatorType", p->soap_type() == SOAP_TYPE_fes__ExtensionOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ExtensionOperatorType(struct soap *soap, const char *URL, fes__ExtensionOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOperatorType", p->soap_type() == SOAP_TYPE_fes__ExtensionOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ExtensionOperatorType(struct soap *soap, const char *URL, fes__ExtensionOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOperatorType", p->soap_type() == SOAP_TYPE_fes__ExtensionOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ExtensionOperatorType * SOAP_FMAC4 soap_get_fes__ExtensionOperatorType(struct soap*, fes__ExtensionOperatorType *, const char*, const char*);

inline int soap_read_fes__ExtensionOperatorType(struct soap *soap, fes__ExtensionOperatorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ExtensionOperatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ExtensionOperatorType(struct soap *soap, const char *URL, fes__ExtensionOperatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ExtensionOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ExtensionOperatorType(struct soap *soap, fes__ExtensionOperatorType *p)
{
	if (::soap_read_fes__ExtensionOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AdditionalOperatorsType_DEFINED
#define SOAP_TYPE_fes__AdditionalOperatorsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AdditionalOperatorsType(struct soap*, const char*, int, const fes__AdditionalOperatorsType *, const char*);
SOAP_FMAC3 fes__AdditionalOperatorsType * SOAP_FMAC4 soap_in_fes__AdditionalOperatorsType(struct soap*, const char*, fes__AdditionalOperatorsType *, const char*);
SOAP_FMAC1 fes__AdditionalOperatorsType * SOAP_FMAC2 soap_instantiate_fes__AdditionalOperatorsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AdditionalOperatorsType * soap_new_fes__AdditionalOperatorsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AdditionalOperatorsType(soap, n, NULL, NULL, NULL);
}

inline fes__AdditionalOperatorsType * soap_new_req_fes__AdditionalOperatorsType(
	struct soap *soap)
{
	fes__AdditionalOperatorsType *_p = ::soap_new_fes__AdditionalOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__AdditionalOperatorsType * soap_new_set_fes__AdditionalOperatorsType(
	struct soap *soap,
	const std::vector<fes__ExtensionOperatorType *> & Operator,
	char *__item__1)
{
	fes__AdditionalOperatorsType *_p = ::soap_new_fes__AdditionalOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AdditionalOperatorsType::Operator = Operator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AdditionalOperatorsType(struct soap *soap, fes__AdditionalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AdditionalOperatorsType", p->soap_type() == SOAP_TYPE_fes__AdditionalOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AdditionalOperatorsType(struct soap *soap, const char *URL, fes__AdditionalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AdditionalOperatorsType", p->soap_type() == SOAP_TYPE_fes__AdditionalOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AdditionalOperatorsType(struct soap *soap, const char *URL, fes__AdditionalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AdditionalOperatorsType", p->soap_type() == SOAP_TYPE_fes__AdditionalOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AdditionalOperatorsType(struct soap *soap, const char *URL, fes__AdditionalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AdditionalOperatorsType", p->soap_type() == SOAP_TYPE_fes__AdditionalOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AdditionalOperatorsType * SOAP_FMAC4 soap_get_fes__AdditionalOperatorsType(struct soap*, fes__AdditionalOperatorsType *, const char*, const char*);

inline int soap_read_fes__AdditionalOperatorsType(struct soap *soap, fes__AdditionalOperatorsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AdditionalOperatorsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AdditionalOperatorsType(struct soap *soap, const char *URL, fes__AdditionalOperatorsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AdditionalOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AdditionalOperatorsType(struct soap *soap, fes__AdditionalOperatorsType *p)
{
	if (::soap_read_fes__AdditionalOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__Extended_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_fes__Extended_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__Extended_x005fCapabilitiesType(struct soap*, const char*, int, const fes__Extended_x005fCapabilitiesType *, const char*);
SOAP_FMAC3 fes__Extended_x005fCapabilitiesType * SOAP_FMAC4 soap_in_fes__Extended_x005fCapabilitiesType(struct soap*, const char*, fes__Extended_x005fCapabilitiesType *, const char*);
SOAP_FMAC1 fes__Extended_x005fCapabilitiesType * SOAP_FMAC2 soap_instantiate_fes__Extended_x005fCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline fes__Extended_x005fCapabilitiesType * soap_new_fes__Extended_x005fCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__Extended_x005fCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline fes__Extended_x005fCapabilitiesType * soap_new_req_fes__Extended_x005fCapabilitiesType(
	struct soap *soap)
{
	fes__Extended_x005fCapabilitiesType *_p = ::soap_new_fes__Extended_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__Extended_x005fCapabilitiesType * soap_new_set_fes__Extended_x005fCapabilitiesType(
	struct soap *soap,
	fes__AdditionalOperatorsType *AdditionalOperators,
	char *__item__1)
{
	fes__Extended_x005fCapabilitiesType *_p = ::soap_new_fes__Extended_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Extended_x005fCapabilitiesType::AdditionalOperators = AdditionalOperators;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__Extended_x005fCapabilitiesType(struct soap *soap, fes__Extended_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Extended_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Extended_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__Extended_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Extended_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Extended_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Extended_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__Extended_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Extended_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Extended_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Extended_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__Extended_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Extended_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Extended_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Extended_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__Extended_x005fCapabilitiesType * SOAP_FMAC4 soap_get_fes__Extended_x005fCapabilitiesType(struct soap*, fes__Extended_x005fCapabilitiesType *, const char*, const char*);

inline int soap_read_fes__Extended_x005fCapabilitiesType(struct soap *soap, fes__Extended_x005fCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__Extended_x005fCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__Extended_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Extended_x005fCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__Extended_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__Extended_x005fCapabilitiesType(struct soap *soap, fes__Extended_x005fCapabilitiesType *p)
{
	if (::soap_read_fes__Extended_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__TemporalOperatorType_DEFINED
#define SOAP_TYPE_fes__TemporalOperatorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__TemporalOperatorType(struct soap*, const char*, int, const fes__TemporalOperatorType *, const char*);
SOAP_FMAC3 fes__TemporalOperatorType * SOAP_FMAC4 soap_in_fes__TemporalOperatorType(struct soap*, const char*, fes__TemporalOperatorType *, const char*);
SOAP_FMAC1 fes__TemporalOperatorType * SOAP_FMAC2 soap_instantiate_fes__TemporalOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline fes__TemporalOperatorType * soap_new_fes__TemporalOperatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__TemporalOperatorType(soap, n, NULL, NULL, NULL);
}

inline fes__TemporalOperatorType * soap_new_req_fes__TemporalOperatorType(
	struct soap *soap,
	const std::string& name)
{
	fes__TemporalOperatorType *_p = ::soap_new_fes__TemporalOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__TemporalOperatorType::name = name;
	}
	return _p;
}

inline fes__TemporalOperatorType * soap_new_set_fes__TemporalOperatorType(
	struct soap *soap,
	fes__TemporalOperandsType *TemporalOperands,
	const std::string& name,
	char *__item__1)
{
	fes__TemporalOperatorType *_p = ::soap_new_fes__TemporalOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__TemporalOperatorType::TemporalOperands = TemporalOperands;
		_p->fes__TemporalOperatorType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__TemporalOperatorType(struct soap *soap, fes__TemporalOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__TemporalOperatorType(struct soap *soap, const char *URL, fes__TemporalOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__TemporalOperatorType(struct soap *soap, const char *URL, fes__TemporalOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__TemporalOperatorType(struct soap *soap, const char *URL, fes__TemporalOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__TemporalOperatorType * SOAP_FMAC4 soap_get_fes__TemporalOperatorType(struct soap*, fes__TemporalOperatorType *, const char*, const char*);

inline int soap_read_fes__TemporalOperatorType(struct soap *soap, fes__TemporalOperatorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__TemporalOperatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__TemporalOperatorType(struct soap *soap, const char *URL, fes__TemporalOperatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__TemporalOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__TemporalOperatorType(struct soap *soap, fes__TemporalOperatorType *p)
{
	if (::soap_read_fes__TemporalOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__TemporalOperatorsType_DEFINED
#define SOAP_TYPE_fes__TemporalOperatorsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__TemporalOperatorsType(struct soap*, const char*, int, const fes__TemporalOperatorsType *, const char*);
SOAP_FMAC3 fes__TemporalOperatorsType * SOAP_FMAC4 soap_in_fes__TemporalOperatorsType(struct soap*, const char*, fes__TemporalOperatorsType *, const char*);
SOAP_FMAC1 fes__TemporalOperatorsType * SOAP_FMAC2 soap_instantiate_fes__TemporalOperatorsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__TemporalOperatorsType * soap_new_fes__TemporalOperatorsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__TemporalOperatorsType(soap, n, NULL, NULL, NULL);
}

inline fes__TemporalOperatorsType * soap_new_req_fes__TemporalOperatorsType(
	struct soap *soap,
	const std::vector<fes__TemporalOperatorType *> & TemporalOperator)
{
	fes__TemporalOperatorsType *_p = ::soap_new_fes__TemporalOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__TemporalOperatorsType::TemporalOperator = TemporalOperator;
	}
	return _p;
}

inline fes__TemporalOperatorsType * soap_new_set_fes__TemporalOperatorsType(
	struct soap *soap,
	const std::vector<fes__TemporalOperatorType *> & TemporalOperator,
	char *__item__1)
{
	fes__TemporalOperatorsType *_p = ::soap_new_fes__TemporalOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__TemporalOperatorsType::TemporalOperator = TemporalOperator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__TemporalOperatorsType(struct soap *soap, fes__TemporalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__TemporalOperatorsType(struct soap *soap, const char *URL, fes__TemporalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__TemporalOperatorsType(struct soap *soap, const char *URL, fes__TemporalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__TemporalOperatorsType(struct soap *soap, const char *URL, fes__TemporalOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperatorsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__TemporalOperatorsType * SOAP_FMAC4 soap_get_fes__TemporalOperatorsType(struct soap*, fes__TemporalOperatorsType *, const char*, const char*);

inline int soap_read_fes__TemporalOperatorsType(struct soap *soap, fes__TemporalOperatorsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__TemporalOperatorsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__TemporalOperatorsType(struct soap *soap, const char *URL, fes__TemporalOperatorsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__TemporalOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__TemporalOperatorsType(struct soap *soap, fes__TemporalOperatorsType *p)
{
	if (::soap_read_fes__TemporalOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__TemporalOperandsType_DEFINED
#define SOAP_TYPE_fes__TemporalOperandsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__TemporalOperandsType(struct soap*, const char*, int, const fes__TemporalOperandsType *, const char*);
SOAP_FMAC3 fes__TemporalOperandsType * SOAP_FMAC4 soap_in_fes__TemporalOperandsType(struct soap*, const char*, fes__TemporalOperandsType *, const char*);
SOAP_FMAC1 fes__TemporalOperandsType * SOAP_FMAC2 soap_instantiate_fes__TemporalOperandsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__TemporalOperandsType * soap_new_fes__TemporalOperandsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__TemporalOperandsType(soap, n, NULL, NULL, NULL);
}

inline fes__TemporalOperandsType * soap_new_req_fes__TemporalOperandsType(
	struct soap *soap,
	const std::vector<_fes__TemporalOperandsType_TemporalOperand> & TemporalOperand)
{
	fes__TemporalOperandsType *_p = ::soap_new_fes__TemporalOperandsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__TemporalOperandsType::TemporalOperand = TemporalOperand;
	}
	return _p;
}

inline fes__TemporalOperandsType * soap_new_set_fes__TemporalOperandsType(
	struct soap *soap,
	const std::vector<_fes__TemporalOperandsType_TemporalOperand> & TemporalOperand,
	char *__item__1)
{
	fes__TemporalOperandsType *_p = ::soap_new_fes__TemporalOperandsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__TemporalOperandsType::TemporalOperand = TemporalOperand;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__TemporalOperandsType(struct soap *soap, fes__TemporalOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperandsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__TemporalOperandsType(struct soap *soap, const char *URL, fes__TemporalOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperandsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__TemporalOperandsType(struct soap *soap, const char *URL, fes__TemporalOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperandsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__TemporalOperandsType(struct soap *soap, const char *URL, fes__TemporalOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOperandsType", p->soap_type() == SOAP_TYPE_fes__TemporalOperandsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__TemporalOperandsType * SOAP_FMAC4 soap_get_fes__TemporalOperandsType(struct soap*, fes__TemporalOperandsType *, const char*, const char*);

inline int soap_read_fes__TemporalOperandsType(struct soap *soap, fes__TemporalOperandsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__TemporalOperandsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__TemporalOperandsType(struct soap *soap, const char *URL, fes__TemporalOperandsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__TemporalOperandsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__TemporalOperandsType(struct soap *soap, fes__TemporalOperandsType *p)
{
	if (::soap_read_fes__TemporalOperandsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__Temporal_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_fes__Temporal_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__Temporal_x005fCapabilitiesType(struct soap*, const char*, int, const fes__Temporal_x005fCapabilitiesType *, const char*);
SOAP_FMAC3 fes__Temporal_x005fCapabilitiesType * SOAP_FMAC4 soap_in_fes__Temporal_x005fCapabilitiesType(struct soap*, const char*, fes__Temporal_x005fCapabilitiesType *, const char*);
SOAP_FMAC1 fes__Temporal_x005fCapabilitiesType * SOAP_FMAC2 soap_instantiate_fes__Temporal_x005fCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline fes__Temporal_x005fCapabilitiesType * soap_new_fes__Temporal_x005fCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__Temporal_x005fCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline fes__Temporal_x005fCapabilitiesType * soap_new_req_fes__Temporal_x005fCapabilitiesType(
	struct soap *soap,
	fes__TemporalOperandsType *TemporalOperands,
	fes__TemporalOperatorsType *TemporalOperators)
{
	fes__Temporal_x005fCapabilitiesType *_p = ::soap_new_fes__Temporal_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Temporal_x005fCapabilitiesType::TemporalOperands = TemporalOperands;
		_p->fes__Temporal_x005fCapabilitiesType::TemporalOperators = TemporalOperators;
	}
	return _p;
}

inline fes__Temporal_x005fCapabilitiesType * soap_new_set_fes__Temporal_x005fCapabilitiesType(
	struct soap *soap,
	fes__TemporalOperandsType *TemporalOperands,
	fes__TemporalOperatorsType *TemporalOperators,
	char *__item__1)
{
	fes__Temporal_x005fCapabilitiesType *_p = ::soap_new_fes__Temporal_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Temporal_x005fCapabilitiesType::TemporalOperands = TemporalOperands;
		_p->fes__Temporal_x005fCapabilitiesType::TemporalOperators = TemporalOperators;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__Temporal_x005fCapabilitiesType(struct soap *soap, fes__Temporal_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Temporal_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Temporal_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__Temporal_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Temporal_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Temporal_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Temporal_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__Temporal_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Temporal_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Temporal_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Temporal_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__Temporal_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Temporal_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Temporal_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Temporal_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__Temporal_x005fCapabilitiesType * SOAP_FMAC4 soap_get_fes__Temporal_x005fCapabilitiesType(struct soap*, fes__Temporal_x005fCapabilitiesType *, const char*, const char*);

inline int soap_read_fes__Temporal_x005fCapabilitiesType(struct soap *soap, fes__Temporal_x005fCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__Temporal_x005fCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__Temporal_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Temporal_x005fCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__Temporal_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__Temporal_x005fCapabilitiesType(struct soap *soap, fes__Temporal_x005fCapabilitiesType *p)
{
	if (::soap_read_fes__Temporal_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SpatialOperatorType_DEFINED
#define SOAP_TYPE_fes__SpatialOperatorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SpatialOperatorType(struct soap*, const char*, int, const fes__SpatialOperatorType *, const char*);
SOAP_FMAC3 fes__SpatialOperatorType * SOAP_FMAC4 soap_in_fes__SpatialOperatorType(struct soap*, const char*, fes__SpatialOperatorType *, const char*);
SOAP_FMAC1 fes__SpatialOperatorType * SOAP_FMAC2 soap_instantiate_fes__SpatialOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline fes__SpatialOperatorType * soap_new_fes__SpatialOperatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__SpatialOperatorType(soap, n, NULL, NULL, NULL);
}

inline fes__SpatialOperatorType * soap_new_req_fes__SpatialOperatorType(
	struct soap *soap)
{
	fes__SpatialOperatorType *_p = ::soap_new_fes__SpatialOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__SpatialOperatorType * soap_new_set_fes__SpatialOperatorType(
	struct soap *soap,
	fes__GeometryOperandsType *GeometryOperands,
	std::string *name,
	char *__item__1)
{
	fes__SpatialOperatorType *_p = ::soap_new_fes__SpatialOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SpatialOperatorType::GeometryOperands = GeometryOperands;
		_p->fes__SpatialOperatorType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__SpatialOperatorType(struct soap *soap, fes__SpatialOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__SpatialOperatorType(struct soap *soap, const char *URL, fes__SpatialOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SpatialOperatorType(struct soap *soap, const char *URL, fes__SpatialOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SpatialOperatorType(struct soap *soap, const char *URL, fes__SpatialOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__SpatialOperatorType * SOAP_FMAC4 soap_get_fes__SpatialOperatorType(struct soap*, fes__SpatialOperatorType *, const char*, const char*);

inline int soap_read_fes__SpatialOperatorType(struct soap *soap, fes__SpatialOperatorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__SpatialOperatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SpatialOperatorType(struct soap *soap, const char *URL, fes__SpatialOperatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SpatialOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SpatialOperatorType(struct soap *soap, fes__SpatialOperatorType *p)
{
	if (::soap_read_fes__SpatialOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SpatialOperatorsType_DEFINED
#define SOAP_TYPE_fes__SpatialOperatorsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SpatialOperatorsType(struct soap*, const char*, int, const fes__SpatialOperatorsType *, const char*);
SOAP_FMAC3 fes__SpatialOperatorsType * SOAP_FMAC4 soap_in_fes__SpatialOperatorsType(struct soap*, const char*, fes__SpatialOperatorsType *, const char*);
SOAP_FMAC1 fes__SpatialOperatorsType * SOAP_FMAC2 soap_instantiate_fes__SpatialOperatorsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__SpatialOperatorsType * soap_new_fes__SpatialOperatorsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__SpatialOperatorsType(soap, n, NULL, NULL, NULL);
}

inline fes__SpatialOperatorsType * soap_new_req_fes__SpatialOperatorsType(
	struct soap *soap,
	const std::vector<fes__SpatialOperatorType *> & SpatialOperator)
{
	fes__SpatialOperatorsType *_p = ::soap_new_fes__SpatialOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SpatialOperatorsType::SpatialOperator = SpatialOperator;
	}
	return _p;
}

inline fes__SpatialOperatorsType * soap_new_set_fes__SpatialOperatorsType(
	struct soap *soap,
	const std::vector<fes__SpatialOperatorType *> & SpatialOperator,
	char *__item__1)
{
	fes__SpatialOperatorsType *_p = ::soap_new_fes__SpatialOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__SpatialOperatorsType::SpatialOperator = SpatialOperator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__SpatialOperatorsType(struct soap *soap, fes__SpatialOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorsType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__SpatialOperatorsType(struct soap *soap, const char *URL, fes__SpatialOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorsType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SpatialOperatorsType(struct soap *soap, const char *URL, fes__SpatialOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorsType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SpatialOperatorsType(struct soap *soap, const char *URL, fes__SpatialOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOperatorsType", p->soap_type() == SOAP_TYPE_fes__SpatialOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__SpatialOperatorsType * SOAP_FMAC4 soap_get_fes__SpatialOperatorsType(struct soap*, fes__SpatialOperatorsType *, const char*, const char*);

inline int soap_read_fes__SpatialOperatorsType(struct soap *soap, fes__SpatialOperatorsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__SpatialOperatorsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SpatialOperatorsType(struct soap *soap, const char *URL, fes__SpatialOperatorsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SpatialOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SpatialOperatorsType(struct soap *soap, fes__SpatialOperatorsType *p)
{
	if (::soap_read_fes__SpatialOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__GeometryOperandsType_DEFINED
#define SOAP_TYPE_fes__GeometryOperandsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__GeometryOperandsType(struct soap*, const char*, int, const fes__GeometryOperandsType *, const char*);
SOAP_FMAC3 fes__GeometryOperandsType * SOAP_FMAC4 soap_in_fes__GeometryOperandsType(struct soap*, const char*, fes__GeometryOperandsType *, const char*);
SOAP_FMAC1 fes__GeometryOperandsType * SOAP_FMAC2 soap_instantiate_fes__GeometryOperandsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__GeometryOperandsType * soap_new_fes__GeometryOperandsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__GeometryOperandsType(soap, n, NULL, NULL, NULL);
}

inline fes__GeometryOperandsType * soap_new_req_fes__GeometryOperandsType(
	struct soap *soap,
	const std::vector<_fes__GeometryOperandsType_GeometryOperand> & GeometryOperand)
{
	fes__GeometryOperandsType *_p = ::soap_new_fes__GeometryOperandsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__GeometryOperandsType::GeometryOperand = GeometryOperand;
	}
	return _p;
}

inline fes__GeometryOperandsType * soap_new_set_fes__GeometryOperandsType(
	struct soap *soap,
	const std::vector<_fes__GeometryOperandsType_GeometryOperand> & GeometryOperand,
	char *__item__1)
{
	fes__GeometryOperandsType *_p = ::soap_new_fes__GeometryOperandsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__GeometryOperandsType::GeometryOperand = GeometryOperand;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__GeometryOperandsType(struct soap *soap, fes__GeometryOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType", p->soap_type() == SOAP_TYPE_fes__GeometryOperandsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__GeometryOperandsType(struct soap *soap, const char *URL, fes__GeometryOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType", p->soap_type() == SOAP_TYPE_fes__GeometryOperandsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__GeometryOperandsType(struct soap *soap, const char *URL, fes__GeometryOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType", p->soap_type() == SOAP_TYPE_fes__GeometryOperandsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__GeometryOperandsType(struct soap *soap, const char *URL, fes__GeometryOperandsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:GeometryOperandsType", p->soap_type() == SOAP_TYPE_fes__GeometryOperandsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__GeometryOperandsType * SOAP_FMAC4 soap_get_fes__GeometryOperandsType(struct soap*, fes__GeometryOperandsType *, const char*, const char*);

inline int soap_read_fes__GeometryOperandsType(struct soap *soap, fes__GeometryOperandsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__GeometryOperandsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__GeometryOperandsType(struct soap *soap, const char *URL, fes__GeometryOperandsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__GeometryOperandsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__GeometryOperandsType(struct soap *soap, fes__GeometryOperandsType *p)
{
	if (::soap_read_fes__GeometryOperandsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__Spatial_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_fes__Spatial_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__Spatial_x005fCapabilitiesType(struct soap*, const char*, int, const fes__Spatial_x005fCapabilitiesType *, const char*);
SOAP_FMAC3 fes__Spatial_x005fCapabilitiesType * SOAP_FMAC4 soap_in_fes__Spatial_x005fCapabilitiesType(struct soap*, const char*, fes__Spatial_x005fCapabilitiesType *, const char*);
SOAP_FMAC1 fes__Spatial_x005fCapabilitiesType * SOAP_FMAC2 soap_instantiate_fes__Spatial_x005fCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline fes__Spatial_x005fCapabilitiesType * soap_new_fes__Spatial_x005fCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__Spatial_x005fCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline fes__Spatial_x005fCapabilitiesType * soap_new_req_fes__Spatial_x005fCapabilitiesType(
	struct soap *soap,
	fes__GeometryOperandsType *GeometryOperands,
	fes__SpatialOperatorsType *SpatialOperators)
{
	fes__Spatial_x005fCapabilitiesType *_p = ::soap_new_fes__Spatial_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Spatial_x005fCapabilitiesType::GeometryOperands = GeometryOperands;
		_p->fes__Spatial_x005fCapabilitiesType::SpatialOperators = SpatialOperators;
	}
	return _p;
}

inline fes__Spatial_x005fCapabilitiesType * soap_new_set_fes__Spatial_x005fCapabilitiesType(
	struct soap *soap,
	fes__GeometryOperandsType *GeometryOperands,
	fes__SpatialOperatorsType *SpatialOperators,
	char *__item__1)
{
	fes__Spatial_x005fCapabilitiesType *_p = ::soap_new_fes__Spatial_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Spatial_x005fCapabilitiesType::GeometryOperands = GeometryOperands;
		_p->fes__Spatial_x005fCapabilitiesType::SpatialOperators = SpatialOperators;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__Spatial_x005fCapabilitiesType(struct soap *soap, fes__Spatial_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Spatial_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Spatial_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__Spatial_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Spatial_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Spatial_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Spatial_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__Spatial_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Spatial_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Spatial_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Spatial_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__Spatial_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Spatial_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Spatial_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Spatial_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__Spatial_x005fCapabilitiesType * SOAP_FMAC4 soap_get_fes__Spatial_x005fCapabilitiesType(struct soap*, fes__Spatial_x005fCapabilitiesType *, const char*, const char*);

inline int soap_read_fes__Spatial_x005fCapabilitiesType(struct soap *soap, fes__Spatial_x005fCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__Spatial_x005fCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__Spatial_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Spatial_x005fCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__Spatial_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__Spatial_x005fCapabilitiesType(struct soap *soap, fes__Spatial_x005fCapabilitiesType *p)
{
	if (::soap_read_fes__Spatial_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ArgumentType_DEFINED
#define SOAP_TYPE_fes__ArgumentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ArgumentType(struct soap*, const char*, int, const fes__ArgumentType *, const char*);
SOAP_FMAC3 fes__ArgumentType * SOAP_FMAC4 soap_in_fes__ArgumentType(struct soap*, const char*, fes__ArgumentType *, const char*);
SOAP_FMAC1 fes__ArgumentType * SOAP_FMAC2 soap_instantiate_fes__ArgumentType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ArgumentType * soap_new_fes__ArgumentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ArgumentType(soap, n, NULL, NULL, NULL);
}

inline fes__ArgumentType * soap_new_req_fes__ArgumentType(
	struct soap *soap,
	char *Type,
	const std::string& name)
{
	fes__ArgumentType *_p = ::soap_new_fes__ArgumentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ArgumentType::Type = Type;
		_p->fes__ArgumentType::name = name;
	}
	return _p;
}

inline fes__ArgumentType * soap_new_set_fes__ArgumentType(
	struct soap *soap,
	ows__MetadataType *ows__Metadata,
	char *Type,
	const std::string& name,
	char *__item__1)
{
	fes__ArgumentType *_p = ::soap_new_fes__ArgumentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ArgumentType::ows__Metadata = ows__Metadata;
		_p->fes__ArgumentType::Type = Type;
		_p->fes__ArgumentType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ArgumentType(struct soap *soap, fes__ArgumentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentType", p->soap_type() == SOAP_TYPE_fes__ArgumentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ArgumentType(struct soap *soap, const char *URL, fes__ArgumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentType", p->soap_type() == SOAP_TYPE_fes__ArgumentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ArgumentType(struct soap *soap, const char *URL, fes__ArgumentType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentType", p->soap_type() == SOAP_TYPE_fes__ArgumentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ArgumentType(struct soap *soap, const char *URL, fes__ArgumentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentType", p->soap_type() == SOAP_TYPE_fes__ArgumentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ArgumentType * SOAP_FMAC4 soap_get_fes__ArgumentType(struct soap*, fes__ArgumentType *, const char*, const char*);

inline int soap_read_fes__ArgumentType(struct soap *soap, fes__ArgumentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ArgumentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ArgumentType(struct soap *soap, const char *URL, fes__ArgumentType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ArgumentType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ArgumentType(struct soap *soap, fes__ArgumentType *p)
{
	if (::soap_read_fes__ArgumentType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ArgumentsType_DEFINED
#define SOAP_TYPE_fes__ArgumentsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ArgumentsType(struct soap*, const char*, int, const fes__ArgumentsType *, const char*);
SOAP_FMAC3 fes__ArgumentsType * SOAP_FMAC4 soap_in_fes__ArgumentsType(struct soap*, const char*, fes__ArgumentsType *, const char*);
SOAP_FMAC1 fes__ArgumentsType * SOAP_FMAC2 soap_instantiate_fes__ArgumentsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ArgumentsType * soap_new_fes__ArgumentsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ArgumentsType(soap, n, NULL, NULL, NULL);
}

inline fes__ArgumentsType * soap_new_req_fes__ArgumentsType(
	struct soap *soap,
	const std::vector<fes__ArgumentType *> & Argument)
{
	fes__ArgumentsType *_p = ::soap_new_fes__ArgumentsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ArgumentsType::Argument = Argument;
	}
	return _p;
}

inline fes__ArgumentsType * soap_new_set_fes__ArgumentsType(
	struct soap *soap,
	const std::vector<fes__ArgumentType *> & Argument,
	char *__item__1)
{
	fes__ArgumentsType *_p = ::soap_new_fes__ArgumentsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ArgumentsType::Argument = Argument;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ArgumentsType(struct soap *soap, fes__ArgumentsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentsType", p->soap_type() == SOAP_TYPE_fes__ArgumentsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ArgumentsType(struct soap *soap, const char *URL, fes__ArgumentsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentsType", p->soap_type() == SOAP_TYPE_fes__ArgumentsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ArgumentsType(struct soap *soap, const char *URL, fes__ArgumentsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentsType", p->soap_type() == SOAP_TYPE_fes__ArgumentsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ArgumentsType(struct soap *soap, const char *URL, fes__ArgumentsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ArgumentsType", p->soap_type() == SOAP_TYPE_fes__ArgumentsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ArgumentsType * SOAP_FMAC4 soap_get_fes__ArgumentsType(struct soap*, fes__ArgumentsType *, const char*, const char*);

inline int soap_read_fes__ArgumentsType(struct soap *soap, fes__ArgumentsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ArgumentsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ArgumentsType(struct soap *soap, const char *URL, fes__ArgumentsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ArgumentsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ArgumentsType(struct soap *soap, fes__ArgumentsType *p)
{
	if (::soap_read_fes__ArgumentsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AvailableFunctionType_DEFINED
#define SOAP_TYPE_fes__AvailableFunctionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AvailableFunctionType(struct soap*, const char*, int, const fes__AvailableFunctionType *, const char*);
SOAP_FMAC3 fes__AvailableFunctionType * SOAP_FMAC4 soap_in_fes__AvailableFunctionType(struct soap*, const char*, fes__AvailableFunctionType *, const char*);
SOAP_FMAC1 fes__AvailableFunctionType * SOAP_FMAC2 soap_instantiate_fes__AvailableFunctionType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AvailableFunctionType * soap_new_fes__AvailableFunctionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AvailableFunctionType(soap, n, NULL, NULL, NULL);
}

inline fes__AvailableFunctionType * soap_new_req_fes__AvailableFunctionType(
	struct soap *soap,
	char *Returns,
	const std::string& name)
{
	fes__AvailableFunctionType *_p = ::soap_new_fes__AvailableFunctionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AvailableFunctionType::Returns = Returns;
		_p->fes__AvailableFunctionType::name = name;
	}
	return _p;
}

inline fes__AvailableFunctionType * soap_new_set_fes__AvailableFunctionType(
	struct soap *soap,
	ows__MetadataType *ows__Metadata,
	char *Returns,
	fes__ArgumentsType *Arguments,
	const std::string& name,
	char *__item__1)
{
	fes__AvailableFunctionType *_p = ::soap_new_fes__AvailableFunctionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AvailableFunctionType::ows__Metadata = ows__Metadata;
		_p->fes__AvailableFunctionType::Returns = Returns;
		_p->fes__AvailableFunctionType::Arguments = Arguments;
		_p->fes__AvailableFunctionType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AvailableFunctionType(struct soap *soap, fes__AvailableFunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AvailableFunctionType(struct soap *soap, const char *URL, fes__AvailableFunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AvailableFunctionType(struct soap *soap, const char *URL, fes__AvailableFunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AvailableFunctionType(struct soap *soap, const char *URL, fes__AvailableFunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AvailableFunctionType * SOAP_FMAC4 soap_get_fes__AvailableFunctionType(struct soap*, fes__AvailableFunctionType *, const char*, const char*);

inline int soap_read_fes__AvailableFunctionType(struct soap *soap, fes__AvailableFunctionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AvailableFunctionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AvailableFunctionType(struct soap *soap, const char *URL, fes__AvailableFunctionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AvailableFunctionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AvailableFunctionType(struct soap *soap, fes__AvailableFunctionType *p)
{
	if (::soap_read_fes__AvailableFunctionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AvailableFunctionsType_DEFINED
#define SOAP_TYPE_fes__AvailableFunctionsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AvailableFunctionsType(struct soap*, const char*, int, const fes__AvailableFunctionsType *, const char*);
SOAP_FMAC3 fes__AvailableFunctionsType * SOAP_FMAC4 soap_in_fes__AvailableFunctionsType(struct soap*, const char*, fes__AvailableFunctionsType *, const char*);
SOAP_FMAC1 fes__AvailableFunctionsType * SOAP_FMAC2 soap_instantiate_fes__AvailableFunctionsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AvailableFunctionsType * soap_new_fes__AvailableFunctionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AvailableFunctionsType(soap, n, NULL, NULL, NULL);
}

inline fes__AvailableFunctionsType * soap_new_req_fes__AvailableFunctionsType(
	struct soap *soap,
	const std::vector<fes__AvailableFunctionType *> & Function)
{
	fes__AvailableFunctionsType *_p = ::soap_new_fes__AvailableFunctionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AvailableFunctionsType::Function = Function;
	}
	return _p;
}

inline fes__AvailableFunctionsType * soap_new_set_fes__AvailableFunctionsType(
	struct soap *soap,
	const std::vector<fes__AvailableFunctionType *> & Function,
	char *__item__1)
{
	fes__AvailableFunctionsType *_p = ::soap_new_fes__AvailableFunctionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AvailableFunctionsType::Function = Function;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AvailableFunctionsType(struct soap *soap, fes__AvailableFunctionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionsType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AvailableFunctionsType(struct soap *soap, const char *URL, fes__AvailableFunctionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionsType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AvailableFunctionsType(struct soap *soap, const char *URL, fes__AvailableFunctionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionsType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AvailableFunctionsType(struct soap *soap, const char *URL, fes__AvailableFunctionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AvailableFunctionsType", p->soap_type() == SOAP_TYPE_fes__AvailableFunctionsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AvailableFunctionsType * SOAP_FMAC4 soap_get_fes__AvailableFunctionsType(struct soap*, fes__AvailableFunctionsType *, const char*, const char*);

inline int soap_read_fes__AvailableFunctionsType(struct soap *soap, fes__AvailableFunctionsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AvailableFunctionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AvailableFunctionsType(struct soap *soap, const char *URL, fes__AvailableFunctionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AvailableFunctionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AvailableFunctionsType(struct soap *soap, fes__AvailableFunctionsType *p)
{
	if (::soap_read_fes__AvailableFunctionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ComparisonOperatorType_DEFINED
#define SOAP_TYPE_fes__ComparisonOperatorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ComparisonOperatorType(struct soap*, const char*, int, const fes__ComparisonOperatorType *, const char*);
SOAP_FMAC3 fes__ComparisonOperatorType * SOAP_FMAC4 soap_in_fes__ComparisonOperatorType(struct soap*, const char*, fes__ComparisonOperatorType *, const char*);
SOAP_FMAC1 fes__ComparisonOperatorType * SOAP_FMAC2 soap_instantiate_fes__ComparisonOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ComparisonOperatorType * soap_new_fes__ComparisonOperatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ComparisonOperatorType(soap, n, NULL, NULL, NULL);
}

inline fes__ComparisonOperatorType * soap_new_req_fes__ComparisonOperatorType(
	struct soap *soap,
	const std::string& name)
{
	fes__ComparisonOperatorType *_p = ::soap_new_fes__ComparisonOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ComparisonOperatorType::name = name;
	}
	return _p;
}

inline fes__ComparisonOperatorType * soap_new_set_fes__ComparisonOperatorType(
	struct soap *soap,
	const std::string& name,
	char *__item__1)
{
	fes__ComparisonOperatorType *_p = ::soap_new_fes__ComparisonOperatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ComparisonOperatorType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ComparisonOperatorType(struct soap *soap, fes__ComparisonOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ComparisonOperatorType(struct soap *soap, const char *URL, fes__ComparisonOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ComparisonOperatorType(struct soap *soap, const char *URL, fes__ComparisonOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ComparisonOperatorType(struct soap *soap, const char *URL, fes__ComparisonOperatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ComparisonOperatorType * SOAP_FMAC4 soap_get_fes__ComparisonOperatorType(struct soap*, fes__ComparisonOperatorType *, const char*, const char*);

inline int soap_read_fes__ComparisonOperatorType(struct soap *soap, fes__ComparisonOperatorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ComparisonOperatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ComparisonOperatorType(struct soap *soap, const char *URL, fes__ComparisonOperatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ComparisonOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ComparisonOperatorType(struct soap *soap, fes__ComparisonOperatorType *p)
{
	if (::soap_read_fes__ComparisonOperatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ComparisonOperatorsType_DEFINED
#define SOAP_TYPE_fes__ComparisonOperatorsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ComparisonOperatorsType(struct soap*, const char*, int, const fes__ComparisonOperatorsType *, const char*);
SOAP_FMAC3 fes__ComparisonOperatorsType * SOAP_FMAC4 soap_in_fes__ComparisonOperatorsType(struct soap*, const char*, fes__ComparisonOperatorsType *, const char*);
SOAP_FMAC1 fes__ComparisonOperatorsType * SOAP_FMAC2 soap_instantiate_fes__ComparisonOperatorsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ComparisonOperatorsType * soap_new_fes__ComparisonOperatorsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ComparisonOperatorsType(soap, n, NULL, NULL, NULL);
}

inline fes__ComparisonOperatorsType * soap_new_req_fes__ComparisonOperatorsType(
	struct soap *soap)
{
	fes__ComparisonOperatorsType *_p = ::soap_new_fes__ComparisonOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__ComparisonOperatorsType * soap_new_set_fes__ComparisonOperatorsType(
	struct soap *soap,
	const std::vector<struct __fes__ComparisonOperatorsType_sequence> & __ComparisonOperatorsType_sequence,
	char *__item__1)
{
	fes__ComparisonOperatorsType *_p = ::soap_new_fes__ComparisonOperatorsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ComparisonOperatorsType::__ComparisonOperatorsType_sequence = __ComparisonOperatorsType_sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ComparisonOperatorsType(struct soap *soap, fes__ComparisonOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ComparisonOperatorsType(struct soap *soap, const char *URL, fes__ComparisonOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ComparisonOperatorsType(struct soap *soap, const char *URL, fes__ComparisonOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ComparisonOperatorsType(struct soap *soap, const char *URL, fes__ComparisonOperatorsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOperatorsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOperatorsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ComparisonOperatorsType * SOAP_FMAC4 soap_get_fes__ComparisonOperatorsType(struct soap*, fes__ComparisonOperatorsType *, const char*, const char*);

inline int soap_read_fes__ComparisonOperatorsType(struct soap *soap, fes__ComparisonOperatorsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ComparisonOperatorsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ComparisonOperatorsType(struct soap *soap, const char *URL, fes__ComparisonOperatorsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ComparisonOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ComparisonOperatorsType(struct soap *soap, fes__ComparisonOperatorsType *p)
{
	if (::soap_read_fes__ComparisonOperatorsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__Scalar_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_fes__Scalar_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__Scalar_x005fCapabilitiesType(struct soap*, const char*, int, const fes__Scalar_x005fCapabilitiesType *, const char*);
SOAP_FMAC3 fes__Scalar_x005fCapabilitiesType * SOAP_FMAC4 soap_in_fes__Scalar_x005fCapabilitiesType(struct soap*, const char*, fes__Scalar_x005fCapabilitiesType *, const char*);
SOAP_FMAC1 fes__Scalar_x005fCapabilitiesType * SOAP_FMAC2 soap_instantiate_fes__Scalar_x005fCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline fes__Scalar_x005fCapabilitiesType * soap_new_fes__Scalar_x005fCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__Scalar_x005fCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline fes__Scalar_x005fCapabilitiesType * soap_new_req_fes__Scalar_x005fCapabilitiesType(
	struct soap *soap)
{
	fes__Scalar_x005fCapabilitiesType *_p = ::soap_new_fes__Scalar_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__Scalar_x005fCapabilitiesType * soap_new_set_fes__Scalar_x005fCapabilitiesType(
	struct soap *soap,
	_fes__LogicalOperators *LogicalOperators,
	fes__ComparisonOperatorsType *ComparisonOperators,
	char *__item__1)
{
	fes__Scalar_x005fCapabilitiesType *_p = ::soap_new_fes__Scalar_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Scalar_x005fCapabilitiesType::LogicalOperators = LogicalOperators;
		_p->fes__Scalar_x005fCapabilitiesType::ComparisonOperators = ComparisonOperators;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__Scalar_x005fCapabilitiesType(struct soap *soap, fes__Scalar_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Scalar_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Scalar_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__Scalar_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Scalar_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Scalar_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Scalar_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__Scalar_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Scalar_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Scalar_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Scalar_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__Scalar_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Scalar_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Scalar_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Scalar_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__Scalar_x005fCapabilitiesType * SOAP_FMAC4 soap_get_fes__Scalar_x005fCapabilitiesType(struct soap*, fes__Scalar_x005fCapabilitiesType *, const char*, const char*);

inline int soap_read_fes__Scalar_x005fCapabilitiesType(struct soap *soap, fes__Scalar_x005fCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__Scalar_x005fCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__Scalar_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Scalar_x005fCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__Scalar_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__Scalar_x005fCapabilitiesType(struct soap *soap, fes__Scalar_x005fCapabilitiesType *p)
{
	if (::soap_read_fes__Scalar_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ResourceIdentifierType_DEFINED
#define SOAP_TYPE_fes__ResourceIdentifierType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ResourceIdentifierType(struct soap*, const char*, int, const fes__ResourceIdentifierType *, const char*);
SOAP_FMAC3 fes__ResourceIdentifierType * SOAP_FMAC4 soap_in_fes__ResourceIdentifierType(struct soap*, const char*, fes__ResourceIdentifierType *, const char*);
SOAP_FMAC1 fes__ResourceIdentifierType * SOAP_FMAC2 soap_instantiate_fes__ResourceIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ResourceIdentifierType * soap_new_fes__ResourceIdentifierType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ResourceIdentifierType(soap, n, NULL, NULL, NULL);
}

inline fes__ResourceIdentifierType * soap_new_req_fes__ResourceIdentifierType(
	struct soap *soap,
	char *name)
{
	fes__ResourceIdentifierType *_p = ::soap_new_fes__ResourceIdentifierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ResourceIdentifierType::name = name;
	}
	return _p;
}

inline fes__ResourceIdentifierType * soap_new_set_fes__ResourceIdentifierType(
	struct soap *soap,
	ows__MetadataType *ows__Metadata,
	char *name,
	char *__item__1)
{
	fes__ResourceIdentifierType *_p = ::soap_new_fes__ResourceIdentifierType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ResourceIdentifierType::ows__Metadata = ows__Metadata;
		_p->fes__ResourceIdentifierType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ResourceIdentifierType(struct soap *soap, fes__ResourceIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdentifierType", p->soap_type() == SOAP_TYPE_fes__ResourceIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ResourceIdentifierType(struct soap *soap, const char *URL, fes__ResourceIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdentifierType", p->soap_type() == SOAP_TYPE_fes__ResourceIdentifierType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ResourceIdentifierType(struct soap *soap, const char *URL, fes__ResourceIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdentifierType", p->soap_type() == SOAP_TYPE_fes__ResourceIdentifierType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ResourceIdentifierType(struct soap *soap, const char *URL, fes__ResourceIdentifierType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdentifierType", p->soap_type() == SOAP_TYPE_fes__ResourceIdentifierType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ResourceIdentifierType * SOAP_FMAC4 soap_get_fes__ResourceIdentifierType(struct soap*, fes__ResourceIdentifierType *, const char*, const char*);

inline int soap_read_fes__ResourceIdentifierType(struct soap *soap, fes__ResourceIdentifierType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ResourceIdentifierType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ResourceIdentifierType(struct soap *soap, const char *URL, fes__ResourceIdentifierType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ResourceIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ResourceIdentifierType(struct soap *soap, fes__ResourceIdentifierType *p)
{
	if (::soap_read_fes__ResourceIdentifierType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__Id_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_fes__Id_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__Id_x005fCapabilitiesType(struct soap*, const char*, int, const fes__Id_x005fCapabilitiesType *, const char*);
SOAP_FMAC3 fes__Id_x005fCapabilitiesType * SOAP_FMAC4 soap_in_fes__Id_x005fCapabilitiesType(struct soap*, const char*, fes__Id_x005fCapabilitiesType *, const char*);
SOAP_FMAC1 fes__Id_x005fCapabilitiesType * SOAP_FMAC2 soap_instantiate_fes__Id_x005fCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline fes__Id_x005fCapabilitiesType * soap_new_fes__Id_x005fCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__Id_x005fCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline fes__Id_x005fCapabilitiesType * soap_new_req_fes__Id_x005fCapabilitiesType(
	struct soap *soap,
	const std::vector<fes__ResourceIdentifierType *> & ResourceIdentifier)
{
	fes__Id_x005fCapabilitiesType *_p = ::soap_new_fes__Id_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Id_x005fCapabilitiesType::ResourceIdentifier = ResourceIdentifier;
	}
	return _p;
}

inline fes__Id_x005fCapabilitiesType * soap_new_set_fes__Id_x005fCapabilitiesType(
	struct soap *soap,
	const std::vector<fes__ResourceIdentifierType *> & ResourceIdentifier,
	char *__item__1)
{
	fes__Id_x005fCapabilitiesType *_p = ::soap_new_fes__Id_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__Id_x005fCapabilitiesType::ResourceIdentifier = ResourceIdentifier;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__Id_x005fCapabilitiesType(struct soap *soap, fes__Id_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Id_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Id_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__Id_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Id_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Id_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Id_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__Id_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Id_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Id_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Id_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__Id_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Id_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:Id_CapabilitiesType", p->soap_type() == SOAP_TYPE_fes__Id_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__Id_x005fCapabilitiesType * SOAP_FMAC4 soap_get_fes__Id_x005fCapabilitiesType(struct soap*, fes__Id_x005fCapabilitiesType *, const char*, const char*);

inline int soap_read_fes__Id_x005fCapabilitiesType(struct soap *soap, fes__Id_x005fCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__Id_x005fCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__Id_x005fCapabilitiesType(struct soap *soap, const char *URL, fes__Id_x005fCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__Id_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__Id_x005fCapabilitiesType(struct soap *soap, fes__Id_x005fCapabilitiesType *p)
{
	if (::soap_read_fes__Id_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ConformanceType_DEFINED
#define SOAP_TYPE_fes__ConformanceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ConformanceType(struct soap*, const char*, int, const fes__ConformanceType *, const char*);
SOAP_FMAC3 fes__ConformanceType * SOAP_FMAC4 soap_in_fes__ConformanceType(struct soap*, const char*, fes__ConformanceType *, const char*);
SOAP_FMAC1 fes__ConformanceType * SOAP_FMAC2 soap_instantiate_fes__ConformanceType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ConformanceType * soap_new_fes__ConformanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ConformanceType(soap, n, NULL, NULL, NULL);
}

inline fes__ConformanceType * soap_new_req_fes__ConformanceType(
	struct soap *soap,
	const std::vector<ows__DomainType *> & Constraint)
{
	fes__ConformanceType *_p = ::soap_new_fes__ConformanceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ConformanceType::Constraint = Constraint;
	}
	return _p;
}

inline fes__ConformanceType * soap_new_set_fes__ConformanceType(
	struct soap *soap,
	const std::vector<ows__DomainType *> & Constraint,
	char *__item__1)
{
	fes__ConformanceType *_p = ::soap_new_fes__ConformanceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ConformanceType::Constraint = Constraint;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ConformanceType(struct soap *soap, fes__ConformanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ConformanceType", p->soap_type() == SOAP_TYPE_fes__ConformanceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ConformanceType(struct soap *soap, const char *URL, fes__ConformanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ConformanceType", p->soap_type() == SOAP_TYPE_fes__ConformanceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ConformanceType(struct soap *soap, const char *URL, fes__ConformanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ConformanceType", p->soap_type() == SOAP_TYPE_fes__ConformanceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ConformanceType(struct soap *soap, const char *URL, fes__ConformanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ConformanceType", p->soap_type() == SOAP_TYPE_fes__ConformanceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ConformanceType * SOAP_FMAC4 soap_get_fes__ConformanceType(struct soap*, fes__ConformanceType *, const char*, const char*);

inline int soap_read_fes__ConformanceType(struct soap *soap, fes__ConformanceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ConformanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ConformanceType(struct soap *soap, const char *URL, fes__ConformanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ConformanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ConformanceType(struct soap *soap, fes__ConformanceType *p)
{
	if (::soap_read_fes__ConformanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__LiteralType_DEFINED
#define SOAP_TYPE_fes__LiteralType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__LiteralType(struct soap*, const char*, int, const fes__LiteralType *, const char*);
SOAP_FMAC3 fes__LiteralType * SOAP_FMAC4 soap_in_fes__LiteralType(struct soap*, const char*, fes__LiteralType *, const char*);
SOAP_FMAC1 fes__LiteralType * SOAP_FMAC2 soap_instantiate_fes__LiteralType(struct soap*, int, const char*, const char*, size_t*);

inline fes__LiteralType * soap_new_fes__LiteralType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__LiteralType(soap, n, NULL, NULL, NULL);
}

inline fes__LiteralType * soap_new_req_fes__LiteralType(
	struct soap *soap)
{
	fes__LiteralType *_p = ::soap_new_fes__LiteralType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__LiteralType * soap_new_set_fes__LiteralType(
	struct soap *soap,
	char *__any,
	char **type,
	char *__mixed,
	char *__item__1)
{
	fes__LiteralType *_p = ::soap_new_fes__LiteralType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__LiteralType::__any = __any;
		_p->fes__LiteralType::type = type;
		_p->fes__LiteralType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__LiteralType(struct soap *soap, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LiteralType", p->soap_type() == SOAP_TYPE_fes__LiteralType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__LiteralType(struct soap *soap, const char *URL, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LiteralType", p->soap_type() == SOAP_TYPE_fes__LiteralType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__LiteralType(struct soap *soap, const char *URL, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LiteralType", p->soap_type() == SOAP_TYPE_fes__LiteralType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__LiteralType(struct soap *soap, const char *URL, fes__LiteralType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LiteralType", p->soap_type() == SOAP_TYPE_fes__LiteralType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__LiteralType * SOAP_FMAC4 soap_get_fes__LiteralType(struct soap*, fes__LiteralType *, const char*, const char*);

inline int soap_read_fes__LiteralType(struct soap *soap, fes__LiteralType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__LiteralType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__LiteralType(struct soap *soap, const char *URL, fes__LiteralType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__LiteralType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__LiteralType(struct soap *soap, fes__LiteralType *p)
{
	if (::soap_read_fes__LiteralType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__FunctionType_DEFINED
#define SOAP_TYPE_fes__FunctionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__FunctionType(struct soap*, const char*, int, const fes__FunctionType *, const char*);
SOAP_FMAC3 fes__FunctionType * SOAP_FMAC4 soap_in_fes__FunctionType(struct soap*, const char*, fes__FunctionType *, const char*);
SOAP_FMAC1 fes__FunctionType * SOAP_FMAC2 soap_instantiate_fes__FunctionType(struct soap*, int, const char*, const char*, size_t*);

inline fes__FunctionType * soap_new_fes__FunctionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__FunctionType(soap, n, NULL, NULL, NULL);
}

inline fes__FunctionType * soap_new_req_fes__FunctionType(
	struct soap *soap,
	int __sizeexpression,
	__fes__union_FunctionType *__union_FunctionType,
	const std::string& name)
{
	fes__FunctionType *_p = ::soap_new_fes__FunctionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__FunctionType::__sizeexpression = __sizeexpression;
		_p->fes__FunctionType::__union_FunctionType = __union_FunctionType;
		_p->fes__FunctionType::name = name;
	}
	return _p;
}

inline fes__FunctionType * soap_new_set_fes__FunctionType(
	struct soap *soap,
	int __sizeexpression,
	__fes__union_FunctionType *__union_FunctionType,
	const std::string& name,
	char *__item__1)
{
	fes__FunctionType *_p = ::soap_new_fes__FunctionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__FunctionType::__sizeexpression = __sizeexpression;
		_p->fes__FunctionType::__union_FunctionType = __union_FunctionType;
		_p->fes__FunctionType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__FunctionType(struct soap *soap, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FunctionType", p->soap_type() == SOAP_TYPE_fes__FunctionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__FunctionType(struct soap *soap, const char *URL, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FunctionType", p->soap_type() == SOAP_TYPE_fes__FunctionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__FunctionType(struct soap *soap, const char *URL, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FunctionType", p->soap_type() == SOAP_TYPE_fes__FunctionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__FunctionType(struct soap *soap, const char *URL, fes__FunctionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FunctionType", p->soap_type() == SOAP_TYPE_fes__FunctionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__FunctionType * SOAP_FMAC4 soap_get_fes__FunctionType(struct soap*, fes__FunctionType *, const char*, const char*);

inline int soap_read_fes__FunctionType(struct soap *soap, fes__FunctionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__FunctionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__FunctionType(struct soap *soap, const char *URL, fes__FunctionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__FunctionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__FunctionType(struct soap *soap, fes__FunctionType *p)
{
	if (::soap_read_fes__FunctionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__MeasureType_DEFINED
#define SOAP_TYPE_fes__MeasureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__MeasureType(struct soap*, const char*, int, const fes__MeasureType *, const char*);
SOAP_FMAC3 fes__MeasureType * SOAP_FMAC4 soap_in_fes__MeasureType(struct soap*, const char*, fes__MeasureType *, const char*);
SOAP_FMAC1 fes__MeasureType * SOAP_FMAC2 soap_instantiate_fes__MeasureType(struct soap*, int, const char*, const char*, size_t*);

inline fes__MeasureType * soap_new_fes__MeasureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__MeasureType(soap, n, NULL, NULL, NULL);
}

inline fes__MeasureType * soap_new_req_fes__MeasureType(
	struct soap *soap,
	double __item,
	const std::string& uom)
{
	fes__MeasureType *_p = ::soap_new_fes__MeasureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__MeasureType::__item = __item;
		_p->fes__MeasureType::uom = uom;
	}
	return _p;
}

inline fes__MeasureType * soap_new_set_fes__MeasureType(
	struct soap *soap,
	double __item,
	const std::string& uom,
	char *__item__1)
{
	fes__MeasureType *_p = ::soap_new_fes__MeasureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__MeasureType::__item = __item;
		_p->fes__MeasureType::uom = uom;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__MeasureType(struct soap *soap, fes__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MeasureType", p->soap_type() == SOAP_TYPE_fes__MeasureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__MeasureType(struct soap *soap, const char *URL, fes__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MeasureType", p->soap_type() == SOAP_TYPE_fes__MeasureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__MeasureType(struct soap *soap, const char *URL, fes__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MeasureType", p->soap_type() == SOAP_TYPE_fes__MeasureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__MeasureType(struct soap *soap, const char *URL, fes__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:MeasureType", p->soap_type() == SOAP_TYPE_fes__MeasureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__MeasureType * SOAP_FMAC4 soap_get_fes__MeasureType(struct soap*, fes__MeasureType *, const char*, const char*);

inline int soap_read_fes__MeasureType(struct soap *soap, fes__MeasureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__MeasureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__MeasureType(struct soap *soap, const char *URL, fes__MeasureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__MeasureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__MeasureType(struct soap *soap, fes__MeasureType *p)
{
	if (::soap_read_fes__MeasureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__UnaryLogicOpType_DEFINED
#define SOAP_TYPE_fes__UnaryLogicOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__UnaryLogicOpType(struct soap*, const char*, int, const fes__UnaryLogicOpType *, const char*);
SOAP_FMAC3 fes__UnaryLogicOpType * SOAP_FMAC4 soap_in_fes__UnaryLogicOpType(struct soap*, const char*, fes__UnaryLogicOpType *, const char*);
SOAP_FMAC1 fes__UnaryLogicOpType * SOAP_FMAC2 soap_instantiate_fes__UnaryLogicOpType(struct soap*, int, const char*, const char*, size_t*);

inline fes__UnaryLogicOpType * soap_new_fes__UnaryLogicOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__UnaryLogicOpType(soap, n, NULL, NULL, NULL);
}

inline fes__UnaryLogicOpType * soap_new_req_fes__UnaryLogicOpType(
	struct soap *soap,
	const union _fes__union_UnaryLogicOpType_& union_UnaryLogicOpType_)
{
	fes__UnaryLogicOpType *_p = ::soap_new_fes__UnaryLogicOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__UnaryLogicOpType::union_UnaryLogicOpType_ = union_UnaryLogicOpType_;
	}
	return _p;
}

inline fes__UnaryLogicOpType * soap_new_set_fes__UnaryLogicOpType(
	struct soap *soap,
	int __union_UnaryLogicOpType_,
	const union _fes__union_UnaryLogicOpType_& union_UnaryLogicOpType_,
	char *__item__2)
{
	fes__UnaryLogicOpType *_p = ::soap_new_fes__UnaryLogicOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__UnaryLogicOpType::__union_UnaryLogicOpType_ = __union_UnaryLogicOpType_;
		_p->fes__UnaryLogicOpType::union_UnaryLogicOpType_ = union_UnaryLogicOpType_;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__UnaryLogicOpType(struct soap *soap, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UnaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__UnaryLogicOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__UnaryLogicOpType(struct soap *soap, const char *URL, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UnaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__UnaryLogicOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__UnaryLogicOpType(struct soap *soap, const char *URL, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UnaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__UnaryLogicOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__UnaryLogicOpType(struct soap *soap, const char *URL, fes__UnaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UnaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__UnaryLogicOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__UnaryLogicOpType * SOAP_FMAC4 soap_get_fes__UnaryLogicOpType(struct soap*, fes__UnaryLogicOpType *, const char*, const char*);

inline int soap_read_fes__UnaryLogicOpType(struct soap *soap, fes__UnaryLogicOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__UnaryLogicOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__UnaryLogicOpType(struct soap *soap, const char *URL, fes__UnaryLogicOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__UnaryLogicOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__UnaryLogicOpType(struct soap *soap, fes__UnaryLogicOpType *p)
{
	if (::soap_read_fes__UnaryLogicOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__BinaryLogicOpType_DEFINED
#define SOAP_TYPE_fes__BinaryLogicOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__BinaryLogicOpType(struct soap*, const char*, int, const fes__BinaryLogicOpType *, const char*);
SOAP_FMAC3 fes__BinaryLogicOpType * SOAP_FMAC4 soap_in_fes__BinaryLogicOpType(struct soap*, const char*, fes__BinaryLogicOpType *, const char*);
SOAP_FMAC1 fes__BinaryLogicOpType * SOAP_FMAC2 soap_instantiate_fes__BinaryLogicOpType(struct soap*, int, const char*, const char*, size_t*);

inline fes__BinaryLogicOpType * soap_new_fes__BinaryLogicOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__BinaryLogicOpType(soap, n, NULL, NULL, NULL);
}

inline fes__BinaryLogicOpType * soap_new_req_fes__BinaryLogicOpType(
	struct soap *soap,
	const std::vector<__fes__union_BinaryLogicOpType> & __union_BinaryLogicOpType)
{
	fes__BinaryLogicOpType *_p = ::soap_new_fes__BinaryLogicOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__BinaryLogicOpType::__union_BinaryLogicOpType = __union_BinaryLogicOpType;
	}
	return _p;
}

inline fes__BinaryLogicOpType * soap_new_set_fes__BinaryLogicOpType(
	struct soap *soap,
	const std::vector<__fes__union_BinaryLogicOpType> & __union_BinaryLogicOpType,
	char *__item__2)
{
	fes__BinaryLogicOpType *_p = ::soap_new_fes__BinaryLogicOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__BinaryLogicOpType::__union_BinaryLogicOpType = __union_BinaryLogicOpType;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__BinaryLogicOpType(struct soap *soap, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__BinaryLogicOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__BinaryLogicOpType(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__BinaryLogicOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__BinaryLogicOpType(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__BinaryLogicOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__BinaryLogicOpType(struct soap *soap, const char *URL, fes__BinaryLogicOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryLogicOpType", p->soap_type() == SOAP_TYPE_fes__BinaryLogicOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__BinaryLogicOpType * SOAP_FMAC4 soap_get_fes__BinaryLogicOpType(struct soap*, fes__BinaryLogicOpType *, const char*, const char*);

inline int soap_read_fes__BinaryLogicOpType(struct soap *soap, fes__BinaryLogicOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__BinaryLogicOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__BinaryLogicOpType(struct soap *soap, const char *URL, fes__BinaryLogicOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__BinaryLogicOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__BinaryLogicOpType(struct soap *soap, fes__BinaryLogicOpType *p)
{
	if (::soap_read_fes__BinaryLogicOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__DistanceBufferType_DEFINED
#define SOAP_TYPE_fes__DistanceBufferType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__DistanceBufferType(struct soap*, const char*, int, const fes__DistanceBufferType *, const char*);
SOAP_FMAC3 fes__DistanceBufferType * SOAP_FMAC4 soap_in_fes__DistanceBufferType(struct soap*, const char*, fes__DistanceBufferType *, const char*);
SOAP_FMAC1 fes__DistanceBufferType * SOAP_FMAC2 soap_instantiate_fes__DistanceBufferType(struct soap*, int, const char*, const char*, size_t*);

inline fes__DistanceBufferType * soap_new_fes__DistanceBufferType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__DistanceBufferType(soap, n, NULL, NULL, NULL);
}

inline fes__DistanceBufferType * soap_new_req_fes__DistanceBufferType(
	struct soap *soap,
	fes__MeasureType *Distance)
{
	fes__DistanceBufferType *_p = ::soap_new_fes__DistanceBufferType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__DistanceBufferType::Distance = Distance;
	}
	return _p;
}

inline fes__DistanceBufferType * soap_new_set_fes__DistanceBufferType(
	struct soap *soap,
	const std::vector<__fes__union_DistanceBufferType> & __union_DistanceBufferType,
	fes__MeasureType *Distance,
	char *__item__2)
{
	fes__DistanceBufferType *_p = ::soap_new_fes__DistanceBufferType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__DistanceBufferType::__union_DistanceBufferType = __union_DistanceBufferType;
		_p->fes__DistanceBufferType::Distance = Distance;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__DistanceBufferType(struct soap *soap, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DistanceBufferType", p->soap_type() == SOAP_TYPE_fes__DistanceBufferType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__DistanceBufferType(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DistanceBufferType", p->soap_type() == SOAP_TYPE_fes__DistanceBufferType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__DistanceBufferType(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DistanceBufferType", p->soap_type() == SOAP_TYPE_fes__DistanceBufferType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__DistanceBufferType(struct soap *soap, const char *URL, fes__DistanceBufferType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:DistanceBufferType", p->soap_type() == SOAP_TYPE_fes__DistanceBufferType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__DistanceBufferType * SOAP_FMAC4 soap_get_fes__DistanceBufferType(struct soap*, fes__DistanceBufferType *, const char*, const char*);

inline int soap_read_fes__DistanceBufferType(struct soap *soap, fes__DistanceBufferType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__DistanceBufferType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__DistanceBufferType(struct soap *soap, const char *URL, fes__DistanceBufferType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__DistanceBufferType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__DistanceBufferType(struct soap *soap, fes__DistanceBufferType *p)
{
	if (::soap_read_fes__DistanceBufferType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__BBOXType_DEFINED
#define SOAP_TYPE_fes__BBOXType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__BBOXType(struct soap*, const char*, int, const fes__BBOXType *, const char*);
SOAP_FMAC3 fes__BBOXType * SOAP_FMAC4 soap_in_fes__BBOXType(struct soap*, const char*, fes__BBOXType *, const char*);
SOAP_FMAC1 fes__BBOXType * SOAP_FMAC2 soap_instantiate_fes__BBOXType(struct soap*, int, const char*, const char*, size_t*);

inline fes__BBOXType * soap_new_fes__BBOXType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__BBOXType(soap, n, NULL, NULL, NULL);
}

inline fes__BBOXType * soap_new_req_fes__BBOXType(
	struct soap *soap)
{
	fes__BBOXType *_p = ::soap_new_fes__BBOXType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__BBOXType * soap_new_set_fes__BBOXType(
	struct soap *soap,
	const std::vector<__fes__union_BBOXType> & __union_BBOXType,
	char *__item__2)
{
	fes__BBOXType *_p = ::soap_new_fes__BBOXType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__BBOXType::__union_BBOXType = __union_BBOXType;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__BBOXType(struct soap *soap, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOXType", p->soap_type() == SOAP_TYPE_fes__BBOXType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__BBOXType(struct soap *soap, const char *URL, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOXType", p->soap_type() == SOAP_TYPE_fes__BBOXType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__BBOXType(struct soap *soap, const char *URL, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOXType", p->soap_type() == SOAP_TYPE_fes__BBOXType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__BBOXType(struct soap *soap, const char *URL, fes__BBOXType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BBOXType", p->soap_type() == SOAP_TYPE_fes__BBOXType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__BBOXType * SOAP_FMAC4 soap_get_fes__BBOXType(struct soap*, fes__BBOXType *, const char*, const char*);

inline int soap_read_fes__BBOXType(struct soap *soap, fes__BBOXType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__BBOXType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__BBOXType(struct soap *soap, const char *URL, fes__BBOXType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__BBOXType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__BBOXType(struct soap *soap, fes__BBOXType *p)
{
	if (::soap_read_fes__BBOXType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__BinaryTemporalOpType_DEFINED
#define SOAP_TYPE_fes__BinaryTemporalOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__BinaryTemporalOpType(struct soap*, const char*, int, const fes__BinaryTemporalOpType *, const char*);
SOAP_FMAC3 fes__BinaryTemporalOpType * SOAP_FMAC4 soap_in_fes__BinaryTemporalOpType(struct soap*, const char*, fes__BinaryTemporalOpType *, const char*);
SOAP_FMAC1 fes__BinaryTemporalOpType * SOAP_FMAC2 soap_instantiate_fes__BinaryTemporalOpType(struct soap*, int, const char*, const char*, size_t*);

inline fes__BinaryTemporalOpType * soap_new_fes__BinaryTemporalOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__BinaryTemporalOpType(soap, n, NULL, NULL, NULL);
}

inline fes__BinaryTemporalOpType * soap_new_req_fes__BinaryTemporalOpType(
	struct soap *soap)
{
	fes__BinaryTemporalOpType *_p = ::soap_new_fes__BinaryTemporalOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__BinaryTemporalOpType * soap_new_set_fes__BinaryTemporalOpType(
	struct soap *soap,
	const std::vector<__fes__union_BinaryTemporalOpType> & __union_BinaryTemporalOpType,
	char *__item__2)
{
	fes__BinaryTemporalOpType *_p = ::soap_new_fes__BinaryTemporalOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__BinaryTemporalOpType::__union_BinaryTemporalOpType = __union_BinaryTemporalOpType;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__BinaryTemporalOpType(struct soap *soap, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryTemporalOpType", p->soap_type() == SOAP_TYPE_fes__BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__BinaryTemporalOpType(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryTemporalOpType", p->soap_type() == SOAP_TYPE_fes__BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__BinaryTemporalOpType(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryTemporalOpType", p->soap_type() == SOAP_TYPE_fes__BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__BinaryTemporalOpType(struct soap *soap, const char *URL, fes__BinaryTemporalOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryTemporalOpType", p->soap_type() == SOAP_TYPE_fes__BinaryTemporalOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__BinaryTemporalOpType * SOAP_FMAC4 soap_get_fes__BinaryTemporalOpType(struct soap*, fes__BinaryTemporalOpType *, const char*, const char*);

inline int soap_read_fes__BinaryTemporalOpType(struct soap *soap, fes__BinaryTemporalOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__BinaryTemporalOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__BinaryTemporalOpType(struct soap *soap, const char *URL, fes__BinaryTemporalOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__BinaryTemporalOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__BinaryTemporalOpType(struct soap *soap, fes__BinaryTemporalOpType *p)
{
	if (::soap_read_fes__BinaryTemporalOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__BinarySpatialOpType_DEFINED
#define SOAP_TYPE_fes__BinarySpatialOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__BinarySpatialOpType(struct soap*, const char*, int, const fes__BinarySpatialOpType *, const char*);
SOAP_FMAC3 fes__BinarySpatialOpType * SOAP_FMAC4 soap_in_fes__BinarySpatialOpType(struct soap*, const char*, fes__BinarySpatialOpType *, const char*);
SOAP_FMAC1 fes__BinarySpatialOpType * SOAP_FMAC2 soap_instantiate_fes__BinarySpatialOpType(struct soap*, int, const char*, const char*, size_t*);

inline fes__BinarySpatialOpType * soap_new_fes__BinarySpatialOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__BinarySpatialOpType(soap, n, NULL, NULL, NULL);
}

inline fes__BinarySpatialOpType * soap_new_req_fes__BinarySpatialOpType(
	struct soap *soap)
{
	fes__BinarySpatialOpType *_p = ::soap_new_fes__BinarySpatialOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__BinarySpatialOpType * soap_new_set_fes__BinarySpatialOpType(
	struct soap *soap,
	const std::vector<__fes__union_BinarySpatialOpType> & __union_BinarySpatialOpType,
	char *__item__2)
{
	fes__BinarySpatialOpType *_p = ::soap_new_fes__BinarySpatialOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__BinarySpatialOpType::__union_BinarySpatialOpType = __union_BinarySpatialOpType;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__BinarySpatialOpType(struct soap *soap, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinarySpatialOpType", p->soap_type() == SOAP_TYPE_fes__BinarySpatialOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__BinarySpatialOpType(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinarySpatialOpType", p->soap_type() == SOAP_TYPE_fes__BinarySpatialOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__BinarySpatialOpType(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinarySpatialOpType", p->soap_type() == SOAP_TYPE_fes__BinarySpatialOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__BinarySpatialOpType(struct soap *soap, const char *URL, fes__BinarySpatialOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinarySpatialOpType", p->soap_type() == SOAP_TYPE_fes__BinarySpatialOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__BinarySpatialOpType * SOAP_FMAC4 soap_get_fes__BinarySpatialOpType(struct soap*, fes__BinarySpatialOpType *, const char*, const char*);

inline int soap_read_fes__BinarySpatialOpType(struct soap *soap, fes__BinarySpatialOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__BinarySpatialOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__BinarySpatialOpType(struct soap *soap, const char *URL, fes__BinarySpatialOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__BinarySpatialOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__BinarySpatialOpType(struct soap *soap, fes__BinarySpatialOpType *p)
{
	if (::soap_read_fes__BinarySpatialOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__UpperBoundaryType_DEFINED
#define SOAP_TYPE_fes__UpperBoundaryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__UpperBoundaryType(struct soap*, const char*, int, const fes__UpperBoundaryType *, const char*);
SOAP_FMAC3 fes__UpperBoundaryType * SOAP_FMAC4 soap_in_fes__UpperBoundaryType(struct soap*, const char*, fes__UpperBoundaryType *, const char*);
SOAP_FMAC1 fes__UpperBoundaryType * SOAP_FMAC2 soap_instantiate_fes__UpperBoundaryType(struct soap*, int, const char*, const char*, size_t*);

inline fes__UpperBoundaryType * soap_new_fes__UpperBoundaryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__UpperBoundaryType(soap, n, NULL, NULL, NULL);
}

inline fes__UpperBoundaryType * soap_new_req_fes__UpperBoundaryType(
	struct soap *soap,
	const union _fes__union_UpperBoundaryType& union_UpperBoundaryType)
{
	fes__UpperBoundaryType *_p = ::soap_new_fes__UpperBoundaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__UpperBoundaryType::union_UpperBoundaryType = union_UpperBoundaryType;
	}
	return _p;
}

inline fes__UpperBoundaryType * soap_new_set_fes__UpperBoundaryType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_UpperBoundaryType& union_UpperBoundaryType,
	char *__item__1)
{
	fes__UpperBoundaryType *_p = ::soap_new_fes__UpperBoundaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__UpperBoundaryType::__unionexpression = __unionexpression;
		_p->fes__UpperBoundaryType::union_UpperBoundaryType = union_UpperBoundaryType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__UpperBoundaryType(struct soap *soap, fes__UpperBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UpperBoundaryType", p->soap_type() == SOAP_TYPE_fes__UpperBoundaryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__UpperBoundaryType(struct soap *soap, const char *URL, fes__UpperBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UpperBoundaryType", p->soap_type() == SOAP_TYPE_fes__UpperBoundaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__UpperBoundaryType(struct soap *soap, const char *URL, fes__UpperBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UpperBoundaryType", p->soap_type() == SOAP_TYPE_fes__UpperBoundaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__UpperBoundaryType(struct soap *soap, const char *URL, fes__UpperBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:UpperBoundaryType", p->soap_type() == SOAP_TYPE_fes__UpperBoundaryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__UpperBoundaryType * SOAP_FMAC4 soap_get_fes__UpperBoundaryType(struct soap*, fes__UpperBoundaryType *, const char*, const char*);

inline int soap_read_fes__UpperBoundaryType(struct soap *soap, fes__UpperBoundaryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__UpperBoundaryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__UpperBoundaryType(struct soap *soap, const char *URL, fes__UpperBoundaryType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__UpperBoundaryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__UpperBoundaryType(struct soap *soap, fes__UpperBoundaryType *p)
{
	if (::soap_read_fes__UpperBoundaryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__LowerBoundaryType_DEFINED
#define SOAP_TYPE_fes__LowerBoundaryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__LowerBoundaryType(struct soap*, const char*, int, const fes__LowerBoundaryType *, const char*);
SOAP_FMAC3 fes__LowerBoundaryType * SOAP_FMAC4 soap_in_fes__LowerBoundaryType(struct soap*, const char*, fes__LowerBoundaryType *, const char*);
SOAP_FMAC1 fes__LowerBoundaryType * SOAP_FMAC2 soap_instantiate_fes__LowerBoundaryType(struct soap*, int, const char*, const char*, size_t*);

inline fes__LowerBoundaryType * soap_new_fes__LowerBoundaryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__LowerBoundaryType(soap, n, NULL, NULL, NULL);
}

inline fes__LowerBoundaryType * soap_new_req_fes__LowerBoundaryType(
	struct soap *soap,
	const union _fes__union_LowerBoundaryType& union_LowerBoundaryType)
{
	fes__LowerBoundaryType *_p = ::soap_new_fes__LowerBoundaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__LowerBoundaryType::union_LowerBoundaryType = union_LowerBoundaryType;
	}
	return _p;
}

inline fes__LowerBoundaryType * soap_new_set_fes__LowerBoundaryType(
	struct soap *soap,
	int __union_LowerBoundaryType,
	const union _fes__union_LowerBoundaryType& union_LowerBoundaryType,
	char *__item__1)
{
	fes__LowerBoundaryType *_p = ::soap_new_fes__LowerBoundaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__LowerBoundaryType::__union_LowerBoundaryType = __union_LowerBoundaryType;
		_p->fes__LowerBoundaryType::union_LowerBoundaryType = union_LowerBoundaryType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__LowerBoundaryType(struct soap *soap, fes__LowerBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LowerBoundaryType", p->soap_type() == SOAP_TYPE_fes__LowerBoundaryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__LowerBoundaryType(struct soap *soap, const char *URL, fes__LowerBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LowerBoundaryType", p->soap_type() == SOAP_TYPE_fes__LowerBoundaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__LowerBoundaryType(struct soap *soap, const char *URL, fes__LowerBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LowerBoundaryType", p->soap_type() == SOAP_TYPE_fes__LowerBoundaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__LowerBoundaryType(struct soap *soap, const char *URL, fes__LowerBoundaryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LowerBoundaryType", p->soap_type() == SOAP_TYPE_fes__LowerBoundaryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__LowerBoundaryType * SOAP_FMAC4 soap_get_fes__LowerBoundaryType(struct soap*, fes__LowerBoundaryType *, const char*, const char*);

inline int soap_read_fes__LowerBoundaryType(struct soap *soap, fes__LowerBoundaryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__LowerBoundaryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__LowerBoundaryType(struct soap *soap, const char *URL, fes__LowerBoundaryType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__LowerBoundaryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__LowerBoundaryType(struct soap *soap, fes__LowerBoundaryType *p)
{
	if (::soap_read_fes__LowerBoundaryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__PropertyIsBetweenType_DEFINED
#define SOAP_TYPE_fes__PropertyIsBetweenType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__PropertyIsBetweenType(struct soap*, const char*, int, const fes__PropertyIsBetweenType *, const char*);
SOAP_FMAC3 fes__PropertyIsBetweenType * SOAP_FMAC4 soap_in_fes__PropertyIsBetweenType(struct soap*, const char*, fes__PropertyIsBetweenType *, const char*);
SOAP_FMAC1 fes__PropertyIsBetweenType * SOAP_FMAC2 soap_instantiate_fes__PropertyIsBetweenType(struct soap*, int, const char*, const char*, size_t*);

inline fes__PropertyIsBetweenType * soap_new_fes__PropertyIsBetweenType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__PropertyIsBetweenType(soap, n, NULL, NULL, NULL);
}

inline fes__PropertyIsBetweenType * soap_new_req_fes__PropertyIsBetweenType(
	struct soap *soap,
	const union _fes__union_PropertyIsBetweenType& union_PropertyIsBetweenType,
	fes__LowerBoundaryType *LowerBoundary,
	fes__UpperBoundaryType *UpperBoundary)
{
	fes__PropertyIsBetweenType *_p = ::soap_new_fes__PropertyIsBetweenType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsBetweenType::union_PropertyIsBetweenType = union_PropertyIsBetweenType;
		_p->fes__PropertyIsBetweenType::LowerBoundary = LowerBoundary;
		_p->fes__PropertyIsBetweenType::UpperBoundary = UpperBoundary;
	}
	return _p;
}

inline fes__PropertyIsBetweenType * soap_new_set_fes__PropertyIsBetweenType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_PropertyIsBetweenType& union_PropertyIsBetweenType,
	fes__LowerBoundaryType *LowerBoundary,
	fes__UpperBoundaryType *UpperBoundary,
	char *__item__2)
{
	fes__PropertyIsBetweenType *_p = ::soap_new_fes__PropertyIsBetweenType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsBetweenType::__unionexpression = __unionexpression;
		_p->fes__PropertyIsBetweenType::union_PropertyIsBetweenType = union_PropertyIsBetweenType;
		_p->fes__PropertyIsBetweenType::LowerBoundary = LowerBoundary;
		_p->fes__PropertyIsBetweenType::UpperBoundary = UpperBoundary;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__PropertyIsBetweenType(struct soap *soap, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetweenType", p->soap_type() == SOAP_TYPE_fes__PropertyIsBetweenType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__PropertyIsBetweenType(struct soap *soap, const char *URL, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetweenType", p->soap_type() == SOAP_TYPE_fes__PropertyIsBetweenType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__PropertyIsBetweenType(struct soap *soap, const char *URL, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetweenType", p->soap_type() == SOAP_TYPE_fes__PropertyIsBetweenType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__PropertyIsBetweenType(struct soap *soap, const char *URL, fes__PropertyIsBetweenType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsBetweenType", p->soap_type() == SOAP_TYPE_fes__PropertyIsBetweenType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__PropertyIsBetweenType * SOAP_FMAC4 soap_get_fes__PropertyIsBetweenType(struct soap*, fes__PropertyIsBetweenType *, const char*, const char*);

inline int soap_read_fes__PropertyIsBetweenType(struct soap *soap, fes__PropertyIsBetweenType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__PropertyIsBetweenType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__PropertyIsBetweenType(struct soap *soap, const char *URL, fes__PropertyIsBetweenType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__PropertyIsBetweenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__PropertyIsBetweenType(struct soap *soap, fes__PropertyIsBetweenType *p)
{
	if (::soap_read_fes__PropertyIsBetweenType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__PropertyIsNilType_DEFINED
#define SOAP_TYPE_fes__PropertyIsNilType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__PropertyIsNilType(struct soap*, const char*, int, const fes__PropertyIsNilType *, const char*);
SOAP_FMAC3 fes__PropertyIsNilType * SOAP_FMAC4 soap_in_fes__PropertyIsNilType(struct soap*, const char*, fes__PropertyIsNilType *, const char*);
SOAP_FMAC1 fes__PropertyIsNilType * SOAP_FMAC2 soap_instantiate_fes__PropertyIsNilType(struct soap*, int, const char*, const char*, size_t*);

inline fes__PropertyIsNilType * soap_new_fes__PropertyIsNilType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__PropertyIsNilType(soap, n, NULL, NULL, NULL);
}

inline fes__PropertyIsNilType * soap_new_req_fes__PropertyIsNilType(
	struct soap *soap,
	const union _fes__union_PropertyIsNilType& union_PropertyIsNilType)
{
	fes__PropertyIsNilType *_p = ::soap_new_fes__PropertyIsNilType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsNilType::union_PropertyIsNilType = union_PropertyIsNilType;
	}
	return _p;
}

inline fes__PropertyIsNilType * soap_new_set_fes__PropertyIsNilType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_PropertyIsNilType& union_PropertyIsNilType,
	std::string *nilReason,
	char *__item__2)
{
	fes__PropertyIsNilType *_p = ::soap_new_fes__PropertyIsNilType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsNilType::__unionexpression = __unionexpression;
		_p->fes__PropertyIsNilType::union_PropertyIsNilType = union_PropertyIsNilType;
		_p->fes__PropertyIsNilType::nilReason = nilReason;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__PropertyIsNilType(struct soap *soap, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNilType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNilType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__PropertyIsNilType(struct soap *soap, const char *URL, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNilType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNilType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__PropertyIsNilType(struct soap *soap, const char *URL, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNilType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNilType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__PropertyIsNilType(struct soap *soap, const char *URL, fes__PropertyIsNilType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNilType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNilType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__PropertyIsNilType * SOAP_FMAC4 soap_get_fes__PropertyIsNilType(struct soap*, fes__PropertyIsNilType *, const char*, const char*);

inline int soap_read_fes__PropertyIsNilType(struct soap *soap, fes__PropertyIsNilType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__PropertyIsNilType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__PropertyIsNilType(struct soap *soap, const char *URL, fes__PropertyIsNilType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__PropertyIsNilType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__PropertyIsNilType(struct soap *soap, fes__PropertyIsNilType *p)
{
	if (::soap_read_fes__PropertyIsNilType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__PropertyIsNullType_DEFINED
#define SOAP_TYPE_fes__PropertyIsNullType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__PropertyIsNullType(struct soap*, const char*, int, const fes__PropertyIsNullType *, const char*);
SOAP_FMAC3 fes__PropertyIsNullType * SOAP_FMAC4 soap_in_fes__PropertyIsNullType(struct soap*, const char*, fes__PropertyIsNullType *, const char*);
SOAP_FMAC1 fes__PropertyIsNullType * SOAP_FMAC2 soap_instantiate_fes__PropertyIsNullType(struct soap*, int, const char*, const char*, size_t*);

inline fes__PropertyIsNullType * soap_new_fes__PropertyIsNullType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__PropertyIsNullType(soap, n, NULL, NULL, NULL);
}

inline fes__PropertyIsNullType * soap_new_req_fes__PropertyIsNullType(
	struct soap *soap,
	const union _fes__union_PropertyIsNullType& union_PropertyIsNullType)
{
	fes__PropertyIsNullType *_p = ::soap_new_fes__PropertyIsNullType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsNullType::union_PropertyIsNullType = union_PropertyIsNullType;
	}
	return _p;
}

inline fes__PropertyIsNullType * soap_new_set_fes__PropertyIsNullType(
	struct soap *soap,
	int __unionexpression,
	const union _fes__union_PropertyIsNullType& union_PropertyIsNullType,
	char *__item__2)
{
	fes__PropertyIsNullType *_p = ::soap_new_fes__PropertyIsNullType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsNullType::__unionexpression = __unionexpression;
		_p->fes__PropertyIsNullType::union_PropertyIsNullType = union_PropertyIsNullType;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__PropertyIsNullType(struct soap *soap, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNullType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNullType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__PropertyIsNullType(struct soap *soap, const char *URL, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNullType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNullType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__PropertyIsNullType(struct soap *soap, const char *URL, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNullType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNullType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__PropertyIsNullType(struct soap *soap, const char *URL, fes__PropertyIsNullType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsNullType", p->soap_type() == SOAP_TYPE_fes__PropertyIsNullType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__PropertyIsNullType * SOAP_FMAC4 soap_get_fes__PropertyIsNullType(struct soap*, fes__PropertyIsNullType *, const char*, const char*);

inline int soap_read_fes__PropertyIsNullType(struct soap *soap, fes__PropertyIsNullType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__PropertyIsNullType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__PropertyIsNullType(struct soap *soap, const char *URL, fes__PropertyIsNullType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__PropertyIsNullType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__PropertyIsNullType(struct soap *soap, fes__PropertyIsNullType *p)
{
	if (::soap_read_fes__PropertyIsNullType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__PropertyIsLikeType_DEFINED
#define SOAP_TYPE_fes__PropertyIsLikeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__PropertyIsLikeType(struct soap*, const char*, int, const fes__PropertyIsLikeType *, const char*);
SOAP_FMAC3 fes__PropertyIsLikeType * SOAP_FMAC4 soap_in_fes__PropertyIsLikeType(struct soap*, const char*, fes__PropertyIsLikeType *, const char*);
SOAP_FMAC1 fes__PropertyIsLikeType * SOAP_FMAC2 soap_instantiate_fes__PropertyIsLikeType(struct soap*, int, const char*, const char*, size_t*);

inline fes__PropertyIsLikeType * soap_new_fes__PropertyIsLikeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__PropertyIsLikeType(soap, n, NULL, NULL, NULL);
}

inline fes__PropertyIsLikeType * soap_new_req_fes__PropertyIsLikeType(
	struct soap *soap,
	int __sizeexpression,
	__fes__union_PropertyIsLikeType *__union_PropertyIsLikeType,
	const std::string& wildCard,
	const std::string& singleChar,
	const std::string& escapeChar)
{
	fes__PropertyIsLikeType *_p = ::soap_new_fes__PropertyIsLikeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsLikeType::__sizeexpression = __sizeexpression;
		_p->fes__PropertyIsLikeType::__union_PropertyIsLikeType = __union_PropertyIsLikeType;
		_p->fes__PropertyIsLikeType::wildCard = wildCard;
		_p->fes__PropertyIsLikeType::singleChar = singleChar;
		_p->fes__PropertyIsLikeType::escapeChar = escapeChar;
	}
	return _p;
}

inline fes__PropertyIsLikeType * soap_new_set_fes__PropertyIsLikeType(
	struct soap *soap,
	int __sizeexpression,
	__fes__union_PropertyIsLikeType *__union_PropertyIsLikeType,
	const std::string& wildCard,
	const std::string& singleChar,
	const std::string& escapeChar,
	bool matchCase,
	char *__item__2)
{
	fes__PropertyIsLikeType *_p = ::soap_new_fes__PropertyIsLikeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__PropertyIsLikeType::__sizeexpression = __sizeexpression;
		_p->fes__PropertyIsLikeType::__union_PropertyIsLikeType = __union_PropertyIsLikeType;
		_p->fes__PropertyIsLikeType::wildCard = wildCard;
		_p->fes__PropertyIsLikeType::singleChar = singleChar;
		_p->fes__PropertyIsLikeType::escapeChar = escapeChar;
		_p->fes__PropertyIsLikeType::matchCase = matchCase;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__PropertyIsLikeType(struct soap *soap, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLikeType", p->soap_type() == SOAP_TYPE_fes__PropertyIsLikeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__PropertyIsLikeType(struct soap *soap, const char *URL, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLikeType", p->soap_type() == SOAP_TYPE_fes__PropertyIsLikeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__PropertyIsLikeType(struct soap *soap, const char *URL, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLikeType", p->soap_type() == SOAP_TYPE_fes__PropertyIsLikeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__PropertyIsLikeType(struct soap *soap, const char *URL, fes__PropertyIsLikeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:PropertyIsLikeType", p->soap_type() == SOAP_TYPE_fes__PropertyIsLikeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__PropertyIsLikeType * SOAP_FMAC4 soap_get_fes__PropertyIsLikeType(struct soap*, fes__PropertyIsLikeType *, const char*, const char*);

inline int soap_read_fes__PropertyIsLikeType(struct soap *soap, fes__PropertyIsLikeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__PropertyIsLikeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__PropertyIsLikeType(struct soap *soap, const char *URL, fes__PropertyIsLikeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__PropertyIsLikeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__PropertyIsLikeType(struct soap *soap, fes__PropertyIsLikeType *p)
{
	if (::soap_read_fes__PropertyIsLikeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__BinaryComparisonOpType_DEFINED
#define SOAP_TYPE_fes__BinaryComparisonOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__BinaryComparisonOpType(struct soap*, const char*, int, const fes__BinaryComparisonOpType *, const char*);
SOAP_FMAC3 fes__BinaryComparisonOpType * SOAP_FMAC4 soap_in_fes__BinaryComparisonOpType(struct soap*, const char*, fes__BinaryComparisonOpType *, const char*);
SOAP_FMAC1 fes__BinaryComparisonOpType * SOAP_FMAC2 soap_instantiate_fes__BinaryComparisonOpType(struct soap*, int, const char*, const char*, size_t*);

inline fes__BinaryComparisonOpType * soap_new_fes__BinaryComparisonOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__BinaryComparisonOpType(soap, n, NULL, NULL, NULL);
}

inline fes__BinaryComparisonOpType * soap_new_req_fes__BinaryComparisonOpType(
	struct soap *soap,
	int __sizeexpression,
	__fes__union_BinaryComparisonOpType *__union_BinaryComparisonOpType)
{
	fes__BinaryComparisonOpType *_p = ::soap_new_fes__BinaryComparisonOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__BinaryComparisonOpType::__sizeexpression = __sizeexpression;
		_p->fes__BinaryComparisonOpType::__union_BinaryComparisonOpType = __union_BinaryComparisonOpType;
	}
	return _p;
}

inline fes__BinaryComparisonOpType * soap_new_set_fes__BinaryComparisonOpType(
	struct soap *soap,
	int __sizeexpression,
	__fes__union_BinaryComparisonOpType *__union_BinaryComparisonOpType,
	bool matchCase,
	enum fes__MatchActionType matchAction,
	char *__item__2)
{
	fes__BinaryComparisonOpType *_p = ::soap_new_fes__BinaryComparisonOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__BinaryComparisonOpType::__sizeexpression = __sizeexpression;
		_p->fes__BinaryComparisonOpType::__union_BinaryComparisonOpType = __union_BinaryComparisonOpType;
		_p->fes__BinaryComparisonOpType::matchCase = matchCase;
		_p->fes__BinaryComparisonOpType::matchAction = matchAction;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__BinaryComparisonOpType(struct soap *soap, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryComparisonOpType", p->soap_type() == SOAP_TYPE_fes__BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__BinaryComparisonOpType(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryComparisonOpType", p->soap_type() == SOAP_TYPE_fes__BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__BinaryComparisonOpType(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryComparisonOpType", p->soap_type() == SOAP_TYPE_fes__BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__BinaryComparisonOpType(struct soap *soap, const char *URL, fes__BinaryComparisonOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:BinaryComparisonOpType", p->soap_type() == SOAP_TYPE_fes__BinaryComparisonOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__BinaryComparisonOpType * SOAP_FMAC4 soap_get_fes__BinaryComparisonOpType(struct soap*, fes__BinaryComparisonOpType *, const char*, const char*);

inline int soap_read_fes__BinaryComparisonOpType(struct soap *soap, fes__BinaryComparisonOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__BinaryComparisonOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__BinaryComparisonOpType(struct soap *soap, const char *URL, fes__BinaryComparisonOpType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__BinaryComparisonOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__BinaryComparisonOpType(struct soap *soap, fes__BinaryComparisonOpType *p)
{
	if (::soap_read_fes__BinaryComparisonOpType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ResourceIdType_DEFINED
#define SOAP_TYPE_fes__ResourceIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ResourceIdType(struct soap*, const char*, int, const fes__ResourceIdType *, const char*);
SOAP_FMAC3 fes__ResourceIdType * SOAP_FMAC4 soap_in_fes__ResourceIdType(struct soap*, const char*, fes__ResourceIdType *, const char*);
SOAP_FMAC1 fes__ResourceIdType * SOAP_FMAC2 soap_instantiate_fes__ResourceIdType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ResourceIdType * soap_new_fes__ResourceIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ResourceIdType(soap, n, NULL, NULL, NULL);
}

inline fes__ResourceIdType * soap_new_req_fes__ResourceIdType(
	struct soap *soap,
	const std::string& rid)
{
	fes__ResourceIdType *_p = ::soap_new_fes__ResourceIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ResourceIdType::rid = rid;
	}
	return _p;
}

inline fes__ResourceIdType * soap_new_set_fes__ResourceIdType(
	struct soap *soap,
	const std::string& rid,
	std::string *previousRid,
	std::string *version,
	time_t *startDate,
	time_t *endDate,
	char *__item__2)
{
	fes__ResourceIdType *_p = ::soap_new_fes__ResourceIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__ResourceIdType::rid = rid;
		_p->fes__ResourceIdType::previousRid = previousRid;
		_p->fes__ResourceIdType::version = version;
		_p->fes__ResourceIdType::startDate = startDate;
		_p->fes__ResourceIdType::endDate = endDate;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__ResourceIdType(struct soap *soap, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdType", p->soap_type() == SOAP_TYPE_fes__ResourceIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ResourceIdType(struct soap *soap, const char *URL, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdType", p->soap_type() == SOAP_TYPE_fes__ResourceIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ResourceIdType(struct soap *soap, const char *URL, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdType", p->soap_type() == SOAP_TYPE_fes__ResourceIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ResourceIdType(struct soap *soap, const char *URL, fes__ResourceIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ResourceIdType", p->soap_type() == SOAP_TYPE_fes__ResourceIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ResourceIdType * SOAP_FMAC4 soap_get_fes__ResourceIdType(struct soap*, fes__ResourceIdType *, const char*, const char*);

inline int soap_read_fes__ResourceIdType(struct soap *soap, fes__ResourceIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ResourceIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ResourceIdType(struct soap *soap, const char *URL, fes__ResourceIdType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ResourceIdType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ResourceIdType(struct soap *soap, fes__ResourceIdType *p)
{
	if (::soap_read_fes__ResourceIdType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AbstractIdType_DEFINED
#define SOAP_TYPE_fes__AbstractIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AbstractIdType(struct soap*, const char*, int, const fes__AbstractIdType *, const char*);
SOAP_FMAC3 fes__AbstractIdType * SOAP_FMAC4 soap_in_fes__AbstractIdType(struct soap*, const char*, fes__AbstractIdType *, const char*);
SOAP_FMAC1 fes__AbstractIdType * SOAP_FMAC2 soap_instantiate_fes__AbstractIdType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AbstractIdType * soap_new_fes__AbstractIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AbstractIdType(soap, n, NULL, NULL, NULL);
}

inline fes__AbstractIdType * soap_new_req_fes__AbstractIdType(
	struct soap *soap)
{
	fes__AbstractIdType *_p = ::soap_new_fes__AbstractIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__AbstractIdType * soap_new_set_fes__AbstractIdType(
	struct soap *soap,
	char *__item__1)
{
	fes__AbstractIdType *_p = ::soap_new_fes__AbstractIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AbstractIdType(struct soap *soap, fes__AbstractIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractIdType", p->soap_type() == SOAP_TYPE_fes__AbstractIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AbstractIdType(struct soap *soap, const char *URL, fes__AbstractIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractIdType", p->soap_type() == SOAP_TYPE_fes__AbstractIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AbstractIdType(struct soap *soap, const char *URL, fes__AbstractIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractIdType", p->soap_type() == SOAP_TYPE_fes__AbstractIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AbstractIdType(struct soap *soap, const char *URL, fes__AbstractIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractIdType", p->soap_type() == SOAP_TYPE_fes__AbstractIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AbstractIdType * SOAP_FMAC4 soap_get_fes__AbstractIdType(struct soap*, fes__AbstractIdType *, const char*, const char*);

inline int soap_read_fes__AbstractIdType(struct soap *soap, fes__AbstractIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AbstractIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AbstractIdType(struct soap *soap, const char *URL, fes__AbstractIdType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AbstractIdType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AbstractIdType(struct soap *soap, fes__AbstractIdType *p)
{
	if (::soap_read_fes__AbstractIdType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ExtensionOpsType_DEFINED
#define SOAP_TYPE_fes__ExtensionOpsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ExtensionOpsType(struct soap*, const char*, int, const fes__ExtensionOpsType *, const char*);
SOAP_FMAC3 fes__ExtensionOpsType * SOAP_FMAC4 soap_in_fes__ExtensionOpsType(struct soap*, const char*, fes__ExtensionOpsType *, const char*);
SOAP_FMAC1 fes__ExtensionOpsType * SOAP_FMAC2 soap_instantiate_fes__ExtensionOpsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ExtensionOpsType * soap_new_fes__ExtensionOpsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ExtensionOpsType(soap, n, NULL, NULL, NULL);
}

inline fes__ExtensionOpsType * soap_new_req_fes__ExtensionOpsType(
	struct soap *soap)
{
	fes__ExtensionOpsType *_p = ::soap_new_fes__ExtensionOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__ExtensionOpsType * soap_new_set_fes__ExtensionOpsType(
	struct soap *soap,
	char *__item__1)
{
	fes__ExtensionOpsType *_p = ::soap_new_fes__ExtensionOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ExtensionOpsType(struct soap *soap, fes__ExtensionOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOpsType", p->soap_type() == SOAP_TYPE_fes__ExtensionOpsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ExtensionOpsType(struct soap *soap, const char *URL, fes__ExtensionOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOpsType", p->soap_type() == SOAP_TYPE_fes__ExtensionOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ExtensionOpsType(struct soap *soap, const char *URL, fes__ExtensionOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOpsType", p->soap_type() == SOAP_TYPE_fes__ExtensionOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ExtensionOpsType(struct soap *soap, const char *URL, fes__ExtensionOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ExtensionOpsType", p->soap_type() == SOAP_TYPE_fes__ExtensionOpsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ExtensionOpsType * SOAP_FMAC4 soap_get_fes__ExtensionOpsType(struct soap*, fes__ExtensionOpsType *, const char*, const char*);

inline int soap_read_fes__ExtensionOpsType(struct soap *soap, fes__ExtensionOpsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ExtensionOpsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ExtensionOpsType(struct soap *soap, const char *URL, fes__ExtensionOpsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ExtensionOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ExtensionOpsType(struct soap *soap, fes__ExtensionOpsType *p)
{
	if (::soap_read_fes__ExtensionOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__LogicOpsType_DEFINED
#define SOAP_TYPE_fes__LogicOpsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__LogicOpsType(struct soap*, const char*, int, const fes__LogicOpsType *, const char*);
SOAP_FMAC3 fes__LogicOpsType * SOAP_FMAC4 soap_in_fes__LogicOpsType(struct soap*, const char*, fes__LogicOpsType *, const char*);
SOAP_FMAC1 fes__LogicOpsType * SOAP_FMAC2 soap_instantiate_fes__LogicOpsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__LogicOpsType * soap_new_fes__LogicOpsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__LogicOpsType(soap, n, NULL, NULL, NULL);
}

inline fes__LogicOpsType * soap_new_req_fes__LogicOpsType(
	struct soap *soap)
{
	fes__LogicOpsType *_p = ::soap_new_fes__LogicOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__LogicOpsType * soap_new_set_fes__LogicOpsType(
	struct soap *soap,
	char *__item__1)
{
	fes__LogicOpsType *_p = ::soap_new_fes__LogicOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__LogicOpsType(struct soap *soap, fes__LogicOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicOpsType", p->soap_type() == SOAP_TYPE_fes__LogicOpsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__LogicOpsType(struct soap *soap, const char *URL, fes__LogicOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicOpsType", p->soap_type() == SOAP_TYPE_fes__LogicOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__LogicOpsType(struct soap *soap, const char *URL, fes__LogicOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicOpsType", p->soap_type() == SOAP_TYPE_fes__LogicOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__LogicOpsType(struct soap *soap, const char *URL, fes__LogicOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:LogicOpsType", p->soap_type() == SOAP_TYPE_fes__LogicOpsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__LogicOpsType * SOAP_FMAC4 soap_get_fes__LogicOpsType(struct soap*, fes__LogicOpsType *, const char*, const char*);

inline int soap_read_fes__LogicOpsType(struct soap *soap, fes__LogicOpsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__LogicOpsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__LogicOpsType(struct soap *soap, const char *URL, fes__LogicOpsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__LogicOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__LogicOpsType(struct soap *soap, fes__LogicOpsType *p)
{
	if (::soap_read_fes__LogicOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__TemporalOpsType_DEFINED
#define SOAP_TYPE_fes__TemporalOpsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__TemporalOpsType(struct soap*, const char*, int, const fes__TemporalOpsType *, const char*);
SOAP_FMAC3 fes__TemporalOpsType * SOAP_FMAC4 soap_in_fes__TemporalOpsType(struct soap*, const char*, fes__TemporalOpsType *, const char*);
SOAP_FMAC1 fes__TemporalOpsType * SOAP_FMAC2 soap_instantiate_fes__TemporalOpsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__TemporalOpsType * soap_new_fes__TemporalOpsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__TemporalOpsType(soap, n, NULL, NULL, NULL);
}

inline fes__TemporalOpsType * soap_new_req_fes__TemporalOpsType(
	struct soap *soap)
{
	fes__TemporalOpsType *_p = ::soap_new_fes__TemporalOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__TemporalOpsType * soap_new_set_fes__TemporalOpsType(
	struct soap *soap,
	char *__item__1)
{
	fes__TemporalOpsType *_p = ::soap_new_fes__TemporalOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__TemporalOpsType(struct soap *soap, fes__TemporalOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOpsType", p->soap_type() == SOAP_TYPE_fes__TemporalOpsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__TemporalOpsType(struct soap *soap, const char *URL, fes__TemporalOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOpsType", p->soap_type() == SOAP_TYPE_fes__TemporalOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__TemporalOpsType(struct soap *soap, const char *URL, fes__TemporalOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOpsType", p->soap_type() == SOAP_TYPE_fes__TemporalOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__TemporalOpsType(struct soap *soap, const char *URL, fes__TemporalOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:TemporalOpsType", p->soap_type() == SOAP_TYPE_fes__TemporalOpsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__TemporalOpsType * SOAP_FMAC4 soap_get_fes__TemporalOpsType(struct soap*, fes__TemporalOpsType *, const char*, const char*);

inline int soap_read_fes__TemporalOpsType(struct soap *soap, fes__TemporalOpsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__TemporalOpsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__TemporalOpsType(struct soap *soap, const char *URL, fes__TemporalOpsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__TemporalOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__TemporalOpsType(struct soap *soap, fes__TemporalOpsType *p)
{
	if (::soap_read_fes__TemporalOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__SpatialOpsType_DEFINED
#define SOAP_TYPE_fes__SpatialOpsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__SpatialOpsType(struct soap*, const char*, int, const fes__SpatialOpsType *, const char*);
SOAP_FMAC3 fes__SpatialOpsType * SOAP_FMAC4 soap_in_fes__SpatialOpsType(struct soap*, const char*, fes__SpatialOpsType *, const char*);
SOAP_FMAC1 fes__SpatialOpsType * SOAP_FMAC2 soap_instantiate_fes__SpatialOpsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__SpatialOpsType * soap_new_fes__SpatialOpsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__SpatialOpsType(soap, n, NULL, NULL, NULL);
}

inline fes__SpatialOpsType * soap_new_req_fes__SpatialOpsType(
	struct soap *soap)
{
	fes__SpatialOpsType *_p = ::soap_new_fes__SpatialOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__SpatialOpsType * soap_new_set_fes__SpatialOpsType(
	struct soap *soap,
	char *__item__1)
{
	fes__SpatialOpsType *_p = ::soap_new_fes__SpatialOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__SpatialOpsType(struct soap *soap, fes__SpatialOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOpsType", p->soap_type() == SOAP_TYPE_fes__SpatialOpsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__SpatialOpsType(struct soap *soap, const char *URL, fes__SpatialOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOpsType", p->soap_type() == SOAP_TYPE_fes__SpatialOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__SpatialOpsType(struct soap *soap, const char *URL, fes__SpatialOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOpsType", p->soap_type() == SOAP_TYPE_fes__SpatialOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__SpatialOpsType(struct soap *soap, const char *URL, fes__SpatialOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:SpatialOpsType", p->soap_type() == SOAP_TYPE_fes__SpatialOpsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__SpatialOpsType * SOAP_FMAC4 soap_get_fes__SpatialOpsType(struct soap*, fes__SpatialOpsType *, const char*, const char*);

inline int soap_read_fes__SpatialOpsType(struct soap *soap, fes__SpatialOpsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__SpatialOpsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__SpatialOpsType(struct soap *soap, const char *URL, fes__SpatialOpsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__SpatialOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__SpatialOpsType(struct soap *soap, fes__SpatialOpsType *p)
{
	if (::soap_read_fes__SpatialOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__ComparisonOpsType_DEFINED
#define SOAP_TYPE_fes__ComparisonOpsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__ComparisonOpsType(struct soap*, const char*, int, const fes__ComparisonOpsType *, const char*);
SOAP_FMAC3 fes__ComparisonOpsType * SOAP_FMAC4 soap_in_fes__ComparisonOpsType(struct soap*, const char*, fes__ComparisonOpsType *, const char*);
SOAP_FMAC1 fes__ComparisonOpsType * SOAP_FMAC2 soap_instantiate_fes__ComparisonOpsType(struct soap*, int, const char*, const char*, size_t*);

inline fes__ComparisonOpsType * soap_new_fes__ComparisonOpsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__ComparisonOpsType(soap, n, NULL, NULL, NULL);
}

inline fes__ComparisonOpsType * soap_new_req_fes__ComparisonOpsType(
	struct soap *soap)
{
	fes__ComparisonOpsType *_p = ::soap_new_fes__ComparisonOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__ComparisonOpsType * soap_new_set_fes__ComparisonOpsType(
	struct soap *soap,
	char *__item__1)
{
	fes__ComparisonOpsType *_p = ::soap_new_fes__ComparisonOpsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__ComparisonOpsType(struct soap *soap, fes__ComparisonOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOpsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOpsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__ComparisonOpsType(struct soap *soap, const char *URL, fes__ComparisonOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOpsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__ComparisonOpsType(struct soap *soap, const char *URL, fes__ComparisonOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOpsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOpsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__ComparisonOpsType(struct soap *soap, const char *URL, fes__ComparisonOpsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:ComparisonOpsType", p->soap_type() == SOAP_TYPE_fes__ComparisonOpsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__ComparisonOpsType * SOAP_FMAC4 soap_get_fes__ComparisonOpsType(struct soap*, fes__ComparisonOpsType *, const char*, const char*);

inline int soap_read_fes__ComparisonOpsType(struct soap *soap, fes__ComparisonOpsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__ComparisonOpsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__ComparisonOpsType(struct soap *soap, const char *URL, fes__ComparisonOpsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__ComparisonOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__ComparisonOpsType(struct soap *soap, fes__ComparisonOpsType *p)
{
	if (::soap_read_fes__ComparisonOpsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__FilterType_DEFINED
#define SOAP_TYPE_fes__FilterType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__FilterType(struct soap*, const char*, int, const fes__FilterType *, const char*);
SOAP_FMAC3 fes__FilterType * SOAP_FMAC4 soap_in_fes__FilterType(struct soap*, const char*, fes__FilterType *, const char*);
SOAP_FMAC1 fes__FilterType * SOAP_FMAC2 soap_instantiate_fes__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline fes__FilterType * soap_new_fes__FilterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__FilterType(soap, n, NULL, NULL, NULL);
}

inline fes__FilterType * soap_new_req_fes__FilterType(
	struct soap *soap,
	const union _fes__union_FilterType& union_FilterType)
{
	fes__FilterType *_p = ::soap_new_fes__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__FilterType::union_FilterType = union_FilterType;
	}
	return _p;
}

inline fes__FilterType * soap_new_set_fes__FilterType(
	struct soap *soap,
	int __union_FilterType,
	const union _fes__union_FilterType& union_FilterType,
	char *__item__2)
{
	fes__FilterType *_p = ::soap_new_fes__FilterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__FilterType::__union_FilterType = __union_FilterType;
		_p->fes__FilterType::union_FilterType = union_FilterType;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__FilterType(struct soap *soap, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FilterType", p->soap_type() == SOAP_TYPE_fes__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__FilterType(struct soap *soap, const char *URL, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FilterType", p->soap_type() == SOAP_TYPE_fes__FilterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__FilterType(struct soap *soap, const char *URL, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FilterType", p->soap_type() == SOAP_TYPE_fes__FilterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__FilterType(struct soap *soap, const char *URL, fes__FilterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:FilterType", p->soap_type() == SOAP_TYPE_fes__FilterType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__FilterType * SOAP_FMAC4 soap_get_fes__FilterType(struct soap*, fes__FilterType *, const char*, const char*);

inline int soap_read_fes__FilterType(struct soap *soap, fes__FilterType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__FilterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__FilterType(struct soap *soap, const char *URL, fes__FilterType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__FilterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__FilterType(struct soap *soap, fes__FilterType *p)
{
	if (::soap_read_fes__FilterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AbstractSortingClauseType_DEFINED
#define SOAP_TYPE_fes__AbstractSortingClauseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AbstractSortingClauseType(struct soap*, const char*, int, const fes__AbstractSortingClauseType *, const char*);
SOAP_FMAC3 fes__AbstractSortingClauseType * SOAP_FMAC4 soap_in_fes__AbstractSortingClauseType(struct soap*, const char*, fes__AbstractSortingClauseType *, const char*);
SOAP_FMAC1 fes__AbstractSortingClauseType * SOAP_FMAC2 soap_instantiate_fes__AbstractSortingClauseType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AbstractSortingClauseType * soap_new_fes__AbstractSortingClauseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AbstractSortingClauseType(soap, n, NULL, NULL, NULL);
}

inline fes__AbstractSortingClauseType * soap_new_req_fes__AbstractSortingClauseType(
	struct soap *soap)
{
	fes__AbstractSortingClauseType *_p = ::soap_new_fes__AbstractSortingClauseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__AbstractSortingClauseType * soap_new_set_fes__AbstractSortingClauseType(
	struct soap *soap,
	char *__item__1)
{
	fes__AbstractSortingClauseType *_p = ::soap_new_fes__AbstractSortingClauseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AbstractSortingClauseType(struct soap *soap, fes__AbstractSortingClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSortingClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSortingClauseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AbstractSortingClauseType(struct soap *soap, const char *URL, fes__AbstractSortingClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSortingClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSortingClauseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AbstractSortingClauseType(struct soap *soap, const char *URL, fes__AbstractSortingClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSortingClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSortingClauseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AbstractSortingClauseType(struct soap *soap, const char *URL, fes__AbstractSortingClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSortingClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSortingClauseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AbstractSortingClauseType * SOAP_FMAC4 soap_get_fes__AbstractSortingClauseType(struct soap*, fes__AbstractSortingClauseType *, const char*, const char*);

inline int soap_read_fes__AbstractSortingClauseType(struct soap *soap, fes__AbstractSortingClauseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AbstractSortingClauseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AbstractSortingClauseType(struct soap *soap, const char *URL, fes__AbstractSortingClauseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AbstractSortingClauseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AbstractSortingClauseType(struct soap *soap, fes__AbstractSortingClauseType *p)
{
	if (::soap_read_fes__AbstractSortingClauseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AbstractSelectionClauseType_DEFINED
#define SOAP_TYPE_fes__AbstractSelectionClauseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AbstractSelectionClauseType(struct soap*, const char*, int, const fes__AbstractSelectionClauseType *, const char*);
SOAP_FMAC3 fes__AbstractSelectionClauseType * SOAP_FMAC4 soap_in_fes__AbstractSelectionClauseType(struct soap*, const char*, fes__AbstractSelectionClauseType *, const char*);
SOAP_FMAC1 fes__AbstractSelectionClauseType * SOAP_FMAC2 soap_instantiate_fes__AbstractSelectionClauseType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AbstractSelectionClauseType * soap_new_fes__AbstractSelectionClauseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AbstractSelectionClauseType(soap, n, NULL, NULL, NULL);
}

inline fes__AbstractSelectionClauseType * soap_new_req_fes__AbstractSelectionClauseType(
	struct soap *soap)
{
	fes__AbstractSelectionClauseType *_p = ::soap_new_fes__AbstractSelectionClauseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__AbstractSelectionClauseType * soap_new_set_fes__AbstractSelectionClauseType(
	struct soap *soap,
	char *__item__1)
{
	fes__AbstractSelectionClauseType *_p = ::soap_new_fes__AbstractSelectionClauseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AbstractSelectionClauseType(struct soap *soap, fes__AbstractSelectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSelectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSelectionClauseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AbstractSelectionClauseType(struct soap *soap, const char *URL, fes__AbstractSelectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSelectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSelectionClauseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AbstractSelectionClauseType(struct soap *soap, const char *URL, fes__AbstractSelectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSelectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSelectionClauseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AbstractSelectionClauseType(struct soap *soap, const char *URL, fes__AbstractSelectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractSelectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractSelectionClauseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AbstractSelectionClauseType * SOAP_FMAC4 soap_get_fes__AbstractSelectionClauseType(struct soap*, fes__AbstractSelectionClauseType *, const char*, const char*);

inline int soap_read_fes__AbstractSelectionClauseType(struct soap *soap, fes__AbstractSelectionClauseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AbstractSelectionClauseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AbstractSelectionClauseType(struct soap *soap, const char *URL, fes__AbstractSelectionClauseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AbstractSelectionClauseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AbstractSelectionClauseType(struct soap *soap, fes__AbstractSelectionClauseType *p)
{
	if (::soap_read_fes__AbstractSelectionClauseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AbstractProjectionClauseType_DEFINED
#define SOAP_TYPE_fes__AbstractProjectionClauseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AbstractProjectionClauseType(struct soap*, const char*, int, const fes__AbstractProjectionClauseType *, const char*);
SOAP_FMAC3 fes__AbstractProjectionClauseType * SOAP_FMAC4 soap_in_fes__AbstractProjectionClauseType(struct soap*, const char*, fes__AbstractProjectionClauseType *, const char*);
SOAP_FMAC1 fes__AbstractProjectionClauseType * SOAP_FMAC2 soap_instantiate_fes__AbstractProjectionClauseType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AbstractProjectionClauseType * soap_new_fes__AbstractProjectionClauseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AbstractProjectionClauseType(soap, n, NULL, NULL, NULL);
}

inline fes__AbstractProjectionClauseType * soap_new_req_fes__AbstractProjectionClauseType(
	struct soap *soap)
{
	fes__AbstractProjectionClauseType *_p = ::soap_new_fes__AbstractProjectionClauseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__AbstractProjectionClauseType * soap_new_set_fes__AbstractProjectionClauseType(
	struct soap *soap,
	char *__item__1)
{
	fes__AbstractProjectionClauseType *_p = ::soap_new_fes__AbstractProjectionClauseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AbstractProjectionClauseType(struct soap *soap, fes__AbstractProjectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractProjectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractProjectionClauseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AbstractProjectionClauseType(struct soap *soap, const char *URL, fes__AbstractProjectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractProjectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractProjectionClauseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AbstractProjectionClauseType(struct soap *soap, const char *URL, fes__AbstractProjectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractProjectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractProjectionClauseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AbstractProjectionClauseType(struct soap *soap, const char *URL, fes__AbstractProjectionClauseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractProjectionClauseType", p->soap_type() == SOAP_TYPE_fes__AbstractProjectionClauseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AbstractProjectionClauseType * SOAP_FMAC4 soap_get_fes__AbstractProjectionClauseType(struct soap*, fes__AbstractProjectionClauseType *, const char*, const char*);

inline int soap_read_fes__AbstractProjectionClauseType(struct soap *soap, fes__AbstractProjectionClauseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AbstractProjectionClauseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AbstractProjectionClauseType(struct soap *soap, const char *URL, fes__AbstractProjectionClauseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AbstractProjectionClauseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AbstractProjectionClauseType(struct soap *soap, fes__AbstractProjectionClauseType *p)
{
	if (::soap_read_fes__AbstractProjectionClauseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AbstractAdhocQueryExpressionType_DEFINED
#define SOAP_TYPE_fes__AbstractAdhocQueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AbstractAdhocQueryExpressionType(struct soap*, const char*, int, const fes__AbstractAdhocQueryExpressionType *, const char*);
SOAP_FMAC3 fes__AbstractAdhocQueryExpressionType * SOAP_FMAC4 soap_in_fes__AbstractAdhocQueryExpressionType(struct soap*, const char*, fes__AbstractAdhocQueryExpressionType *, const char*);
SOAP_FMAC1 fes__AbstractAdhocQueryExpressionType * SOAP_FMAC2 soap_instantiate_fes__AbstractAdhocQueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AbstractAdhocQueryExpressionType * soap_new_fes__AbstractAdhocQueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AbstractAdhocQueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline fes__AbstractAdhocQueryExpressionType * soap_new_req_fes__AbstractAdhocQueryExpressionType(
	struct soap *soap,
	int __sizeAbstractProjectionClause,
	__fes__union_AbstractAdhocQueryExpressionType *__union_AbstractAdhocQueryExpressionType,
	const union _fes__union_AbstractAdhocQueryExpressionType_& union_AbstractAdhocQueryExpressionType_,
	const union _fes__union_AbstractAdhocQueryExpressionType__& union_AbstractAdhocQueryExpressionType__,
	const std::string& typeNames)
{
	fes__AbstractAdhocQueryExpressionType *_p = ::soap_new_fes__AbstractAdhocQueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AbstractAdhocQueryExpressionType::__sizeAbstractProjectionClause = __sizeAbstractProjectionClause;
		_p->fes__AbstractAdhocQueryExpressionType::__union_AbstractAdhocQueryExpressionType = __union_AbstractAdhocQueryExpressionType;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType_ = union_AbstractAdhocQueryExpressionType_;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType__ = union_AbstractAdhocQueryExpressionType__;
		_p->fes__AbstractAdhocQueryExpressionType::typeNames = typeNames;
	}
	return _p;
}

inline fes__AbstractAdhocQueryExpressionType * soap_new_set_fes__AbstractAdhocQueryExpressionType(
	struct soap *soap,
	int __sizeAbstractProjectionClause,
	__fes__union_AbstractAdhocQueryExpressionType *__union_AbstractAdhocQueryExpressionType,
	int __unionAbstractSelectionClause,
	const union _fes__union_AbstractAdhocQueryExpressionType_& union_AbstractAdhocQueryExpressionType_,
	int __unionAbstractSortingClause,
	const union _fes__union_AbstractAdhocQueryExpressionType__& union_AbstractAdhocQueryExpressionType__,
	const std::string& typeNames,
	std::string *aliases,
	std::string *handle__1,
	char *__item__2)
{
	fes__AbstractAdhocQueryExpressionType *_p = ::soap_new_fes__AbstractAdhocQueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AbstractAdhocQueryExpressionType::__sizeAbstractProjectionClause = __sizeAbstractProjectionClause;
		_p->fes__AbstractAdhocQueryExpressionType::__union_AbstractAdhocQueryExpressionType = __union_AbstractAdhocQueryExpressionType;
		_p->fes__AbstractAdhocQueryExpressionType::__unionAbstractSelectionClause = __unionAbstractSelectionClause;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType_ = union_AbstractAdhocQueryExpressionType_;
		_p->fes__AbstractAdhocQueryExpressionType::__unionAbstractSortingClause = __unionAbstractSortingClause;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType__ = union_AbstractAdhocQueryExpressionType__;
		_p->fes__AbstractAdhocQueryExpressionType::typeNames = typeNames;
		_p->fes__AbstractAdhocQueryExpressionType::aliases = aliases;
		_p->fes__AbstractQueryExpressionType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_fes__AbstractAdhocQueryExpressionType(struct soap *soap, fes__AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractAdhocQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractAdhocQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractAdhocQueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AbstractAdhocQueryExpressionType * SOAP_FMAC4 soap_get_fes__AbstractAdhocQueryExpressionType(struct soap*, fes__AbstractAdhocQueryExpressionType *, const char*, const char*);

inline int soap_read_fes__AbstractAdhocQueryExpressionType(struct soap *soap, fes__AbstractAdhocQueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AbstractAdhocQueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AbstractAdhocQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractAdhocQueryExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AbstractAdhocQueryExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AbstractAdhocQueryExpressionType(struct soap *soap, fes__AbstractAdhocQueryExpressionType *p)
{
	if (::soap_read_fes__AbstractAdhocQueryExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_fes__AbstractQueryExpressionType_DEFINED
#define SOAP_TYPE_fes__AbstractQueryExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__AbstractQueryExpressionType(struct soap*, const char*, int, const fes__AbstractQueryExpressionType *, const char*);
SOAP_FMAC3 fes__AbstractQueryExpressionType * SOAP_FMAC4 soap_in_fes__AbstractQueryExpressionType(struct soap*, const char*, fes__AbstractQueryExpressionType *, const char*);
SOAP_FMAC1 fes__AbstractQueryExpressionType * SOAP_FMAC2 soap_instantiate_fes__AbstractQueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline fes__AbstractQueryExpressionType * soap_new_fes__AbstractQueryExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_fes__AbstractQueryExpressionType(soap, n, NULL, NULL, NULL);
}

inline fes__AbstractQueryExpressionType * soap_new_req_fes__AbstractQueryExpressionType(
	struct soap *soap)
{
	fes__AbstractQueryExpressionType *_p = ::soap_new_fes__AbstractQueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline fes__AbstractQueryExpressionType * soap_new_set_fes__AbstractQueryExpressionType(
	struct soap *soap,
	std::string *handle,
	char *__item__1)
{
	fes__AbstractQueryExpressionType *_p = ::soap_new_fes__AbstractQueryExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AbstractQueryExpressionType::handle = handle;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_fes__AbstractQueryExpressionType(struct soap *soap, fes__AbstractQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractQueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_fes__AbstractQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractQueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__AbstractQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractQueryExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__AbstractQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractQueryExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "fes:AbstractQueryExpressionType", p->soap_type() == SOAP_TYPE_fes__AbstractQueryExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 fes__AbstractQueryExpressionType * SOAP_FMAC4 soap_get_fes__AbstractQueryExpressionType(struct soap*, fes__AbstractQueryExpressionType *, const char*, const char*);

inline int soap_read_fes__AbstractQueryExpressionType(struct soap *soap, fes__AbstractQueryExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_fes__AbstractQueryExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__AbstractQueryExpressionType(struct soap *soap, const char *URL, fes__AbstractQueryExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__AbstractQueryExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__AbstractQueryExpressionType(struct soap *soap, fes__AbstractQueryExpressionType *p)
{
	if (::soap_read_fes__AbstractQueryExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__arcType_DEFINED
#define SOAP_TYPE_xlink__arcType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__arcType(struct soap*, const char*, int, const xlink__arcType *, const char*);
SOAP_FMAC3 xlink__arcType * SOAP_FMAC4 soap_in_xlink__arcType(struct soap*, const char*, xlink__arcType *, const char*);
SOAP_FMAC1 xlink__arcType * SOAP_FMAC2 soap_instantiate_xlink__arcType(struct soap*, int, const char*, const char*, size_t*);

inline xlink__arcType * soap_new_xlink__arcType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__arcType(soap, n, NULL, NULL, NULL);
}

inline xlink__arcType * soap_new_req_xlink__arcType(
	struct soap *soap,
	int __sizetitle,
	__xlink__union_arcType *__union_arcType,
	enum xlink__typeType xlink__type)
{
	xlink__arcType *_p = ::soap_new_xlink__arcType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__arcType::__sizetitle = __sizetitle;
		_p->xlink__arcType::__union_arcType = __union_arcType;
		_p->xlink__arcType::xlink__type = xlink__type;
	}
	return _p;
}

inline xlink__arcType * soap_new_set_xlink__arcType(
	struct soap *soap,
	int __sizetitle,
	__xlink__union_arcType *__union_arcType,
	enum xlink__typeType xlink__type,
	char **xlink__arcrole,
	std::string *xlink__title,
	enum xlink__showType *xlink__show,
	enum xlink__actuateType *xlink__actuate,
	char **xlink__from,
	char **xlink__to,
	char *__item__1)
{
	xlink__arcType *_p = ::soap_new_xlink__arcType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__arcType::__sizetitle = __sizetitle;
		_p->xlink__arcType::__union_arcType = __union_arcType;
		_p->xlink__arcType::xlink__type = xlink__type;
		_p->xlink__arcType::xlink__arcrole = xlink__arcrole;
		_p->xlink__arcType::xlink__title = xlink__title;
		_p->xlink__arcType::xlink__show = xlink__show;
		_p->xlink__arcType::xlink__actuate = xlink__actuate;
		_p->xlink__arcType::xlink__from = xlink__from;
		_p->xlink__arcType::xlink__to = xlink__to;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__arcType(struct soap *soap, xlink__arcType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcType", p->soap_type() == SOAP_TYPE_xlink__arcType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__arcType(struct soap *soap, const char *URL, xlink__arcType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcType", p->soap_type() == SOAP_TYPE_xlink__arcType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__arcType(struct soap *soap, const char *URL, xlink__arcType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcType", p->soap_type() == SOAP_TYPE_xlink__arcType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__arcType(struct soap *soap, const char *URL, xlink__arcType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:arcType", p->soap_type() == SOAP_TYPE_xlink__arcType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__arcType * SOAP_FMAC4 soap_get_xlink__arcType(struct soap*, xlink__arcType *, const char*, const char*);

inline int soap_read_xlink__arcType(struct soap *soap, xlink__arcType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__arcType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__arcType(struct soap *soap, const char *URL, xlink__arcType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__arcType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__arcType(struct soap *soap, xlink__arcType *p)
{
	if (::soap_read_xlink__arcType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__locatorType_DEFINED
#define SOAP_TYPE_xlink__locatorType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__locatorType(struct soap*, const char*, int, const xlink__locatorType *, const char*);
SOAP_FMAC3 xlink__locatorType * SOAP_FMAC4 soap_in_xlink__locatorType(struct soap*, const char*, xlink__locatorType *, const char*);
SOAP_FMAC1 xlink__locatorType * SOAP_FMAC2 soap_instantiate_xlink__locatorType(struct soap*, int, const char*, const char*, size_t*);

inline xlink__locatorType * soap_new_xlink__locatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__locatorType(soap, n, NULL, NULL, NULL);
}

inline xlink__locatorType * soap_new_req_xlink__locatorType(
	struct soap *soap,
	int __sizetitle,
	__xlink__union_locatorType *__union_locatorType,
	enum xlink__typeType xlink__type,
	char *xlink__href)
{
	xlink__locatorType *_p = ::soap_new_xlink__locatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__locatorType::__sizetitle = __sizetitle;
		_p->xlink__locatorType::__union_locatorType = __union_locatorType;
		_p->xlink__locatorType::xlink__type = xlink__type;
		_p->xlink__locatorType::xlink__href = xlink__href;
	}
	return _p;
}

inline xlink__locatorType * soap_new_set_xlink__locatorType(
	struct soap *soap,
	int __sizetitle,
	__xlink__union_locatorType *__union_locatorType,
	enum xlink__typeType xlink__type,
	char *xlink__href,
	char **xlink__role,
	std::string *xlink__title,
	char **xlink__label,
	char *__item__1)
{
	xlink__locatorType *_p = ::soap_new_xlink__locatorType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__locatorType::__sizetitle = __sizetitle;
		_p->xlink__locatorType::__union_locatorType = __union_locatorType;
		_p->xlink__locatorType::xlink__type = xlink__type;
		_p->xlink__locatorType::xlink__href = xlink__href;
		_p->xlink__locatorType::xlink__role = xlink__role;
		_p->xlink__locatorType::xlink__title = xlink__title;
		_p->xlink__locatorType::xlink__label = xlink__label;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__locatorType(struct soap *soap, xlink__locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:locatorType", p->soap_type() == SOAP_TYPE_xlink__locatorType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__locatorType(struct soap *soap, const char *URL, xlink__locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:locatorType", p->soap_type() == SOAP_TYPE_xlink__locatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__locatorType(struct soap *soap, const char *URL, xlink__locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:locatorType", p->soap_type() == SOAP_TYPE_xlink__locatorType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__locatorType(struct soap *soap, const char *URL, xlink__locatorType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:locatorType", p->soap_type() == SOAP_TYPE_xlink__locatorType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__locatorType * SOAP_FMAC4 soap_get_xlink__locatorType(struct soap*, xlink__locatorType *, const char*, const char*);

inline int soap_read_xlink__locatorType(struct soap *soap, xlink__locatorType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__locatorType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__locatorType(struct soap *soap, const char *URL, xlink__locatorType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__locatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__locatorType(struct soap *soap, xlink__locatorType *p)
{
	if (::soap_read_xlink__locatorType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__resourceType_DEFINED
#define SOAP_TYPE_xlink__resourceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__resourceType(struct soap*, const char*, int, const xlink__resourceType *, const char*);
SOAP_FMAC3 xlink__resourceType * SOAP_FMAC4 soap_in_xlink__resourceType(struct soap*, const char*, xlink__resourceType *, const char*);
SOAP_FMAC1 xlink__resourceType * SOAP_FMAC2 soap_instantiate_xlink__resourceType(struct soap*, int, const char*, const char*, size_t*);

inline xlink__resourceType * soap_new_xlink__resourceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__resourceType(soap, n, NULL, NULL, NULL);
}

inline xlink__resourceType * soap_new_req_xlink__resourceType(
	struct soap *soap,
	enum xlink__typeType xlink__type)
{
	xlink__resourceType *_p = ::soap_new_xlink__resourceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__resourceType::xlink__type = xlink__type;
	}
	return _p;
}

inline xlink__resourceType * soap_new_set_xlink__resourceType(
	struct soap *soap,
	const std::vector<char *> & __any,
	enum xlink__typeType xlink__type,
	char **xlink__role,
	std::string *xlink__title,
	char **xlink__label,
	char *__mixed,
	char *__item__1)
{
	xlink__resourceType *_p = ::soap_new_xlink__resourceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__resourceType::__any = __any;
		_p->xlink__resourceType::xlink__type = xlink__type;
		_p->xlink__resourceType::xlink__role = xlink__role;
		_p->xlink__resourceType::xlink__title = xlink__title;
		_p->xlink__resourceType::xlink__label = xlink__label;
		_p->xlink__resourceType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__resourceType(struct soap *soap, xlink__resourceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:resourceType", p->soap_type() == SOAP_TYPE_xlink__resourceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__resourceType(struct soap *soap, const char *URL, xlink__resourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:resourceType", p->soap_type() == SOAP_TYPE_xlink__resourceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__resourceType(struct soap *soap, const char *URL, xlink__resourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:resourceType", p->soap_type() == SOAP_TYPE_xlink__resourceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__resourceType(struct soap *soap, const char *URL, xlink__resourceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:resourceType", p->soap_type() == SOAP_TYPE_xlink__resourceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__resourceType * SOAP_FMAC4 soap_get_xlink__resourceType(struct soap*, xlink__resourceType *, const char*, const char*);

inline int soap_read_xlink__resourceType(struct soap *soap, xlink__resourceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__resourceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__resourceType(struct soap *soap, const char *URL, xlink__resourceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__resourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__resourceType(struct soap *soap, xlink__resourceType *p)
{
	if (::soap_read_xlink__resourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__titleEltType_DEFINED
#define SOAP_TYPE_xlink__titleEltType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__titleEltType(struct soap*, const char*, int, const xlink__titleEltType *, const char*);
SOAP_FMAC3 xlink__titleEltType * SOAP_FMAC4 soap_in_xlink__titleEltType(struct soap*, const char*, xlink__titleEltType *, const char*);
SOAP_FMAC1 xlink__titleEltType * SOAP_FMAC2 soap_instantiate_xlink__titleEltType(struct soap*, int, const char*, const char*, size_t*);

inline xlink__titleEltType * soap_new_xlink__titleEltType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__titleEltType(soap, n, NULL, NULL, NULL);
}

inline xlink__titleEltType * soap_new_req_xlink__titleEltType(
	struct soap *soap,
	enum xlink__typeType xlink__type)
{
	xlink__titleEltType *_p = ::soap_new_xlink__titleEltType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__titleEltType::xlink__type = xlink__type;
	}
	return _p;
}

inline xlink__titleEltType * soap_new_set_xlink__titleEltType(
	struct soap *soap,
	const std::vector<char *> & __any,
	enum xlink__typeType xlink__type,
	char **xml__lang,
	char *__mixed,
	char *__item__1)
{
	xlink__titleEltType *_p = ::soap_new_xlink__titleEltType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__titleEltType::__any = __any;
		_p->xlink__titleEltType::xlink__type = xlink__type;
		_p->xlink__titleEltType::xml__lang = xml__lang;
		_p->xlink__titleEltType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__titleEltType(struct soap *soap, xlink__titleEltType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleEltType", p->soap_type() == SOAP_TYPE_xlink__titleEltType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__titleEltType(struct soap *soap, const char *URL, xlink__titleEltType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleEltType", p->soap_type() == SOAP_TYPE_xlink__titleEltType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__titleEltType(struct soap *soap, const char *URL, xlink__titleEltType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleEltType", p->soap_type() == SOAP_TYPE_xlink__titleEltType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__titleEltType(struct soap *soap, const char *URL, xlink__titleEltType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:titleEltType", p->soap_type() == SOAP_TYPE_xlink__titleEltType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__titleEltType * SOAP_FMAC4 soap_get_xlink__titleEltType(struct soap*, xlink__titleEltType *, const char*, const char*);

inline int soap_read_xlink__titleEltType(struct soap *soap, xlink__titleEltType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__titleEltType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__titleEltType(struct soap *soap, const char *URL, xlink__titleEltType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__titleEltType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__titleEltType(struct soap *soap, xlink__titleEltType *p)
{
	if (::soap_read_xlink__titleEltType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__extended_DEFINED
#define SOAP_TYPE_xlink__extended_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__extended(struct soap*, const char*, int, const xlink__extended *, const char*);
SOAP_FMAC3 xlink__extended * SOAP_FMAC4 soap_in_xlink__extended(struct soap*, const char*, xlink__extended *, const char*);
SOAP_FMAC1 xlink__extended * SOAP_FMAC2 soap_instantiate_xlink__extended(struct soap*, int, const char*, const char*, size_t*);

inline xlink__extended * soap_new_xlink__extended(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__extended(soap, n, NULL, NULL, NULL);
}

inline xlink__extended * soap_new_req_xlink__extended(
	struct soap *soap,
	enum xlink__typeType xlink__type)
{
	xlink__extended *_p = ::soap_new_xlink__extended(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__extended::xlink__type = xlink__type;
	}
	return _p;
}

inline xlink__extended * soap_new_set_xlink__extended(
	struct soap *soap,
	const std::vector<__xlink__union_extended> & __union_extended,
	enum xlink__typeType xlink__type,
	char **xlink__role,
	std::string *xlink__title,
	char *__item__1)
{
	xlink__extended *_p = ::soap_new_xlink__extended(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__extended::__union_extended = __union_extended;
		_p->xlink__extended::xlink__type = xlink__type;
		_p->xlink__extended::xlink__role = xlink__role;
		_p->xlink__extended::xlink__title = xlink__title;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__extended(struct soap *soap, xlink__extended const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:extended", p->soap_type() == SOAP_TYPE_xlink__extended ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__extended(struct soap *soap, const char *URL, xlink__extended const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:extended", p->soap_type() == SOAP_TYPE_xlink__extended ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__extended(struct soap *soap, const char *URL, xlink__extended const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:extended", p->soap_type() == SOAP_TYPE_xlink__extended ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__extended(struct soap *soap, const char *URL, xlink__extended const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:extended", p->soap_type() == SOAP_TYPE_xlink__extended ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__extended * SOAP_FMAC4 soap_get_xlink__extended(struct soap*, xlink__extended *, const char*, const char*);

inline int soap_read_xlink__extended(struct soap *soap, xlink__extended *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__extended(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__extended(struct soap *soap, const char *URL, xlink__extended *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__extended(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__extended(struct soap *soap, xlink__extended *p)
{
	if (::soap_read_xlink__extended(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xlink__simple_DEFINED
#define SOAP_TYPE_xlink__simple_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__simple(struct soap*, const char*, int, const xlink__simple *, const char*);
SOAP_FMAC3 xlink__simple * SOAP_FMAC4 soap_in_xlink__simple(struct soap*, const char*, xlink__simple *, const char*);
SOAP_FMAC1 xlink__simple * SOAP_FMAC2 soap_instantiate_xlink__simple(struct soap*, int, const char*, const char*, size_t*);

inline xlink__simple * soap_new_xlink__simple(struct soap *soap, int n = -1)
{
	return soap_instantiate_xlink__simple(soap, n, NULL, NULL, NULL);
}

inline xlink__simple * soap_new_req_xlink__simple(
	struct soap *soap)
{
	xlink__simple *_p = ::soap_new_xlink__simple(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xlink__simple * soap_new_set_xlink__simple(
	struct soap *soap,
	const std::vector<char *> & __any,
	enum xlink__typeType xlink__type,
	char **xlink__href,
	char **xlink__role,
	char **xlink__arcrole,
	std::string *xlink__title,
	enum xlink__showType *xlink__show,
	enum xlink__actuateType *xlink__actuate,
	char *__mixed,
	char *__item__1)
{
	xlink__simple *_p = ::soap_new_xlink__simple(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xlink__simple::__any = __any;
		_p->xlink__simple::xlink__type = xlink__type;
		_p->xlink__simple::xlink__href = xlink__href;
		_p->xlink__simple::xlink__role = xlink__role;
		_p->xlink__simple::xlink__arcrole = xlink__arcrole;
		_p->xlink__simple::xlink__title = xlink__title;
		_p->xlink__simple::xlink__show = xlink__show;
		_p->xlink__simple::xlink__actuate = xlink__actuate;
		_p->xlink__simple::__mixed = __mixed;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xlink__simple(struct soap *soap, xlink__simple const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:simple", p->soap_type() == SOAP_TYPE_xlink__simple ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xlink__simple(struct soap *soap, const char *URL, xlink__simple const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:simple", p->soap_type() == SOAP_TYPE_xlink__simple ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__simple(struct soap *soap, const char *URL, xlink__simple const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:simple", p->soap_type() == SOAP_TYPE_xlink__simple ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__simple(struct soap *soap, const char *URL, xlink__simple const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xlink:simple", p->soap_type() == SOAP_TYPE_xlink__simple ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xlink__simple * SOAP_FMAC4 soap_get_xlink__simple(struct soap*, xlink__simple *, const char*, const char*);

inline int soap_read_xlink__simple(struct soap *soap, xlink__simple *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xlink__simple(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__simple(struct soap *soap, const char *URL, xlink__simple *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__simple(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__simple(struct soap *soap, xlink__simple *p)
{
	if (::soap_read_xlink__simple(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_idls__ExtendedCapabilitiesType_DEFINED
#define SOAP_TYPE_idls__ExtendedCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_idls__ExtendedCapabilitiesType(struct soap*, const char*, int, const idls__ExtendedCapabilitiesType *, const char*);
SOAP_FMAC3 idls__ExtendedCapabilitiesType * SOAP_FMAC4 soap_in_idls__ExtendedCapabilitiesType(struct soap*, const char*, idls__ExtendedCapabilitiesType *, const char*);
SOAP_FMAC1 idls__ExtendedCapabilitiesType * SOAP_FMAC2 soap_instantiate_idls__ExtendedCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline idls__ExtendedCapabilitiesType * soap_new_idls__ExtendedCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_idls__ExtendedCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline idls__ExtendedCapabilitiesType * soap_new_req_idls__ExtendedCapabilitiesType(
	struct soap *soap,
	const std::vector<icommon__uniqueResourceIdentifier *> & SpatialDataSetIdentifier)
{
	idls__ExtendedCapabilitiesType *_p = ::soap_new_idls__ExtendedCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->idls__ExtendedCapabilitiesType::SpatialDataSetIdentifier = SpatialDataSetIdentifier;
	}
	return _p;
}

inline idls__ExtendedCapabilitiesType * soap_new_set_idls__ExtendedCapabilitiesType(
	struct soap *soap,
	const std::vector<icommon__uniqueResourceIdentifier *> & SpatialDataSetIdentifier,
	icommon__resourceLocatorType *MetadataUrl__1,
	icommon__supportedLanguagesType *SupportedLanguages__1,
	icommon__languageElementISO6392B *ResponseLanguage__1,
	const std::vector<icommon__resourceLocatorType *> & ResourceLocator__1,
	enum icommon__serviceSpatialDataResourceType *ResourceType__1,
	const std::vector<icommon__temporalReference *> & TemporalReference__1,
	const std::vector<icommon__conformity *> & Conformity__1,
	const std::vector<icommon__metadataPointOfContact *> & MetadataPointOfContact__1,
	std::string *MetadataDate__1,
	enum icommon__spatialDataServiceType *SpatialDataServiceType__1,
	const std::vector<icommon__classificationOfSpatialDataService *> & MandatoryKeyword__1,
	const std::vector<icommon__keyword *> & Keyword__1,
	icommon__supportedLanguagesType *SupportedLanguages___1,
	icommon__languageElementISO6392B *ResponseLanguage___1,
	icommon__resourceLocatorType *MetadataUrl___1,
	char *__item__2)
{
	idls__ExtendedCapabilitiesType *_p = ::soap_new_idls__ExtendedCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->idls__ExtendedCapabilitiesType::SpatialDataSetIdentifier = SpatialDataSetIdentifier;
		_p->icommon__ExtendedCapabilitiesType::MetadataUrl = MetadataUrl__1;
		_p->icommon__ExtendedCapabilitiesType::SupportedLanguages = SupportedLanguages__1;
		_p->icommon__ExtendedCapabilitiesType::ResponseLanguage = ResponseLanguage__1;
		_p->icommon__ExtendedCapabilitiesType::ResourceLocator = ResourceLocator__1;
		_p->icommon__ExtendedCapabilitiesType::ResourceType = ResourceType__1;
		_p->icommon__ExtendedCapabilitiesType::TemporalReference = TemporalReference__1;
		_p->icommon__ExtendedCapabilitiesType::Conformity = Conformity__1;
		_p->icommon__ExtendedCapabilitiesType::MetadataPointOfContact = MetadataPointOfContact__1;
		_p->icommon__ExtendedCapabilitiesType::MetadataDate = MetadataDate__1;
		_p->icommon__ExtendedCapabilitiesType::SpatialDataServiceType = SpatialDataServiceType__1;
		_p->icommon__ExtendedCapabilitiesType::MandatoryKeyword = MandatoryKeyword__1;
		_p->icommon__ExtendedCapabilitiesType::Keyword = Keyword__1;
		_p->icommon__ExtendedCapabilitiesType::SupportedLanguages_ = SupportedLanguages___1;
		_p->icommon__ExtendedCapabilitiesType::ResponseLanguage_ = ResponseLanguage___1;
		_p->icommon__ExtendedCapabilitiesType::MetadataUrl_ = MetadataUrl___1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_idls__ExtendedCapabilitiesType(struct soap *soap, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_idls__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_idls__ExtendedCapabilitiesType(struct soap *soap, const char *URL, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_idls__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_idls__ExtendedCapabilitiesType(struct soap *soap, const char *URL, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_idls__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_idls__ExtendedCapabilitiesType(struct soap *soap, const char *URL, idls__ExtendedCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "idls:ExtendedCapabilitiesType", p->soap_type() == SOAP_TYPE_idls__ExtendedCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 idls__ExtendedCapabilitiesType * SOAP_FMAC4 soap_get_idls__ExtendedCapabilitiesType(struct soap*, idls__ExtendedCapabilitiesType *, const char*, const char*);

inline int soap_read_idls__ExtendedCapabilitiesType(struct soap *soap, idls__ExtendedCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_idls__ExtendedCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_idls__ExtendedCapabilitiesType(struct soap *soap, const char *URL, idls__ExtendedCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_idls__ExtendedCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_idls__ExtendedCapabilitiesType(struct soap *soap, idls__ExtendedCapabilitiesType *p)
{
	if (::soap_read_idls__ExtendedCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__AllowedValues_DEFINED
#define SOAP_TYPE__ows__AllowedValues_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__AllowedValues(struct soap*, const char*, int, const _ows__AllowedValues *, const char*);
SOAP_FMAC3 _ows__AllowedValues * SOAP_FMAC4 soap_in__ows__AllowedValues(struct soap*, const char*, _ows__AllowedValues *, const char*);
SOAP_FMAC1 _ows__AllowedValues * SOAP_FMAC2 soap_instantiate__ows__AllowedValues(struct soap*, int, const char*, const char*, size_t*);

inline _ows__AllowedValues * soap_new__ows__AllowedValues(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__AllowedValues(soap, n, NULL, NULL, NULL);
}

inline _ows__AllowedValues * soap_new_req__ows__AllowedValues(
	struct soap *soap)
{
	_ows__AllowedValues *_p = ::soap_new__ows__AllowedValues(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ows__AllowedValues * soap_new_set__ows__AllowedValues(
	struct soap *soap,
	const std::vector<__ows__union_AllowedValues> & __union_AllowedValues)
{
	_ows__AllowedValues *_p = ::soap_new__ows__AllowedValues(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__AllowedValues::__union_AllowedValues = __union_AllowedValues;
	}
	return _p;
}

inline int soap_write__ows__AllowedValues(struct soap *soap, _ows__AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AllowedValues", p->soap_type() == SOAP_TYPE__ows__AllowedValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__AllowedValues(struct soap *soap, const char *URL, _ows__AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AllowedValues", p->soap_type() == SOAP_TYPE__ows__AllowedValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__AllowedValues(struct soap *soap, const char *URL, _ows__AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AllowedValues", p->soap_type() == SOAP_TYPE__ows__AllowedValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__AllowedValues(struct soap *soap, const char *URL, _ows__AllowedValues const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AllowedValues", p->soap_type() == SOAP_TYPE__ows__AllowedValues ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__AllowedValues * SOAP_FMAC4 soap_get__ows__AllowedValues(struct soap*, _ows__AllowedValues *, const char*, const char*);

inline int soap_read__ows__AllowedValues(struct soap *soap, _ows__AllowedValues *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__AllowedValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__AllowedValues(struct soap *soap, const char *URL, _ows__AllowedValues *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__AllowedValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__AllowedValues(struct soap *soap, _ows__AllowedValues *p)
{
	if (::soap_read__ows__AllowedValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__ValuesReference_DEFINED
#define SOAP_TYPE__ows__ValuesReference_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__ValuesReference(struct soap*, const char*, int, const _ows__ValuesReference *, const char*);
SOAP_FMAC3 _ows__ValuesReference * SOAP_FMAC4 soap_in__ows__ValuesReference(struct soap*, const char*, _ows__ValuesReference *, const char*);
SOAP_FMAC1 _ows__ValuesReference * SOAP_FMAC2 soap_instantiate__ows__ValuesReference(struct soap*, int, const char*, const char*, size_t*);

inline _ows__ValuesReference * soap_new__ows__ValuesReference(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__ValuesReference(soap, n, NULL, NULL, NULL);
}

inline _ows__ValuesReference * soap_new_req__ows__ValuesReference(
	struct soap *soap,
	const std::string& __item,
	char *ows__reference)
{
	_ows__ValuesReference *_p = ::soap_new__ows__ValuesReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ValuesReference::__item = __item;
		_p->_ows__ValuesReference::ows__reference = ows__reference;
	}
	return _p;
}

inline _ows__ValuesReference * soap_new_set__ows__ValuesReference(
	struct soap *soap,
	const std::string& __item,
	char *ows__reference)
{
	_ows__ValuesReference *_p = ::soap_new__ows__ValuesReference(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ValuesReference::__item = __item;
		_p->_ows__ValuesReference::ows__reference = ows__reference;
	}
	return _p;
}

inline int soap_write__ows__ValuesReference(struct soap *soap, _ows__ValuesReference const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValuesReference", p->soap_type() == SOAP_TYPE__ows__ValuesReference ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ValuesReference(struct soap *soap, const char *URL, _ows__ValuesReference const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValuesReference", p->soap_type() == SOAP_TYPE__ows__ValuesReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ValuesReference(struct soap *soap, const char *URL, _ows__ValuesReference const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValuesReference", p->soap_type() == SOAP_TYPE__ows__ValuesReference ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ValuesReference(struct soap *soap, const char *URL, _ows__ValuesReference const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValuesReference", p->soap_type() == SOAP_TYPE__ows__ValuesReference ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__ValuesReference * SOAP_FMAC4 soap_get__ows__ValuesReference(struct soap*, _ows__ValuesReference *, const char*, const char*);

inline int soap_read__ows__ValuesReference(struct soap *soap, _ows__ValuesReference *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__ValuesReference(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__ValuesReference(struct soap *soap, const char *URL, _ows__ValuesReference *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__ValuesReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__ValuesReference(struct soap *soap, _ows__ValuesReference *p)
{
	if (::soap_read__ows__ValuesReference(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__NoValues_DEFINED
#define SOAP_TYPE__ows__NoValues_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__NoValues(struct soap*, const char*, int, const _ows__NoValues *, const char*);
SOAP_FMAC3 _ows__NoValues * SOAP_FMAC4 soap_in__ows__NoValues(struct soap*, const char*, _ows__NoValues *, const char*);
SOAP_FMAC1 _ows__NoValues * SOAP_FMAC2 soap_instantiate__ows__NoValues(struct soap*, int, const char*, const char*, size_t*);

inline _ows__NoValues * soap_new__ows__NoValues(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__NoValues(soap, n, NULL, NULL, NULL);
}

inline _ows__NoValues * soap_new_req__ows__NoValues(
	struct soap *soap)
{
	_ows__NoValues *_p = ::soap_new__ows__NoValues(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ows__NoValues * soap_new_set__ows__NoValues(
	struct soap *soap)
{
	_ows__NoValues *_p = ::soap_new__ows__NoValues(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ows__NoValues(struct soap *soap, _ows__NoValues const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:NoValues", p->soap_type() == SOAP_TYPE__ows__NoValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__NoValues(struct soap *soap, const char *URL, _ows__NoValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:NoValues", p->soap_type() == SOAP_TYPE__ows__NoValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__NoValues(struct soap *soap, const char *URL, _ows__NoValues const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:NoValues", p->soap_type() == SOAP_TYPE__ows__NoValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__NoValues(struct soap *soap, const char *URL, _ows__NoValues const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:NoValues", p->soap_type() == SOAP_TYPE__ows__NoValues ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__NoValues * SOAP_FMAC4 soap_get__ows__NoValues(struct soap*, _ows__NoValues *, const char*, const char*);

inline int soap_read__ows__NoValues(struct soap *soap, _ows__NoValues *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__NoValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__NoValues(struct soap *soap, const char *URL, _ows__NoValues *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__NoValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__NoValues(struct soap *soap, _ows__NoValues *p)
{
	if (::soap_read__ows__NoValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__AnyValue_DEFINED
#define SOAP_TYPE__ows__AnyValue_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__AnyValue(struct soap*, const char*, int, const _ows__AnyValue *, const char*);
SOAP_FMAC3 _ows__AnyValue * SOAP_FMAC4 soap_in__ows__AnyValue(struct soap*, const char*, _ows__AnyValue *, const char*);
SOAP_FMAC1 _ows__AnyValue * SOAP_FMAC2 soap_instantiate__ows__AnyValue(struct soap*, int, const char*, const char*, size_t*);

inline _ows__AnyValue * soap_new__ows__AnyValue(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__AnyValue(soap, n, NULL, NULL, NULL);
}

inline _ows__AnyValue * soap_new_req__ows__AnyValue(
	struct soap *soap)
{
	_ows__AnyValue *_p = ::soap_new__ows__AnyValue(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ows__AnyValue * soap_new_set__ows__AnyValue(
	struct soap *soap)
{
	_ows__AnyValue *_p = ::soap_new__ows__AnyValue(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ows__AnyValue(struct soap *soap, _ows__AnyValue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AnyValue", p->soap_type() == SOAP_TYPE__ows__AnyValue ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__AnyValue(struct soap *soap, const char *URL, _ows__AnyValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AnyValue", p->soap_type() == SOAP_TYPE__ows__AnyValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__AnyValue(struct soap *soap, const char *URL, _ows__AnyValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AnyValue", p->soap_type() == SOAP_TYPE__ows__AnyValue ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__AnyValue(struct soap *soap, const char *URL, _ows__AnyValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AnyValue", p->soap_type() == SOAP_TYPE__ows__AnyValue ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__AnyValue * SOAP_FMAC4 soap_get__ows__AnyValue(struct soap*, _ows__AnyValue *, const char*, const char*);

inline int soap_read__ows__AnyValue(struct soap *soap, _ows__AnyValue *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__AnyValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__AnyValue(struct soap *soap, const char *URL, _ows__AnyValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__AnyValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__AnyValue(struct soap *soap, _ows__AnyValue *p)
{
	if (::soap_read__ows__AnyValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__HTTP_DEFINED
#define SOAP_TYPE__ows__HTTP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__HTTP(struct soap*, const char*, int, const _ows__HTTP *, const char*);
SOAP_FMAC3 _ows__HTTP * SOAP_FMAC4 soap_in__ows__HTTP(struct soap*, const char*, _ows__HTTP *, const char*);
SOAP_FMAC1 _ows__HTTP * SOAP_FMAC2 soap_instantiate__ows__HTTP(struct soap*, int, const char*, const char*, size_t*);

inline _ows__HTTP * soap_new__ows__HTTP(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__HTTP(soap, n, NULL, NULL, NULL);
}

inline _ows__HTTP * soap_new_req__ows__HTTP(
	struct soap *soap)
{
	_ows__HTTP *_p = ::soap_new__ows__HTTP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ows__HTTP * soap_new_set__ows__HTTP(
	struct soap *soap,
	const std::vector<__ows__union_HTTP> & __union_HTTP)
{
	_ows__HTTP *_p = ::soap_new__ows__HTTP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__HTTP::__union_HTTP = __union_HTTP;
	}
	return _p;
}

inline int soap_write__ows__HTTP(struct soap *soap, _ows__HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:HTTP", p->soap_type() == SOAP_TYPE__ows__HTTP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__HTTP(struct soap *soap, const char *URL, _ows__HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:HTTP", p->soap_type() == SOAP_TYPE__ows__HTTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__HTTP(struct soap *soap, const char *URL, _ows__HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:HTTP", p->soap_type() == SOAP_TYPE__ows__HTTP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__HTTP(struct soap *soap, const char *URL, _ows__HTTP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:HTTP", p->soap_type() == SOAP_TYPE__ows__HTTP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__HTTP * SOAP_FMAC4 soap_get__ows__HTTP(struct soap*, _ows__HTTP *, const char*, const char*);

inline int soap_read__ows__HTTP(struct soap *soap, _ows__HTTP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__HTTP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__HTTP(struct soap *soap, const char *URL, _ows__HTTP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__HTTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__HTTP(struct soap *soap, _ows__HTTP *p)
{
	if (::soap_read__ows__HTTP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__DCP_DEFINED
#define SOAP_TYPE__ows__DCP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__DCP(struct soap*, const char*, int, const _ows__DCP *, const char*);
SOAP_FMAC3 _ows__DCP * SOAP_FMAC4 soap_in__ows__DCP(struct soap*, const char*, _ows__DCP *, const char*);
SOAP_FMAC1 _ows__DCP * SOAP_FMAC2 soap_instantiate__ows__DCP(struct soap*, int, const char*, const char*, size_t*);

inline _ows__DCP * soap_new__ows__DCP(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__DCP(soap, n, NULL, NULL, NULL);
}

inline _ows__DCP * soap_new_req__ows__DCP(
	struct soap *soap,
	const union _ows__union_DCP& union_DCP)
{
	_ows__DCP *_p = ::soap_new__ows__DCP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__DCP::union_DCP = union_DCP;
	}
	return _p;
}

inline _ows__DCP * soap_new_set__ows__DCP(
	struct soap *soap,
	int __union_DCP,
	const union _ows__union_DCP& union_DCP)
{
	_ows__DCP *_p = ::soap_new__ows__DCP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__DCP::__union_DCP = __union_DCP;
		_p->_ows__DCP::union_DCP = union_DCP;
	}
	return _p;
}

inline int soap_write__ows__DCP(struct soap *soap, _ows__DCP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DCP", p->soap_type() == SOAP_TYPE__ows__DCP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__DCP(struct soap *soap, const char *URL, _ows__DCP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DCP", p->soap_type() == SOAP_TYPE__ows__DCP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__DCP(struct soap *soap, const char *URL, _ows__DCP const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DCP", p->soap_type() == SOAP_TYPE__ows__DCP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__DCP(struct soap *soap, const char *URL, _ows__DCP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DCP", p->soap_type() == SOAP_TYPE__ows__DCP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__DCP * SOAP_FMAC4 soap_get__ows__DCP(struct soap*, _ows__DCP *, const char*, const char*);

inline int soap_read__ows__DCP(struct soap *soap, _ows__DCP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__DCP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__DCP(struct soap *soap, const char *URL, _ows__DCP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__DCP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__DCP(struct soap *soap, _ows__DCP *p)
{
	if (::soap_read__ows__DCP(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__Operation_DEFINED
#define SOAP_TYPE__ows__Operation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__Operation(struct soap*, const char*, int, const _ows__Operation *, const char*);
SOAP_FMAC3 _ows__Operation * SOAP_FMAC4 soap_in__ows__Operation(struct soap*, const char*, _ows__Operation *, const char*);
SOAP_FMAC1 _ows__Operation * SOAP_FMAC2 soap_instantiate__ows__Operation(struct soap*, int, const char*, const char*, size_t*);

inline _ows__Operation * soap_new__ows__Operation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__Operation(soap, n, NULL, NULL, NULL);
}

inline _ows__Operation * soap_new_req__ows__Operation(
	struct soap *soap,
	const std::vector<_ows__DCP *> & DCP,
	const std::string& name)
{
	_ows__Operation *_p = ::soap_new__ows__Operation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__Operation::DCP = DCP;
		_p->_ows__Operation::name = name;
	}
	return _p;
}

inline _ows__Operation * soap_new_set__ows__Operation(
	struct soap *soap,
	const std::vector<_ows__DCP *> & DCP,
	const std::vector<ows__DomainType *> & Parameter,
	const std::vector<ows__DomainType *> & Constraint,
	const std::vector<ows__MetadataType *> & Metadata,
	const std::string& name)
{
	_ows__Operation *_p = ::soap_new__ows__Operation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__Operation::DCP = DCP;
		_p->_ows__Operation::Parameter = Parameter;
		_p->_ows__Operation::Constraint = Constraint;
		_p->_ows__Operation::Metadata = Metadata;
		_p->_ows__Operation::name = name;
	}
	return _p;
}

inline int soap_write__ows__Operation(struct soap *soap, _ows__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Operation", p->soap_type() == SOAP_TYPE__ows__Operation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__Operation(struct soap *soap, const char *URL, _ows__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Operation", p->soap_type() == SOAP_TYPE__ows__Operation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__Operation(struct soap *soap, const char *URL, _ows__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Operation", p->soap_type() == SOAP_TYPE__ows__Operation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__Operation(struct soap *soap, const char *URL, _ows__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:Operation", p->soap_type() == SOAP_TYPE__ows__Operation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__Operation * SOAP_FMAC4 soap_get__ows__Operation(struct soap*, _ows__Operation *, const char*, const char*);

inline int soap_read__ows__Operation(struct soap *soap, _ows__Operation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__Operation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__Operation(struct soap *soap, const char *URL, _ows__Operation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__Operation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__Operation(struct soap *soap, _ows__Operation *p)
{
	if (::soap_read__ows__Operation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__OperationsMetadata_DEFINED
#define SOAP_TYPE__ows__OperationsMetadata_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__OperationsMetadata(struct soap*, const char*, int, const _ows__OperationsMetadata *, const char*);
SOAP_FMAC3 _ows__OperationsMetadata * SOAP_FMAC4 soap_in__ows__OperationsMetadata(struct soap*, const char*, _ows__OperationsMetadata *, const char*);
SOAP_FMAC1 _ows__OperationsMetadata * SOAP_FMAC2 soap_instantiate__ows__OperationsMetadata(struct soap*, int, const char*, const char*, size_t*);

inline _ows__OperationsMetadata * soap_new__ows__OperationsMetadata(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__OperationsMetadata(soap, n, NULL, NULL, NULL);
}

inline _ows__OperationsMetadata * soap_new_req__ows__OperationsMetadata(
	struct soap *soap,
	const std::vector<_ows__Operation *> & Operation)
{
	_ows__OperationsMetadata *_p = ::soap_new__ows__OperationsMetadata(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__OperationsMetadata::Operation = Operation;
	}
	return _p;
}

inline _ows__OperationsMetadata * soap_new_set__ows__OperationsMetadata(
	struct soap *soap,
	const std::vector<_ows__Operation *> & Operation,
	const std::vector<ows__DomainType *> & Parameter,
	const std::vector<ows__DomainType *> & Constraint,
	xsd__anyType *ExtendedCapabilities)
{
	_ows__OperationsMetadata *_p = ::soap_new__ows__OperationsMetadata(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__OperationsMetadata::Operation = Operation;
		_p->_ows__OperationsMetadata::Parameter = Parameter;
		_p->_ows__OperationsMetadata::Constraint = Constraint;
		_p->_ows__OperationsMetadata::ExtendedCapabilities = ExtendedCapabilities;
	}
	return _p;
}

inline int soap_write__ows__OperationsMetadata(struct soap *soap, _ows__OperationsMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationsMetadata", p->soap_type() == SOAP_TYPE__ows__OperationsMetadata ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__OperationsMetadata(struct soap *soap, const char *URL, _ows__OperationsMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationsMetadata", p->soap_type() == SOAP_TYPE__ows__OperationsMetadata ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__OperationsMetadata(struct soap *soap, const char *URL, _ows__OperationsMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationsMetadata", p->soap_type() == SOAP_TYPE__ows__OperationsMetadata ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__OperationsMetadata(struct soap *soap, const char *URL, _ows__OperationsMetadata const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OperationsMetadata", p->soap_type() == SOAP_TYPE__ows__OperationsMetadata ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__OperationsMetadata * SOAP_FMAC4 soap_get__ows__OperationsMetadata(struct soap*, _ows__OperationsMetadata *, const char*, const char*);

inline int soap_read__ows__OperationsMetadata(struct soap *soap, _ows__OperationsMetadata *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__OperationsMetadata(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__OperationsMetadata(struct soap *soap, const char *URL, _ows__OperationsMetadata *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__OperationsMetadata(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__OperationsMetadata(struct soap *soap, _ows__OperationsMetadata *p)
{
	if (::soap_read__ows__OperationsMetadata(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__ServiceProvider_DEFINED
#define SOAP_TYPE__ows__ServiceProvider_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__ServiceProvider(struct soap*, const char*, int, const _ows__ServiceProvider *, const char*);
SOAP_FMAC3 _ows__ServiceProvider * SOAP_FMAC4 soap_in__ows__ServiceProvider(struct soap*, const char*, _ows__ServiceProvider *, const char*);
SOAP_FMAC1 _ows__ServiceProvider * SOAP_FMAC2 soap_instantiate__ows__ServiceProvider(struct soap*, int, const char*, const char*, size_t*);

inline _ows__ServiceProvider * soap_new__ows__ServiceProvider(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__ServiceProvider(soap, n, NULL, NULL, NULL);
}

inline _ows__ServiceProvider * soap_new_req__ows__ServiceProvider(
	struct soap *soap,
	const std::string& ProviderName,
	ows__ResponsiblePartySubsetType *ServiceContact)
{
	_ows__ServiceProvider *_p = ::soap_new__ows__ServiceProvider(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ServiceProvider::ProviderName = ProviderName;
		_p->_ows__ServiceProvider::ServiceContact = ServiceContact;
	}
	return _p;
}

inline _ows__ServiceProvider * soap_new_set__ows__ServiceProvider(
	struct soap *soap,
	const std::string& ProviderName,
	ows__OnlineResourceType *ProviderSite,
	ows__ResponsiblePartySubsetType *ServiceContact)
{
	_ows__ServiceProvider *_p = ::soap_new__ows__ServiceProvider(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ServiceProvider::ProviderName = ProviderName;
		_p->_ows__ServiceProvider::ProviderSite = ProviderSite;
		_p->_ows__ServiceProvider::ServiceContact = ServiceContact;
	}
	return _p;
}

inline int soap_write__ows__ServiceProvider(struct soap *soap, _ows__ServiceProvider const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceProvider", p->soap_type() == SOAP_TYPE__ows__ServiceProvider ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ServiceProvider(struct soap *soap, const char *URL, _ows__ServiceProvider const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceProvider", p->soap_type() == SOAP_TYPE__ows__ServiceProvider ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ServiceProvider(struct soap *soap, const char *URL, _ows__ServiceProvider const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceProvider", p->soap_type() == SOAP_TYPE__ows__ServiceProvider ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ServiceProvider(struct soap *soap, const char *URL, _ows__ServiceProvider const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceProvider", p->soap_type() == SOAP_TYPE__ows__ServiceProvider ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__ServiceProvider * SOAP_FMAC4 soap_get__ows__ServiceProvider(struct soap*, _ows__ServiceProvider *, const char*, const char*);

inline int soap_read__ows__ServiceProvider(struct soap *soap, _ows__ServiceProvider *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__ServiceProvider(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__ServiceProvider(struct soap *soap, const char *URL, _ows__ServiceProvider *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__ServiceProvider(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__ServiceProvider(struct soap *soap, _ows__ServiceProvider *p)
{
	if (::soap_read__ows__ServiceProvider(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__ServiceIdentification_DEFINED
#define SOAP_TYPE__ows__ServiceIdentification_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__ServiceIdentification(struct soap*, const char*, int, const _ows__ServiceIdentification *, const char*);
SOAP_FMAC3 _ows__ServiceIdentification * SOAP_FMAC4 soap_in__ows__ServiceIdentification(struct soap*, const char*, _ows__ServiceIdentification *, const char*);
SOAP_FMAC1 _ows__ServiceIdentification * SOAP_FMAC2 soap_instantiate__ows__ServiceIdentification(struct soap*, int, const char*, const char*, size_t*);

inline _ows__ServiceIdentification * soap_new__ows__ServiceIdentification(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__ServiceIdentification(soap, n, NULL, NULL, NULL);
}

inline _ows__ServiceIdentification * soap_new_req__ows__ServiceIdentification(
	struct soap *soap,
	ows__CodeType *ServiceType,
	const std::vector<std::string> & ServiceTypeVersion)
{
	_ows__ServiceIdentification *_p = ::soap_new__ows__ServiceIdentification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ServiceIdentification::ServiceType = ServiceType;
		_p->_ows__ServiceIdentification::ServiceTypeVersion = ServiceTypeVersion;
	}
	return _p;
}

inline _ows__ServiceIdentification * soap_new_set__ows__ServiceIdentification(
	struct soap *soap,
	ows__CodeType *ServiceType,
	const std::vector<std::string> & ServiceTypeVersion,
	const std::vector<char *> & Profile,
	std::string *Fees,
	const std::vector<std::string> & AccessConstraints,
	const std::vector<ows__LanguageStringType *> & Title__1,
	const std::vector<ows__LanguageStringType *> & Abstract__1,
	const std::vector<ows__KeywordsType *> & Keywords__1,
	char *__item__2)
{
	_ows__ServiceIdentification *_p = ::soap_new__ows__ServiceIdentification(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ServiceIdentification::ServiceType = ServiceType;
		_p->_ows__ServiceIdentification::ServiceTypeVersion = ServiceTypeVersion;
		_p->_ows__ServiceIdentification::Profile = Profile;
		_p->_ows__ServiceIdentification::Fees = Fees;
		_p->_ows__ServiceIdentification::AccessConstraints = AccessConstraints;
		_p->ows__DescriptionType::Title = Title__1;
		_p->ows__DescriptionType::Abstract = Abstract__1;
		_p->ows__DescriptionType::Keywords = Keywords__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write__ows__ServiceIdentification(struct soap *soap, _ows__ServiceIdentification const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceIdentification", p->soap_type() == SOAP_TYPE__ows__ServiceIdentification ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ServiceIdentification(struct soap *soap, const char *URL, _ows__ServiceIdentification const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceIdentification", p->soap_type() == SOAP_TYPE__ows__ServiceIdentification ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ServiceIdentification(struct soap *soap, const char *URL, _ows__ServiceIdentification const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceIdentification", p->soap_type() == SOAP_TYPE__ows__ServiceIdentification ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ServiceIdentification(struct soap *soap, const char *URL, _ows__ServiceIdentification const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceIdentification", p->soap_type() == SOAP_TYPE__ows__ServiceIdentification ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__ServiceIdentification * SOAP_FMAC4 soap_get__ows__ServiceIdentification(struct soap*, _ows__ServiceIdentification *, const char*, const char*);

inline int soap_read__ows__ServiceIdentification(struct soap *soap, _ows__ServiceIdentification *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__ServiceIdentification(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__ServiceIdentification(struct soap *soap, const char *URL, _ows__ServiceIdentification *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__ServiceIdentification(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__ServiceIdentification(struct soap *soap, _ows__ServiceIdentification *p)
{
	if (::soap_read__ows__ServiceIdentification(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ows__ExceptionReport_DEFINED
#define SOAP_TYPE__ows__ExceptionReport_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__ExceptionReport(struct soap*, const char*, int, const _ows__ExceptionReport *, const char*);
SOAP_FMAC3 _ows__ExceptionReport * SOAP_FMAC4 soap_in__ows__ExceptionReport(struct soap*, const char*, _ows__ExceptionReport *, const char*);
SOAP_FMAC1 _ows__ExceptionReport * SOAP_FMAC2 soap_instantiate__ows__ExceptionReport(struct soap*, int, const char*, const char*, size_t*);

inline _ows__ExceptionReport * soap_new__ows__ExceptionReport(struct soap *soap, int n = -1)
{
	return soap_instantiate__ows__ExceptionReport(soap, n, NULL, NULL, NULL);
}

inline _ows__ExceptionReport * soap_new_req__ows__ExceptionReport(
	struct soap *soap,
	const std::vector<ows__ExceptionType *> & Exception,
	const std::string& version)
{
	_ows__ExceptionReport *_p = ::soap_new__ows__ExceptionReport(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ExceptionReport::Exception = Exception;
		_p->_ows__ExceptionReport::version = version;
	}
	return _p;
}

inline _ows__ExceptionReport * soap_new_set__ows__ExceptionReport(
	struct soap *soap,
	const std::vector<ows__ExceptionType *> & Exception,
	const std::string& version,
	char **xml__lang)
{
	_ows__ExceptionReport *_p = ::soap_new__ows__ExceptionReport(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ows__ExceptionReport::Exception = Exception;
		_p->_ows__ExceptionReport::version = version;
		_p->_ows__ExceptionReport::xml__lang = xml__lang;
	}
	return _p;
}

inline int soap_write__ows__ExceptionReport(struct soap *soap, _ows__ExceptionReport const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionReport", p->soap_type() == SOAP_TYPE__ows__ExceptionReport ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ows__ExceptionReport(struct soap *soap, const char *URL, _ows__ExceptionReport const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionReport", p->soap_type() == SOAP_TYPE__ows__ExceptionReport ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ows__ExceptionReport(struct soap *soap, const char *URL, _ows__ExceptionReport const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionReport", p->soap_type() == SOAP_TYPE__ows__ExceptionReport ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ows__ExceptionReport(struct soap *soap, const char *URL, _ows__ExceptionReport const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionReport", p->soap_type() == SOAP_TYPE__ows__ExceptionReport ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ows__ExceptionReport * SOAP_FMAC4 soap_get__ows__ExceptionReport(struct soap*, _ows__ExceptionReport *, const char*, const char*);

inline int soap_read__ows__ExceptionReport(struct soap *soap, _ows__ExceptionReport *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ows__ExceptionReport(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ows__ExceptionReport(struct soap *soap, const char *URL, _ows__ExceptionReport *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ows__ExceptionReport(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ows__ExceptionReport(struct soap *soap, _ows__ExceptionReport *p)
{
	if (::soap_read__ows__ExceptionReport(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ManifestType_DEFINED
#define SOAP_TYPE_ows__ManifestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ManifestType(struct soap*, const char*, int, const ows__ManifestType *, const char*);
SOAP_FMAC3 ows__ManifestType * SOAP_FMAC4 soap_in_ows__ManifestType(struct soap*, const char*, ows__ManifestType *, const char*);
SOAP_FMAC1 ows__ManifestType * SOAP_FMAC2 soap_instantiate_ows__ManifestType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ManifestType * soap_new_ows__ManifestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ManifestType(soap, n, NULL, NULL, NULL);
}

inline ows__ManifestType * soap_new_req_ows__ManifestType(
	struct soap *soap,
	const std::vector<ows__ReferenceGroupType *> & ReferenceGroup)
{
	ows__ManifestType *_p = ::soap_new_ows__ManifestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ManifestType::ReferenceGroup = ReferenceGroup;
	}
	return _p;
}

inline ows__ManifestType * soap_new_set_ows__ManifestType(
	struct soap *soap,
	const std::vector<ows__ReferenceGroupType *> & ReferenceGroup,
	ows__CodeType *Identifier__1,
	const std::vector<ows__MetadataType *> & Metadata__1,
	const std::vector<ows__LanguageStringType *> & Title__2,
	const std::vector<ows__LanguageStringType *> & Abstract__2,
	const std::vector<ows__KeywordsType *> & Keywords__2,
	char *__item__3)
{
	ows__ManifestType *_p = ::soap_new_ows__ManifestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ManifestType::ReferenceGroup = ReferenceGroup;
		_p->ows__BasicIdentificationType::Identifier = Identifier__1;
		_p->ows__BasicIdentificationType::Metadata = Metadata__1;
		_p->ows__DescriptionType::Title = Title__2;
		_p->ows__DescriptionType::Abstract = Abstract__2;
		_p->ows__DescriptionType::Keywords = Keywords__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ows__ManifestType(struct soap *soap, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ManifestType", p->soap_type() == SOAP_TYPE_ows__ManifestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ManifestType(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ManifestType", p->soap_type() == SOAP_TYPE_ows__ManifestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ManifestType(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ManifestType", p->soap_type() == SOAP_TYPE_ows__ManifestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ManifestType(struct soap *soap, const char *URL, ows__ManifestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ManifestType", p->soap_type() == SOAP_TYPE_ows__ManifestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ManifestType * SOAP_FMAC4 soap_get_ows__ManifestType(struct soap*, ows__ManifestType *, const char*, const char*);

inline int soap_read_ows__ManifestType(struct soap *soap, ows__ManifestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ManifestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ManifestType(struct soap *soap, const char *URL, ows__ManifestType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ManifestType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ManifestType(struct soap *soap, ows__ManifestType *p)
{
	if (::soap_read_ows__ManifestType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ReferenceGroupType_DEFINED
#define SOAP_TYPE_ows__ReferenceGroupType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ReferenceGroupType(struct soap*, const char*, int, const ows__ReferenceGroupType *, const char*);
SOAP_FMAC3 ows__ReferenceGroupType * SOAP_FMAC4 soap_in_ows__ReferenceGroupType(struct soap*, const char*, ows__ReferenceGroupType *, const char*);
SOAP_FMAC1 ows__ReferenceGroupType * SOAP_FMAC2 soap_instantiate_ows__ReferenceGroupType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ReferenceGroupType * soap_new_ows__ReferenceGroupType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ReferenceGroupType(soap, n, NULL, NULL, NULL);
}

inline ows__ReferenceGroupType * soap_new_req_ows__ReferenceGroupType(
	struct soap *soap,
	int __sizeAbstractReferenceBase,
	__ows__union_ReferenceGroupType *__union_ReferenceGroupType)
{
	ows__ReferenceGroupType *_p = ::soap_new_ows__ReferenceGroupType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ReferenceGroupType::__sizeAbstractReferenceBase = __sizeAbstractReferenceBase;
		_p->ows__ReferenceGroupType::__union_ReferenceGroupType = __union_ReferenceGroupType;
	}
	return _p;
}

inline ows__ReferenceGroupType * soap_new_set_ows__ReferenceGroupType(
	struct soap *soap,
	int __sizeAbstractReferenceBase,
	__ows__union_ReferenceGroupType *__union_ReferenceGroupType,
	ows__CodeType *Identifier__1,
	const std::vector<ows__MetadataType *> & Metadata__1,
	const std::vector<ows__LanguageStringType *> & Title__2,
	const std::vector<ows__LanguageStringType *> & Abstract__2,
	const std::vector<ows__KeywordsType *> & Keywords__2,
	char *__item__3)
{
	ows__ReferenceGroupType *_p = ::soap_new_ows__ReferenceGroupType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ReferenceGroupType::__sizeAbstractReferenceBase = __sizeAbstractReferenceBase;
		_p->ows__ReferenceGroupType::__union_ReferenceGroupType = __union_ReferenceGroupType;
		_p->ows__BasicIdentificationType::Identifier = Identifier__1;
		_p->ows__BasicIdentificationType::Metadata = Metadata__1;
		_p->ows__DescriptionType::Title = Title__2;
		_p->ows__DescriptionType::Abstract = Abstract__2;
		_p->ows__DescriptionType::Keywords = Keywords__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ows__ReferenceGroupType(struct soap *soap, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroupType", p->soap_type() == SOAP_TYPE_ows__ReferenceGroupType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ReferenceGroupType(struct soap *soap, const char *URL, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroupType", p->soap_type() == SOAP_TYPE_ows__ReferenceGroupType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ReferenceGroupType(struct soap *soap, const char *URL, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroupType", p->soap_type() == SOAP_TYPE_ows__ReferenceGroupType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ReferenceGroupType(struct soap *soap, const char *URL, ows__ReferenceGroupType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceGroupType", p->soap_type() == SOAP_TYPE_ows__ReferenceGroupType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ReferenceGroupType * SOAP_FMAC4 soap_get_ows__ReferenceGroupType(struct soap*, ows__ReferenceGroupType *, const char*, const char*);

inline int soap_read_ows__ReferenceGroupType(struct soap *soap, ows__ReferenceGroupType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ReferenceGroupType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ReferenceGroupType(struct soap *soap, const char *URL, ows__ReferenceGroupType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ReferenceGroupType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ReferenceGroupType(struct soap *soap, ows__ReferenceGroupType *p)
{
	if (::soap_read_ows__ReferenceGroupType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ReferenceType_DEFINED
#define SOAP_TYPE_ows__ReferenceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ReferenceType(struct soap*, const char*, int, const ows__ReferenceType *, const char*);
SOAP_FMAC3 ows__ReferenceType * SOAP_FMAC4 soap_in_ows__ReferenceType(struct soap*, const char*, ows__ReferenceType *, const char*);
SOAP_FMAC1 ows__ReferenceType * SOAP_FMAC2 soap_instantiate_ows__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ReferenceType * soap_new_ows__ReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ReferenceType(soap, n, NULL, NULL, NULL);
}

inline ows__ReferenceType * soap_new_req_ows__ReferenceType(
	struct soap *soap,
	char *xlink__href__1)
{
	ows__ReferenceType *_p = ::soap_new_ows__ReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__AbstractReferenceBaseType::xlink__href = xlink__href__1;
	}
	return _p;
}

inline ows__ReferenceType * soap_new_set_ows__ReferenceType(
	struct soap *soap,
	ows__CodeType *Identifier,
	const std::vector<ows__LanguageStringType *> & Abstract,
	std::string *Format,
	const std::vector<ows__MetadataType *> & Metadata,
	const std::string& ows__type__1,
	char *xlink__href__1,
	char **xlink__role__1,
	char **xlink__arcrole__1,
	std::string *xlink__title__1,
	enum xlink__showType *xlink__show__1,
	enum xlink__actuateType *xlink__actuate__1,
	char *__item__2)
{
	ows__ReferenceType *_p = ::soap_new_ows__ReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ReferenceType::Identifier = Identifier;
		_p->ows__ReferenceType::Abstract = Abstract;
		_p->ows__ReferenceType::Format = Format;
		_p->ows__ReferenceType::Metadata = Metadata;
		_p->ows__AbstractReferenceBaseType::ows__type = ows__type__1;
		_p->ows__AbstractReferenceBaseType::xlink__href = xlink__href__1;
		_p->ows__AbstractReferenceBaseType::xlink__role = xlink__role__1;
		_p->ows__AbstractReferenceBaseType::xlink__arcrole = xlink__arcrole__1;
		_p->ows__AbstractReferenceBaseType::xlink__title = xlink__title__1;
		_p->ows__AbstractReferenceBaseType::xlink__show = xlink__show__1;
		_p->ows__AbstractReferenceBaseType::xlink__actuate = xlink__actuate__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ows__ReferenceType(struct soap *soap, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceType", p->soap_type() == SOAP_TYPE_ows__ReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ReferenceType(struct soap *soap, const char *URL, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceType", p->soap_type() == SOAP_TYPE_ows__ReferenceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ReferenceType(struct soap *soap, const char *URL, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceType", p->soap_type() == SOAP_TYPE_ows__ReferenceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ReferenceType(struct soap *soap, const char *URL, ows__ReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ReferenceType", p->soap_type() == SOAP_TYPE_ows__ReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ReferenceType * SOAP_FMAC4 soap_get_ows__ReferenceType(struct soap*, ows__ReferenceType *, const char*, const char*);

inline int soap_read_ows__ReferenceType(struct soap *soap, ows__ReferenceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ReferenceType(struct soap *soap, const char *URL, ows__ReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ReferenceType(struct soap *soap, ows__ReferenceType *p)
{
	if (::soap_read_ows__ReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__AbstractReferenceBaseType_DEFINED
#define SOAP_TYPE_ows__AbstractReferenceBaseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__AbstractReferenceBaseType(struct soap*, const char*, int, const ows__AbstractReferenceBaseType *, const char*);
SOAP_FMAC3 ows__AbstractReferenceBaseType * SOAP_FMAC4 soap_in_ows__AbstractReferenceBaseType(struct soap*, const char*, ows__AbstractReferenceBaseType *, const char*);
SOAP_FMAC1 ows__AbstractReferenceBaseType * SOAP_FMAC2 soap_instantiate_ows__AbstractReferenceBaseType(struct soap*, int, const char*, const char*, size_t*);

inline ows__AbstractReferenceBaseType * soap_new_ows__AbstractReferenceBaseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__AbstractReferenceBaseType(soap, n, NULL, NULL, NULL);
}

inline ows__AbstractReferenceBaseType * soap_new_req_ows__AbstractReferenceBaseType(
	struct soap *soap,
	char *xlink__href)
{
	ows__AbstractReferenceBaseType *_p = ::soap_new_ows__AbstractReferenceBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__AbstractReferenceBaseType::xlink__href = xlink__href;
	}
	return _p;
}

inline ows__AbstractReferenceBaseType * soap_new_set_ows__AbstractReferenceBaseType(
	struct soap *soap,
	const std::string& ows__type,
	char *xlink__href,
	char **xlink__role,
	char **xlink__arcrole,
	std::string *xlink__title,
	enum xlink__showType *xlink__show,
	enum xlink__actuateType *xlink__actuate,
	char *__item__1)
{
	ows__AbstractReferenceBaseType *_p = ::soap_new_ows__AbstractReferenceBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__AbstractReferenceBaseType::ows__type = ows__type;
		_p->ows__AbstractReferenceBaseType::xlink__href = xlink__href;
		_p->ows__AbstractReferenceBaseType::xlink__role = xlink__role;
		_p->ows__AbstractReferenceBaseType::xlink__arcrole = xlink__arcrole;
		_p->ows__AbstractReferenceBaseType::xlink__title = xlink__title;
		_p->ows__AbstractReferenceBaseType::xlink__show = xlink__show;
		_p->ows__AbstractReferenceBaseType::xlink__actuate = xlink__actuate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__AbstractReferenceBaseType(struct soap *soap, ows__AbstractReferenceBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AbstractReferenceBaseType", p->soap_type() == SOAP_TYPE_ows__AbstractReferenceBaseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__AbstractReferenceBaseType(struct soap *soap, const char *URL, ows__AbstractReferenceBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AbstractReferenceBaseType", p->soap_type() == SOAP_TYPE_ows__AbstractReferenceBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__AbstractReferenceBaseType(struct soap *soap, const char *URL, ows__AbstractReferenceBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AbstractReferenceBaseType", p->soap_type() == SOAP_TYPE_ows__AbstractReferenceBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__AbstractReferenceBaseType(struct soap *soap, const char *URL, ows__AbstractReferenceBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AbstractReferenceBaseType", p->soap_type() == SOAP_TYPE_ows__AbstractReferenceBaseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__AbstractReferenceBaseType * SOAP_FMAC4 soap_get_ows__AbstractReferenceBaseType(struct soap*, ows__AbstractReferenceBaseType *, const char*, const char*);

inline int soap_read_ows__AbstractReferenceBaseType(struct soap *soap, ows__AbstractReferenceBaseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__AbstractReferenceBaseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__AbstractReferenceBaseType(struct soap *soap, const char *URL, ows__AbstractReferenceBaseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__AbstractReferenceBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__AbstractReferenceBaseType(struct soap *soap, ows__AbstractReferenceBaseType *p)
{
	if (::soap_read_ows__AbstractReferenceBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ServiceReferenceType_DEFINED
#define SOAP_TYPE_ows__ServiceReferenceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ServiceReferenceType(struct soap*, const char*, int, const ows__ServiceReferenceType *, const char*);
SOAP_FMAC3 ows__ServiceReferenceType * SOAP_FMAC4 soap_in_ows__ServiceReferenceType(struct soap*, const char*, ows__ServiceReferenceType *, const char*);
SOAP_FMAC1 ows__ServiceReferenceType * SOAP_FMAC2 soap_instantiate_ows__ServiceReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ServiceReferenceType * soap_new_ows__ServiceReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ServiceReferenceType(soap, n, NULL, NULL, NULL);
}

inline ows__ServiceReferenceType * soap_new_req_ows__ServiceReferenceType(
	struct soap *soap,
	const union _ows__union_ServiceReferenceType& union_ServiceReferenceType,
	char *xlink__href__2)
{
	ows__ServiceReferenceType *_p = ::soap_new_ows__ServiceReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ServiceReferenceType::union_ServiceReferenceType = union_ServiceReferenceType;
		_p->ows__AbstractReferenceBaseType::xlink__href = xlink__href__2;
	}
	return _p;
}

inline ows__ServiceReferenceType * soap_new_set_ows__ServiceReferenceType(
	struct soap *soap,
	int __union_ServiceReferenceType,
	const union _ows__union_ServiceReferenceType& union_ServiceReferenceType,
	ows__CodeType *Identifier__1,
	const std::vector<ows__LanguageStringType *> & Abstract__1,
	std::string *Format__1,
	const std::vector<ows__MetadataType *> & Metadata__1,
	const std::string& ows__type__2,
	char *xlink__href__2,
	char **xlink__role__2,
	char **xlink__arcrole__2,
	std::string *xlink__title__2,
	enum xlink__showType *xlink__show__2,
	enum xlink__actuateType *xlink__actuate__2,
	char *__item__3)
{
	ows__ServiceReferenceType *_p = ::soap_new_ows__ServiceReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ServiceReferenceType::__union_ServiceReferenceType = __union_ServiceReferenceType;
		_p->ows__ServiceReferenceType::union_ServiceReferenceType = union_ServiceReferenceType;
		_p->ows__ReferenceType::Identifier = Identifier__1;
		_p->ows__ReferenceType::Abstract = Abstract__1;
		_p->ows__ReferenceType::Format = Format__1;
		_p->ows__ReferenceType::Metadata = Metadata__1;
		_p->ows__AbstractReferenceBaseType::ows__type = ows__type__2;
		_p->ows__AbstractReferenceBaseType::xlink__href = xlink__href__2;
		_p->ows__AbstractReferenceBaseType::xlink__role = xlink__role__2;
		_p->ows__AbstractReferenceBaseType::xlink__arcrole = xlink__arcrole__2;
		_p->ows__AbstractReferenceBaseType::xlink__title = xlink__title__2;
		_p->ows__AbstractReferenceBaseType::xlink__show = xlink__show__2;
		_p->ows__AbstractReferenceBaseType::xlink__actuate = xlink__actuate__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ows__ServiceReferenceType(struct soap *soap, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReferenceType", p->soap_type() == SOAP_TYPE_ows__ServiceReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ServiceReferenceType(struct soap *soap, const char *URL, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReferenceType", p->soap_type() == SOAP_TYPE_ows__ServiceReferenceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ServiceReferenceType(struct soap *soap, const char *URL, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReferenceType", p->soap_type() == SOAP_TYPE_ows__ServiceReferenceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ServiceReferenceType(struct soap *soap, const char *URL, ows__ServiceReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ServiceReferenceType", p->soap_type() == SOAP_TYPE_ows__ServiceReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ServiceReferenceType * SOAP_FMAC4 soap_get_ows__ServiceReferenceType(struct soap*, ows__ServiceReferenceType *, const char*, const char*);

inline int soap_read_ows__ServiceReferenceType(struct soap *soap, ows__ServiceReferenceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ServiceReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ServiceReferenceType(struct soap *soap, const char *URL, ows__ServiceReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ServiceReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ServiceReferenceType(struct soap *soap, ows__ServiceReferenceType *p)
{
	if (::soap_read_ows__ServiceReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__DatasetDescriptionSummaryBaseType_DEFINED
#define SOAP_TYPE_ows__DatasetDescriptionSummaryBaseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__DatasetDescriptionSummaryBaseType(struct soap*, const char*, int, const ows__DatasetDescriptionSummaryBaseType *, const char*);
SOAP_FMAC3 ows__DatasetDescriptionSummaryBaseType * SOAP_FMAC4 soap_in_ows__DatasetDescriptionSummaryBaseType(struct soap*, const char*, ows__DatasetDescriptionSummaryBaseType *, const char*);
SOAP_FMAC1 ows__DatasetDescriptionSummaryBaseType * SOAP_FMAC2 soap_instantiate_ows__DatasetDescriptionSummaryBaseType(struct soap*, int, const char*, const char*, size_t*);

inline ows__DatasetDescriptionSummaryBaseType * soap_new_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__DatasetDescriptionSummaryBaseType(soap, n, NULL, NULL, NULL);
}

inline ows__DatasetDescriptionSummaryBaseType * soap_new_req_ows__DatasetDescriptionSummaryBaseType(
	struct soap *soap,
	ows__CodeType *Identifier,
	int __sizeBoundingBox,
	__ows__union_DatasetDescriptionSummaryBaseType *__union_DatasetDescriptionSummaryBaseType)
{
	ows__DatasetDescriptionSummaryBaseType *_p = ::soap_new_ows__DatasetDescriptionSummaryBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__DatasetDescriptionSummaryBaseType::Identifier = Identifier;
		_p->ows__DatasetDescriptionSummaryBaseType::__sizeBoundingBox = __sizeBoundingBox;
		_p->ows__DatasetDescriptionSummaryBaseType::__union_DatasetDescriptionSummaryBaseType = __union_DatasetDescriptionSummaryBaseType;
	}
	return _p;
}

inline ows__DatasetDescriptionSummaryBaseType * soap_new_set_ows__DatasetDescriptionSummaryBaseType(
	struct soap *soap,
	const std::vector<ows__WGS84BoundingBoxType *> & WGS84BoundingBox,
	ows__CodeType *Identifier,
	int __sizeBoundingBox,
	__ows__union_DatasetDescriptionSummaryBaseType *__union_DatasetDescriptionSummaryBaseType,
	const std::vector<ows__MetadataType *> & Metadata,
	const std::vector<ows__DatasetDescriptionSummaryBaseType *> & DatasetDescriptionSummary,
	const std::vector<ows__LanguageStringType *> & Title__1,
	const std::vector<ows__LanguageStringType *> & Abstract__1,
	const std::vector<ows__KeywordsType *> & Keywords__1,
	char *__item__2)
{
	ows__DatasetDescriptionSummaryBaseType *_p = ::soap_new_ows__DatasetDescriptionSummaryBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__DatasetDescriptionSummaryBaseType::WGS84BoundingBox = WGS84BoundingBox;
		_p->ows__DatasetDescriptionSummaryBaseType::Identifier = Identifier;
		_p->ows__DatasetDescriptionSummaryBaseType::__sizeBoundingBox = __sizeBoundingBox;
		_p->ows__DatasetDescriptionSummaryBaseType::__union_DatasetDescriptionSummaryBaseType = __union_DatasetDescriptionSummaryBaseType;
		_p->ows__DatasetDescriptionSummaryBaseType::Metadata = Metadata;
		_p->ows__DatasetDescriptionSummaryBaseType::DatasetDescriptionSummary = DatasetDescriptionSummary;
		_p->ows__DescriptionType::Title = Title__1;
		_p->ows__DescriptionType::Abstract = Abstract__1;
		_p->ows__DescriptionType::Keywords = Keywords__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE_ows__DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE_ows__DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE_ows__DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, ows__DatasetDescriptionSummaryBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DatasetDescriptionSummaryBaseType", p->soap_type() == SOAP_TYPE_ows__DatasetDescriptionSummaryBaseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__DatasetDescriptionSummaryBaseType * SOAP_FMAC4 soap_get_ows__DatasetDescriptionSummaryBaseType(struct soap*, ows__DatasetDescriptionSummaryBaseType *, const char*, const char*);

inline int soap_read_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, ows__DatasetDescriptionSummaryBaseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__DatasetDescriptionSummaryBaseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, const char *URL, ows__DatasetDescriptionSummaryBaseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__DatasetDescriptionSummaryBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__DatasetDescriptionSummaryBaseType(struct soap *soap, ows__DatasetDescriptionSummaryBaseType *p)
{
	if (::soap_read_ows__DatasetDescriptionSummaryBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ContentsBaseType_DEFINED
#define SOAP_TYPE_ows__ContentsBaseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ContentsBaseType(struct soap*, const char*, int, const ows__ContentsBaseType *, const char*);
SOAP_FMAC3 ows__ContentsBaseType * SOAP_FMAC4 soap_in_ows__ContentsBaseType(struct soap*, const char*, ows__ContentsBaseType *, const char*);
SOAP_FMAC1 ows__ContentsBaseType * SOAP_FMAC2 soap_instantiate_ows__ContentsBaseType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ContentsBaseType * soap_new_ows__ContentsBaseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ContentsBaseType(soap, n, NULL, NULL, NULL);
}

inline ows__ContentsBaseType * soap_new_req_ows__ContentsBaseType(
	struct soap *soap)
{
	ows__ContentsBaseType *_p = ::soap_new_ows__ContentsBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__ContentsBaseType * soap_new_set_ows__ContentsBaseType(
	struct soap *soap,
	const std::vector<ows__DatasetDescriptionSummaryBaseType *> & DatasetDescriptionSummary,
	const std::vector<ows__MetadataType *> & OtherSource,
	char *__item__1)
{
	ows__ContentsBaseType *_p = ::soap_new_ows__ContentsBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ContentsBaseType::DatasetDescriptionSummary = DatasetDescriptionSummary;
		_p->ows__ContentsBaseType::OtherSource = OtherSource;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__ContentsBaseType(struct soap *soap, ows__ContentsBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContentsBaseType", p->soap_type() == SOAP_TYPE_ows__ContentsBaseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ContentsBaseType(struct soap *soap, const char *URL, ows__ContentsBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContentsBaseType", p->soap_type() == SOAP_TYPE_ows__ContentsBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ContentsBaseType(struct soap *soap, const char *URL, ows__ContentsBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContentsBaseType", p->soap_type() == SOAP_TYPE_ows__ContentsBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ContentsBaseType(struct soap *soap, const char *URL, ows__ContentsBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContentsBaseType", p->soap_type() == SOAP_TYPE_ows__ContentsBaseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ContentsBaseType * SOAP_FMAC4 soap_get_ows__ContentsBaseType(struct soap*, ows__ContentsBaseType *, const char*, const char*);

inline int soap_read_ows__ContentsBaseType(struct soap *soap, ows__ContentsBaseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ContentsBaseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ContentsBaseType(struct soap *soap, const char *URL, ows__ContentsBaseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ContentsBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ContentsBaseType(struct soap *soap, ows__ContentsBaseType *p)
{
	if (::soap_read_ows__ContentsBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__DomainMetadataType_DEFINED
#define SOAP_TYPE_ows__DomainMetadataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__DomainMetadataType(struct soap*, const char*, int, const ows__DomainMetadataType *, const char*);
SOAP_FMAC3 ows__DomainMetadataType * SOAP_FMAC4 soap_in_ows__DomainMetadataType(struct soap*, const char*, ows__DomainMetadataType *, const char*);
SOAP_FMAC1 ows__DomainMetadataType * SOAP_FMAC2 soap_instantiate_ows__DomainMetadataType(struct soap*, int, const char*, const char*, size_t*);

inline ows__DomainMetadataType * soap_new_ows__DomainMetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__DomainMetadataType(soap, n, NULL, NULL, NULL);
}

inline ows__DomainMetadataType * soap_new_req_ows__DomainMetadataType(
	struct soap *soap,
	const std::string& __item)
{
	ows__DomainMetadataType *_p = ::soap_new_ows__DomainMetadataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__DomainMetadataType::__item = __item;
	}
	return _p;
}

inline ows__DomainMetadataType * soap_new_set_ows__DomainMetadataType(
	struct soap *soap,
	const std::string& __item,
	char **ows__reference,
	char *__item__1)
{
	ows__DomainMetadataType *_p = ::soap_new_ows__DomainMetadataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__DomainMetadataType::__item = __item;
		_p->ows__DomainMetadataType::ows__reference = ows__reference;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__DomainMetadataType(struct soap *soap, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainMetadataType", p->soap_type() == SOAP_TYPE_ows__DomainMetadataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__DomainMetadataType(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainMetadataType", p->soap_type() == SOAP_TYPE_ows__DomainMetadataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__DomainMetadataType(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainMetadataType", p->soap_type() == SOAP_TYPE_ows__DomainMetadataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__DomainMetadataType(struct soap *soap, const char *URL, ows__DomainMetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainMetadataType", p->soap_type() == SOAP_TYPE_ows__DomainMetadataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__DomainMetadataType * SOAP_FMAC4 soap_get_ows__DomainMetadataType(struct soap*, ows__DomainMetadataType *, const char*, const char*);

inline int soap_read_ows__DomainMetadataType(struct soap *soap, ows__DomainMetadataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__DomainMetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__DomainMetadataType(struct soap *soap, const char *URL, ows__DomainMetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__DomainMetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__DomainMetadataType(struct soap *soap, ows__DomainMetadataType *p)
{
	if (::soap_read_ows__DomainMetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__RangeType_DEFINED
#define SOAP_TYPE_ows__RangeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__RangeType(struct soap*, const char*, int, const ows__RangeType *, const char*);
SOAP_FMAC3 ows__RangeType * SOAP_FMAC4 soap_in_ows__RangeType(struct soap*, const char*, ows__RangeType *, const char*);
SOAP_FMAC1 ows__RangeType * SOAP_FMAC2 soap_instantiate_ows__RangeType(struct soap*, int, const char*, const char*, size_t*);

inline ows__RangeType * soap_new_ows__RangeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__RangeType(soap, n, NULL, NULL, NULL);
}

inline ows__RangeType * soap_new_req_ows__RangeType(
	struct soap *soap)
{
	ows__RangeType *_p = ::soap_new_ows__RangeType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__RangeType * soap_new_set_ows__RangeType(
	struct soap *soap,
	ows__ValueType *MinimumValue,
	ows__ValueType *MaximumValue,
	ows__ValueType *Spacing,
	enum _ows__rangeClosure ows__rangeClosure,
	char *__item__1)
{
	ows__RangeType *_p = ::soap_new_ows__RangeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__RangeType::MinimumValue = MinimumValue;
		_p->ows__RangeType::MaximumValue = MaximumValue;
		_p->ows__RangeType::Spacing = Spacing;
		_p->ows__RangeType::ows__rangeClosure = ows__rangeClosure;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__RangeType(struct soap *soap, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RangeType", p->soap_type() == SOAP_TYPE_ows__RangeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__RangeType(struct soap *soap, const char *URL, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RangeType", p->soap_type() == SOAP_TYPE_ows__RangeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__RangeType(struct soap *soap, const char *URL, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RangeType", p->soap_type() == SOAP_TYPE_ows__RangeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__RangeType(struct soap *soap, const char *URL, ows__RangeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RangeType", p->soap_type() == SOAP_TYPE_ows__RangeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__RangeType * SOAP_FMAC4 soap_get_ows__RangeType(struct soap*, ows__RangeType *, const char*, const char*);

inline int soap_read_ows__RangeType(struct soap *soap, ows__RangeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__RangeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__RangeType(struct soap *soap, const char *URL, ows__RangeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__RangeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__RangeType(struct soap *soap, ows__RangeType *p)
{
	if (::soap_read_ows__RangeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ValueType_DEFINED
#define SOAP_TYPE_ows__ValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ValueType(struct soap*, const char*, int, const ows__ValueType *, const char*);
SOAP_FMAC3 ows__ValueType * SOAP_FMAC4 soap_in_ows__ValueType(struct soap*, const char*, ows__ValueType *, const char*);
SOAP_FMAC1 ows__ValueType * SOAP_FMAC2 soap_instantiate_ows__ValueType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ValueType * soap_new_ows__ValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ValueType(soap, n, NULL, NULL, NULL);
}

inline ows__ValueType * soap_new_req_ows__ValueType(
	struct soap *soap,
	const std::string& __item)
{
	ows__ValueType *_p = ::soap_new_ows__ValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ValueType::__item = __item;
	}
	return _p;
}

inline ows__ValueType * soap_new_set_ows__ValueType(
	struct soap *soap,
	const std::string& __item,
	char *__item__1)
{
	ows__ValueType *_p = ::soap_new_ows__ValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ValueType::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__ValueType(struct soap *soap, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValueType", p->soap_type() == SOAP_TYPE_ows__ValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ValueType(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValueType", p->soap_type() == SOAP_TYPE_ows__ValueType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ValueType(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValueType", p->soap_type() == SOAP_TYPE_ows__ValueType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ValueType(struct soap *soap, const char *URL, ows__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ValueType", p->soap_type() == SOAP_TYPE_ows__ValueType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ValueType * SOAP_FMAC4 soap_get_ows__ValueType(struct soap*, ows__ValueType *, const char*, const char*);

inline int soap_read_ows__ValueType(struct soap *soap, ows__ValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ValueType(struct soap *soap, const char *URL, ows__ValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ValueType(struct soap *soap, ows__ValueType *p)
{
	if (::soap_read_ows__ValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__UnNamedDomainType_DEFINED
#define SOAP_TYPE_ows__UnNamedDomainType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__UnNamedDomainType(struct soap*, const char*, int, const ows__UnNamedDomainType *, const char*);
SOAP_FMAC3 ows__UnNamedDomainType * SOAP_FMAC4 soap_in_ows__UnNamedDomainType(struct soap*, const char*, ows__UnNamedDomainType *, const char*);
SOAP_FMAC1 ows__UnNamedDomainType * SOAP_FMAC2 soap_instantiate_ows__UnNamedDomainType(struct soap*, int, const char*, const char*, size_t*);

inline ows__UnNamedDomainType * soap_new_ows__UnNamedDomainType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__UnNamedDomainType(soap, n, NULL, NULL, NULL);
}

inline ows__UnNamedDomainType * soap_new_req_ows__UnNamedDomainType(
	struct soap *soap,
	const union _ows__union_UnNamedDomainType& union_UnNamedDomainType,
	const union _ows__union_UnNamedDomainType_& union_UnNamedDomainType_)
{
	ows__UnNamedDomainType *_p = ::soap_new_ows__UnNamedDomainType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__UnNamedDomainType::union_UnNamedDomainType = union_UnNamedDomainType;
		_p->ows__UnNamedDomainType::union_UnNamedDomainType_ = union_UnNamedDomainType_;
	}
	return _p;
}

inline ows__UnNamedDomainType * soap_new_set_ows__UnNamedDomainType(
	struct soap *soap,
	int __union_UnNamedDomainType,
	const union _ows__union_UnNamedDomainType& union_UnNamedDomainType,
	ows__ValueType *DefaultValue,
	ows__DomainMetadataType *Meaning,
	ows__DomainMetadataType *DataType,
	int __union_UnNamedDomainType_,
	const union _ows__union_UnNamedDomainType_& union_UnNamedDomainType_,
	const std::vector<ows__MetadataType *> & Metadata,
	char *__item__1)
{
	ows__UnNamedDomainType *_p = ::soap_new_ows__UnNamedDomainType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__UnNamedDomainType::__union_UnNamedDomainType = __union_UnNamedDomainType;
		_p->ows__UnNamedDomainType::union_UnNamedDomainType = union_UnNamedDomainType;
		_p->ows__UnNamedDomainType::DefaultValue = DefaultValue;
		_p->ows__UnNamedDomainType::Meaning = Meaning;
		_p->ows__UnNamedDomainType::DataType = DataType;
		_p->ows__UnNamedDomainType::__union_UnNamedDomainType_ = __union_UnNamedDomainType_;
		_p->ows__UnNamedDomainType::union_UnNamedDomainType_ = union_UnNamedDomainType_;
		_p->ows__UnNamedDomainType::Metadata = Metadata;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__UnNamedDomainType(struct soap *soap, ows__UnNamedDomainType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UnNamedDomainType", p->soap_type() == SOAP_TYPE_ows__UnNamedDomainType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__UnNamedDomainType(struct soap *soap, const char *URL, ows__UnNamedDomainType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UnNamedDomainType", p->soap_type() == SOAP_TYPE_ows__UnNamedDomainType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__UnNamedDomainType(struct soap *soap, const char *URL, ows__UnNamedDomainType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UnNamedDomainType", p->soap_type() == SOAP_TYPE_ows__UnNamedDomainType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__UnNamedDomainType(struct soap *soap, const char *URL, ows__UnNamedDomainType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:UnNamedDomainType", p->soap_type() == SOAP_TYPE_ows__UnNamedDomainType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__UnNamedDomainType * SOAP_FMAC4 soap_get_ows__UnNamedDomainType(struct soap*, ows__UnNamedDomainType *, const char*, const char*);

inline int soap_read_ows__UnNamedDomainType(struct soap *soap, ows__UnNamedDomainType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__UnNamedDomainType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__UnNamedDomainType(struct soap *soap, const char *URL, ows__UnNamedDomainType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__UnNamedDomainType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__UnNamedDomainType(struct soap *soap, ows__UnNamedDomainType *p)
{
	if (::soap_read_ows__UnNamedDomainType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__DomainType_DEFINED
#define SOAP_TYPE_ows__DomainType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__DomainType(struct soap*, const char*, int, const ows__DomainType *, const char*);
SOAP_FMAC3 ows__DomainType * SOAP_FMAC4 soap_in_ows__DomainType(struct soap*, const char*, ows__DomainType *, const char*);
SOAP_FMAC1 ows__DomainType * SOAP_FMAC2 soap_instantiate_ows__DomainType(struct soap*, int, const char*, const char*, size_t*);

inline ows__DomainType * soap_new_ows__DomainType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__DomainType(soap, n, NULL, NULL, NULL);
}

inline ows__DomainType * soap_new_req_ows__DomainType(
	struct soap *soap,
	const std::string& name,
	const union _ows__union_UnNamedDomainType& union_UnNamedDomainType__1,
	const union _ows__union_UnNamedDomainType_& union_UnNamedDomainType___1)
{
	ows__DomainType *_p = ::soap_new_ows__DomainType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__DomainType::name = name;
		_p->ows__UnNamedDomainType::union_UnNamedDomainType = union_UnNamedDomainType__1;
		_p->ows__UnNamedDomainType::union_UnNamedDomainType_ = union_UnNamedDomainType___1;
	}
	return _p;
}

inline ows__DomainType * soap_new_set_ows__DomainType(
	struct soap *soap,
	const std::string& name,
	int __union_UnNamedDomainType__1,
	const union _ows__union_UnNamedDomainType& union_UnNamedDomainType__1,
	ows__ValueType *DefaultValue__1,
	ows__DomainMetadataType *Meaning__1,
	ows__DomainMetadataType *DataType__1,
	int __union_UnNamedDomainType___1,
	const union _ows__union_UnNamedDomainType_& union_UnNamedDomainType___1,
	const std::vector<ows__MetadataType *> & Metadata__1,
	char *__item__2)
{
	ows__DomainType *_p = ::soap_new_ows__DomainType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__DomainType::name = name;
		_p->ows__UnNamedDomainType::__union_UnNamedDomainType = __union_UnNamedDomainType__1;
		_p->ows__UnNamedDomainType::union_UnNamedDomainType = union_UnNamedDomainType__1;
		_p->ows__UnNamedDomainType::DefaultValue = DefaultValue__1;
		_p->ows__UnNamedDomainType::Meaning = Meaning__1;
		_p->ows__UnNamedDomainType::DataType = DataType__1;
		_p->ows__UnNamedDomainType::__union_UnNamedDomainType_ = __union_UnNamedDomainType___1;
		_p->ows__UnNamedDomainType::union_UnNamedDomainType_ = union_UnNamedDomainType___1;
		_p->ows__UnNamedDomainType::Metadata = Metadata__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ows__DomainType(struct soap *soap, ows__DomainType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainType", p->soap_type() == SOAP_TYPE_ows__DomainType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__DomainType(struct soap *soap, const char *URL, ows__DomainType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainType", p->soap_type() == SOAP_TYPE_ows__DomainType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__DomainType(struct soap *soap, const char *URL, ows__DomainType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainType", p->soap_type() == SOAP_TYPE_ows__DomainType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__DomainType(struct soap *soap, const char *URL, ows__DomainType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DomainType", p->soap_type() == SOAP_TYPE_ows__DomainType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__DomainType * SOAP_FMAC4 soap_get_ows__DomainType(struct soap*, ows__DomainType *, const char*, const char*);

inline int soap_read_ows__DomainType(struct soap *soap, ows__DomainType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__DomainType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__DomainType(struct soap *soap, const char *URL, ows__DomainType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__DomainType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__DomainType(struct soap *soap, ows__DomainType *p)
{
	if (::soap_read_ows__DomainType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__RequestMethodType_DEFINED
#define SOAP_TYPE_ows__RequestMethodType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__RequestMethodType(struct soap*, const char*, int, const ows__RequestMethodType *, const char*);
SOAP_FMAC3 ows__RequestMethodType * SOAP_FMAC4 soap_in_ows__RequestMethodType(struct soap*, const char*, ows__RequestMethodType *, const char*);
SOAP_FMAC1 ows__RequestMethodType * SOAP_FMAC2 soap_instantiate_ows__RequestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline ows__RequestMethodType * soap_new_ows__RequestMethodType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__RequestMethodType(soap, n, NULL, NULL, NULL);
}

inline ows__RequestMethodType * soap_new_req_ows__RequestMethodType(
	struct soap *soap)
{
	ows__RequestMethodType *_p = ::soap_new_ows__RequestMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__RequestMethodType * soap_new_set_ows__RequestMethodType(
	struct soap *soap,
	const std::vector<ows__DomainType *> & Constraint,
	enum xlink__typeType xlink__type__1,
	char **xlink__href__1,
	char **xlink__role__1,
	char **xlink__arcrole__1,
	std::string *xlink__title__1,
	enum xlink__showType *xlink__show__1,
	enum xlink__actuateType *xlink__actuate__1,
	char *__item__2)
{
	ows__RequestMethodType *_p = ::soap_new_ows__RequestMethodType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__RequestMethodType::Constraint = Constraint;
		_p->ows__OnlineResourceType::xlink__type = xlink__type__1;
		_p->ows__OnlineResourceType::xlink__href = xlink__href__1;
		_p->ows__OnlineResourceType::xlink__role = xlink__role__1;
		_p->ows__OnlineResourceType::xlink__arcrole = xlink__arcrole__1;
		_p->ows__OnlineResourceType::xlink__title = xlink__title__1;
		_p->ows__OnlineResourceType::xlink__show = xlink__show__1;
		_p->ows__OnlineResourceType::xlink__actuate = xlink__actuate__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ows__RequestMethodType(struct soap *soap, ows__RequestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RequestMethodType", p->soap_type() == SOAP_TYPE_ows__RequestMethodType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__RequestMethodType(struct soap *soap, const char *URL, ows__RequestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RequestMethodType", p->soap_type() == SOAP_TYPE_ows__RequestMethodType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__RequestMethodType(struct soap *soap, const char *URL, ows__RequestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RequestMethodType", p->soap_type() == SOAP_TYPE_ows__RequestMethodType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__RequestMethodType(struct soap *soap, const char *URL, ows__RequestMethodType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:RequestMethodType", p->soap_type() == SOAP_TYPE_ows__RequestMethodType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__RequestMethodType * SOAP_FMAC4 soap_get_ows__RequestMethodType(struct soap*, ows__RequestMethodType *, const char*, const char*);

inline int soap_read_ows__RequestMethodType(struct soap *soap, ows__RequestMethodType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__RequestMethodType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__RequestMethodType(struct soap *soap, const char *URL, ows__RequestMethodType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__RequestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__RequestMethodType(struct soap *soap, ows__RequestMethodType *p)
{
	if (::soap_read_ows__RequestMethodType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__AcceptFormatsType_DEFINED
#define SOAP_TYPE_ows__AcceptFormatsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__AcceptFormatsType(struct soap*, const char*, int, const ows__AcceptFormatsType *, const char*);
SOAP_FMAC3 ows__AcceptFormatsType * SOAP_FMAC4 soap_in_ows__AcceptFormatsType(struct soap*, const char*, ows__AcceptFormatsType *, const char*);
SOAP_FMAC1 ows__AcceptFormatsType * SOAP_FMAC2 soap_instantiate_ows__AcceptFormatsType(struct soap*, int, const char*, const char*, size_t*);

inline ows__AcceptFormatsType * soap_new_ows__AcceptFormatsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__AcceptFormatsType(soap, n, NULL, NULL, NULL);
}

inline ows__AcceptFormatsType * soap_new_req_ows__AcceptFormatsType(
	struct soap *soap)
{
	ows__AcceptFormatsType *_p = ::soap_new_ows__AcceptFormatsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__AcceptFormatsType * soap_new_set_ows__AcceptFormatsType(
	struct soap *soap,
	const std::vector<std::string> & OutputFormat,
	char *__item__1)
{
	ows__AcceptFormatsType *_p = ::soap_new_ows__AcceptFormatsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__AcceptFormatsType::OutputFormat = OutputFormat;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__AcceptFormatsType(struct soap *soap, ows__AcceptFormatsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptFormatsType", p->soap_type() == SOAP_TYPE_ows__AcceptFormatsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__AcceptFormatsType(struct soap *soap, const char *URL, ows__AcceptFormatsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptFormatsType", p->soap_type() == SOAP_TYPE_ows__AcceptFormatsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__AcceptFormatsType(struct soap *soap, const char *URL, ows__AcceptFormatsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptFormatsType", p->soap_type() == SOAP_TYPE_ows__AcceptFormatsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__AcceptFormatsType(struct soap *soap, const char *URL, ows__AcceptFormatsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptFormatsType", p->soap_type() == SOAP_TYPE_ows__AcceptFormatsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__AcceptFormatsType * SOAP_FMAC4 soap_get_ows__AcceptFormatsType(struct soap*, ows__AcceptFormatsType *, const char*, const char*);

inline int soap_read_ows__AcceptFormatsType(struct soap *soap, ows__AcceptFormatsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__AcceptFormatsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__AcceptFormatsType(struct soap *soap, const char *URL, ows__AcceptFormatsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__AcceptFormatsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__AcceptFormatsType(struct soap *soap, ows__AcceptFormatsType *p)
{
	if (::soap_read_ows__AcceptFormatsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__SectionsType_DEFINED
#define SOAP_TYPE_ows__SectionsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__SectionsType(struct soap*, const char*, int, const ows__SectionsType *, const char*);
SOAP_FMAC3 ows__SectionsType * SOAP_FMAC4 soap_in_ows__SectionsType(struct soap*, const char*, ows__SectionsType *, const char*);
SOAP_FMAC1 ows__SectionsType * SOAP_FMAC2 soap_instantiate_ows__SectionsType(struct soap*, int, const char*, const char*, size_t*);

inline ows__SectionsType * soap_new_ows__SectionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__SectionsType(soap, n, NULL, NULL, NULL);
}

inline ows__SectionsType * soap_new_req_ows__SectionsType(
	struct soap *soap)
{
	ows__SectionsType *_p = ::soap_new_ows__SectionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__SectionsType * soap_new_set_ows__SectionsType(
	struct soap *soap,
	const std::vector<std::string> & Section,
	char *__item__1)
{
	ows__SectionsType *_p = ::soap_new_ows__SectionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__SectionsType::Section = Section;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__SectionsType(struct soap *soap, ows__SectionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:SectionsType", p->soap_type() == SOAP_TYPE_ows__SectionsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__SectionsType(struct soap *soap, const char *URL, ows__SectionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:SectionsType", p->soap_type() == SOAP_TYPE_ows__SectionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__SectionsType(struct soap *soap, const char *URL, ows__SectionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:SectionsType", p->soap_type() == SOAP_TYPE_ows__SectionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__SectionsType(struct soap *soap, const char *URL, ows__SectionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:SectionsType", p->soap_type() == SOAP_TYPE_ows__SectionsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__SectionsType * SOAP_FMAC4 soap_get_ows__SectionsType(struct soap*, ows__SectionsType *, const char*, const char*);

inline int soap_read_ows__SectionsType(struct soap *soap, ows__SectionsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__SectionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__SectionsType(struct soap *soap, const char *URL, ows__SectionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__SectionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__SectionsType(struct soap *soap, ows__SectionsType *p)
{
	if (::soap_read_ows__SectionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__AcceptVersionsType_DEFINED
#define SOAP_TYPE_ows__AcceptVersionsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__AcceptVersionsType(struct soap*, const char*, int, const ows__AcceptVersionsType *, const char*);
SOAP_FMAC3 ows__AcceptVersionsType * SOAP_FMAC4 soap_in_ows__AcceptVersionsType(struct soap*, const char*, ows__AcceptVersionsType *, const char*);
SOAP_FMAC1 ows__AcceptVersionsType * SOAP_FMAC2 soap_instantiate_ows__AcceptVersionsType(struct soap*, int, const char*, const char*, size_t*);

inline ows__AcceptVersionsType * soap_new_ows__AcceptVersionsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__AcceptVersionsType(soap, n, NULL, NULL, NULL);
}

inline ows__AcceptVersionsType * soap_new_req_ows__AcceptVersionsType(
	struct soap *soap,
	const std::vector<std::string> & Version)
{
	ows__AcceptVersionsType *_p = ::soap_new_ows__AcceptVersionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__AcceptVersionsType::Version = Version;
	}
	return _p;
}

inline ows__AcceptVersionsType * soap_new_set_ows__AcceptVersionsType(
	struct soap *soap,
	const std::vector<std::string> & Version,
	char *__item__1)
{
	ows__AcceptVersionsType *_p = ::soap_new_ows__AcceptVersionsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__AcceptVersionsType::Version = Version;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__AcceptVersionsType(struct soap *soap, ows__AcceptVersionsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptVersionsType", p->soap_type() == SOAP_TYPE_ows__AcceptVersionsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__AcceptVersionsType(struct soap *soap, const char *URL, ows__AcceptVersionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptVersionsType", p->soap_type() == SOAP_TYPE_ows__AcceptVersionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__AcceptVersionsType(struct soap *soap, const char *URL, ows__AcceptVersionsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptVersionsType", p->soap_type() == SOAP_TYPE_ows__AcceptVersionsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__AcceptVersionsType(struct soap *soap, const char *URL, ows__AcceptVersionsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AcceptVersionsType", p->soap_type() == SOAP_TYPE_ows__AcceptVersionsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__AcceptVersionsType * SOAP_FMAC4 soap_get_ows__AcceptVersionsType(struct soap*, ows__AcceptVersionsType *, const char*, const char*);

inline int soap_read_ows__AcceptVersionsType(struct soap *soap, ows__AcceptVersionsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__AcceptVersionsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__AcceptVersionsType(struct soap *soap, const char *URL, ows__AcceptVersionsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__AcceptVersionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__AcceptVersionsType(struct soap *soap, ows__AcceptVersionsType *p)
{
	if (::soap_read_ows__AcceptVersionsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__GetCapabilitiesType_DEFINED
#define SOAP_TYPE_ows__GetCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__GetCapabilitiesType(struct soap*, const char*, int, const ows__GetCapabilitiesType *, const char*);
SOAP_FMAC3 ows__GetCapabilitiesType * SOAP_FMAC4 soap_in_ows__GetCapabilitiesType(struct soap*, const char*, ows__GetCapabilitiesType *, const char*);
SOAP_FMAC1 ows__GetCapabilitiesType * SOAP_FMAC2 soap_instantiate_ows__GetCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline ows__GetCapabilitiesType * soap_new_ows__GetCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__GetCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline ows__GetCapabilitiesType * soap_new_req_ows__GetCapabilitiesType(
	struct soap *soap)
{
	ows__GetCapabilitiesType *_p = ::soap_new_ows__GetCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__GetCapabilitiesType * soap_new_set_ows__GetCapabilitiesType(
	struct soap *soap,
	ows__AcceptVersionsType *AcceptVersions,
	ows__SectionsType *Sections,
	ows__AcceptFormatsType *AcceptFormats,
	std::string *updateSequence,
	char *__item__1)
{
	ows__GetCapabilitiesType *_p = ::soap_new_ows__GetCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__GetCapabilitiesType::AcceptVersions = AcceptVersions;
		_p->ows__GetCapabilitiesType::Sections = Sections;
		_p->ows__GetCapabilitiesType::AcceptFormats = AcceptFormats;
		_p->ows__GetCapabilitiesType::updateSequence = updateSequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__GetCapabilitiesType(struct soap *soap, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_ows__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__GetCapabilitiesType(struct soap *soap, const char *URL, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_ows__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__GetCapabilitiesType(struct soap *soap, const char *URL, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_ows__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__GetCapabilitiesType(struct soap *soap, const char *URL, ows__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_ows__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__GetCapabilitiesType * SOAP_FMAC4 soap_get_ows__GetCapabilitiesType(struct soap*, ows__GetCapabilitiesType *, const char*, const char*);

inline int soap_read_ows__GetCapabilitiesType(struct soap *soap, ows__GetCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__GetCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__GetCapabilitiesType(struct soap *soap, const char *URL, ows__GetCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__GetCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__GetCapabilitiesType(struct soap *soap, ows__GetCapabilitiesType *p)
{
	if (::soap_read_ows__GetCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__CapabilitiesBaseType_DEFINED
#define SOAP_TYPE_ows__CapabilitiesBaseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__CapabilitiesBaseType(struct soap*, const char*, int, const ows__CapabilitiesBaseType *, const char*);
SOAP_FMAC3 ows__CapabilitiesBaseType * SOAP_FMAC4 soap_in_ows__CapabilitiesBaseType(struct soap*, const char*, ows__CapabilitiesBaseType *, const char*);
SOAP_FMAC1 ows__CapabilitiesBaseType * SOAP_FMAC2 soap_instantiate_ows__CapabilitiesBaseType(struct soap*, int, const char*, const char*, size_t*);

inline ows__CapabilitiesBaseType * soap_new_ows__CapabilitiesBaseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__CapabilitiesBaseType(soap, n, NULL, NULL, NULL);
}

inline ows__CapabilitiesBaseType * soap_new_req_ows__CapabilitiesBaseType(
	struct soap *soap,
	const std::string& version)
{
	ows__CapabilitiesBaseType *_p = ::soap_new_ows__CapabilitiesBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__CapabilitiesBaseType::version = version;
	}
	return _p;
}

inline ows__CapabilitiesBaseType * soap_new_set_ows__CapabilitiesBaseType(
	struct soap *soap,
	_ows__ServiceIdentification *ServiceIdentification,
	_ows__ServiceProvider *ServiceProvider,
	_ows__OperationsMetadata *OperationsMetadata,
	const std::string& version,
	std::string *updateSequence,
	char *__item__1)
{
	ows__CapabilitiesBaseType *_p = ::soap_new_ows__CapabilitiesBaseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__CapabilitiesBaseType::ServiceIdentification = ServiceIdentification;
		_p->ows__CapabilitiesBaseType::ServiceProvider = ServiceProvider;
		_p->ows__CapabilitiesBaseType::OperationsMetadata = OperationsMetadata;
		_p->ows__CapabilitiesBaseType::version = version;
		_p->ows__CapabilitiesBaseType::updateSequence = updateSequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__CapabilitiesBaseType(struct soap *soap, ows__CapabilitiesBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CapabilitiesBaseType", p->soap_type() == SOAP_TYPE_ows__CapabilitiesBaseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__CapabilitiesBaseType(struct soap *soap, const char *URL, ows__CapabilitiesBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CapabilitiesBaseType", p->soap_type() == SOAP_TYPE_ows__CapabilitiesBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__CapabilitiesBaseType(struct soap *soap, const char *URL, ows__CapabilitiesBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CapabilitiesBaseType", p->soap_type() == SOAP_TYPE_ows__CapabilitiesBaseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__CapabilitiesBaseType(struct soap *soap, const char *URL, ows__CapabilitiesBaseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CapabilitiesBaseType", p->soap_type() == SOAP_TYPE_ows__CapabilitiesBaseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__CapabilitiesBaseType * SOAP_FMAC4 soap_get_ows__CapabilitiesBaseType(struct soap*, ows__CapabilitiesBaseType *, const char*, const char*);

inline int soap_read_ows__CapabilitiesBaseType(struct soap *soap, ows__CapabilitiesBaseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__CapabilitiesBaseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__CapabilitiesBaseType(struct soap *soap, const char *URL, ows__CapabilitiesBaseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__CapabilitiesBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__CapabilitiesBaseType(struct soap *soap, ows__CapabilitiesBaseType *p)
{
	if (::soap_read_ows__CapabilitiesBaseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__AddressType_DEFINED
#define SOAP_TYPE_ows__AddressType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__AddressType(struct soap*, const char*, int, const ows__AddressType *, const char*);
SOAP_FMAC3 ows__AddressType * SOAP_FMAC4 soap_in_ows__AddressType(struct soap*, const char*, ows__AddressType *, const char*);
SOAP_FMAC1 ows__AddressType * SOAP_FMAC2 soap_instantiate_ows__AddressType(struct soap*, int, const char*, const char*, size_t*);

inline ows__AddressType * soap_new_ows__AddressType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__AddressType(soap, n, NULL, NULL, NULL);
}

inline ows__AddressType * soap_new_req_ows__AddressType(
	struct soap *soap)
{
	ows__AddressType *_p = ::soap_new_ows__AddressType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__AddressType * soap_new_set_ows__AddressType(
	struct soap *soap,
	const std::vector<std::string> & DeliveryPoint,
	std::string *City,
	std::string *AdministrativeArea,
	std::string *PostalCode,
	std::string *Country,
	const std::vector<std::string> & ElectronicMailAddress,
	char *__item__1)
{
	ows__AddressType *_p = ::soap_new_ows__AddressType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__AddressType::DeliveryPoint = DeliveryPoint;
		_p->ows__AddressType::City = City;
		_p->ows__AddressType::AdministrativeArea = AdministrativeArea;
		_p->ows__AddressType::PostalCode = PostalCode;
		_p->ows__AddressType::Country = Country;
		_p->ows__AddressType::ElectronicMailAddress = ElectronicMailAddress;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__AddressType(struct soap *soap, ows__AddressType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AddressType", p->soap_type() == SOAP_TYPE_ows__AddressType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__AddressType(struct soap *soap, const char *URL, ows__AddressType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AddressType", p->soap_type() == SOAP_TYPE_ows__AddressType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__AddressType(struct soap *soap, const char *URL, ows__AddressType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AddressType", p->soap_type() == SOAP_TYPE_ows__AddressType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__AddressType(struct soap *soap, const char *URL, ows__AddressType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:AddressType", p->soap_type() == SOAP_TYPE_ows__AddressType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__AddressType * SOAP_FMAC4 soap_get_ows__AddressType(struct soap*, ows__AddressType *, const char*, const char*);

inline int soap_read_ows__AddressType(struct soap *soap, ows__AddressType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__AddressType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__AddressType(struct soap *soap, const char *URL, ows__AddressType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__AddressType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__AddressType(struct soap *soap, ows__AddressType *p)
{
	if (::soap_read_ows__AddressType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__TelephoneType_DEFINED
#define SOAP_TYPE_ows__TelephoneType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__TelephoneType(struct soap*, const char*, int, const ows__TelephoneType *, const char*);
SOAP_FMAC3 ows__TelephoneType * SOAP_FMAC4 soap_in_ows__TelephoneType(struct soap*, const char*, ows__TelephoneType *, const char*);
SOAP_FMAC1 ows__TelephoneType * SOAP_FMAC2 soap_instantiate_ows__TelephoneType(struct soap*, int, const char*, const char*, size_t*);

inline ows__TelephoneType * soap_new_ows__TelephoneType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__TelephoneType(soap, n, NULL, NULL, NULL);
}

inline ows__TelephoneType * soap_new_req_ows__TelephoneType(
	struct soap *soap)
{
	ows__TelephoneType *_p = ::soap_new_ows__TelephoneType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__TelephoneType * soap_new_set_ows__TelephoneType(
	struct soap *soap,
	const std::vector<std::string> & Voice,
	const std::vector<std::string> & Facsimile,
	char *__item__1)
{
	ows__TelephoneType *_p = ::soap_new_ows__TelephoneType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__TelephoneType::Voice = Voice;
		_p->ows__TelephoneType::Facsimile = Facsimile;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__TelephoneType(struct soap *soap, ows__TelephoneType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:TelephoneType", p->soap_type() == SOAP_TYPE_ows__TelephoneType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__TelephoneType(struct soap *soap, const char *URL, ows__TelephoneType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:TelephoneType", p->soap_type() == SOAP_TYPE_ows__TelephoneType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__TelephoneType(struct soap *soap, const char *URL, ows__TelephoneType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:TelephoneType", p->soap_type() == SOAP_TYPE_ows__TelephoneType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__TelephoneType(struct soap *soap, const char *URL, ows__TelephoneType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:TelephoneType", p->soap_type() == SOAP_TYPE_ows__TelephoneType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__TelephoneType * SOAP_FMAC4 soap_get_ows__TelephoneType(struct soap*, ows__TelephoneType *, const char*, const char*);

inline int soap_read_ows__TelephoneType(struct soap *soap, ows__TelephoneType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__TelephoneType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__TelephoneType(struct soap *soap, const char *URL, ows__TelephoneType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__TelephoneType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__TelephoneType(struct soap *soap, ows__TelephoneType *p)
{
	if (::soap_read_ows__TelephoneType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__OnlineResourceType_DEFINED
#define SOAP_TYPE_ows__OnlineResourceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__OnlineResourceType(struct soap*, const char*, int, const ows__OnlineResourceType *, const char*);
SOAP_FMAC3 ows__OnlineResourceType * SOAP_FMAC4 soap_in_ows__OnlineResourceType(struct soap*, const char*, ows__OnlineResourceType *, const char*);
SOAP_FMAC1 ows__OnlineResourceType * SOAP_FMAC2 soap_instantiate_ows__OnlineResourceType(struct soap*, int, const char*, const char*, size_t*);

inline ows__OnlineResourceType * soap_new_ows__OnlineResourceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__OnlineResourceType(soap, n, NULL, NULL, NULL);
}

inline ows__OnlineResourceType * soap_new_req_ows__OnlineResourceType(
	struct soap *soap)
{
	ows__OnlineResourceType *_p = ::soap_new_ows__OnlineResourceType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__OnlineResourceType * soap_new_set_ows__OnlineResourceType(
	struct soap *soap,
	enum xlink__typeType xlink__type,
	char **xlink__href,
	char **xlink__role,
	char **xlink__arcrole,
	std::string *xlink__title,
	enum xlink__showType *xlink__show,
	enum xlink__actuateType *xlink__actuate,
	char *__item__1)
{
	ows__OnlineResourceType *_p = ::soap_new_ows__OnlineResourceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__OnlineResourceType::xlink__type = xlink__type;
		_p->ows__OnlineResourceType::xlink__href = xlink__href;
		_p->ows__OnlineResourceType::xlink__role = xlink__role;
		_p->ows__OnlineResourceType::xlink__arcrole = xlink__arcrole;
		_p->ows__OnlineResourceType::xlink__title = xlink__title;
		_p->ows__OnlineResourceType::xlink__show = xlink__show;
		_p->ows__OnlineResourceType::xlink__actuate = xlink__actuate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__OnlineResourceType(struct soap *soap, ows__OnlineResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OnlineResourceType", p->soap_type() == SOAP_TYPE_ows__OnlineResourceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__OnlineResourceType(struct soap *soap, const char *URL, ows__OnlineResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OnlineResourceType", p->soap_type() == SOAP_TYPE_ows__OnlineResourceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__OnlineResourceType(struct soap *soap, const char *URL, ows__OnlineResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OnlineResourceType", p->soap_type() == SOAP_TYPE_ows__OnlineResourceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__OnlineResourceType(struct soap *soap, const char *URL, ows__OnlineResourceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:OnlineResourceType", p->soap_type() == SOAP_TYPE_ows__OnlineResourceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__OnlineResourceType * SOAP_FMAC4 soap_get_ows__OnlineResourceType(struct soap*, ows__OnlineResourceType *, const char*, const char*);

inline int soap_read_ows__OnlineResourceType(struct soap *soap, ows__OnlineResourceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__OnlineResourceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__OnlineResourceType(struct soap *soap, const char *URL, ows__OnlineResourceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__OnlineResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__OnlineResourceType(struct soap *soap, ows__OnlineResourceType *p)
{
	if (::soap_read_ows__OnlineResourceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ContactType_DEFINED
#define SOAP_TYPE_ows__ContactType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ContactType(struct soap*, const char*, int, const ows__ContactType *, const char*);
SOAP_FMAC3 ows__ContactType * SOAP_FMAC4 soap_in_ows__ContactType(struct soap*, const char*, ows__ContactType *, const char*);
SOAP_FMAC1 ows__ContactType * SOAP_FMAC2 soap_instantiate_ows__ContactType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ContactType * soap_new_ows__ContactType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ContactType(soap, n, NULL, NULL, NULL);
}

inline ows__ContactType * soap_new_req_ows__ContactType(
	struct soap *soap)
{
	ows__ContactType *_p = ::soap_new_ows__ContactType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__ContactType * soap_new_set_ows__ContactType(
	struct soap *soap,
	ows__TelephoneType *Phone,
	ows__AddressType *Address,
	ows__OnlineResourceType *OnlineResource,
	std::string *HoursOfService,
	std::string *ContactInstructions,
	char *__item__1)
{
	ows__ContactType *_p = ::soap_new_ows__ContactType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ContactType::Phone = Phone;
		_p->ows__ContactType::Address = Address;
		_p->ows__ContactType::OnlineResource = OnlineResource;
		_p->ows__ContactType::HoursOfService = HoursOfService;
		_p->ows__ContactType::ContactInstructions = ContactInstructions;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__ContactType(struct soap *soap, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactType", p->soap_type() == SOAP_TYPE_ows__ContactType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ContactType(struct soap *soap, const char *URL, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactType", p->soap_type() == SOAP_TYPE_ows__ContactType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ContactType(struct soap *soap, const char *URL, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactType", p->soap_type() == SOAP_TYPE_ows__ContactType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ContactType(struct soap *soap, const char *URL, ows__ContactType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ContactType", p->soap_type() == SOAP_TYPE_ows__ContactType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ContactType * SOAP_FMAC4 soap_get_ows__ContactType(struct soap*, ows__ContactType *, const char*, const char*);

inline int soap_read_ows__ContactType(struct soap *soap, ows__ContactType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ContactType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ContactType(struct soap *soap, const char *URL, ows__ContactType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ContactType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ContactType(struct soap *soap, ows__ContactType *p)
{
	if (::soap_read_ows__ContactType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ResponsiblePartySubsetType_DEFINED
#define SOAP_TYPE_ows__ResponsiblePartySubsetType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ResponsiblePartySubsetType(struct soap*, const char*, int, const ows__ResponsiblePartySubsetType *, const char*);
SOAP_FMAC3 ows__ResponsiblePartySubsetType * SOAP_FMAC4 soap_in_ows__ResponsiblePartySubsetType(struct soap*, const char*, ows__ResponsiblePartySubsetType *, const char*);
SOAP_FMAC1 ows__ResponsiblePartySubsetType * SOAP_FMAC2 soap_instantiate_ows__ResponsiblePartySubsetType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ResponsiblePartySubsetType * soap_new_ows__ResponsiblePartySubsetType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ResponsiblePartySubsetType(soap, n, NULL, NULL, NULL);
}

inline ows__ResponsiblePartySubsetType * soap_new_req_ows__ResponsiblePartySubsetType(
	struct soap *soap)
{
	ows__ResponsiblePartySubsetType *_p = ::soap_new_ows__ResponsiblePartySubsetType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__ResponsiblePartySubsetType * soap_new_set_ows__ResponsiblePartySubsetType(
	struct soap *soap,
	std::string *IndividualName,
	std::string *PositionName,
	ows__ContactType *ContactInfo,
	ows__CodeType *Role,
	char *__item__1)
{
	ows__ResponsiblePartySubsetType *_p = ::soap_new_ows__ResponsiblePartySubsetType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ResponsiblePartySubsetType::IndividualName = IndividualName;
		_p->ows__ResponsiblePartySubsetType::PositionName = PositionName;
		_p->ows__ResponsiblePartySubsetType::ContactInfo = ContactInfo;
		_p->ows__ResponsiblePartySubsetType::Role = Role;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__ResponsiblePartySubsetType(struct soap *soap, ows__ResponsiblePartySubsetType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartySubsetType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartySubsetType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ResponsiblePartySubsetType(struct soap *soap, const char *URL, ows__ResponsiblePartySubsetType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartySubsetType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartySubsetType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ResponsiblePartySubsetType(struct soap *soap, const char *URL, ows__ResponsiblePartySubsetType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartySubsetType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartySubsetType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ResponsiblePartySubsetType(struct soap *soap, const char *URL, ows__ResponsiblePartySubsetType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartySubsetType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartySubsetType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ResponsiblePartySubsetType * SOAP_FMAC4 soap_get_ows__ResponsiblePartySubsetType(struct soap*, ows__ResponsiblePartySubsetType *, const char*, const char*);

inline int soap_read_ows__ResponsiblePartySubsetType(struct soap *soap, ows__ResponsiblePartySubsetType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ResponsiblePartySubsetType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ResponsiblePartySubsetType(struct soap *soap, const char *URL, ows__ResponsiblePartySubsetType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ResponsiblePartySubsetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ResponsiblePartySubsetType(struct soap *soap, ows__ResponsiblePartySubsetType *p)
{
	if (::soap_read_ows__ResponsiblePartySubsetType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ResponsiblePartyType_DEFINED
#define SOAP_TYPE_ows__ResponsiblePartyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ResponsiblePartyType(struct soap*, const char*, int, const ows__ResponsiblePartyType *, const char*);
SOAP_FMAC3 ows__ResponsiblePartyType * SOAP_FMAC4 soap_in_ows__ResponsiblePartyType(struct soap*, const char*, ows__ResponsiblePartyType *, const char*);
SOAP_FMAC1 ows__ResponsiblePartyType * SOAP_FMAC2 soap_instantiate_ows__ResponsiblePartyType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ResponsiblePartyType * soap_new_ows__ResponsiblePartyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ResponsiblePartyType(soap, n, NULL, NULL, NULL);
}

inline ows__ResponsiblePartyType * soap_new_req_ows__ResponsiblePartyType(
	struct soap *soap,
	ows__CodeType *Role)
{
	ows__ResponsiblePartyType *_p = ::soap_new_ows__ResponsiblePartyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ResponsiblePartyType::Role = Role;
	}
	return _p;
}

inline ows__ResponsiblePartyType * soap_new_set_ows__ResponsiblePartyType(
	struct soap *soap,
	std::string *IndividualName,
	std::string *OrganisationName,
	std::string *PositionName,
	ows__ContactType *ContactInfo,
	ows__CodeType *Role,
	char *__item__1)
{
	ows__ResponsiblePartyType *_p = ::soap_new_ows__ResponsiblePartyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ResponsiblePartyType::IndividualName = IndividualName;
		_p->ows__ResponsiblePartyType::OrganisationName = OrganisationName;
		_p->ows__ResponsiblePartyType::PositionName = PositionName;
		_p->ows__ResponsiblePartyType::ContactInfo = ContactInfo;
		_p->ows__ResponsiblePartyType::Role = Role;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__ResponsiblePartyType(struct soap *soap, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartyType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ResponsiblePartyType(struct soap *soap, const char *URL, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartyType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ResponsiblePartyType(struct soap *soap, const char *URL, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartyType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ResponsiblePartyType(struct soap *soap, const char *URL, ows__ResponsiblePartyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ResponsiblePartyType", p->soap_type() == SOAP_TYPE_ows__ResponsiblePartyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ResponsiblePartyType * SOAP_FMAC4 soap_get_ows__ResponsiblePartyType(struct soap*, ows__ResponsiblePartyType *, const char*, const char*);

inline int soap_read_ows__ResponsiblePartyType(struct soap *soap, ows__ResponsiblePartyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ResponsiblePartyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ResponsiblePartyType(struct soap *soap, const char *URL, ows__ResponsiblePartyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ResponsiblePartyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ResponsiblePartyType(struct soap *soap, ows__ResponsiblePartyType *p)
{
	if (::soap_read_ows__ResponsiblePartyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__CodeType_DEFINED
#define SOAP_TYPE_ows__CodeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__CodeType(struct soap*, const char*, int, const ows__CodeType *, const char*);
SOAP_FMAC3 ows__CodeType * SOAP_FMAC4 soap_in_ows__CodeType(struct soap*, const char*, ows__CodeType *, const char*);
SOAP_FMAC1 ows__CodeType * SOAP_FMAC2 soap_instantiate_ows__CodeType(struct soap*, int, const char*, const char*, size_t*);

inline ows__CodeType * soap_new_ows__CodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__CodeType(soap, n, NULL, NULL, NULL);
}

inline ows__CodeType * soap_new_req_ows__CodeType(
	struct soap *soap,
	const std::string& __item)
{
	ows__CodeType *_p = ::soap_new_ows__CodeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__CodeType::__item = __item;
	}
	return _p;
}

inline ows__CodeType * soap_new_set_ows__CodeType(
	struct soap *soap,
	const std::string& __item,
	char **codeSpace,
	char *__item__1)
{
	ows__CodeType *_p = ::soap_new_ows__CodeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__CodeType::__item = __item;
		_p->ows__CodeType::codeSpace = codeSpace;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__CodeType(struct soap *soap, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CodeType", p->soap_type() == SOAP_TYPE_ows__CodeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__CodeType(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CodeType", p->soap_type() == SOAP_TYPE_ows__CodeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__CodeType(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CodeType", p->soap_type() == SOAP_TYPE_ows__CodeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__CodeType(struct soap *soap, const char *URL, ows__CodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:CodeType", p->soap_type() == SOAP_TYPE_ows__CodeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__CodeType * SOAP_FMAC4 soap_get_ows__CodeType(struct soap*, ows__CodeType *, const char*, const char*);

inline int soap_read_ows__CodeType(struct soap *soap, ows__CodeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__CodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__CodeType(struct soap *soap, const char *URL, ows__CodeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__CodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__CodeType(struct soap *soap, ows__CodeType *p)
{
	if (::soap_read_ows__CodeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__KeywordsType_DEFINED
#define SOAP_TYPE_ows__KeywordsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__KeywordsType(struct soap*, const char*, int, const ows__KeywordsType *, const char*);
SOAP_FMAC3 ows__KeywordsType * SOAP_FMAC4 soap_in_ows__KeywordsType(struct soap*, const char*, ows__KeywordsType *, const char*);
SOAP_FMAC1 ows__KeywordsType * SOAP_FMAC2 soap_instantiate_ows__KeywordsType(struct soap*, int, const char*, const char*, size_t*);

inline ows__KeywordsType * soap_new_ows__KeywordsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__KeywordsType(soap, n, NULL, NULL, NULL);
}

inline ows__KeywordsType * soap_new_req_ows__KeywordsType(
	struct soap *soap,
	const std::vector<ows__LanguageStringType *> & Keyword)
{
	ows__KeywordsType *_p = ::soap_new_ows__KeywordsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__KeywordsType::Keyword = Keyword;
	}
	return _p;
}

inline ows__KeywordsType * soap_new_set_ows__KeywordsType(
	struct soap *soap,
	const std::vector<ows__LanguageStringType *> & Keyword,
	ows__CodeType *Type,
	char *__item__1)
{
	ows__KeywordsType *_p = ::soap_new_ows__KeywordsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__KeywordsType::Keyword = Keyword;
		_p->ows__KeywordsType::Type = Type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__KeywordsType(struct soap *soap, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:KeywordsType", p->soap_type() == SOAP_TYPE_ows__KeywordsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__KeywordsType(struct soap *soap, const char *URL, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:KeywordsType", p->soap_type() == SOAP_TYPE_ows__KeywordsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__KeywordsType(struct soap *soap, const char *URL, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:KeywordsType", p->soap_type() == SOAP_TYPE_ows__KeywordsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__KeywordsType(struct soap *soap, const char *URL, ows__KeywordsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:KeywordsType", p->soap_type() == SOAP_TYPE_ows__KeywordsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__KeywordsType * SOAP_FMAC4 soap_get_ows__KeywordsType(struct soap*, ows__KeywordsType *, const char*, const char*);

inline int soap_read_ows__KeywordsType(struct soap *soap, ows__KeywordsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__KeywordsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__KeywordsType(struct soap *soap, const char *URL, ows__KeywordsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__KeywordsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__KeywordsType(struct soap *soap, ows__KeywordsType *p)
{
	if (::soap_read_ows__KeywordsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__LanguageStringType_DEFINED
#define SOAP_TYPE_ows__LanguageStringType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__LanguageStringType(struct soap*, const char*, int, const ows__LanguageStringType *, const char*);
SOAP_FMAC3 ows__LanguageStringType * SOAP_FMAC4 soap_in_ows__LanguageStringType(struct soap*, const char*, ows__LanguageStringType *, const char*);
SOAP_FMAC1 ows__LanguageStringType * SOAP_FMAC2 soap_instantiate_ows__LanguageStringType(struct soap*, int, const char*, const char*, size_t*);

inline ows__LanguageStringType * soap_new_ows__LanguageStringType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__LanguageStringType(soap, n, NULL, NULL, NULL);
}

inline ows__LanguageStringType * soap_new_req_ows__LanguageStringType(
	struct soap *soap,
	const std::string& __item)
{
	ows__LanguageStringType *_p = ::soap_new_ows__LanguageStringType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__LanguageStringType::__item = __item;
	}
	return _p;
}

inline ows__LanguageStringType * soap_new_set_ows__LanguageStringType(
	struct soap *soap,
	const std::string& __item,
	char **xml__lang,
	char *__item__1)
{
	ows__LanguageStringType *_p = ::soap_new_ows__LanguageStringType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__LanguageStringType::__item = __item;
		_p->ows__LanguageStringType::xml__lang = xml__lang;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__LanguageStringType(struct soap *soap, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:LanguageStringType", p->soap_type() == SOAP_TYPE_ows__LanguageStringType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__LanguageStringType(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:LanguageStringType", p->soap_type() == SOAP_TYPE_ows__LanguageStringType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__LanguageStringType(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:LanguageStringType", p->soap_type() == SOAP_TYPE_ows__LanguageStringType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__LanguageStringType(struct soap *soap, const char *URL, ows__LanguageStringType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:LanguageStringType", p->soap_type() == SOAP_TYPE_ows__LanguageStringType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__LanguageStringType * SOAP_FMAC4 soap_get_ows__LanguageStringType(struct soap*, ows__LanguageStringType *, const char*, const char*);

inline int soap_read_ows__LanguageStringType(struct soap *soap, ows__LanguageStringType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__LanguageStringType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__LanguageStringType(struct soap *soap, const char *URL, ows__LanguageStringType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__LanguageStringType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__LanguageStringType(struct soap *soap, ows__LanguageStringType *p)
{
	if (::soap_read_ows__LanguageStringType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__WGS84BoundingBoxType_DEFINED
#define SOAP_TYPE_ows__WGS84BoundingBoxType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__WGS84BoundingBoxType(struct soap*, const char*, int, const ows__WGS84BoundingBoxType *, const char*);
SOAP_FMAC3 ows__WGS84BoundingBoxType * SOAP_FMAC4 soap_in_ows__WGS84BoundingBoxType(struct soap*, const char*, ows__WGS84BoundingBoxType *, const char*);
SOAP_FMAC1 ows__WGS84BoundingBoxType * SOAP_FMAC2 soap_instantiate_ows__WGS84BoundingBoxType(struct soap*, int, const char*, const char*, size_t*);

inline ows__WGS84BoundingBoxType * soap_new_ows__WGS84BoundingBoxType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__WGS84BoundingBoxType(soap, n, NULL, NULL, NULL);
}

inline ows__WGS84BoundingBoxType * soap_new_req_ows__WGS84BoundingBoxType(
	struct soap *soap,
	const std::string& LowerCorner,
	const std::string& UpperCorner)
{
	ows__WGS84BoundingBoxType *_p = ::soap_new_ows__WGS84BoundingBoxType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__WGS84BoundingBoxType::LowerCorner = LowerCorner;
		_p->ows__WGS84BoundingBoxType::UpperCorner = UpperCorner;
	}
	return _p;
}

inline ows__WGS84BoundingBoxType * soap_new_set_ows__WGS84BoundingBoxType(
	struct soap *soap,
	const std::string& LowerCorner,
	const std::string& UpperCorner,
	char *crs,
	ULONG64 dimensions,
	char *__item__1)
{
	ows__WGS84BoundingBoxType *_p = ::soap_new_ows__WGS84BoundingBoxType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__WGS84BoundingBoxType::LowerCorner = LowerCorner;
		_p->ows__WGS84BoundingBoxType::UpperCorner = UpperCorner;
		_p->ows__WGS84BoundingBoxType::crs = crs;
		_p->ows__WGS84BoundingBoxType::dimensions = dimensions;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__WGS84BoundingBoxType(struct soap *soap, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__WGS84BoundingBoxType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__WGS84BoundingBoxType(struct soap *soap, const char *URL, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__WGS84BoundingBoxType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__WGS84BoundingBoxType(struct soap *soap, const char *URL, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__WGS84BoundingBoxType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__WGS84BoundingBoxType(struct soap *soap, const char *URL, ows__WGS84BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:WGS84BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__WGS84BoundingBoxType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__WGS84BoundingBoxType * SOAP_FMAC4 soap_get_ows__WGS84BoundingBoxType(struct soap*, ows__WGS84BoundingBoxType *, const char*, const char*);

inline int soap_read_ows__WGS84BoundingBoxType(struct soap *soap, ows__WGS84BoundingBoxType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__WGS84BoundingBoxType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__WGS84BoundingBoxType(struct soap *soap, const char *URL, ows__WGS84BoundingBoxType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__WGS84BoundingBoxType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__WGS84BoundingBoxType(struct soap *soap, ows__WGS84BoundingBoxType *p)
{
	if (::soap_read_ows__WGS84BoundingBoxType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__BoundingBoxType_DEFINED
#define SOAP_TYPE_ows__BoundingBoxType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__BoundingBoxType(struct soap*, const char*, int, const ows__BoundingBoxType *, const char*);
SOAP_FMAC3 ows__BoundingBoxType * SOAP_FMAC4 soap_in_ows__BoundingBoxType(struct soap*, const char*, ows__BoundingBoxType *, const char*);
SOAP_FMAC1 ows__BoundingBoxType * SOAP_FMAC2 soap_instantiate_ows__BoundingBoxType(struct soap*, int, const char*, const char*, size_t*);

inline ows__BoundingBoxType * soap_new_ows__BoundingBoxType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__BoundingBoxType(soap, n, NULL, NULL, NULL);
}

inline ows__BoundingBoxType * soap_new_req_ows__BoundingBoxType(
	struct soap *soap,
	const std::string& LowerCorner,
	const std::string& UpperCorner)
{
	ows__BoundingBoxType *_p = ::soap_new_ows__BoundingBoxType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__BoundingBoxType::LowerCorner = LowerCorner;
		_p->ows__BoundingBoxType::UpperCorner = UpperCorner;
	}
	return _p;
}

inline ows__BoundingBoxType * soap_new_set_ows__BoundingBoxType(
	struct soap *soap,
	const std::string& LowerCorner,
	const std::string& UpperCorner,
	char **crs,
	ULONG64 *dimensions,
	char *__item__1)
{
	ows__BoundingBoxType *_p = ::soap_new_ows__BoundingBoxType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__BoundingBoxType::LowerCorner = LowerCorner;
		_p->ows__BoundingBoxType::UpperCorner = UpperCorner;
		_p->ows__BoundingBoxType::crs = crs;
		_p->ows__BoundingBoxType::dimensions = dimensions;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__BoundingBoxType(struct soap *soap, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__BoundingBoxType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__BoundingBoxType(struct soap *soap, const char *URL, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__BoundingBoxType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__BoundingBoxType(struct soap *soap, const char *URL, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__BoundingBoxType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__BoundingBoxType(struct soap *soap, const char *URL, ows__BoundingBoxType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BoundingBoxType", p->soap_type() == SOAP_TYPE_ows__BoundingBoxType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__BoundingBoxType * SOAP_FMAC4 soap_get_ows__BoundingBoxType(struct soap*, ows__BoundingBoxType *, const char*, const char*);

inline int soap_read_ows__BoundingBoxType(struct soap *soap, ows__BoundingBoxType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__BoundingBoxType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__BoundingBoxType(struct soap *soap, const char *URL, ows__BoundingBoxType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__BoundingBoxType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__BoundingBoxType(struct soap *soap, ows__BoundingBoxType *p)
{
	if (::soap_read_ows__BoundingBoxType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__MetadataType_DEFINED
#define SOAP_TYPE_ows__MetadataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__MetadataType(struct soap*, const char*, int, const ows__MetadataType *, const char*);
SOAP_FMAC3 ows__MetadataType * SOAP_FMAC4 soap_in_ows__MetadataType(struct soap*, const char*, ows__MetadataType *, const char*);
SOAP_FMAC1 ows__MetadataType * SOAP_FMAC2 soap_instantiate_ows__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline ows__MetadataType * soap_new_ows__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__MetadataType(soap, n, NULL, NULL, NULL);
}

inline ows__MetadataType * soap_new_req_ows__MetadataType(
	struct soap *soap,
	const union _ows__union_MetadataType& union_MetadataType)
{
	ows__MetadataType *_p = ::soap_new_ows__MetadataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__MetadataType::union_MetadataType = union_MetadataType;
	}
	return _p;
}

inline ows__MetadataType * soap_new_set_ows__MetadataType(
	struct soap *soap,
	int __unionAbstractMetaData,
	const union _ows__union_MetadataType& union_MetadataType,
	char **about,
	enum xlink__typeType xlink__type,
	char **xlink__href,
	char **xlink__role,
	char **xlink__arcrole,
	std::string *xlink__title,
	enum xlink__showType *xlink__show,
	enum xlink__actuateType *xlink__actuate,
	char *__item__1)
{
	ows__MetadataType *_p = ::soap_new_ows__MetadataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__MetadataType::__unionAbstractMetaData = __unionAbstractMetaData;
		_p->ows__MetadataType::union_MetadataType = union_MetadataType;
		_p->ows__MetadataType::about = about;
		_p->ows__MetadataType::xlink__type = xlink__type;
		_p->ows__MetadataType::xlink__href = xlink__href;
		_p->ows__MetadataType::xlink__role = xlink__role;
		_p->ows__MetadataType::xlink__arcrole = xlink__arcrole;
		_p->ows__MetadataType::xlink__title = xlink__title;
		_p->ows__MetadataType::xlink__show = xlink__show;
		_p->ows__MetadataType::xlink__actuate = xlink__actuate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__MetadataType(struct soap *soap, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MetadataType", p->soap_type() == SOAP_TYPE_ows__MetadataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__MetadataType(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MetadataType", p->soap_type() == SOAP_TYPE_ows__MetadataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__MetadataType(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MetadataType", p->soap_type() == SOAP_TYPE_ows__MetadataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__MetadataType(struct soap *soap, const char *URL, ows__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:MetadataType", p->soap_type() == SOAP_TYPE_ows__MetadataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__MetadataType * SOAP_FMAC4 soap_get_ows__MetadataType(struct soap*, ows__MetadataType *, const char*, const char*);

inline int soap_read_ows__MetadataType(struct soap *soap, ows__MetadataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__MetadataType(struct soap *soap, const char *URL, ows__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__MetadataType(struct soap *soap, ows__MetadataType *p)
{
	if (::soap_read_ows__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__IdentificationType_DEFINED
#define SOAP_TYPE_ows__IdentificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__IdentificationType(struct soap*, const char*, int, const ows__IdentificationType *, const char*);
SOAP_FMAC3 ows__IdentificationType * SOAP_FMAC4 soap_in_ows__IdentificationType(struct soap*, const char*, ows__IdentificationType *, const char*);
SOAP_FMAC1 ows__IdentificationType * SOAP_FMAC2 soap_instantiate_ows__IdentificationType(struct soap*, int, const char*, const char*, size_t*);

inline ows__IdentificationType * soap_new_ows__IdentificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__IdentificationType(soap, n, NULL, NULL, NULL);
}

inline ows__IdentificationType * soap_new_req_ows__IdentificationType(
	struct soap *soap,
	int __sizeBoundingBox,
	__ows__union_IdentificationType *__union_IdentificationType,
	int __sizeAvailableCRS,
	__ows__union_IdentificationType_ *__union_IdentificationType_)
{
	ows__IdentificationType *_p = ::soap_new_ows__IdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__IdentificationType::__sizeBoundingBox = __sizeBoundingBox;
		_p->ows__IdentificationType::__union_IdentificationType = __union_IdentificationType;
		_p->ows__IdentificationType::__sizeAvailableCRS = __sizeAvailableCRS;
		_p->ows__IdentificationType::__union_IdentificationType_ = __union_IdentificationType_;
	}
	return _p;
}

inline ows__IdentificationType * soap_new_set_ows__IdentificationType(
	struct soap *soap,
	int __sizeBoundingBox,
	__ows__union_IdentificationType *__union_IdentificationType,
	const std::vector<std::string> & OutputFormat,
	int __sizeAvailableCRS,
	__ows__union_IdentificationType_ *__union_IdentificationType_,
	ows__CodeType *Identifier__1,
	const std::vector<ows__MetadataType *> & Metadata__1,
	const std::vector<ows__LanguageStringType *> & Title__2,
	const std::vector<ows__LanguageStringType *> & Abstract__2,
	const std::vector<ows__KeywordsType *> & Keywords__2,
	char *__item__3)
{
	ows__IdentificationType *_p = ::soap_new_ows__IdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__IdentificationType::__sizeBoundingBox = __sizeBoundingBox;
		_p->ows__IdentificationType::__union_IdentificationType = __union_IdentificationType;
		_p->ows__IdentificationType::OutputFormat = OutputFormat;
		_p->ows__IdentificationType::__sizeAvailableCRS = __sizeAvailableCRS;
		_p->ows__IdentificationType::__union_IdentificationType_ = __union_IdentificationType_;
		_p->ows__BasicIdentificationType::Identifier = Identifier__1;
		_p->ows__BasicIdentificationType::Metadata = Metadata__1;
		_p->ows__DescriptionType::Title = Title__2;
		_p->ows__DescriptionType::Abstract = Abstract__2;
		_p->ows__DescriptionType::Keywords = Keywords__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ows__IdentificationType(struct soap *soap, ows__IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:IdentificationType", p->soap_type() == SOAP_TYPE_ows__IdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__IdentificationType(struct soap *soap, const char *URL, ows__IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:IdentificationType", p->soap_type() == SOAP_TYPE_ows__IdentificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__IdentificationType(struct soap *soap, const char *URL, ows__IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:IdentificationType", p->soap_type() == SOAP_TYPE_ows__IdentificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__IdentificationType(struct soap *soap, const char *URL, ows__IdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:IdentificationType", p->soap_type() == SOAP_TYPE_ows__IdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__IdentificationType * SOAP_FMAC4 soap_get_ows__IdentificationType(struct soap*, ows__IdentificationType *, const char*, const char*);

inline int soap_read_ows__IdentificationType(struct soap *soap, ows__IdentificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__IdentificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__IdentificationType(struct soap *soap, const char *URL, ows__IdentificationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__IdentificationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__IdentificationType(struct soap *soap, ows__IdentificationType *p)
{
	if (::soap_read_ows__IdentificationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__BasicIdentificationType_DEFINED
#define SOAP_TYPE_ows__BasicIdentificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__BasicIdentificationType(struct soap*, const char*, int, const ows__BasicIdentificationType *, const char*);
SOAP_FMAC3 ows__BasicIdentificationType * SOAP_FMAC4 soap_in_ows__BasicIdentificationType(struct soap*, const char*, ows__BasicIdentificationType *, const char*);
SOAP_FMAC1 ows__BasicIdentificationType * SOAP_FMAC2 soap_instantiate_ows__BasicIdentificationType(struct soap*, int, const char*, const char*, size_t*);

inline ows__BasicIdentificationType * soap_new_ows__BasicIdentificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__BasicIdentificationType(soap, n, NULL, NULL, NULL);
}

inline ows__BasicIdentificationType * soap_new_req_ows__BasicIdentificationType(
	struct soap *soap)
{
	ows__BasicIdentificationType *_p = ::soap_new_ows__BasicIdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__BasicIdentificationType * soap_new_set_ows__BasicIdentificationType(
	struct soap *soap,
	ows__CodeType *Identifier,
	const std::vector<ows__MetadataType *> & Metadata,
	const std::vector<ows__LanguageStringType *> & Title__1,
	const std::vector<ows__LanguageStringType *> & Abstract__1,
	const std::vector<ows__KeywordsType *> & Keywords__1,
	char *__item__2)
{
	ows__BasicIdentificationType *_p = ::soap_new_ows__BasicIdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__BasicIdentificationType::Identifier = Identifier;
		_p->ows__BasicIdentificationType::Metadata = Metadata;
		_p->ows__DescriptionType::Title = Title__1;
		_p->ows__DescriptionType::Abstract = Abstract__1;
		_p->ows__DescriptionType::Keywords = Keywords__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ows__BasicIdentificationType(struct soap *soap, ows__BasicIdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BasicIdentificationType", p->soap_type() == SOAP_TYPE_ows__BasicIdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__BasicIdentificationType(struct soap *soap, const char *URL, ows__BasicIdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BasicIdentificationType", p->soap_type() == SOAP_TYPE_ows__BasicIdentificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__BasicIdentificationType(struct soap *soap, const char *URL, ows__BasicIdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BasicIdentificationType", p->soap_type() == SOAP_TYPE_ows__BasicIdentificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__BasicIdentificationType(struct soap *soap, const char *URL, ows__BasicIdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:BasicIdentificationType", p->soap_type() == SOAP_TYPE_ows__BasicIdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__BasicIdentificationType * SOAP_FMAC4 soap_get_ows__BasicIdentificationType(struct soap*, ows__BasicIdentificationType *, const char*, const char*);

inline int soap_read_ows__BasicIdentificationType(struct soap *soap, ows__BasicIdentificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__BasicIdentificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__BasicIdentificationType(struct soap *soap, const char *URL, ows__BasicIdentificationType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__BasicIdentificationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__BasicIdentificationType(struct soap *soap, ows__BasicIdentificationType *p)
{
	if (::soap_read_ows__BasicIdentificationType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__DescriptionType_DEFINED
#define SOAP_TYPE_ows__DescriptionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__DescriptionType(struct soap*, const char*, int, const ows__DescriptionType *, const char*);
SOAP_FMAC3 ows__DescriptionType * SOAP_FMAC4 soap_in_ows__DescriptionType(struct soap*, const char*, ows__DescriptionType *, const char*);
SOAP_FMAC1 ows__DescriptionType * SOAP_FMAC2 soap_instantiate_ows__DescriptionType(struct soap*, int, const char*, const char*, size_t*);

inline ows__DescriptionType * soap_new_ows__DescriptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__DescriptionType(soap, n, NULL, NULL, NULL);
}

inline ows__DescriptionType * soap_new_req_ows__DescriptionType(
	struct soap *soap)
{
	ows__DescriptionType *_p = ::soap_new_ows__DescriptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ows__DescriptionType * soap_new_set_ows__DescriptionType(
	struct soap *soap,
	const std::vector<ows__LanguageStringType *> & Title,
	const std::vector<ows__LanguageStringType *> & Abstract,
	const std::vector<ows__KeywordsType *> & Keywords,
	char *__item__1)
{
	ows__DescriptionType *_p = ::soap_new_ows__DescriptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__DescriptionType::Title = Title;
		_p->ows__DescriptionType::Abstract = Abstract;
		_p->ows__DescriptionType::Keywords = Keywords;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__DescriptionType(struct soap *soap, ows__DescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DescriptionType", p->soap_type() == SOAP_TYPE_ows__DescriptionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__DescriptionType(struct soap *soap, const char *URL, ows__DescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DescriptionType", p->soap_type() == SOAP_TYPE_ows__DescriptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__DescriptionType(struct soap *soap, const char *URL, ows__DescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DescriptionType", p->soap_type() == SOAP_TYPE_ows__DescriptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__DescriptionType(struct soap *soap, const char *URL, ows__DescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:DescriptionType", p->soap_type() == SOAP_TYPE_ows__DescriptionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__DescriptionType * SOAP_FMAC4 soap_get_ows__DescriptionType(struct soap*, ows__DescriptionType *, const char*, const char*);

inline int soap_read_ows__DescriptionType(struct soap *soap, ows__DescriptionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__DescriptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__DescriptionType(struct soap *soap, const char *URL, ows__DescriptionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__DescriptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__DescriptionType(struct soap *soap, ows__DescriptionType *p)
{
	if (::soap_read_ows__DescriptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__GetResourceByIdType_DEFINED
#define SOAP_TYPE_ows__GetResourceByIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__GetResourceByIdType(struct soap*, const char*, int, const ows__GetResourceByIdType *, const char*);
SOAP_FMAC3 ows__GetResourceByIdType * SOAP_FMAC4 soap_in_ows__GetResourceByIdType(struct soap*, const char*, ows__GetResourceByIdType *, const char*);
SOAP_FMAC1 ows__GetResourceByIdType * SOAP_FMAC2 soap_instantiate_ows__GetResourceByIdType(struct soap*, int, const char*, const char*, size_t*);

inline ows__GetResourceByIdType * soap_new_ows__GetResourceByIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__GetResourceByIdType(soap, n, NULL, NULL, NULL);
}

inline ows__GetResourceByIdType * soap_new_req_ows__GetResourceByIdType(
	struct soap *soap,
	const std::string& service,
	const std::string& version)
{
	ows__GetResourceByIdType *_p = ::soap_new_ows__GetResourceByIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__GetResourceByIdType::service = service;
		_p->ows__GetResourceByIdType::version = version;
	}
	return _p;
}

inline ows__GetResourceByIdType * soap_new_set_ows__GetResourceByIdType(
	struct soap *soap,
	const std::vector<char *> & ResourceID,
	std::string *OutputFormat,
	const std::string& service,
	const std::string& version,
	char *__item__1)
{
	ows__GetResourceByIdType *_p = ::soap_new_ows__GetResourceByIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__GetResourceByIdType::ResourceID = ResourceID;
		_p->ows__GetResourceByIdType::OutputFormat = OutputFormat;
		_p->ows__GetResourceByIdType::service = service;
		_p->ows__GetResourceByIdType::version = version;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__GetResourceByIdType(struct soap *soap, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByIdType", p->soap_type() == SOAP_TYPE_ows__GetResourceByIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__GetResourceByIdType(struct soap *soap, const char *URL, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByIdType", p->soap_type() == SOAP_TYPE_ows__GetResourceByIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__GetResourceByIdType(struct soap *soap, const char *URL, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByIdType", p->soap_type() == SOAP_TYPE_ows__GetResourceByIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__GetResourceByIdType(struct soap *soap, const char *URL, ows__GetResourceByIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:GetResourceByIdType", p->soap_type() == SOAP_TYPE_ows__GetResourceByIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__GetResourceByIdType * SOAP_FMAC4 soap_get_ows__GetResourceByIdType(struct soap*, ows__GetResourceByIdType *, const char*, const char*);

inline int soap_read_ows__GetResourceByIdType(struct soap *soap, ows__GetResourceByIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__GetResourceByIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__GetResourceByIdType(struct soap *soap, const char *URL, ows__GetResourceByIdType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__GetResourceByIdType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__GetResourceByIdType(struct soap *soap, ows__GetResourceByIdType *p)
{
	if (::soap_read_ows__GetResourceByIdType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ows__ExceptionType_DEFINED
#define SOAP_TYPE_ows__ExceptionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ows__ExceptionType(struct soap*, const char*, int, const ows__ExceptionType *, const char*);
SOAP_FMAC3 ows__ExceptionType * SOAP_FMAC4 soap_in_ows__ExceptionType(struct soap*, const char*, ows__ExceptionType *, const char*);
SOAP_FMAC1 ows__ExceptionType * SOAP_FMAC2 soap_instantiate_ows__ExceptionType(struct soap*, int, const char*, const char*, size_t*);

inline ows__ExceptionType * soap_new_ows__ExceptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ows__ExceptionType(soap, n, NULL, NULL, NULL);
}

inline ows__ExceptionType * soap_new_req_ows__ExceptionType(
	struct soap *soap,
	const std::string& exceptionCode)
{
	ows__ExceptionType *_p = ::soap_new_ows__ExceptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ExceptionType::exceptionCode = exceptionCode;
	}
	return _p;
}

inline ows__ExceptionType * soap_new_set_ows__ExceptionType(
	struct soap *soap,
	const std::vector<std::string> & ExceptionText,
	const std::string& exceptionCode,
	std::string *locator,
	char *__item__1)
{
	ows__ExceptionType *_p = ::soap_new_ows__ExceptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__ExceptionType::ExceptionText = ExceptionText;
		_p->ows__ExceptionType::exceptionCode = exceptionCode;
		_p->ows__ExceptionType::locator = locator;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ows__ExceptionType(struct soap *soap, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionType", p->soap_type() == SOAP_TYPE_ows__ExceptionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ows__ExceptionType(struct soap *soap, const char *URL, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionType", p->soap_type() == SOAP_TYPE_ows__ExceptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ows__ExceptionType(struct soap *soap, const char *URL, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionType", p->soap_type() == SOAP_TYPE_ows__ExceptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ows__ExceptionType(struct soap *soap, const char *URL, ows__ExceptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ows:ExceptionType", p->soap_type() == SOAP_TYPE_ows__ExceptionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ows__ExceptionType * SOAP_FMAC4 soap_get_ows__ExceptionType(struct soap*, ows__ExceptionType *, const char*, const char*);

inline int soap_read_ows__ExceptionType(struct soap *soap, ows__ExceptionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ows__ExceptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ows__ExceptionType(struct soap *soap, const char *URL, ows__ExceptionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ows__ExceptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ows__ExceptionType(struct soap *soap, ows__ExceptionType *p)
{
	if (::soap_read_ows__ExceptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_util__DescribeFeatureTypeResponseType_DEFINED
#define SOAP_TYPE_util__DescribeFeatureTypeResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_util__DescribeFeatureTypeResponseType(struct soap*, const char*, int, const util__DescribeFeatureTypeResponseType *, const char*);
SOAP_FMAC3 util__DescribeFeatureTypeResponseType * SOAP_FMAC4 soap_in_util__DescribeFeatureTypeResponseType(struct soap*, const char*, util__DescribeFeatureTypeResponseType *, const char*);
SOAP_FMAC1 util__DescribeFeatureTypeResponseType * SOAP_FMAC2 soap_instantiate_util__DescribeFeatureTypeResponseType(struct soap*, int, const char*, const char*, size_t*);

inline util__DescribeFeatureTypeResponseType * soap_new_util__DescribeFeatureTypeResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_util__DescribeFeatureTypeResponseType(soap, n, NULL, NULL, NULL);
}

inline util__DescribeFeatureTypeResponseType * soap_new_req_util__DescribeFeatureTypeResponseType(
	struct soap *soap,
	char *xsd__schema)
{
	util__DescribeFeatureTypeResponseType *_p = ::soap_new_util__DescribeFeatureTypeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->util__DescribeFeatureTypeResponseType::xsd__schema = xsd__schema;
	}
	return _p;
}

inline util__DescribeFeatureTypeResponseType * soap_new_set_util__DescribeFeatureTypeResponseType(
	struct soap *soap,
	char *xsd__schema,
	char *__item__1)
{
	util__DescribeFeatureTypeResponseType *_p = ::soap_new_util__DescribeFeatureTypeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->util__DescribeFeatureTypeResponseType::xsd__schema = xsd__schema;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_util__DescribeFeatureTypeResponseType(struct soap *soap, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponseType", p->soap_type() == SOAP_TYPE_util__DescribeFeatureTypeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_util__DescribeFeatureTypeResponseType(struct soap *soap, const char *URL, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponseType", p->soap_type() == SOAP_TYPE_util__DescribeFeatureTypeResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_util__DescribeFeatureTypeResponseType(struct soap *soap, const char *URL, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponseType", p->soap_type() == SOAP_TYPE_util__DescribeFeatureTypeResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_util__DescribeFeatureTypeResponseType(struct soap *soap, const char *URL, util__DescribeFeatureTypeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "util:DescribeFeatureTypeResponseType", p->soap_type() == SOAP_TYPE_util__DescribeFeatureTypeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 util__DescribeFeatureTypeResponseType * SOAP_FMAC4 soap_get_util__DescribeFeatureTypeResponseType(struct soap*, util__DescribeFeatureTypeResponseType *, const char*, const char*);

inline int soap_read_util__DescribeFeatureTypeResponseType(struct soap *soap, util__DescribeFeatureTypeResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_util__DescribeFeatureTypeResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_util__DescribeFeatureTypeResponseType(struct soap *soap, const char *URL, util__DescribeFeatureTypeResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_util__DescribeFeatureTypeResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_util__DescribeFeatureTypeResponseType(struct soap *soap, util__DescribeFeatureTypeResponseType *p)
{
	if (::soap_read_util__DescribeFeatureTypeResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__DropStoredQuery_DEFINED
#define SOAP_TYPE__wfs__DropStoredQuery_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__DropStoredQuery(struct soap*, const char*, int, const _wfs__DropStoredQuery *, const char*);
SOAP_FMAC3 _wfs__DropStoredQuery * SOAP_FMAC4 soap_in__wfs__DropStoredQuery(struct soap*, const char*, _wfs__DropStoredQuery *, const char*);
SOAP_FMAC1 _wfs__DropStoredQuery * SOAP_FMAC2 soap_instantiate__wfs__DropStoredQuery(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__DropStoredQuery * soap_new__wfs__DropStoredQuery(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__DropStoredQuery(soap, n, NULL, NULL, NULL);
}

inline _wfs__DropStoredQuery * soap_new_req__wfs__DropStoredQuery(
	struct soap *soap,
	char *id,
	const std::string& service__1,
	const std::string& version__1)
{
	_wfs__DropStoredQuery *_p = ::soap_new__wfs__DropStoredQuery(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__DropStoredQuery::id = id;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline _wfs__DropStoredQuery * soap_new_set__wfs__DropStoredQuery(
	struct soap *soap,
	char *id,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	_wfs__DropStoredQuery *_p = ::soap_new__wfs__DropStoredQuery(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__DropStoredQuery::id = id;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write__wfs__DropStoredQuery(struct soap *soap, _wfs__DropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQuery", p->soap_type() == SOAP_TYPE__wfs__DropStoredQuery ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__DropStoredQuery(struct soap *soap, const char *URL, _wfs__DropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQuery", p->soap_type() == SOAP_TYPE__wfs__DropStoredQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__DropStoredQuery(struct soap *soap, const char *URL, _wfs__DropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQuery", p->soap_type() == SOAP_TYPE__wfs__DropStoredQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__DropStoredQuery(struct soap *soap, const char *URL, _wfs__DropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DropStoredQuery", p->soap_type() == SOAP_TYPE__wfs__DropStoredQuery ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__DropStoredQuery * SOAP_FMAC4 soap_get__wfs__DropStoredQuery(struct soap*, _wfs__DropStoredQuery *, const char*, const char*);

inline int soap_read__wfs__DropStoredQuery(struct soap *soap, _wfs__DropStoredQuery *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__DropStoredQuery(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__DropStoredQuery(struct soap *soap, const char *URL, _wfs__DropStoredQuery *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__DropStoredQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__DropStoredQuery(struct soap *soap, _wfs__DropStoredQuery *p)
{
	if (::soap_read__wfs__DropStoredQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__additionalObjects_DEFINED
#define SOAP_TYPE__wfs__additionalObjects_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__additionalObjects(struct soap*, const char*, int, const _wfs__additionalObjects *, const char*);
SOAP_FMAC3 _wfs__additionalObjects * SOAP_FMAC4 soap_in__wfs__additionalObjects(struct soap*, const char*, _wfs__additionalObjects *, const char*);
SOAP_FMAC1 _wfs__additionalObjects * SOAP_FMAC2 soap_instantiate__wfs__additionalObjects(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__additionalObjects * soap_new__wfs__additionalObjects(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__additionalObjects(soap, n, NULL, NULL, NULL);
}

inline _wfs__additionalObjects * soap_new_req__wfs__additionalObjects(
	struct soap *soap,
	const union _wfs__union_additionalObjects& union_additionalObjects)
{
	_wfs__additionalObjects *_p = ::soap_new__wfs__additionalObjects(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__additionalObjects::union_additionalObjects = union_additionalObjects;
	}
	return _p;
}

inline _wfs__additionalObjects * soap_new_set__wfs__additionalObjects(
	struct soap *soap,
	int __union_additionalObjects,
	const union _wfs__union_additionalObjects& union_additionalObjects)
{
	_wfs__additionalObjects *_p = ::soap_new__wfs__additionalObjects(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__additionalObjects::__union_additionalObjects = __union_additionalObjects;
		_p->_wfs__additionalObjects::union_additionalObjects = union_additionalObjects;
	}
	return _p;
}

inline int soap_write__wfs__additionalObjects(struct soap *soap, _wfs__additionalObjects const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalObjects", p->soap_type() == SOAP_TYPE__wfs__additionalObjects ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__additionalObjects(struct soap *soap, const char *URL, _wfs__additionalObjects const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalObjects", p->soap_type() == SOAP_TYPE__wfs__additionalObjects ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__additionalObjects(struct soap *soap, const char *URL, _wfs__additionalObjects const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalObjects", p->soap_type() == SOAP_TYPE__wfs__additionalObjects ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__additionalObjects(struct soap *soap, const char *URL, _wfs__additionalObjects const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalObjects", p->soap_type() == SOAP_TYPE__wfs__additionalObjects ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__additionalObjects * SOAP_FMAC4 soap_get__wfs__additionalObjects(struct soap*, _wfs__additionalObjects *, const char*, const char*);

inline int soap_read__wfs__additionalObjects(struct soap *soap, _wfs__additionalObjects *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__additionalObjects(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__additionalObjects(struct soap *soap, const char *URL, _wfs__additionalObjects *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__additionalObjects(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__additionalObjects(struct soap *soap, _wfs__additionalObjects *p)
{
	if (::soap_read__wfs__additionalObjects(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__PropertyName_DEFINED
#define SOAP_TYPE__wfs__PropertyName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__PropertyName(struct soap*, const char*, int, const _wfs__PropertyName *, const char*);
SOAP_FMAC3 _wfs__PropertyName * SOAP_FMAC4 soap_in__wfs__PropertyName(struct soap*, const char*, _wfs__PropertyName *, const char*);
SOAP_FMAC1 _wfs__PropertyName * SOAP_FMAC2 soap_instantiate__wfs__PropertyName(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__PropertyName * soap_new__wfs__PropertyName(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__PropertyName(soap, n, NULL, NULL, NULL);
}

inline _wfs__PropertyName * soap_new_req__wfs__PropertyName(
	struct soap *soap)
{
	_wfs__PropertyName *_p = ::soap_new__wfs__PropertyName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _wfs__PropertyName * soap_new_set__wfs__PropertyName(
	struct soap *soap,
	char *__item,
	std::string *resolvePath,
	enum wfs__ResolveValueType resolve,
	const std::string& resolveDepth,
	ULONG64 resolveTimeout)
{
	_wfs__PropertyName *_p = ::soap_new__wfs__PropertyName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__PropertyName::__item = __item;
		_p->_wfs__PropertyName::resolvePath = resolvePath;
		_p->_wfs__PropertyName::resolve = resolve;
		_p->_wfs__PropertyName::resolveDepth = resolveDepth;
		_p->_wfs__PropertyName::resolveTimeout = resolveTimeout;
	}
	return _p;
}

inline int soap_write__wfs__PropertyName(struct soap *soap, _wfs__PropertyName const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyName", p->soap_type() == SOAP_TYPE__wfs__PropertyName ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__PropertyName(struct soap *soap, const char *URL, _wfs__PropertyName const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyName", p->soap_type() == SOAP_TYPE__wfs__PropertyName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__PropertyName(struct soap *soap, const char *URL, _wfs__PropertyName const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyName", p->soap_type() == SOAP_TYPE__wfs__PropertyName ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__PropertyName(struct soap *soap, const char *URL, _wfs__PropertyName const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyName", p->soap_type() == SOAP_TYPE__wfs__PropertyName ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__PropertyName * SOAP_FMAC4 soap_get__wfs__PropertyName(struct soap*, _wfs__PropertyName *, const char*, const char*);

inline int soap_read__wfs__PropertyName(struct soap *soap, _wfs__PropertyName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__PropertyName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__PropertyName(struct soap *soap, const char *URL, _wfs__PropertyName *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__PropertyName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__PropertyName(struct soap *soap, _wfs__PropertyName *p)
{
	if (::soap_read__wfs__PropertyName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__truncatedResponse_DEFINED
#define SOAP_TYPE__wfs__truncatedResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__truncatedResponse(struct soap*, const char*, int, const _wfs__truncatedResponse *, const char*);
SOAP_FMAC3 _wfs__truncatedResponse * SOAP_FMAC4 soap_in__wfs__truncatedResponse(struct soap*, const char*, _wfs__truncatedResponse *, const char*);
SOAP_FMAC1 _wfs__truncatedResponse * SOAP_FMAC2 soap_instantiate__wfs__truncatedResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__truncatedResponse * soap_new__wfs__truncatedResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__truncatedResponse(soap, n, NULL, NULL, NULL);
}

inline _wfs__truncatedResponse * soap_new_req__wfs__truncatedResponse(
	struct soap *soap,
	_ows__ExceptionReport *ows__ExceptionReport)
{
	_wfs__truncatedResponse *_p = ::soap_new__wfs__truncatedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__truncatedResponse::ows__ExceptionReport = ows__ExceptionReport;
	}
	return _p;
}

inline _wfs__truncatedResponse * soap_new_set__wfs__truncatedResponse(
	struct soap *soap,
	_ows__ExceptionReport *ows__ExceptionReport)
{
	_wfs__truncatedResponse *_p = ::soap_new__wfs__truncatedResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__truncatedResponse::ows__ExceptionReport = ows__ExceptionReport;
	}
	return _p;
}

inline int soap_write__wfs__truncatedResponse(struct soap *soap, _wfs__truncatedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:truncatedResponse", p->soap_type() == SOAP_TYPE__wfs__truncatedResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__truncatedResponse(struct soap *soap, const char *URL, _wfs__truncatedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:truncatedResponse", p->soap_type() == SOAP_TYPE__wfs__truncatedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__truncatedResponse(struct soap *soap, const char *URL, _wfs__truncatedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:truncatedResponse", p->soap_type() == SOAP_TYPE__wfs__truncatedResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__truncatedResponse(struct soap *soap, const char *URL, _wfs__truncatedResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:truncatedResponse", p->soap_type() == SOAP_TYPE__wfs__truncatedResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__truncatedResponse * SOAP_FMAC4 soap_get__wfs__truncatedResponse(struct soap*, _wfs__truncatedResponse *, const char*, const char*);

inline int soap_read__wfs__truncatedResponse(struct soap *soap, _wfs__truncatedResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__truncatedResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__truncatedResponse(struct soap *soap, const char *URL, _wfs__truncatedResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__truncatedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__truncatedResponse(struct soap *soap, _wfs__truncatedResponse *p)
{
	if (::soap_read__wfs__truncatedResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__additionalValues_DEFINED
#define SOAP_TYPE__wfs__additionalValues_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__additionalValues(struct soap*, const char*, int, const _wfs__additionalValues *, const char*);
SOAP_FMAC3 _wfs__additionalValues * SOAP_FMAC4 soap_in__wfs__additionalValues(struct soap*, const char*, _wfs__additionalValues *, const char*);
SOAP_FMAC1 _wfs__additionalValues * SOAP_FMAC2 soap_instantiate__wfs__additionalValues(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__additionalValues * soap_new__wfs__additionalValues(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__additionalValues(soap, n, NULL, NULL, NULL);
}

inline _wfs__additionalValues * soap_new_req__wfs__additionalValues(
	struct soap *soap,
	const union _wfs__union_additionalValues& union_additionalValues)
{
	_wfs__additionalValues *_p = ::soap_new__wfs__additionalValues(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__additionalValues::union_additionalValues = union_additionalValues;
	}
	return _p;
}

inline _wfs__additionalValues * soap_new_set__wfs__additionalValues(
	struct soap *soap,
	int __union_additionalValues,
	const union _wfs__union_additionalValues& union_additionalValues)
{
	_wfs__additionalValues *_p = ::soap_new__wfs__additionalValues(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__additionalValues::__union_additionalValues = __union_additionalValues;
		_p->_wfs__additionalValues::union_additionalValues = union_additionalValues;
	}
	return _p;
}

inline int soap_write__wfs__additionalValues(struct soap *soap, _wfs__additionalValues const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalValues", p->soap_type() == SOAP_TYPE__wfs__additionalValues ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__additionalValues(struct soap *soap, const char *URL, _wfs__additionalValues const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalValues", p->soap_type() == SOAP_TYPE__wfs__additionalValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__additionalValues(struct soap *soap, const char *URL, _wfs__additionalValues const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalValues", p->soap_type() == SOAP_TYPE__wfs__additionalValues ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__additionalValues(struct soap *soap, const char *URL, _wfs__additionalValues const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:additionalValues", p->soap_type() == SOAP_TYPE__wfs__additionalValues ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__additionalValues * SOAP_FMAC4 soap_get__wfs__additionalValues(struct soap*, _wfs__additionalValues *, const char*, const char*);

inline int soap_read__wfs__additionalValues(struct soap *soap, _wfs__additionalValues *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__additionalValues(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__additionalValues(struct soap *soap, const char *URL, _wfs__additionalValues *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__additionalValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__additionalValues(struct soap *soap, _wfs__additionalValues *p)
{
	if (::soap_read__wfs__additionalValues(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__Abstract_DEFINED
#define SOAP_TYPE__wfs__Abstract_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__Abstract(struct soap*, const char*, int, const _wfs__Abstract *, const char*);
SOAP_FMAC3 _wfs__Abstract * SOAP_FMAC4 soap_in__wfs__Abstract(struct soap*, const char*, _wfs__Abstract *, const char*);
SOAP_FMAC1 _wfs__Abstract * SOAP_FMAC2 soap_instantiate__wfs__Abstract(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__Abstract * soap_new__wfs__Abstract(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__Abstract(soap, n, NULL, NULL, NULL);
}

inline _wfs__Abstract * soap_new_req__wfs__Abstract(
	struct soap *soap,
	const std::string& __item)
{
	_wfs__Abstract *_p = ::soap_new__wfs__Abstract(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__Abstract::__item = __item;
	}
	return _p;
}

inline _wfs__Abstract * soap_new_set__wfs__Abstract(
	struct soap *soap,
	const std::string& __item,
	char *xml__lang)
{
	_wfs__Abstract *_p = ::soap_new__wfs__Abstract(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__Abstract::__item = __item;
		_p->_wfs__Abstract::xml__lang = xml__lang;
	}
	return _p;
}

inline int soap_write__wfs__Abstract(struct soap *soap, _wfs__Abstract const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Abstract", p->soap_type() == SOAP_TYPE__wfs__Abstract ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Abstract(struct soap *soap, const char *URL, _wfs__Abstract const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Abstract", p->soap_type() == SOAP_TYPE__wfs__Abstract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Abstract(struct soap *soap, const char *URL, _wfs__Abstract const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Abstract", p->soap_type() == SOAP_TYPE__wfs__Abstract ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Abstract(struct soap *soap, const char *URL, _wfs__Abstract const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Abstract", p->soap_type() == SOAP_TYPE__wfs__Abstract ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__Abstract * SOAP_FMAC4 soap_get__wfs__Abstract(struct soap*, _wfs__Abstract *, const char*, const char*);

inline int soap_read__wfs__Abstract(struct soap *soap, _wfs__Abstract *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__Abstract(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__Abstract(struct soap *soap, const char *URL, _wfs__Abstract *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__Abstract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__Abstract(struct soap *soap, _wfs__Abstract *p)
{
	if (::soap_read__wfs__Abstract(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wfs__Title_DEFINED
#define SOAP_TYPE__wfs__Title_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__Title(struct soap*, const char*, int, const _wfs__Title *, const char*);
SOAP_FMAC3 _wfs__Title * SOAP_FMAC4 soap_in__wfs__Title(struct soap*, const char*, _wfs__Title *, const char*);
SOAP_FMAC1 _wfs__Title * SOAP_FMAC2 soap_instantiate__wfs__Title(struct soap*, int, const char*, const char*, size_t*);

inline _wfs__Title * soap_new__wfs__Title(struct soap *soap, int n = -1)
{
	return soap_instantiate__wfs__Title(soap, n, NULL, NULL, NULL);
}

inline _wfs__Title * soap_new_req__wfs__Title(
	struct soap *soap,
	const std::string& __item)
{
	_wfs__Title *_p = ::soap_new__wfs__Title(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__Title::__item = __item;
	}
	return _p;
}

inline _wfs__Title * soap_new_set__wfs__Title(
	struct soap *soap,
	const std::string& __item,
	char *xml__lang)
{
	_wfs__Title *_p = ::soap_new__wfs__Title(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_wfs__Title::__item = __item;
		_p->_wfs__Title::xml__lang = xml__lang;
	}
	return _p;
}

inline int soap_write__wfs__Title(struct soap *soap, _wfs__Title const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Title", p->soap_type() == SOAP_TYPE__wfs__Title ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wfs__Title(struct soap *soap, const char *URL, _wfs__Title const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Title", p->soap_type() == SOAP_TYPE__wfs__Title ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wfs__Title(struct soap *soap, const char *URL, _wfs__Title const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Title", p->soap_type() == SOAP_TYPE__wfs__Title ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wfs__Title(struct soap *soap, const char *URL, _wfs__Title const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:Title", p->soap_type() == SOAP_TYPE__wfs__Title ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _wfs__Title * SOAP_FMAC4 soap_get__wfs__Title(struct soap*, _wfs__Title *, const char*, const char*);

inline int soap_read__wfs__Title(struct soap *soap, _wfs__Title *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__wfs__Title(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wfs__Title(struct soap *soap, const char *URL, _wfs__Title *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wfs__Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wfs__Title(struct soap *soap, _wfs__Title *p)
{
	if (::soap_read__wfs__Title(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__EmptyType_DEFINED
#define SOAP_TYPE_wfs__EmptyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__EmptyType(struct soap*, const char*, int, const wfs__EmptyType *, const char*);
SOAP_FMAC3 wfs__EmptyType * SOAP_FMAC4 soap_in_wfs__EmptyType(struct soap*, const char*, wfs__EmptyType *, const char*);
SOAP_FMAC1 wfs__EmptyType * SOAP_FMAC2 soap_instantiate_wfs__EmptyType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__EmptyType * soap_new_wfs__EmptyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__EmptyType(soap, n, NULL, NULL, NULL);
}

inline wfs__EmptyType * soap_new_req_wfs__EmptyType(
	struct soap *soap)
{
	wfs__EmptyType *_p = ::soap_new_wfs__EmptyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__EmptyType * soap_new_set_wfs__EmptyType(
	struct soap *soap,
	char *__item__1)
{
	wfs__EmptyType *_p = ::soap_new_wfs__EmptyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__EmptyType(struct soap *soap, wfs__EmptyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EmptyType", p->soap_type() == SOAP_TYPE_wfs__EmptyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__EmptyType(struct soap *soap, const char *URL, wfs__EmptyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EmptyType", p->soap_type() == SOAP_TYPE_wfs__EmptyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__EmptyType(struct soap *soap, const char *URL, wfs__EmptyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EmptyType", p->soap_type() == SOAP_TYPE_wfs__EmptyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__EmptyType(struct soap *soap, const char *URL, wfs__EmptyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EmptyType", p->soap_type() == SOAP_TYPE_wfs__EmptyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__EmptyType * SOAP_FMAC4 soap_get_wfs__EmptyType(struct soap*, wfs__EmptyType *, const char*, const char*);

inline int soap_read_wfs__EmptyType(struct soap *soap, wfs__EmptyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__EmptyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__EmptyType(struct soap *soap, const char *URL, wfs__EmptyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__EmptyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__EmptyType(struct soap *soap, wfs__EmptyType *p)
{
	if (::soap_read_wfs__EmptyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__CreatedOrModifiedFeatureType_DEFINED
#define SOAP_TYPE_wfs__CreatedOrModifiedFeatureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__CreatedOrModifiedFeatureType(struct soap*, const char*, int, const wfs__CreatedOrModifiedFeatureType *, const char*);
SOAP_FMAC3 wfs__CreatedOrModifiedFeatureType * SOAP_FMAC4 soap_in_wfs__CreatedOrModifiedFeatureType(struct soap*, const char*, wfs__CreatedOrModifiedFeatureType *, const char*);
SOAP_FMAC1 wfs__CreatedOrModifiedFeatureType * SOAP_FMAC2 soap_instantiate_wfs__CreatedOrModifiedFeatureType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__CreatedOrModifiedFeatureType * soap_new_wfs__CreatedOrModifiedFeatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__CreatedOrModifiedFeatureType(soap, n, NULL, NULL, NULL);
}

inline wfs__CreatedOrModifiedFeatureType * soap_new_req_wfs__CreatedOrModifiedFeatureType(
	struct soap *soap)
{
	wfs__CreatedOrModifiedFeatureType *_p = ::soap_new_wfs__CreatedOrModifiedFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__CreatedOrModifiedFeatureType * soap_new_set_wfs__CreatedOrModifiedFeatureType(
	struct soap *soap,
	const std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence> & __CreatedOrModifiedFeatureType_sequence,
	std::string *handle,
	char *__item__1)
{
	wfs__CreatedOrModifiedFeatureType *_p = ::soap_new_wfs__CreatedOrModifiedFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__CreatedOrModifiedFeatureType::__CreatedOrModifiedFeatureType_sequence = __CreatedOrModifiedFeatureType_sequence;
		_p->wfs__CreatedOrModifiedFeatureType::handle = handle;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__CreatedOrModifiedFeatureType(struct soap *soap, wfs__CreatedOrModifiedFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreatedOrModifiedFeatureType", p->soap_type() == SOAP_TYPE_wfs__CreatedOrModifiedFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__CreatedOrModifiedFeatureType(struct soap *soap, const char *URL, wfs__CreatedOrModifiedFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreatedOrModifiedFeatureType", p->soap_type() == SOAP_TYPE_wfs__CreatedOrModifiedFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__CreatedOrModifiedFeatureType(struct soap *soap, const char *URL, wfs__CreatedOrModifiedFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreatedOrModifiedFeatureType", p->soap_type() == SOAP_TYPE_wfs__CreatedOrModifiedFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__CreatedOrModifiedFeatureType(struct soap *soap, const char *URL, wfs__CreatedOrModifiedFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreatedOrModifiedFeatureType", p->soap_type() == SOAP_TYPE_wfs__CreatedOrModifiedFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__CreatedOrModifiedFeatureType * SOAP_FMAC4 soap_get_wfs__CreatedOrModifiedFeatureType(struct soap*, wfs__CreatedOrModifiedFeatureType *, const char*, const char*);

inline int soap_read_wfs__CreatedOrModifiedFeatureType(struct soap *soap, wfs__CreatedOrModifiedFeatureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__CreatedOrModifiedFeatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__CreatedOrModifiedFeatureType(struct soap *soap, const char *URL, wfs__CreatedOrModifiedFeatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__CreatedOrModifiedFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__CreatedOrModifiedFeatureType(struct soap *soap, wfs__CreatedOrModifiedFeatureType *p)
{
	if (::soap_read_wfs__CreatedOrModifiedFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ActionResultsType_DEFINED
#define SOAP_TYPE_wfs__ActionResultsType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ActionResultsType(struct soap*, const char*, int, const wfs__ActionResultsType *, const char*);
SOAP_FMAC3 wfs__ActionResultsType * SOAP_FMAC4 soap_in_wfs__ActionResultsType(struct soap*, const char*, wfs__ActionResultsType *, const char*);
SOAP_FMAC1 wfs__ActionResultsType * SOAP_FMAC2 soap_instantiate_wfs__ActionResultsType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ActionResultsType * soap_new_wfs__ActionResultsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ActionResultsType(soap, n, NULL, NULL, NULL);
}

inline wfs__ActionResultsType * soap_new_req_wfs__ActionResultsType(
	struct soap *soap,
	const std::vector<wfs__CreatedOrModifiedFeatureType *> & Feature)
{
	wfs__ActionResultsType *_p = ::soap_new_wfs__ActionResultsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ActionResultsType::Feature = Feature;
	}
	return _p;
}

inline wfs__ActionResultsType * soap_new_set_wfs__ActionResultsType(
	struct soap *soap,
	const std::vector<wfs__CreatedOrModifiedFeatureType *> & Feature,
	char *__item__1)
{
	wfs__ActionResultsType *_p = ::soap_new_wfs__ActionResultsType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ActionResultsType::Feature = Feature;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ActionResultsType(struct soap *soap, wfs__ActionResultsType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ActionResultsType", p->soap_type() == SOAP_TYPE_wfs__ActionResultsType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ActionResultsType(struct soap *soap, const char *URL, wfs__ActionResultsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ActionResultsType", p->soap_type() == SOAP_TYPE_wfs__ActionResultsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ActionResultsType(struct soap *soap, const char *URL, wfs__ActionResultsType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ActionResultsType", p->soap_type() == SOAP_TYPE_wfs__ActionResultsType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ActionResultsType(struct soap *soap, const char *URL, wfs__ActionResultsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ActionResultsType", p->soap_type() == SOAP_TYPE_wfs__ActionResultsType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ActionResultsType * SOAP_FMAC4 soap_get_wfs__ActionResultsType(struct soap*, wfs__ActionResultsType *, const char*, const char*);

inline int soap_read_wfs__ActionResultsType(struct soap *soap, wfs__ActionResultsType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ActionResultsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ActionResultsType(struct soap *soap, const char *URL, wfs__ActionResultsType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ActionResultsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ActionResultsType(struct soap *soap, wfs__ActionResultsType *p)
{
	if (::soap_read_wfs__ActionResultsType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__TransactionSummaryType_DEFINED
#define SOAP_TYPE_wfs__TransactionSummaryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__TransactionSummaryType(struct soap*, const char*, int, const wfs__TransactionSummaryType *, const char*);
SOAP_FMAC3 wfs__TransactionSummaryType * SOAP_FMAC4 soap_in_wfs__TransactionSummaryType(struct soap*, const char*, wfs__TransactionSummaryType *, const char*);
SOAP_FMAC1 wfs__TransactionSummaryType * SOAP_FMAC2 soap_instantiate_wfs__TransactionSummaryType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__TransactionSummaryType * soap_new_wfs__TransactionSummaryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__TransactionSummaryType(soap, n, NULL, NULL, NULL);
}

inline wfs__TransactionSummaryType * soap_new_req_wfs__TransactionSummaryType(
	struct soap *soap)
{
	wfs__TransactionSummaryType *_p = ::soap_new_wfs__TransactionSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__TransactionSummaryType * soap_new_set_wfs__TransactionSummaryType(
	struct soap *soap,
	ULONG64 *totalInserted,
	ULONG64 *totalUpdated,
	ULONG64 *totalReplaced,
	ULONG64 *totalDeleted,
	char *__item__1)
{
	wfs__TransactionSummaryType *_p = ::soap_new_wfs__TransactionSummaryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__TransactionSummaryType::totalInserted = totalInserted;
		_p->wfs__TransactionSummaryType::totalUpdated = totalUpdated;
		_p->wfs__TransactionSummaryType::totalReplaced = totalReplaced;
		_p->wfs__TransactionSummaryType::totalDeleted = totalDeleted;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__TransactionSummaryType(struct soap *soap, wfs__TransactionSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionSummaryType", p->soap_type() == SOAP_TYPE_wfs__TransactionSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__TransactionSummaryType(struct soap *soap, const char *URL, wfs__TransactionSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionSummaryType", p->soap_type() == SOAP_TYPE_wfs__TransactionSummaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__TransactionSummaryType(struct soap *soap, const char *URL, wfs__TransactionSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionSummaryType", p->soap_type() == SOAP_TYPE_wfs__TransactionSummaryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__TransactionSummaryType(struct soap *soap, const char *URL, wfs__TransactionSummaryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionSummaryType", p->soap_type() == SOAP_TYPE_wfs__TransactionSummaryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__TransactionSummaryType * SOAP_FMAC4 soap_get_wfs__TransactionSummaryType(struct soap*, wfs__TransactionSummaryType *, const char*, const char*);

inline int soap_read_wfs__TransactionSummaryType(struct soap *soap, wfs__TransactionSummaryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__TransactionSummaryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__TransactionSummaryType(struct soap *soap, const char *URL, wfs__TransactionSummaryType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__TransactionSummaryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__TransactionSummaryType(struct soap *soap, wfs__TransactionSummaryType *p)
{
	if (::soap_read_wfs__TransactionSummaryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__TransactionResponseType_DEFINED
#define SOAP_TYPE_wfs__TransactionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__TransactionResponseType(struct soap*, const char*, int, const wfs__TransactionResponseType *, const char*);
SOAP_FMAC3 wfs__TransactionResponseType * SOAP_FMAC4 soap_in_wfs__TransactionResponseType(struct soap*, const char*, wfs__TransactionResponseType *, const char*);
SOAP_FMAC1 wfs__TransactionResponseType * SOAP_FMAC2 soap_instantiate_wfs__TransactionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__TransactionResponseType * soap_new_wfs__TransactionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__TransactionResponseType(soap, n, NULL, NULL, NULL);
}

inline wfs__TransactionResponseType * soap_new_req_wfs__TransactionResponseType(
	struct soap *soap,
	wfs__TransactionSummaryType *TransactionSummary,
	const std::string& version)
{
	wfs__TransactionResponseType *_p = ::soap_new_wfs__TransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__TransactionResponseType::TransactionSummary = TransactionSummary;
		_p->wfs__TransactionResponseType::version = version;
	}
	return _p;
}

inline wfs__TransactionResponseType * soap_new_set_wfs__TransactionResponseType(
	struct soap *soap,
	wfs__TransactionSummaryType *TransactionSummary,
	wfs__ActionResultsType *InsertResults,
	wfs__ActionResultsType *UpdateResults,
	wfs__ActionResultsType *ReplaceResults,
	const std::string& version,
	char *__item__1)
{
	wfs__TransactionResponseType *_p = ::soap_new_wfs__TransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__TransactionResponseType::TransactionSummary = TransactionSummary;
		_p->wfs__TransactionResponseType::InsertResults = InsertResults;
		_p->wfs__TransactionResponseType::UpdateResults = UpdateResults;
		_p->wfs__TransactionResponseType::ReplaceResults = ReplaceResults;
		_p->wfs__TransactionResponseType::version = version;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__TransactionResponseType(struct soap *soap, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponseType", p->soap_type() == SOAP_TYPE_wfs__TransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__TransactionResponseType(struct soap *soap, const char *URL, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponseType", p->soap_type() == SOAP_TYPE_wfs__TransactionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__TransactionResponseType(struct soap *soap, const char *URL, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponseType", p->soap_type() == SOAP_TYPE_wfs__TransactionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__TransactionResponseType(struct soap *soap, const char *URL, wfs__TransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionResponseType", p->soap_type() == SOAP_TYPE_wfs__TransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__TransactionResponseType * SOAP_FMAC4 soap_get_wfs__TransactionResponseType(struct soap*, wfs__TransactionResponseType *, const char*, const char*);

inline int soap_read_wfs__TransactionResponseType(struct soap *soap, wfs__TransactionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__TransactionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__TransactionResponseType(struct soap *soap, const char *URL, wfs__TransactionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__TransactionResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__TransactionResponseType(struct soap *soap, wfs__TransactionResponseType *p)
{
	if (::soap_read_wfs__TransactionResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__NativeType_DEFINED
#define SOAP_TYPE_wfs__NativeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__NativeType(struct soap*, const char*, int, const wfs__NativeType *, const char*);
SOAP_FMAC3 wfs__NativeType * SOAP_FMAC4 soap_in_wfs__NativeType(struct soap*, const char*, wfs__NativeType *, const char*);
SOAP_FMAC1 wfs__NativeType * SOAP_FMAC2 soap_instantiate_wfs__NativeType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__NativeType * soap_new_wfs__NativeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__NativeType(soap, n, NULL, NULL, NULL);
}

inline wfs__NativeType * soap_new_req_wfs__NativeType(
	struct soap *soap,
	const std::string& vendorId,
	bool safeToIgnore)
{
	wfs__NativeType *_p = ::soap_new_wfs__NativeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__NativeType::vendorId = vendorId;
		_p->wfs__NativeType::safeToIgnore = safeToIgnore;
	}
	return _p;
}

inline wfs__NativeType * soap_new_set_wfs__NativeType(
	struct soap *soap,
	char *__any,
	const std::string& vendorId,
	bool safeToIgnore,
	char *__mixed,
	std::string *handle__1,
	char *__item__2)
{
	wfs__NativeType *_p = ::soap_new_wfs__NativeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__NativeType::__any = __any;
		_p->wfs__NativeType::vendorId = vendorId;
		_p->wfs__NativeType::safeToIgnore = safeToIgnore;
		_p->wfs__NativeType::__mixed = __mixed;
		_p->wfs__AbstractTransactionActionType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__NativeType(struct soap *soap, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:NativeType", p->soap_type() == SOAP_TYPE_wfs__NativeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__NativeType(struct soap *soap, const char *URL, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:NativeType", p->soap_type() == SOAP_TYPE_wfs__NativeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__NativeType(struct soap *soap, const char *URL, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:NativeType", p->soap_type() == SOAP_TYPE_wfs__NativeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__NativeType(struct soap *soap, const char *URL, wfs__NativeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:NativeType", p->soap_type() == SOAP_TYPE_wfs__NativeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__NativeType * SOAP_FMAC4 soap_get_wfs__NativeType(struct soap*, wfs__NativeType *, const char*, const char*);

inline int soap_read_wfs__NativeType(struct soap *soap, wfs__NativeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__NativeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__NativeType(struct soap *soap, const char *URL, wfs__NativeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__NativeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__NativeType(struct soap *soap, wfs__NativeType *p)
{
	if (::soap_read_wfs__NativeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__DeleteType_DEFINED
#define SOAP_TYPE_wfs__DeleteType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__DeleteType(struct soap*, const char*, int, const wfs__DeleteType *, const char*);
SOAP_FMAC3 wfs__DeleteType * SOAP_FMAC4 soap_in_wfs__DeleteType(struct soap*, const char*, wfs__DeleteType *, const char*);
SOAP_FMAC1 wfs__DeleteType * SOAP_FMAC2 soap_instantiate_wfs__DeleteType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__DeleteType * soap_new_wfs__DeleteType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__DeleteType(soap, n, NULL, NULL, NULL);
}

inline wfs__DeleteType * soap_new_req_wfs__DeleteType(
	struct soap *soap,
	fes__FilterType *fes__Filter,
	char *typeName)
{
	wfs__DeleteType *_p = ::soap_new_wfs__DeleteType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__DeleteType::fes__Filter = fes__Filter;
		_p->wfs__DeleteType::typeName = typeName;
	}
	return _p;
}

inline wfs__DeleteType * soap_new_set_wfs__DeleteType(
	struct soap *soap,
	fes__FilterType *fes__Filter,
	char *typeName,
	std::string *handle__1,
	char *__item__2)
{
	wfs__DeleteType *_p = ::soap_new_wfs__DeleteType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__DeleteType::fes__Filter = fes__Filter;
		_p->wfs__DeleteType::typeName = typeName;
		_p->wfs__AbstractTransactionActionType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__DeleteType(struct soap *soap, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DeleteType", p->soap_type() == SOAP_TYPE_wfs__DeleteType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__DeleteType(struct soap *soap, const char *URL, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DeleteType", p->soap_type() == SOAP_TYPE_wfs__DeleteType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__DeleteType(struct soap *soap, const char *URL, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DeleteType", p->soap_type() == SOAP_TYPE_wfs__DeleteType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__DeleteType(struct soap *soap, const char *URL, wfs__DeleteType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DeleteType", p->soap_type() == SOAP_TYPE_wfs__DeleteType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__DeleteType * SOAP_FMAC4 soap_get_wfs__DeleteType(struct soap*, wfs__DeleteType *, const char*, const char*);

inline int soap_read_wfs__DeleteType(struct soap *soap, wfs__DeleteType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__DeleteType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__DeleteType(struct soap *soap, const char *URL, wfs__DeleteType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__DeleteType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__DeleteType(struct soap *soap, wfs__DeleteType *p)
{
	if (::soap_read_wfs__DeleteType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ReplaceType_DEFINED
#define SOAP_TYPE_wfs__ReplaceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ReplaceType(struct soap*, const char*, int, const wfs__ReplaceType *, const char*);
SOAP_FMAC3 wfs__ReplaceType * SOAP_FMAC4 soap_in_wfs__ReplaceType(struct soap*, const char*, wfs__ReplaceType *, const char*);
SOAP_FMAC1 wfs__ReplaceType * SOAP_FMAC2 soap_instantiate_wfs__ReplaceType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ReplaceType * soap_new_wfs__ReplaceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ReplaceType(soap, n, NULL, NULL, NULL);
}

inline wfs__ReplaceType * soap_new_req_wfs__ReplaceType(
	struct soap *soap,
	fes__FilterType *fes__Filter)
{
	wfs__ReplaceType *_p = ::soap_new_wfs__ReplaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ReplaceType::fes__Filter = fes__Filter;
	}
	return _p;
}

inline wfs__ReplaceType * soap_new_set_wfs__ReplaceType(
	struct soap *soap,
	char *__any,
	fes__FilterType *fes__Filter,
	const std::string& inputFormat,
	char **srsName,
	std::string *handle__1,
	char *__item__2)
{
	wfs__ReplaceType *_p = ::soap_new_wfs__ReplaceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ReplaceType::__any = __any;
		_p->wfs__ReplaceType::fes__Filter = fes__Filter;
		_p->wfs__ReplaceType::inputFormat = inputFormat;
		_p->wfs__ReplaceType::srsName = srsName;
		_p->wfs__AbstractTransactionActionType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__ReplaceType(struct soap *soap, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ReplaceType", p->soap_type() == SOAP_TYPE_wfs__ReplaceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ReplaceType(struct soap *soap, const char *URL, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ReplaceType", p->soap_type() == SOAP_TYPE_wfs__ReplaceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ReplaceType(struct soap *soap, const char *URL, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ReplaceType", p->soap_type() == SOAP_TYPE_wfs__ReplaceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ReplaceType(struct soap *soap, const char *URL, wfs__ReplaceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ReplaceType", p->soap_type() == SOAP_TYPE_wfs__ReplaceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ReplaceType * SOAP_FMAC4 soap_get_wfs__ReplaceType(struct soap*, wfs__ReplaceType *, const char*, const char*);

inline int soap_read_wfs__ReplaceType(struct soap *soap, wfs__ReplaceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ReplaceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ReplaceType(struct soap *soap, const char *URL, wfs__ReplaceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ReplaceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ReplaceType(struct soap *soap, wfs__ReplaceType *p)
{
	if (::soap_read_wfs__ReplaceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__PropertyType_DEFINED
#define SOAP_TYPE_wfs__PropertyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__PropertyType(struct soap*, const char*, int, const wfs__PropertyType *, const char*);
SOAP_FMAC3 wfs__PropertyType * SOAP_FMAC4 soap_in_wfs__PropertyType(struct soap*, const char*, wfs__PropertyType *, const char*);
SOAP_FMAC1 wfs__PropertyType * SOAP_FMAC2 soap_instantiate_wfs__PropertyType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__PropertyType * soap_new_wfs__PropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__PropertyType(soap, n, NULL, NULL, NULL);
}

inline wfs__PropertyType * soap_new_req_wfs__PropertyType(
	struct soap *soap,
	const _wfs__PropertyType_ValueReference& ValueReference)
{
	wfs__PropertyType *_p = ::soap_new_wfs__PropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__PropertyType::ValueReference = ValueReference;
	}
	return _p;
}

inline wfs__PropertyType * soap_new_set_wfs__PropertyType(
	struct soap *soap,
	const _wfs__PropertyType_ValueReference& ValueReference,
	char *Value,
	char *__item__1)
{
	wfs__PropertyType *_p = ::soap_new_wfs__PropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__PropertyType::ValueReference = ValueReference;
		_p->wfs__PropertyType::Value = Value;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__PropertyType(struct soap *soap, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType", p->soap_type() == SOAP_TYPE_wfs__PropertyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__PropertyType(struct soap *soap, const char *URL, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType", p->soap_type() == SOAP_TYPE_wfs__PropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__PropertyType(struct soap *soap, const char *URL, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType", p->soap_type() == SOAP_TYPE_wfs__PropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__PropertyType(struct soap *soap, const char *URL, wfs__PropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:PropertyType", p->soap_type() == SOAP_TYPE_wfs__PropertyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__PropertyType * SOAP_FMAC4 soap_get_wfs__PropertyType(struct soap*, wfs__PropertyType *, const char*, const char*);

inline int soap_read_wfs__PropertyType(struct soap *soap, wfs__PropertyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__PropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__PropertyType(struct soap *soap, const char *URL, wfs__PropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__PropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__PropertyType(struct soap *soap, wfs__PropertyType *p)
{
	if (::soap_read_wfs__PropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__UpdateType_DEFINED
#define SOAP_TYPE_wfs__UpdateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__UpdateType(struct soap*, const char*, int, const wfs__UpdateType *, const char*);
SOAP_FMAC3 wfs__UpdateType * SOAP_FMAC4 soap_in_wfs__UpdateType(struct soap*, const char*, wfs__UpdateType *, const char*);
SOAP_FMAC1 wfs__UpdateType * SOAP_FMAC2 soap_instantiate_wfs__UpdateType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__UpdateType * soap_new_wfs__UpdateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__UpdateType(soap, n, NULL, NULL, NULL);
}

inline wfs__UpdateType * soap_new_req_wfs__UpdateType(
	struct soap *soap,
	const std::vector<wfs__PropertyType *> & Property,
	char *typeName)
{
	wfs__UpdateType *_p = ::soap_new_wfs__UpdateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__UpdateType::Property = Property;
		_p->wfs__UpdateType::typeName = typeName;
	}
	return _p;
}

inline wfs__UpdateType * soap_new_set_wfs__UpdateType(
	struct soap *soap,
	const std::vector<wfs__PropertyType *> & Property,
	fes__FilterType *fes__Filter,
	char *typeName,
	const std::string& inputFormat,
	char **srsName,
	std::string *handle__1,
	char *__item__2)
{
	wfs__UpdateType *_p = ::soap_new_wfs__UpdateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__UpdateType::Property = Property;
		_p->wfs__UpdateType::fes__Filter = fes__Filter;
		_p->wfs__UpdateType::typeName = typeName;
		_p->wfs__UpdateType::inputFormat = inputFormat;
		_p->wfs__UpdateType::srsName = srsName;
		_p->wfs__AbstractTransactionActionType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__UpdateType(struct soap *soap, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateType", p->soap_type() == SOAP_TYPE_wfs__UpdateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__UpdateType(struct soap *soap, const char *URL, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateType", p->soap_type() == SOAP_TYPE_wfs__UpdateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__UpdateType(struct soap *soap, const char *URL, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateType", p->soap_type() == SOAP_TYPE_wfs__UpdateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__UpdateType(struct soap *soap, const char *URL, wfs__UpdateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:UpdateType", p->soap_type() == SOAP_TYPE_wfs__UpdateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__UpdateType * SOAP_FMAC4 soap_get_wfs__UpdateType(struct soap*, wfs__UpdateType *, const char*, const char*);

inline int soap_read_wfs__UpdateType(struct soap *soap, wfs__UpdateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__UpdateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__UpdateType(struct soap *soap, const char *URL, wfs__UpdateType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__UpdateType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__UpdateType(struct soap *soap, wfs__UpdateType *p)
{
	if (::soap_read_wfs__UpdateType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__InsertType_DEFINED
#define SOAP_TYPE_wfs__InsertType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__InsertType(struct soap*, const char*, int, const wfs__InsertType *, const char*);
SOAP_FMAC3 wfs__InsertType * SOAP_FMAC4 soap_in_wfs__InsertType(struct soap*, const char*, wfs__InsertType *, const char*);
SOAP_FMAC1 wfs__InsertType * SOAP_FMAC2 soap_instantiate_wfs__InsertType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__InsertType * soap_new_wfs__InsertType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__InsertType(soap, n, NULL, NULL, NULL);
}

inline wfs__InsertType * soap_new_req_wfs__InsertType(
	struct soap *soap)
{
	wfs__InsertType *_p = ::soap_new_wfs__InsertType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__InsertType * soap_new_set_wfs__InsertType(
	struct soap *soap,
	const std::vector<char *> & __any,
	const std::string& inputFormat,
	char **srsName,
	std::string *handle__1,
	char *__item__2)
{
	wfs__InsertType *_p = ::soap_new_wfs__InsertType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__InsertType::__any = __any;
		_p->wfs__InsertType::inputFormat = inputFormat;
		_p->wfs__InsertType::srsName = srsName;
		_p->wfs__AbstractTransactionActionType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__InsertType(struct soap *soap, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:InsertType", p->soap_type() == SOAP_TYPE_wfs__InsertType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__InsertType(struct soap *soap, const char *URL, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:InsertType", p->soap_type() == SOAP_TYPE_wfs__InsertType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__InsertType(struct soap *soap, const char *URL, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:InsertType", p->soap_type() == SOAP_TYPE_wfs__InsertType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__InsertType(struct soap *soap, const char *URL, wfs__InsertType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:InsertType", p->soap_type() == SOAP_TYPE_wfs__InsertType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__InsertType * SOAP_FMAC4 soap_get_wfs__InsertType(struct soap*, wfs__InsertType *, const char*, const char*);

inline int soap_read_wfs__InsertType(struct soap *soap, wfs__InsertType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__InsertType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__InsertType(struct soap *soap, const char *URL, wfs__InsertType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__InsertType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__InsertType(struct soap *soap, wfs__InsertType *p)
{
	if (::soap_read_wfs__InsertType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__AbstractTransactionActionType_DEFINED
#define SOAP_TYPE_wfs__AbstractTransactionActionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__AbstractTransactionActionType(struct soap*, const char*, int, const wfs__AbstractTransactionActionType *, const char*);
SOAP_FMAC3 wfs__AbstractTransactionActionType * SOAP_FMAC4 soap_in_wfs__AbstractTransactionActionType(struct soap*, const char*, wfs__AbstractTransactionActionType *, const char*);
SOAP_FMAC1 wfs__AbstractTransactionActionType * SOAP_FMAC2 soap_instantiate_wfs__AbstractTransactionActionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__AbstractTransactionActionType * soap_new_wfs__AbstractTransactionActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__AbstractTransactionActionType(soap, n, NULL, NULL, NULL);
}

inline wfs__AbstractTransactionActionType * soap_new_req_wfs__AbstractTransactionActionType(
	struct soap *soap)
{
	wfs__AbstractTransactionActionType *_p = ::soap_new_wfs__AbstractTransactionActionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__AbstractTransactionActionType * soap_new_set_wfs__AbstractTransactionActionType(
	struct soap *soap,
	std::string *handle,
	char *__item__1)
{
	wfs__AbstractTransactionActionType *_p = ::soap_new_wfs__AbstractTransactionActionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__AbstractTransactionActionType::handle = handle;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__AbstractTransactionActionType(struct soap *soap, wfs__AbstractTransactionActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AbstractTransactionActionType", p->soap_type() == SOAP_TYPE_wfs__AbstractTransactionActionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__AbstractTransactionActionType(struct soap *soap, const char *URL, wfs__AbstractTransactionActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AbstractTransactionActionType", p->soap_type() == SOAP_TYPE_wfs__AbstractTransactionActionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__AbstractTransactionActionType(struct soap *soap, const char *URL, wfs__AbstractTransactionActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AbstractTransactionActionType", p->soap_type() == SOAP_TYPE_wfs__AbstractTransactionActionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__AbstractTransactionActionType(struct soap *soap, const char *URL, wfs__AbstractTransactionActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:AbstractTransactionActionType", p->soap_type() == SOAP_TYPE_wfs__AbstractTransactionActionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__AbstractTransactionActionType * SOAP_FMAC4 soap_get_wfs__AbstractTransactionActionType(struct soap*, wfs__AbstractTransactionActionType *, const char*, const char*);

inline int soap_read_wfs__AbstractTransactionActionType(struct soap *soap, wfs__AbstractTransactionActionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__AbstractTransactionActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__AbstractTransactionActionType(struct soap *soap, const char *URL, wfs__AbstractTransactionActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__AbstractTransactionActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__AbstractTransactionActionType(struct soap *soap, wfs__AbstractTransactionActionType *p)
{
	if (::soap_read_wfs__AbstractTransactionActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__TransactionType_DEFINED
#define SOAP_TYPE_wfs__TransactionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__TransactionType(struct soap*, const char*, int, const wfs__TransactionType *, const char*);
SOAP_FMAC3 wfs__TransactionType * SOAP_FMAC4 soap_in_wfs__TransactionType(struct soap*, const char*, wfs__TransactionType *, const char*);
SOAP_FMAC1 wfs__TransactionType * SOAP_FMAC2 soap_instantiate_wfs__TransactionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__TransactionType * soap_new_wfs__TransactionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__TransactionType(soap, n, NULL, NULL, NULL);
}

inline wfs__TransactionType * soap_new_req_wfs__TransactionType(
	struct soap *soap,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__TransactionType *_p = ::soap_new_wfs__TransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__TransactionType * soap_new_set_wfs__TransactionType(
	struct soap *soap,
	const std::vector<struct __wfs__TransactionType_sequence> & __TransactionType_sequence,
	std::string *lockId,
	enum wfs__AllSomeType releaseAction,
	char **srsName,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__TransactionType *_p = ::soap_new_wfs__TransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__TransactionType::__TransactionType_sequence = __TransactionType_sequence;
		_p->wfs__TransactionType::lockId = lockId;
		_p->wfs__TransactionType::releaseAction = releaseAction;
		_p->wfs__TransactionType::srsName = srsName;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__TransactionType(struct soap *soap, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionType", p->soap_type() == SOAP_TYPE_wfs__TransactionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__TransactionType(struct soap *soap, const char *URL, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionType", p->soap_type() == SOAP_TYPE_wfs__TransactionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__TransactionType(struct soap *soap, const char *URL, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionType", p->soap_type() == SOAP_TYPE_wfs__TransactionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__TransactionType(struct soap *soap, const char *URL, wfs__TransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TransactionType", p->soap_type() == SOAP_TYPE_wfs__TransactionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__TransactionType * SOAP_FMAC4 soap_get_wfs__TransactionType(struct soap*, wfs__TransactionType *, const char*, const char*);

inline int soap_read_wfs__TransactionType(struct soap *soap, wfs__TransactionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__TransactionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__TransactionType(struct soap *soap, const char *URL, wfs__TransactionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__TransactionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__TransactionType(struct soap *soap, wfs__TransactionType *p)
{
	if (::soap_read_wfs__TransactionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__FeaturesNotLockedType_DEFINED
#define SOAP_TYPE_wfs__FeaturesNotLockedType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__FeaturesNotLockedType(struct soap*, const char*, int, const wfs__FeaturesNotLockedType *, const char*);
SOAP_FMAC3 wfs__FeaturesNotLockedType * SOAP_FMAC4 soap_in_wfs__FeaturesNotLockedType(struct soap*, const char*, wfs__FeaturesNotLockedType *, const char*);
SOAP_FMAC1 wfs__FeaturesNotLockedType * SOAP_FMAC2 soap_instantiate_wfs__FeaturesNotLockedType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__FeaturesNotLockedType * soap_new_wfs__FeaturesNotLockedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__FeaturesNotLockedType(soap, n, NULL, NULL, NULL);
}

inline wfs__FeaturesNotLockedType * soap_new_req_wfs__FeaturesNotLockedType(
	struct soap *soap)
{
	wfs__FeaturesNotLockedType *_p = ::soap_new_wfs__FeaturesNotLockedType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__FeaturesNotLockedType * soap_new_set_wfs__FeaturesNotLockedType(
	struct soap *soap,
	const std::vector<struct __wfs__FeaturesNotLockedType_sequence> & __FeaturesNotLockedType_sequence,
	char *__item__1)
{
	wfs__FeaturesNotLockedType *_p = ::soap_new_wfs__FeaturesNotLockedType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeaturesNotLockedType::__FeaturesNotLockedType_sequence = __FeaturesNotLockedType_sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__FeaturesNotLockedType(struct soap *soap, wfs__FeaturesNotLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesNotLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesNotLockedType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__FeaturesNotLockedType(struct soap *soap, const char *URL, wfs__FeaturesNotLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesNotLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesNotLockedType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__FeaturesNotLockedType(struct soap *soap, const char *URL, wfs__FeaturesNotLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesNotLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesNotLockedType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__FeaturesNotLockedType(struct soap *soap, const char *URL, wfs__FeaturesNotLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesNotLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesNotLockedType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__FeaturesNotLockedType * SOAP_FMAC4 soap_get_wfs__FeaturesNotLockedType(struct soap*, wfs__FeaturesNotLockedType *, const char*, const char*);

inline int soap_read_wfs__FeaturesNotLockedType(struct soap *soap, wfs__FeaturesNotLockedType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__FeaturesNotLockedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__FeaturesNotLockedType(struct soap *soap, const char *URL, wfs__FeaturesNotLockedType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__FeaturesNotLockedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__FeaturesNotLockedType(struct soap *soap, wfs__FeaturesNotLockedType *p)
{
	if (::soap_read_wfs__FeaturesNotLockedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__FeaturesLockedType_DEFINED
#define SOAP_TYPE_wfs__FeaturesLockedType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__FeaturesLockedType(struct soap*, const char*, int, const wfs__FeaturesLockedType *, const char*);
SOAP_FMAC3 wfs__FeaturesLockedType * SOAP_FMAC4 soap_in_wfs__FeaturesLockedType(struct soap*, const char*, wfs__FeaturesLockedType *, const char*);
SOAP_FMAC1 wfs__FeaturesLockedType * SOAP_FMAC2 soap_instantiate_wfs__FeaturesLockedType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__FeaturesLockedType * soap_new_wfs__FeaturesLockedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__FeaturesLockedType(soap, n, NULL, NULL, NULL);
}

inline wfs__FeaturesLockedType * soap_new_req_wfs__FeaturesLockedType(
	struct soap *soap)
{
	wfs__FeaturesLockedType *_p = ::soap_new_wfs__FeaturesLockedType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__FeaturesLockedType * soap_new_set_wfs__FeaturesLockedType(
	struct soap *soap,
	const std::vector<struct __wfs__FeaturesLockedType_sequence> & __FeaturesLockedType_sequence,
	char *__item__1)
{
	wfs__FeaturesLockedType *_p = ::soap_new_wfs__FeaturesLockedType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeaturesLockedType::__FeaturesLockedType_sequence = __FeaturesLockedType_sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__FeaturesLockedType(struct soap *soap, wfs__FeaturesLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesLockedType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__FeaturesLockedType(struct soap *soap, const char *URL, wfs__FeaturesLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesLockedType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__FeaturesLockedType(struct soap *soap, const char *URL, wfs__FeaturesLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesLockedType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__FeaturesLockedType(struct soap *soap, const char *URL, wfs__FeaturesLockedType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeaturesLockedType", p->soap_type() == SOAP_TYPE_wfs__FeaturesLockedType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__FeaturesLockedType * SOAP_FMAC4 soap_get_wfs__FeaturesLockedType(struct soap*, wfs__FeaturesLockedType *, const char*, const char*);

inline int soap_read_wfs__FeaturesLockedType(struct soap *soap, wfs__FeaturesLockedType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__FeaturesLockedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__FeaturesLockedType(struct soap *soap, const char *URL, wfs__FeaturesLockedType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__FeaturesLockedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__FeaturesLockedType(struct soap *soap, wfs__FeaturesLockedType *p)
{
	if (::soap_read_wfs__FeaturesLockedType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__LockFeatureResponseType_DEFINED
#define SOAP_TYPE_wfs__LockFeatureResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__LockFeatureResponseType(struct soap*, const char*, int, const wfs__LockFeatureResponseType *, const char*);
SOAP_FMAC3 wfs__LockFeatureResponseType * SOAP_FMAC4 soap_in_wfs__LockFeatureResponseType(struct soap*, const char*, wfs__LockFeatureResponseType *, const char*);
SOAP_FMAC1 wfs__LockFeatureResponseType * SOAP_FMAC2 soap_instantiate_wfs__LockFeatureResponseType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__LockFeatureResponseType * soap_new_wfs__LockFeatureResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__LockFeatureResponseType(soap, n, NULL, NULL, NULL);
}

inline wfs__LockFeatureResponseType * soap_new_req_wfs__LockFeatureResponseType(
	struct soap *soap)
{
	wfs__LockFeatureResponseType *_p = ::soap_new_wfs__LockFeatureResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__LockFeatureResponseType * soap_new_set_wfs__LockFeatureResponseType(
	struct soap *soap,
	wfs__FeaturesLockedType *FeaturesLocked,
	wfs__FeaturesNotLockedType *FeaturesNotLocked,
	std::string *lockId,
	char *__item__1)
{
	wfs__LockFeatureResponseType *_p = ::soap_new_wfs__LockFeatureResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__LockFeatureResponseType::FeaturesLocked = FeaturesLocked;
		_p->wfs__LockFeatureResponseType::FeaturesNotLocked = FeaturesNotLocked;
		_p->wfs__LockFeatureResponseType::lockId = lockId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__LockFeatureResponseType(struct soap *soap, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponseType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__LockFeatureResponseType(struct soap *soap, const char *URL, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponseType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__LockFeatureResponseType(struct soap *soap, const char *URL, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponseType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__LockFeatureResponseType(struct soap *soap, const char *URL, wfs__LockFeatureResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureResponseType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__LockFeatureResponseType * SOAP_FMAC4 soap_get_wfs__LockFeatureResponseType(struct soap*, wfs__LockFeatureResponseType *, const char*, const char*);

inline int soap_read_wfs__LockFeatureResponseType(struct soap *soap, wfs__LockFeatureResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__LockFeatureResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__LockFeatureResponseType(struct soap *soap, const char *URL, wfs__LockFeatureResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__LockFeatureResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__LockFeatureResponseType(struct soap *soap, wfs__LockFeatureResponseType *p)
{
	if (::soap_read_wfs__LockFeatureResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__LockFeatureType_DEFINED
#define SOAP_TYPE_wfs__LockFeatureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__LockFeatureType(struct soap*, const char*, int, const wfs__LockFeatureType *, const char*);
SOAP_FMAC3 wfs__LockFeatureType * SOAP_FMAC4 soap_in_wfs__LockFeatureType(struct soap*, const char*, wfs__LockFeatureType *, const char*);
SOAP_FMAC1 wfs__LockFeatureType * SOAP_FMAC2 soap_instantiate_wfs__LockFeatureType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__LockFeatureType * soap_new_wfs__LockFeatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__LockFeatureType(soap, n, NULL, NULL, NULL);
}

inline wfs__LockFeatureType * soap_new_req_wfs__LockFeatureType(
	struct soap *soap,
	int __sizeAbstractQueryExpression,
	__wfs__union_LockFeatureType *__union_LockFeatureType,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__LockFeatureType *_p = ::soap_new_wfs__LockFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__LockFeatureType::__sizeAbstractQueryExpression = __sizeAbstractQueryExpression;
		_p->wfs__LockFeatureType::__union_LockFeatureType = __union_LockFeatureType;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__LockFeatureType * soap_new_set_wfs__LockFeatureType(
	struct soap *soap,
	int __sizeAbstractQueryExpression,
	__wfs__union_LockFeatureType *__union_LockFeatureType,
	std::string *lockId,
	ULONG64 expiry,
	enum wfs__AllSomeType lockAction,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__LockFeatureType *_p = ::soap_new_wfs__LockFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__LockFeatureType::__sizeAbstractQueryExpression = __sizeAbstractQueryExpression;
		_p->wfs__LockFeatureType::__union_LockFeatureType = __union_LockFeatureType;
		_p->wfs__LockFeatureType::lockId = lockId;
		_p->wfs__LockFeatureType::expiry = expiry;
		_p->wfs__LockFeatureType::lockAction = lockAction;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__LockFeatureType(struct soap *soap, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__LockFeatureType(struct soap *soap, const char *URL, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__LockFeatureType(struct soap *soap, const char *URL, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__LockFeatureType(struct soap *soap, const char *URL, wfs__LockFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:LockFeatureType", p->soap_type() == SOAP_TYPE_wfs__LockFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__LockFeatureType * SOAP_FMAC4 soap_get_wfs__LockFeatureType(struct soap*, wfs__LockFeatureType *, const char*, const char*);

inline int soap_read_wfs__LockFeatureType(struct soap *soap, wfs__LockFeatureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__LockFeatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__LockFeatureType(struct soap *soap, const char *URL, wfs__LockFeatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__LockFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__LockFeatureType(struct soap *soap, wfs__LockFeatureType *p)
{
	if (::soap_read_wfs__LockFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__CreateStoredQueryResponseType_DEFINED
#define SOAP_TYPE_wfs__CreateStoredQueryResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__CreateStoredQueryResponseType(struct soap*, const char*, int, const wfs__CreateStoredQueryResponseType *, const char*);
SOAP_FMAC3 wfs__CreateStoredQueryResponseType * SOAP_FMAC4 soap_in_wfs__CreateStoredQueryResponseType(struct soap*, const char*, wfs__CreateStoredQueryResponseType *, const char*);
SOAP_FMAC1 wfs__CreateStoredQueryResponseType * SOAP_FMAC2 soap_instantiate_wfs__CreateStoredQueryResponseType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__CreateStoredQueryResponseType * soap_new_wfs__CreateStoredQueryResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__CreateStoredQueryResponseType(soap, n, NULL, NULL, NULL);
}

inline wfs__CreateStoredQueryResponseType * soap_new_req_wfs__CreateStoredQueryResponseType(
	struct soap *soap)
{
	wfs__CreateStoredQueryResponseType *_p = ::soap_new_wfs__CreateStoredQueryResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__CreateStoredQueryResponseType * soap_new_set_wfs__CreateStoredQueryResponseType(
	struct soap *soap,
	const std::string& status__1,
	char *__item__2)
{
	wfs__CreateStoredQueryResponseType *_p = ::soap_new_wfs__CreateStoredQueryResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ExecutionStatusType::status = status__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__CreateStoredQueryResponseType(struct soap *soap, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponseType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__CreateStoredQueryResponseType(struct soap *soap, const char *URL, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponseType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__CreateStoredQueryResponseType(struct soap *soap, const char *URL, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponseType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__CreateStoredQueryResponseType(struct soap *soap, const char *URL, wfs__CreateStoredQueryResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryResponseType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__CreateStoredQueryResponseType * SOAP_FMAC4 soap_get_wfs__CreateStoredQueryResponseType(struct soap*, wfs__CreateStoredQueryResponseType *, const char*, const char*);

inline int soap_read_wfs__CreateStoredQueryResponseType(struct soap *soap, wfs__CreateStoredQueryResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__CreateStoredQueryResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__CreateStoredQueryResponseType(struct soap *soap, const char *URL, wfs__CreateStoredQueryResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__CreateStoredQueryResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__CreateStoredQueryResponseType(struct soap *soap, wfs__CreateStoredQueryResponseType *p)
{
	if (::soap_read_wfs__CreateStoredQueryResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ExecutionStatusType_DEFINED
#define SOAP_TYPE_wfs__ExecutionStatusType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ExecutionStatusType(struct soap*, const char*, int, const wfs__ExecutionStatusType *, const char*);
SOAP_FMAC3 wfs__ExecutionStatusType * SOAP_FMAC4 soap_in_wfs__ExecutionStatusType(struct soap*, const char*, wfs__ExecutionStatusType *, const char*);
SOAP_FMAC1 wfs__ExecutionStatusType * SOAP_FMAC2 soap_instantiate_wfs__ExecutionStatusType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ExecutionStatusType * soap_new_wfs__ExecutionStatusType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ExecutionStatusType(soap, n, NULL, NULL, NULL);
}

inline wfs__ExecutionStatusType * soap_new_req_wfs__ExecutionStatusType(
	struct soap *soap)
{
	wfs__ExecutionStatusType *_p = ::soap_new_wfs__ExecutionStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__ExecutionStatusType * soap_new_set_wfs__ExecutionStatusType(
	struct soap *soap,
	const std::string& status,
	char *__item__1)
{
	wfs__ExecutionStatusType *_p = ::soap_new_wfs__ExecutionStatusType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ExecutionStatusType::status = status;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ExecutionStatusType(struct soap *soap, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExecutionStatusType", p->soap_type() == SOAP_TYPE_wfs__ExecutionStatusType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ExecutionStatusType(struct soap *soap, const char *URL, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExecutionStatusType", p->soap_type() == SOAP_TYPE_wfs__ExecutionStatusType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ExecutionStatusType(struct soap *soap, const char *URL, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExecutionStatusType", p->soap_type() == SOAP_TYPE_wfs__ExecutionStatusType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ExecutionStatusType(struct soap *soap, const char *URL, wfs__ExecutionStatusType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExecutionStatusType", p->soap_type() == SOAP_TYPE_wfs__ExecutionStatusType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ExecutionStatusType * SOAP_FMAC4 soap_get_wfs__ExecutionStatusType(struct soap*, wfs__ExecutionStatusType *, const char*, const char*);

inline int soap_read_wfs__ExecutionStatusType(struct soap *soap, wfs__ExecutionStatusType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ExecutionStatusType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ExecutionStatusType(struct soap *soap, const char *URL, wfs__ExecutionStatusType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ExecutionStatusType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ExecutionStatusType(struct soap *soap, wfs__ExecutionStatusType *p)
{
	if (::soap_read_wfs__ExecutionStatusType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__QueryExpressionTextType_DEFINED
#define SOAP_TYPE_wfs__QueryExpressionTextType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__QueryExpressionTextType(struct soap*, const char*, int, const wfs__QueryExpressionTextType *, const char*);
SOAP_FMAC3 wfs__QueryExpressionTextType * SOAP_FMAC4 soap_in_wfs__QueryExpressionTextType(struct soap*, const char*, wfs__QueryExpressionTextType *, const char*);
SOAP_FMAC1 wfs__QueryExpressionTextType * SOAP_FMAC2 soap_instantiate_wfs__QueryExpressionTextType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__QueryExpressionTextType * soap_new_wfs__QueryExpressionTextType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__QueryExpressionTextType(soap, n, NULL, NULL, NULL);
}

inline wfs__QueryExpressionTextType * soap_new_req_wfs__QueryExpressionTextType(
	struct soap *soap,
	const union _wfs__union_QueryExpressionTextType& union_QueryExpressionTextType,
	char *returnFeatureTypes,
	char *language)
{
	wfs__QueryExpressionTextType *_p = ::soap_new_wfs__QueryExpressionTextType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__QueryExpressionTextType::union_QueryExpressionTextType = union_QueryExpressionTextType;
		_p->wfs__QueryExpressionTextType::returnFeatureTypes = returnFeatureTypes;
		_p->wfs__QueryExpressionTextType::language = language;
	}
	return _p;
}

inline wfs__QueryExpressionTextType * soap_new_set_wfs__QueryExpressionTextType(
	struct soap *soap,
	int __union_QueryExpressionTextType,
	const union _wfs__union_QueryExpressionTextType& union_QueryExpressionTextType,
	char *returnFeatureTypes,
	char *language,
	bool isPrivate,
	char *__mixed,
	char *__item__1)
{
	wfs__QueryExpressionTextType *_p = ::soap_new_wfs__QueryExpressionTextType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__QueryExpressionTextType::__union_QueryExpressionTextType = __union_QueryExpressionTextType;
		_p->wfs__QueryExpressionTextType::union_QueryExpressionTextType = union_QueryExpressionTextType;
		_p->wfs__QueryExpressionTextType::returnFeatureTypes = returnFeatureTypes;
		_p->wfs__QueryExpressionTextType::language = language;
		_p->wfs__QueryExpressionTextType::isPrivate = isPrivate;
		_p->wfs__QueryExpressionTextType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__QueryExpressionTextType(struct soap *soap, wfs__QueryExpressionTextType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryExpressionTextType", p->soap_type() == SOAP_TYPE_wfs__QueryExpressionTextType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__QueryExpressionTextType(struct soap *soap, const char *URL, wfs__QueryExpressionTextType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryExpressionTextType", p->soap_type() == SOAP_TYPE_wfs__QueryExpressionTextType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__QueryExpressionTextType(struct soap *soap, const char *URL, wfs__QueryExpressionTextType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryExpressionTextType", p->soap_type() == SOAP_TYPE_wfs__QueryExpressionTextType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__QueryExpressionTextType(struct soap *soap, const char *URL, wfs__QueryExpressionTextType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryExpressionTextType", p->soap_type() == SOAP_TYPE_wfs__QueryExpressionTextType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__QueryExpressionTextType * SOAP_FMAC4 soap_get_wfs__QueryExpressionTextType(struct soap*, wfs__QueryExpressionTextType *, const char*, const char*);

inline int soap_read_wfs__QueryExpressionTextType(struct soap *soap, wfs__QueryExpressionTextType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__QueryExpressionTextType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__QueryExpressionTextType(struct soap *soap, const char *URL, wfs__QueryExpressionTextType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__QueryExpressionTextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__QueryExpressionTextType(struct soap *soap, wfs__QueryExpressionTextType *p)
{
	if (::soap_read_wfs__QueryExpressionTextType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ParameterExpressionType_DEFINED
#define SOAP_TYPE_wfs__ParameterExpressionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ParameterExpressionType(struct soap*, const char*, int, const wfs__ParameterExpressionType *, const char*);
SOAP_FMAC3 wfs__ParameterExpressionType * SOAP_FMAC4 soap_in_wfs__ParameterExpressionType(struct soap*, const char*, wfs__ParameterExpressionType *, const char*);
SOAP_FMAC1 wfs__ParameterExpressionType * SOAP_FMAC2 soap_instantiate_wfs__ParameterExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ParameterExpressionType * soap_new_wfs__ParameterExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ParameterExpressionType(soap, n, NULL, NULL, NULL);
}

inline wfs__ParameterExpressionType * soap_new_req_wfs__ParameterExpressionType(
	struct soap *soap,
	const std::string& name,
	char *type)
{
	wfs__ParameterExpressionType *_p = ::soap_new_wfs__ParameterExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ParameterExpressionType::name = name;
		_p->wfs__ParameterExpressionType::type = type;
	}
	return _p;
}

inline wfs__ParameterExpressionType * soap_new_set_wfs__ParameterExpressionType(
	struct soap *soap,
	const std::vector<_wfs__Title *> & Title,
	const std::vector<_wfs__Abstract *> & Abstract,
	const std::vector<ows__MetadataType *> & ows__Metadata,
	const std::string& name,
	char *type,
	char *__item__1)
{
	wfs__ParameterExpressionType *_p = ::soap_new_wfs__ParameterExpressionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ParameterExpressionType::Title = Title;
		_p->wfs__ParameterExpressionType::Abstract = Abstract;
		_p->wfs__ParameterExpressionType::ows__Metadata = ows__Metadata;
		_p->wfs__ParameterExpressionType::name = name;
		_p->wfs__ParameterExpressionType::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ParameterExpressionType(struct soap *soap, wfs__ParameterExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterExpressionType", p->soap_type() == SOAP_TYPE_wfs__ParameterExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ParameterExpressionType(struct soap *soap, const char *URL, wfs__ParameterExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterExpressionType", p->soap_type() == SOAP_TYPE_wfs__ParameterExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ParameterExpressionType(struct soap *soap, const char *URL, wfs__ParameterExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterExpressionType", p->soap_type() == SOAP_TYPE_wfs__ParameterExpressionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ParameterExpressionType(struct soap *soap, const char *URL, wfs__ParameterExpressionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterExpressionType", p->soap_type() == SOAP_TYPE_wfs__ParameterExpressionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ParameterExpressionType * SOAP_FMAC4 soap_get_wfs__ParameterExpressionType(struct soap*, wfs__ParameterExpressionType *, const char*, const char*);

inline int soap_read_wfs__ParameterExpressionType(struct soap *soap, wfs__ParameterExpressionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ParameterExpressionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ParameterExpressionType(struct soap *soap, const char *URL, wfs__ParameterExpressionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ParameterExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ParameterExpressionType(struct soap *soap, wfs__ParameterExpressionType *p)
{
	if (::soap_read_wfs__ParameterExpressionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__CreateStoredQueryType_DEFINED
#define SOAP_TYPE_wfs__CreateStoredQueryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__CreateStoredQueryType(struct soap*, const char*, int, const wfs__CreateStoredQueryType *, const char*);
SOAP_FMAC3 wfs__CreateStoredQueryType * SOAP_FMAC4 soap_in_wfs__CreateStoredQueryType(struct soap*, const char*, wfs__CreateStoredQueryType *, const char*);
SOAP_FMAC1 wfs__CreateStoredQueryType * SOAP_FMAC2 soap_instantiate_wfs__CreateStoredQueryType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__CreateStoredQueryType * soap_new_wfs__CreateStoredQueryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__CreateStoredQueryType(soap, n, NULL, NULL, NULL);
}

inline wfs__CreateStoredQueryType * soap_new_req_wfs__CreateStoredQueryType(
	struct soap *soap,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__CreateStoredQueryType *_p = ::soap_new_wfs__CreateStoredQueryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__CreateStoredQueryType * soap_new_set_wfs__CreateStoredQueryType(
	struct soap *soap,
	const std::vector<wfs__StoredQueryDescriptionType *> & StoredQueryDefinition,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__CreateStoredQueryType *_p = ::soap_new_wfs__CreateStoredQueryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__CreateStoredQueryType::StoredQueryDefinition = StoredQueryDefinition;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__CreateStoredQueryType(struct soap *soap, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__CreateStoredQueryType(struct soap *soap, const char *URL, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__CreateStoredQueryType(struct soap *soap, const char *URL, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__CreateStoredQueryType(struct soap *soap, const char *URL, wfs__CreateStoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:CreateStoredQueryType", p->soap_type() == SOAP_TYPE_wfs__CreateStoredQueryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__CreateStoredQueryType * SOAP_FMAC4 soap_get_wfs__CreateStoredQueryType(struct soap*, wfs__CreateStoredQueryType *, const char*, const char*);

inline int soap_read_wfs__CreateStoredQueryType(struct soap *soap, wfs__CreateStoredQueryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__CreateStoredQueryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__CreateStoredQueryType(struct soap *soap, const char *URL, wfs__CreateStoredQueryType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__CreateStoredQueryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__CreateStoredQueryType(struct soap *soap, wfs__CreateStoredQueryType *p)
{
	if (::soap_read_wfs__CreateStoredQueryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__StoredQueryDescriptionType_DEFINED
#define SOAP_TYPE_wfs__StoredQueryDescriptionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__StoredQueryDescriptionType(struct soap*, const char*, int, const wfs__StoredQueryDescriptionType *, const char*);
SOAP_FMAC3 wfs__StoredQueryDescriptionType * SOAP_FMAC4 soap_in_wfs__StoredQueryDescriptionType(struct soap*, const char*, wfs__StoredQueryDescriptionType *, const char*);
SOAP_FMAC1 wfs__StoredQueryDescriptionType * SOAP_FMAC2 soap_instantiate_wfs__StoredQueryDescriptionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__StoredQueryDescriptionType * soap_new_wfs__StoredQueryDescriptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__StoredQueryDescriptionType(soap, n, NULL, NULL, NULL);
}

inline wfs__StoredQueryDescriptionType * soap_new_req_wfs__StoredQueryDescriptionType(
	struct soap *soap,
	const std::vector<wfs__QueryExpressionTextType *> & QueryExpressionText,
	char *id)
{
	wfs__StoredQueryDescriptionType *_p = ::soap_new_wfs__StoredQueryDescriptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StoredQueryDescriptionType::QueryExpressionText = QueryExpressionText;
		_p->wfs__StoredQueryDescriptionType::id = id;
	}
	return _p;
}

inline wfs__StoredQueryDescriptionType * soap_new_set_wfs__StoredQueryDescriptionType(
	struct soap *soap,
	const std::vector<_wfs__Title *> & Title,
	const std::vector<_wfs__Abstract *> & Abstract,
	const std::vector<ows__MetadataType *> & ows__Metadata,
	const std::vector<wfs__ParameterExpressionType *> & Parameter,
	const std::vector<wfs__QueryExpressionTextType *> & QueryExpressionText,
	char *id,
	char *__item__1)
{
	wfs__StoredQueryDescriptionType *_p = ::soap_new_wfs__StoredQueryDescriptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StoredQueryDescriptionType::Title = Title;
		_p->wfs__StoredQueryDescriptionType::Abstract = Abstract;
		_p->wfs__StoredQueryDescriptionType::ows__Metadata = ows__Metadata;
		_p->wfs__StoredQueryDescriptionType::Parameter = Parameter;
		_p->wfs__StoredQueryDescriptionType::QueryExpressionText = QueryExpressionText;
		_p->wfs__StoredQueryDescriptionType::id = id;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__StoredQueryDescriptionType(struct soap *soap, wfs__StoredQueryDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryDescriptionType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryDescriptionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__StoredQueryDescriptionType(struct soap *soap, const char *URL, wfs__StoredQueryDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryDescriptionType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryDescriptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__StoredQueryDescriptionType(struct soap *soap, const char *URL, wfs__StoredQueryDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryDescriptionType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryDescriptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__StoredQueryDescriptionType(struct soap *soap, const char *URL, wfs__StoredQueryDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryDescriptionType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryDescriptionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__StoredQueryDescriptionType * SOAP_FMAC4 soap_get_wfs__StoredQueryDescriptionType(struct soap*, wfs__StoredQueryDescriptionType *, const char*, const char*);

inline int soap_read_wfs__StoredQueryDescriptionType(struct soap *soap, wfs__StoredQueryDescriptionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__StoredQueryDescriptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__StoredQueryDescriptionType(struct soap *soap, const char *URL, wfs__StoredQueryDescriptionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__StoredQueryDescriptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__StoredQueryDescriptionType(struct soap *soap, wfs__StoredQueryDescriptionType *p)
{
	if (::soap_read_wfs__StoredQueryDescriptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__DescribeStoredQueriesResponseType_DEFINED
#define SOAP_TYPE_wfs__DescribeStoredQueriesResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__DescribeStoredQueriesResponseType(struct soap*, const char*, int, const wfs__DescribeStoredQueriesResponseType *, const char*);
SOAP_FMAC3 wfs__DescribeStoredQueriesResponseType * SOAP_FMAC4 soap_in_wfs__DescribeStoredQueriesResponseType(struct soap*, const char*, wfs__DescribeStoredQueriesResponseType *, const char*);
SOAP_FMAC1 wfs__DescribeStoredQueriesResponseType * SOAP_FMAC2 soap_instantiate_wfs__DescribeStoredQueriesResponseType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__DescribeStoredQueriesResponseType * soap_new_wfs__DescribeStoredQueriesResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__DescribeStoredQueriesResponseType(soap, n, NULL, NULL, NULL);
}

inline wfs__DescribeStoredQueriesResponseType * soap_new_req_wfs__DescribeStoredQueriesResponseType(
	struct soap *soap)
{
	wfs__DescribeStoredQueriesResponseType *_p = ::soap_new_wfs__DescribeStoredQueriesResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__DescribeStoredQueriesResponseType * soap_new_set_wfs__DescribeStoredQueriesResponseType(
	struct soap *soap,
	const std::vector<wfs__StoredQueryDescriptionType *> & StoredQueryDescription,
	char *__item__1)
{
	wfs__DescribeStoredQueriesResponseType *_p = ::soap_new_wfs__DescribeStoredQueriesResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__DescribeStoredQueriesResponseType::StoredQueryDescription = StoredQueryDescription;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__DescribeStoredQueriesResponseType(struct soap *soap, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__DescribeStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__DescribeStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__DescribeStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__DescribeStoredQueriesResponseType * SOAP_FMAC4 soap_get_wfs__DescribeStoredQueriesResponseType(struct soap*, wfs__DescribeStoredQueriesResponseType *, const char*, const char*);

inline int soap_read_wfs__DescribeStoredQueriesResponseType(struct soap *soap, wfs__DescribeStoredQueriesResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__DescribeStoredQueriesResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__DescribeStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__DescribeStoredQueriesResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__DescribeStoredQueriesResponseType(struct soap *soap, wfs__DescribeStoredQueriesResponseType *p)
{
	if (::soap_read_wfs__DescribeStoredQueriesResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__DescribeStoredQueriesType_DEFINED
#define SOAP_TYPE_wfs__DescribeStoredQueriesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__DescribeStoredQueriesType(struct soap*, const char*, int, const wfs__DescribeStoredQueriesType *, const char*);
SOAP_FMAC3 wfs__DescribeStoredQueriesType * SOAP_FMAC4 soap_in_wfs__DescribeStoredQueriesType(struct soap*, const char*, wfs__DescribeStoredQueriesType *, const char*);
SOAP_FMAC1 wfs__DescribeStoredQueriesType * SOAP_FMAC2 soap_instantiate_wfs__DescribeStoredQueriesType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__DescribeStoredQueriesType * soap_new_wfs__DescribeStoredQueriesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__DescribeStoredQueriesType(soap, n, NULL, NULL, NULL);
}

inline wfs__DescribeStoredQueriesType * soap_new_req_wfs__DescribeStoredQueriesType(
	struct soap *soap,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__DescribeStoredQueriesType *_p = ::soap_new_wfs__DescribeStoredQueriesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__DescribeStoredQueriesType * soap_new_set_wfs__DescribeStoredQueriesType(
	struct soap *soap,
	const std::vector<char *> & StoredQueryId,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__DescribeStoredQueriesType *_p = ::soap_new_wfs__DescribeStoredQueriesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__DescribeStoredQueriesType::StoredQueryId = StoredQueryId;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__DescribeStoredQueriesType(struct soap *soap, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__DescribeStoredQueriesType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__DescribeStoredQueriesType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__DescribeStoredQueriesType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__DescribeStoredQueriesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__DescribeStoredQueriesType * SOAP_FMAC4 soap_get_wfs__DescribeStoredQueriesType(struct soap*, wfs__DescribeStoredQueriesType *, const char*, const char*);

inline int soap_read_wfs__DescribeStoredQueriesType(struct soap *soap, wfs__DescribeStoredQueriesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__DescribeStoredQueriesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__DescribeStoredQueriesType(struct soap *soap, const char *URL, wfs__DescribeStoredQueriesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__DescribeStoredQueriesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__DescribeStoredQueriesType(struct soap *soap, wfs__DescribeStoredQueriesType *p)
{
	if (::soap_read_wfs__DescribeStoredQueriesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__StoredQueryListItemType_DEFINED
#define SOAP_TYPE_wfs__StoredQueryListItemType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__StoredQueryListItemType(struct soap*, const char*, int, const wfs__StoredQueryListItemType *, const char*);
SOAP_FMAC3 wfs__StoredQueryListItemType * SOAP_FMAC4 soap_in_wfs__StoredQueryListItemType(struct soap*, const char*, wfs__StoredQueryListItemType *, const char*);
SOAP_FMAC1 wfs__StoredQueryListItemType * SOAP_FMAC2 soap_instantiate_wfs__StoredQueryListItemType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__StoredQueryListItemType * soap_new_wfs__StoredQueryListItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__StoredQueryListItemType(soap, n, NULL, NULL, NULL);
}

inline wfs__StoredQueryListItemType * soap_new_req_wfs__StoredQueryListItemType(
	struct soap *soap,
	const std::vector<char *> & ReturnFeatureType,
	char *id)
{
	wfs__StoredQueryListItemType *_p = ::soap_new_wfs__StoredQueryListItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StoredQueryListItemType::ReturnFeatureType = ReturnFeatureType;
		_p->wfs__StoredQueryListItemType::id = id;
	}
	return _p;
}

inline wfs__StoredQueryListItemType * soap_new_set_wfs__StoredQueryListItemType(
	struct soap *soap,
	const std::vector<_wfs__Title *> & Title,
	const std::vector<char *> & ReturnFeatureType,
	char *id,
	char *__item__1)
{
	wfs__StoredQueryListItemType *_p = ::soap_new_wfs__StoredQueryListItemType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StoredQueryListItemType::Title = Title;
		_p->wfs__StoredQueryListItemType::ReturnFeatureType = ReturnFeatureType;
		_p->wfs__StoredQueryListItemType::id = id;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__StoredQueryListItemType(struct soap *soap, wfs__StoredQueryListItemType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryListItemType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryListItemType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__StoredQueryListItemType(struct soap *soap, const char *URL, wfs__StoredQueryListItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryListItemType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryListItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__StoredQueryListItemType(struct soap *soap, const char *URL, wfs__StoredQueryListItemType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryListItemType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryListItemType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__StoredQueryListItemType(struct soap *soap, const char *URL, wfs__StoredQueryListItemType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryListItemType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryListItemType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__StoredQueryListItemType * SOAP_FMAC4 soap_get_wfs__StoredQueryListItemType(struct soap*, wfs__StoredQueryListItemType *, const char*, const char*);

inline int soap_read_wfs__StoredQueryListItemType(struct soap *soap, wfs__StoredQueryListItemType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__StoredQueryListItemType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__StoredQueryListItemType(struct soap *soap, const char *URL, wfs__StoredQueryListItemType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__StoredQueryListItemType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__StoredQueryListItemType(struct soap *soap, wfs__StoredQueryListItemType *p)
{
	if (::soap_read_wfs__StoredQueryListItemType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ListStoredQueriesResponseType_DEFINED
#define SOAP_TYPE_wfs__ListStoredQueriesResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ListStoredQueriesResponseType(struct soap*, const char*, int, const wfs__ListStoredQueriesResponseType *, const char*);
SOAP_FMAC3 wfs__ListStoredQueriesResponseType * SOAP_FMAC4 soap_in_wfs__ListStoredQueriesResponseType(struct soap*, const char*, wfs__ListStoredQueriesResponseType *, const char*);
SOAP_FMAC1 wfs__ListStoredQueriesResponseType * SOAP_FMAC2 soap_instantiate_wfs__ListStoredQueriesResponseType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ListStoredQueriesResponseType * soap_new_wfs__ListStoredQueriesResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ListStoredQueriesResponseType(soap, n, NULL, NULL, NULL);
}

inline wfs__ListStoredQueriesResponseType * soap_new_req_wfs__ListStoredQueriesResponseType(
	struct soap *soap)
{
	wfs__ListStoredQueriesResponseType *_p = ::soap_new_wfs__ListStoredQueriesResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__ListStoredQueriesResponseType * soap_new_set_wfs__ListStoredQueriesResponseType(
	struct soap *soap,
	const std::vector<wfs__StoredQueryListItemType *> & StoredQuery,
	char *__item__1)
{
	wfs__ListStoredQueriesResponseType *_p = ::soap_new_wfs__ListStoredQueriesResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ListStoredQueriesResponseType::StoredQuery = StoredQuery;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ListStoredQueriesResponseType(struct soap *soap, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ListStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ListStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ListStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__ListStoredQueriesResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesResponseType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ListStoredQueriesResponseType * SOAP_FMAC4 soap_get_wfs__ListStoredQueriesResponseType(struct soap*, wfs__ListStoredQueriesResponseType *, const char*, const char*);

inline int soap_read_wfs__ListStoredQueriesResponseType(struct soap *soap, wfs__ListStoredQueriesResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ListStoredQueriesResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ListStoredQueriesResponseType(struct soap *soap, const char *URL, wfs__ListStoredQueriesResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ListStoredQueriesResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ListStoredQueriesResponseType(struct soap *soap, wfs__ListStoredQueriesResponseType *p)
{
	if (::soap_read_wfs__ListStoredQueriesResponseType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ListStoredQueriesType_DEFINED
#define SOAP_TYPE_wfs__ListStoredQueriesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ListStoredQueriesType(struct soap*, const char*, int, const wfs__ListStoredQueriesType *, const char*);
SOAP_FMAC3 wfs__ListStoredQueriesType * SOAP_FMAC4 soap_in_wfs__ListStoredQueriesType(struct soap*, const char*, wfs__ListStoredQueriesType *, const char*);
SOAP_FMAC1 wfs__ListStoredQueriesType * SOAP_FMAC2 soap_instantiate_wfs__ListStoredQueriesType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ListStoredQueriesType * soap_new_wfs__ListStoredQueriesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ListStoredQueriesType(soap, n, NULL, NULL, NULL);
}

inline wfs__ListStoredQueriesType * soap_new_req_wfs__ListStoredQueriesType(
	struct soap *soap,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__ListStoredQueriesType *_p = ::soap_new_wfs__ListStoredQueriesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__ListStoredQueriesType * soap_new_set_wfs__ListStoredQueriesType(
	struct soap *soap,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__ListStoredQueriesType *_p = ::soap_new_wfs__ListStoredQueriesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__ListStoredQueriesType(struct soap *soap, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ListStoredQueriesType(struct soap *soap, const char *URL, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ListStoredQueriesType(struct soap *soap, const char *URL, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ListStoredQueriesType(struct soap *soap, const char *URL, wfs__ListStoredQueriesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ListStoredQueriesType", p->soap_type() == SOAP_TYPE_wfs__ListStoredQueriesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ListStoredQueriesType * SOAP_FMAC4 soap_get_wfs__ListStoredQueriesType(struct soap*, wfs__ListStoredQueriesType *, const char*, const char*);

inline int soap_read_wfs__ListStoredQueriesType(struct soap *soap, wfs__ListStoredQueriesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ListStoredQueriesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ListStoredQueriesType(struct soap *soap, const char *URL, wfs__ListStoredQueriesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ListStoredQueriesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ListStoredQueriesType(struct soap *soap, wfs__ListStoredQueriesType *p)
{
	if (::soap_read_wfs__ListStoredQueriesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__EnvelopePropertyType_DEFINED
#define SOAP_TYPE_wfs__EnvelopePropertyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__EnvelopePropertyType(struct soap*, const char*, int, const wfs__EnvelopePropertyType *, const char*);
SOAP_FMAC3 wfs__EnvelopePropertyType * SOAP_FMAC4 soap_in_wfs__EnvelopePropertyType(struct soap*, const char*, wfs__EnvelopePropertyType *, const char*);
SOAP_FMAC1 wfs__EnvelopePropertyType * SOAP_FMAC2 soap_instantiate_wfs__EnvelopePropertyType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__EnvelopePropertyType * soap_new_wfs__EnvelopePropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__EnvelopePropertyType(soap, n, NULL, NULL, NULL);
}

inline wfs__EnvelopePropertyType * soap_new_req_wfs__EnvelopePropertyType(
	struct soap *soap)
{
	wfs__EnvelopePropertyType *_p = ::soap_new_wfs__EnvelopePropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__EnvelopePropertyType * soap_new_set_wfs__EnvelopePropertyType(
	struct soap *soap,
	char *__any,
	char *__item__1)
{
	wfs__EnvelopePropertyType *_p = ::soap_new_wfs__EnvelopePropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__EnvelopePropertyType::__any = __any;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__EnvelopePropertyType(struct soap *soap, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EnvelopePropertyType", p->soap_type() == SOAP_TYPE_wfs__EnvelopePropertyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__EnvelopePropertyType(struct soap *soap, const char *URL, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EnvelopePropertyType", p->soap_type() == SOAP_TYPE_wfs__EnvelopePropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__EnvelopePropertyType(struct soap *soap, const char *URL, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EnvelopePropertyType", p->soap_type() == SOAP_TYPE_wfs__EnvelopePropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__EnvelopePropertyType(struct soap *soap, const char *URL, wfs__EnvelopePropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:EnvelopePropertyType", p->soap_type() == SOAP_TYPE_wfs__EnvelopePropertyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__EnvelopePropertyType * SOAP_FMAC4 soap_get_wfs__EnvelopePropertyType(struct soap*, wfs__EnvelopePropertyType *, const char*, const char*);

inline int soap_read_wfs__EnvelopePropertyType(struct soap *soap, wfs__EnvelopePropertyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__EnvelopePropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__EnvelopePropertyType(struct soap *soap, const char *URL, wfs__EnvelopePropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__EnvelopePropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__EnvelopePropertyType(struct soap *soap, wfs__EnvelopePropertyType *p)
{
	if (::soap_read_wfs__EnvelopePropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__SimpleFeatureCollectionType_DEFINED
#define SOAP_TYPE_wfs__SimpleFeatureCollectionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__SimpleFeatureCollectionType(struct soap*, const char*, int, const wfs__SimpleFeatureCollectionType *, const char*);
SOAP_FMAC3 wfs__SimpleFeatureCollectionType * SOAP_FMAC4 soap_in_wfs__SimpleFeatureCollectionType(struct soap*, const char*, wfs__SimpleFeatureCollectionType *, const char*);
SOAP_FMAC1 wfs__SimpleFeatureCollectionType * SOAP_FMAC2 soap_instantiate_wfs__SimpleFeatureCollectionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__SimpleFeatureCollectionType * soap_new_wfs__SimpleFeatureCollectionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__SimpleFeatureCollectionType(soap, n, NULL, NULL, NULL);
}

inline wfs__SimpleFeatureCollectionType * soap_new_req_wfs__SimpleFeatureCollectionType(
	struct soap *soap)
{
	wfs__SimpleFeatureCollectionType *_p = ::soap_new_wfs__SimpleFeatureCollectionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__SimpleFeatureCollectionType * soap_new_set_wfs__SimpleFeatureCollectionType(
	struct soap *soap,
	wfs__EnvelopePropertyType *boundedBy,
	const std::vector<wfs__MemberPropertyType *> & member,
	char *__item__1)
{
	wfs__SimpleFeatureCollectionType *_p = ::soap_new_wfs__SimpleFeatureCollectionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__SimpleFeatureCollectionType::boundedBy = boundedBy;
		_p->wfs__SimpleFeatureCollectionType::member = member;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__SimpleFeatureCollectionType(struct soap *soap, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__SimpleFeatureCollectionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__SimpleFeatureCollectionType(struct soap *soap, const char *URL, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__SimpleFeatureCollectionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__SimpleFeatureCollectionType(struct soap *soap, const char *URL, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__SimpleFeatureCollectionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__SimpleFeatureCollectionType(struct soap *soap, const char *URL, wfs__SimpleFeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:SimpleFeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__SimpleFeatureCollectionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__SimpleFeatureCollectionType * SOAP_FMAC4 soap_get_wfs__SimpleFeatureCollectionType(struct soap*, wfs__SimpleFeatureCollectionType *, const char*, const char*);

inline int soap_read_wfs__SimpleFeatureCollectionType(struct soap *soap, wfs__SimpleFeatureCollectionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__SimpleFeatureCollectionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__SimpleFeatureCollectionType(struct soap *soap, const char *URL, wfs__SimpleFeatureCollectionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__SimpleFeatureCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__SimpleFeatureCollectionType(struct soap *soap, wfs__SimpleFeatureCollectionType *p)
{
	if (::soap_read_wfs__SimpleFeatureCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__FeatureCollectionType_DEFINED
#define SOAP_TYPE_wfs__FeatureCollectionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__FeatureCollectionType(struct soap*, const char*, int, const wfs__FeatureCollectionType *, const char*);
SOAP_FMAC3 wfs__FeatureCollectionType * SOAP_FMAC4 soap_in_wfs__FeatureCollectionType(struct soap*, const char*, wfs__FeatureCollectionType *, const char*);
SOAP_FMAC1 wfs__FeatureCollectionType * SOAP_FMAC2 soap_instantiate_wfs__FeatureCollectionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__FeatureCollectionType * soap_new_wfs__FeatureCollectionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__FeatureCollectionType(soap, n, NULL, NULL, NULL);
}

inline wfs__FeatureCollectionType * soap_new_req_wfs__FeatureCollectionType(
	struct soap *soap,
	time_t timeStamp,
	const std::string& numberMatched,
	ULONG64 numberReturned)
{
	wfs__FeatureCollectionType *_p = ::soap_new_wfs__FeatureCollectionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeatureCollectionType::timeStamp = timeStamp;
		_p->wfs__FeatureCollectionType::numberMatched = numberMatched;
		_p->wfs__FeatureCollectionType::numberReturned = numberReturned;
	}
	return _p;
}

inline wfs__FeatureCollectionType * soap_new_set_wfs__FeatureCollectionType(
	struct soap *soap,
	_wfs__additionalObjects *additionalObjects,
	_wfs__truncatedResponse *truncatedResponse,
	std::string *lockId,
	time_t timeStamp,
	const std::string& numberMatched,
	ULONG64 numberReturned,
	char **next,
	char **previous,
	wfs__EnvelopePropertyType *boundedBy__1,
	const std::vector<wfs__MemberPropertyType *> & member__1,
	char *__item__2)
{
	wfs__FeatureCollectionType *_p = ::soap_new_wfs__FeatureCollectionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeatureCollectionType::additionalObjects = additionalObjects;
		_p->wfs__FeatureCollectionType::truncatedResponse = truncatedResponse;
		_p->wfs__FeatureCollectionType::lockId = lockId;
		_p->wfs__FeatureCollectionType::timeStamp = timeStamp;
		_p->wfs__FeatureCollectionType::numberMatched = numberMatched;
		_p->wfs__FeatureCollectionType::numberReturned = numberReturned;
		_p->wfs__FeatureCollectionType::next = next;
		_p->wfs__FeatureCollectionType::previous = previous;
		_p->wfs__SimpleFeatureCollectionType::boundedBy = boundedBy__1;
		_p->wfs__SimpleFeatureCollectionType::member = member__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__FeatureCollectionType(struct soap *soap, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__FeatureCollectionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__FeatureCollectionType(struct soap *soap, const char *URL, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__FeatureCollectionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__FeatureCollectionType(struct soap *soap, const char *URL, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__FeatureCollectionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__FeatureCollectionType(struct soap *soap, const char *URL, wfs__FeatureCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureCollectionType", p->soap_type() == SOAP_TYPE_wfs__FeatureCollectionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__FeatureCollectionType * SOAP_FMAC4 soap_get_wfs__FeatureCollectionType(struct soap*, wfs__FeatureCollectionType *, const char*, const char*);

inline int soap_read_wfs__FeatureCollectionType(struct soap *soap, wfs__FeatureCollectionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__FeatureCollectionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__FeatureCollectionType(struct soap *soap, const char *URL, wfs__FeatureCollectionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__FeatureCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__FeatureCollectionType(struct soap *soap, wfs__FeatureCollectionType *p)
{
	if (::soap_read_wfs__FeatureCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__GetFeatureWithLockType_DEFINED
#define SOAP_TYPE_wfs__GetFeatureWithLockType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__GetFeatureWithLockType(struct soap*, const char*, int, const wfs__GetFeatureWithLockType *, const char*);
SOAP_FMAC3 wfs__GetFeatureWithLockType * SOAP_FMAC4 soap_in_wfs__GetFeatureWithLockType(struct soap*, const char*, wfs__GetFeatureWithLockType *, const char*);
SOAP_FMAC1 wfs__GetFeatureWithLockType * SOAP_FMAC2 soap_instantiate_wfs__GetFeatureWithLockType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__GetFeatureWithLockType * soap_new_wfs__GetFeatureWithLockType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__GetFeatureWithLockType(soap, n, NULL, NULL, NULL);
}

inline wfs__GetFeatureWithLockType * soap_new_req_wfs__GetFeatureWithLockType(
	struct soap *soap,
	int __sizeAbstractQueryExpression__1,
	__wfs__union_GetFeatureType *__union_GetFeatureType__1,
	const std::string& service__2,
	const std::string& version__2)
{
	wfs__GetFeatureWithLockType *_p = ::soap_new_wfs__GetFeatureWithLockType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetFeatureType::__sizeAbstractQueryExpression = __sizeAbstractQueryExpression__1;
		_p->wfs__GetFeatureType::__union_GetFeatureType = __union_GetFeatureType__1;
		_p->wfs__BaseRequestType::service = service__2;
		_p->wfs__BaseRequestType::version = version__2;
	}
	return _p;
}

inline wfs__GetFeatureWithLockType * soap_new_set_wfs__GetFeatureWithLockType(
	struct soap *soap,
	ULONG64 expiry,
	enum wfs__AllSomeType lockAction,
	int __sizeAbstractQueryExpression__1,
	__wfs__union_GetFeatureType *__union_GetFeatureType__1,
	ULONG64 startIndex__1,
	ULONG64 *count__1,
	enum wfs__ResultTypeType resultType__1,
	const std::string& outputFormat__1,
	enum wfs__ResolveValueType resolve__1,
	const std::string& resolveDepth__1,
	ULONG64 resolveTimeout__1,
	const std::string& service__2,
	const std::string& version__2,
	std::string *handle__2,
	char *__item__3)
{
	wfs__GetFeatureWithLockType *_p = ::soap_new_wfs__GetFeatureWithLockType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetFeatureWithLockType::expiry = expiry;
		_p->wfs__GetFeatureWithLockType::lockAction = lockAction;
		_p->wfs__GetFeatureType::__sizeAbstractQueryExpression = __sizeAbstractQueryExpression__1;
		_p->wfs__GetFeatureType::__union_GetFeatureType = __union_GetFeatureType__1;
		_p->wfs__GetFeatureType::startIndex = startIndex__1;
		_p->wfs__GetFeatureType::count = count__1;
		_p->wfs__GetFeatureType::resultType = resultType__1;
		_p->wfs__GetFeatureType::outputFormat = outputFormat__1;
		_p->wfs__GetFeatureType::resolve = resolve__1;
		_p->wfs__GetFeatureType::resolveDepth = resolveDepth__1;
		_p->wfs__GetFeatureType::resolveTimeout = resolveTimeout__1;
		_p->wfs__BaseRequestType::service = service__2;
		_p->wfs__BaseRequestType::version = version__2;
		_p->wfs__BaseRequestType::handle = handle__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_wfs__GetFeatureWithLockType(struct soap *soap, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLockType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureWithLockType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__GetFeatureWithLockType(struct soap *soap, const char *URL, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLockType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureWithLockType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__GetFeatureWithLockType(struct soap *soap, const char *URL, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLockType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureWithLockType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__GetFeatureWithLockType(struct soap *soap, const char *URL, wfs__GetFeatureWithLockType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureWithLockType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureWithLockType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__GetFeatureWithLockType * SOAP_FMAC4 soap_get_wfs__GetFeatureWithLockType(struct soap*, wfs__GetFeatureWithLockType *, const char*, const char*);

inline int soap_read_wfs__GetFeatureWithLockType(struct soap *soap, wfs__GetFeatureWithLockType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__GetFeatureWithLockType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__GetFeatureWithLockType(struct soap *soap, const char *URL, wfs__GetFeatureWithLockType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__GetFeatureWithLockType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__GetFeatureWithLockType(struct soap *soap, wfs__GetFeatureWithLockType *p)
{
	if (::soap_read_wfs__GetFeatureWithLockType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__GetFeatureType_DEFINED
#define SOAP_TYPE_wfs__GetFeatureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__GetFeatureType(struct soap*, const char*, int, const wfs__GetFeatureType *, const char*);
SOAP_FMAC3 wfs__GetFeatureType * SOAP_FMAC4 soap_in_wfs__GetFeatureType(struct soap*, const char*, wfs__GetFeatureType *, const char*);
SOAP_FMAC1 wfs__GetFeatureType * SOAP_FMAC2 soap_instantiate_wfs__GetFeatureType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__GetFeatureType * soap_new_wfs__GetFeatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__GetFeatureType(soap, n, NULL, NULL, NULL);
}

inline wfs__GetFeatureType * soap_new_req_wfs__GetFeatureType(
	struct soap *soap,
	int __sizeAbstractQueryExpression,
	__wfs__union_GetFeatureType *__union_GetFeatureType,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__GetFeatureType *_p = ::soap_new_wfs__GetFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetFeatureType::__sizeAbstractQueryExpression = __sizeAbstractQueryExpression;
		_p->wfs__GetFeatureType::__union_GetFeatureType = __union_GetFeatureType;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__GetFeatureType * soap_new_set_wfs__GetFeatureType(
	struct soap *soap,
	int __sizeAbstractQueryExpression,
	__wfs__union_GetFeatureType *__union_GetFeatureType,
	ULONG64 startIndex,
	ULONG64 *count,
	enum wfs__ResultTypeType resultType,
	const std::string& outputFormat,
	enum wfs__ResolveValueType resolve,
	const std::string& resolveDepth,
	ULONG64 resolveTimeout,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__GetFeatureType *_p = ::soap_new_wfs__GetFeatureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetFeatureType::__sizeAbstractQueryExpression = __sizeAbstractQueryExpression;
		_p->wfs__GetFeatureType::__union_GetFeatureType = __union_GetFeatureType;
		_p->wfs__GetFeatureType::startIndex = startIndex;
		_p->wfs__GetFeatureType::count = count;
		_p->wfs__GetFeatureType::resultType = resultType;
		_p->wfs__GetFeatureType::outputFormat = outputFormat;
		_p->wfs__GetFeatureType::resolve = resolve;
		_p->wfs__GetFeatureType::resolveDepth = resolveDepth;
		_p->wfs__GetFeatureType::resolveTimeout = resolveTimeout;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__GetFeatureType(struct soap *soap, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__GetFeatureType(struct soap *soap, const char *URL, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__GetFeatureType(struct soap *soap, const char *URL, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__GetFeatureType(struct soap *soap, const char *URL, wfs__GetFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetFeatureType", p->soap_type() == SOAP_TYPE_wfs__GetFeatureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__GetFeatureType * SOAP_FMAC4 soap_get_wfs__GetFeatureType(struct soap*, wfs__GetFeatureType *, const char*, const char*);

inline int soap_read_wfs__GetFeatureType(struct soap *soap, wfs__GetFeatureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__GetFeatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__GetFeatureType(struct soap *soap, const char *URL, wfs__GetFeatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__GetFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__GetFeatureType(struct soap *soap, wfs__GetFeatureType *p)
{
	if (::soap_read_wfs__GetFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__TupleType_DEFINED
#define SOAP_TYPE_wfs__TupleType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__TupleType(struct soap*, const char*, int, const wfs__TupleType *, const char*);
SOAP_FMAC3 wfs__TupleType * SOAP_FMAC4 soap_in_wfs__TupleType(struct soap*, const char*, wfs__TupleType *, const char*);
SOAP_FMAC1 wfs__TupleType * SOAP_FMAC2 soap_instantiate_wfs__TupleType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__TupleType * soap_new_wfs__TupleType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__TupleType(soap, n, NULL, NULL, NULL);
}

inline wfs__TupleType * soap_new_req_wfs__TupleType(
	struct soap *soap,
	const std::vector<wfs__MemberPropertyType *> & member)
{
	wfs__TupleType *_p = ::soap_new_wfs__TupleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__TupleType::member = member;
	}
	return _p;
}

inline wfs__TupleType * soap_new_set_wfs__TupleType(
	struct soap *soap,
	const std::vector<wfs__MemberPropertyType *> & member,
	char *__item__1)
{
	wfs__TupleType *_p = ::soap_new_wfs__TupleType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__TupleType::member = member;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__TupleType(struct soap *soap, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TupleType", p->soap_type() == SOAP_TYPE_wfs__TupleType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__TupleType(struct soap *soap, const char *URL, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TupleType", p->soap_type() == SOAP_TYPE_wfs__TupleType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__TupleType(struct soap *soap, const char *URL, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TupleType", p->soap_type() == SOAP_TYPE_wfs__TupleType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__TupleType(struct soap *soap, const char *URL, wfs__TupleType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:TupleType", p->soap_type() == SOAP_TYPE_wfs__TupleType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__TupleType * SOAP_FMAC4 soap_get_wfs__TupleType(struct soap*, wfs__TupleType *, const char*, const char*);

inline int soap_read_wfs__TupleType(struct soap *soap, wfs__TupleType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__TupleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__TupleType(struct soap *soap, const char *URL, wfs__TupleType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__TupleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__TupleType(struct soap *soap, wfs__TupleType *p)
{
	if (::soap_read_wfs__TupleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__MemberPropertyType_DEFINED
#define SOAP_TYPE_wfs__MemberPropertyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__MemberPropertyType(struct soap*, const char*, int, const wfs__MemberPropertyType *, const char*);
SOAP_FMAC3 wfs__MemberPropertyType * SOAP_FMAC4 soap_in_wfs__MemberPropertyType(struct soap*, const char*, wfs__MemberPropertyType *, const char*);
SOAP_FMAC1 wfs__MemberPropertyType * SOAP_FMAC2 soap_instantiate_wfs__MemberPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__MemberPropertyType * soap_new_wfs__MemberPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__MemberPropertyType(soap, n, NULL, NULL, NULL);
}

inline wfs__MemberPropertyType * soap_new_req_wfs__MemberPropertyType(
	struct soap *soap,
	const union _wfs__union_MemberPropertyType& union_MemberPropertyType)
{
	wfs__MemberPropertyType *_p = ::soap_new_wfs__MemberPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__MemberPropertyType::union_MemberPropertyType = union_MemberPropertyType;
	}
	return _p;
}

inline wfs__MemberPropertyType * soap_new_set_wfs__MemberPropertyType(
	struct soap *soap,
	int __union_MemberPropertyType,
	const union _wfs__union_MemberPropertyType& union_MemberPropertyType,
	std::string *state,
	enum xlink__typeType xlink__type,
	char **xlink__href,
	char **xlink__role,
	char **xlink__arcrole,
	std::string *xlink__title,
	enum xlink__showType *xlink__show,
	enum xlink__actuateType *xlink__actuate,
	char *__mixed,
	char *__item__1)
{
	wfs__MemberPropertyType *_p = ::soap_new_wfs__MemberPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__MemberPropertyType::__union_MemberPropertyType = __union_MemberPropertyType;
		_p->wfs__MemberPropertyType::union_MemberPropertyType = union_MemberPropertyType;
		_p->wfs__MemberPropertyType::state = state;
		_p->wfs__MemberPropertyType::xlink__type = xlink__type;
		_p->wfs__MemberPropertyType::xlink__href = xlink__href;
		_p->wfs__MemberPropertyType::xlink__role = xlink__role;
		_p->wfs__MemberPropertyType::xlink__arcrole = xlink__arcrole;
		_p->wfs__MemberPropertyType::xlink__title = xlink__title;
		_p->wfs__MemberPropertyType::xlink__show = xlink__show;
		_p->wfs__MemberPropertyType::xlink__actuate = xlink__actuate;
		_p->wfs__MemberPropertyType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__MemberPropertyType(struct soap *soap, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MemberPropertyType", p->soap_type() == SOAP_TYPE_wfs__MemberPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__MemberPropertyType(struct soap *soap, const char *URL, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MemberPropertyType", p->soap_type() == SOAP_TYPE_wfs__MemberPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__MemberPropertyType(struct soap *soap, const char *URL, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MemberPropertyType", p->soap_type() == SOAP_TYPE_wfs__MemberPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__MemberPropertyType(struct soap *soap, const char *URL, wfs__MemberPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MemberPropertyType", p->soap_type() == SOAP_TYPE_wfs__MemberPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__MemberPropertyType * SOAP_FMAC4 soap_get_wfs__MemberPropertyType(struct soap*, wfs__MemberPropertyType *, const char*, const char*);

inline int soap_read_wfs__MemberPropertyType(struct soap *soap, wfs__MemberPropertyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__MemberPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__MemberPropertyType(struct soap *soap, const char *URL, wfs__MemberPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__MemberPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__MemberPropertyType(struct soap *soap, wfs__MemberPropertyType *p)
{
	if (::soap_read_wfs__MemberPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ValueCollectionType_DEFINED
#define SOAP_TYPE_wfs__ValueCollectionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ValueCollectionType(struct soap*, const char*, int, const wfs__ValueCollectionType *, const char*);
SOAP_FMAC3 wfs__ValueCollectionType * SOAP_FMAC4 soap_in_wfs__ValueCollectionType(struct soap*, const char*, wfs__ValueCollectionType *, const char*);
SOAP_FMAC1 wfs__ValueCollectionType * SOAP_FMAC2 soap_instantiate_wfs__ValueCollectionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ValueCollectionType * soap_new_wfs__ValueCollectionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ValueCollectionType(soap, n, NULL, NULL, NULL);
}

inline wfs__ValueCollectionType * soap_new_req_wfs__ValueCollectionType(
	struct soap *soap,
	time_t timeStamp,
	const std::string& numberMatched,
	ULONG64 numberReturned)
{
	wfs__ValueCollectionType *_p = ::soap_new_wfs__ValueCollectionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ValueCollectionType::timeStamp = timeStamp;
		_p->wfs__ValueCollectionType::numberMatched = numberMatched;
		_p->wfs__ValueCollectionType::numberReturned = numberReturned;
	}
	return _p;
}

inline wfs__ValueCollectionType * soap_new_set_wfs__ValueCollectionType(
	struct soap *soap,
	const std::vector<wfs__MemberPropertyType *> & member,
	_wfs__additionalValues *additionalValues,
	_wfs__truncatedResponse *truncatedResponse,
	time_t timeStamp,
	const std::string& numberMatched,
	ULONG64 numberReturned,
	char **next,
	char **previous,
	char *__item__1)
{
	wfs__ValueCollectionType *_p = ::soap_new_wfs__ValueCollectionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ValueCollectionType::member = member;
		_p->wfs__ValueCollectionType::additionalValues = additionalValues;
		_p->wfs__ValueCollectionType::truncatedResponse = truncatedResponse;
		_p->wfs__ValueCollectionType::timeStamp = timeStamp;
		_p->wfs__ValueCollectionType::numberMatched = numberMatched;
		_p->wfs__ValueCollectionType::numberReturned = numberReturned;
		_p->wfs__ValueCollectionType::next = next;
		_p->wfs__ValueCollectionType::previous = previous;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ValueCollectionType(struct soap *soap, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollectionType", p->soap_type() == SOAP_TYPE_wfs__ValueCollectionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ValueCollectionType(struct soap *soap, const char *URL, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollectionType", p->soap_type() == SOAP_TYPE_wfs__ValueCollectionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ValueCollectionType(struct soap *soap, const char *URL, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollectionType", p->soap_type() == SOAP_TYPE_wfs__ValueCollectionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ValueCollectionType(struct soap *soap, const char *URL, wfs__ValueCollectionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueCollectionType", p->soap_type() == SOAP_TYPE_wfs__ValueCollectionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ValueCollectionType * SOAP_FMAC4 soap_get_wfs__ValueCollectionType(struct soap*, wfs__ValueCollectionType *, const char*, const char*);

inline int soap_read_wfs__ValueCollectionType(struct soap *soap, wfs__ValueCollectionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ValueCollectionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ValueCollectionType(struct soap *soap, const char *URL, wfs__ValueCollectionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ValueCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ValueCollectionType(struct soap *soap, wfs__ValueCollectionType *p)
{
	if (::soap_read_wfs__ValueCollectionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__GetPropertyValueType_DEFINED
#define SOAP_TYPE_wfs__GetPropertyValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__GetPropertyValueType(struct soap*, const char*, int, const wfs__GetPropertyValueType *, const char*);
SOAP_FMAC3 wfs__GetPropertyValueType * SOAP_FMAC4 soap_in_wfs__GetPropertyValueType(struct soap*, const char*, wfs__GetPropertyValueType *, const char*);
SOAP_FMAC1 wfs__GetPropertyValueType * SOAP_FMAC2 soap_instantiate_wfs__GetPropertyValueType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__GetPropertyValueType * soap_new_wfs__GetPropertyValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__GetPropertyValueType(soap, n, NULL, NULL, NULL);
}

inline wfs__GetPropertyValueType * soap_new_req_wfs__GetPropertyValueType(
	struct soap *soap,
	const union _wfs__union_GetPropertyValueType& union_GetPropertyValueType,
	const std::string& valueReference,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__GetPropertyValueType *_p = ::soap_new_wfs__GetPropertyValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetPropertyValueType::union_GetPropertyValueType = union_GetPropertyValueType;
		_p->wfs__GetPropertyValueType::valueReference = valueReference;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__GetPropertyValueType * soap_new_set_wfs__GetPropertyValueType(
	struct soap *soap,
	int __unionAbstractQueryExpression,
	const union _wfs__union_GetPropertyValueType& union_GetPropertyValueType,
	const std::string& valueReference,
	std::string *resolvePath,
	ULONG64 startIndex,
	ULONG64 *count,
	enum wfs__ResultTypeType resultType,
	const std::string& outputFormat,
	enum wfs__ResolveValueType resolve,
	const std::string& resolveDepth,
	ULONG64 resolveTimeout,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__GetPropertyValueType *_p = ::soap_new_wfs__GetPropertyValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetPropertyValueType::__unionAbstractQueryExpression = __unionAbstractQueryExpression;
		_p->wfs__GetPropertyValueType::union_GetPropertyValueType = union_GetPropertyValueType;
		_p->wfs__GetPropertyValueType::valueReference = valueReference;
		_p->wfs__GetPropertyValueType::resolvePath = resolvePath;
		_p->wfs__GetPropertyValueType::startIndex = startIndex;
		_p->wfs__GetPropertyValueType::count = count;
		_p->wfs__GetPropertyValueType::resultType = resultType;
		_p->wfs__GetPropertyValueType::outputFormat = outputFormat;
		_p->wfs__GetPropertyValueType::resolve = resolve;
		_p->wfs__GetPropertyValueType::resolveDepth = resolveDepth;
		_p->wfs__GetPropertyValueType::resolveTimeout = resolveTimeout;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__GetPropertyValueType(struct soap *soap, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValueType", p->soap_type() == SOAP_TYPE_wfs__GetPropertyValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__GetPropertyValueType(struct soap *soap, const char *URL, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValueType", p->soap_type() == SOAP_TYPE_wfs__GetPropertyValueType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__GetPropertyValueType(struct soap *soap, const char *URL, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValueType", p->soap_type() == SOAP_TYPE_wfs__GetPropertyValueType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__GetPropertyValueType(struct soap *soap, const char *URL, wfs__GetPropertyValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetPropertyValueType", p->soap_type() == SOAP_TYPE_wfs__GetPropertyValueType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__GetPropertyValueType * SOAP_FMAC4 soap_get_wfs__GetPropertyValueType(struct soap*, wfs__GetPropertyValueType *, const char*, const char*);

inline int soap_read_wfs__GetPropertyValueType(struct soap *soap, wfs__GetPropertyValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__GetPropertyValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__GetPropertyValueType(struct soap *soap, const char *URL, wfs__GetPropertyValueType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__GetPropertyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__GetPropertyValueType(struct soap *soap, wfs__GetPropertyValueType *p)
{
	if (::soap_read_wfs__GetPropertyValueType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__DescribeFeatureTypeType_DEFINED
#define SOAP_TYPE_wfs__DescribeFeatureTypeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__DescribeFeatureTypeType(struct soap*, const char*, int, const wfs__DescribeFeatureTypeType *, const char*);
SOAP_FMAC3 wfs__DescribeFeatureTypeType * SOAP_FMAC4 soap_in_wfs__DescribeFeatureTypeType(struct soap*, const char*, wfs__DescribeFeatureTypeType *, const char*);
SOAP_FMAC1 wfs__DescribeFeatureTypeType * SOAP_FMAC2 soap_instantiate_wfs__DescribeFeatureTypeType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__DescribeFeatureTypeType * soap_new_wfs__DescribeFeatureTypeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__DescribeFeatureTypeType(soap, n, NULL, NULL, NULL);
}

inline wfs__DescribeFeatureTypeType * soap_new_req_wfs__DescribeFeatureTypeType(
	struct soap *soap,
	const std::string& service__1,
	const std::string& version__1)
{
	wfs__DescribeFeatureTypeType *_p = ::soap_new_wfs__DescribeFeatureTypeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
	}
	return _p;
}

inline wfs__DescribeFeatureTypeType * soap_new_set_wfs__DescribeFeatureTypeType(
	struct soap *soap,
	const std::vector<char *> & TypeName,
	const std::string& outputFormat,
	const std::string& service__1,
	const std::string& version__1,
	std::string *handle__1,
	char *__item__2)
{
	wfs__DescribeFeatureTypeType *_p = ::soap_new_wfs__DescribeFeatureTypeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__DescribeFeatureTypeType::TypeName = TypeName;
		_p->wfs__DescribeFeatureTypeType::outputFormat = outputFormat;
		_p->wfs__BaseRequestType::service = service__1;
		_p->wfs__BaseRequestType::version = version__1;
		_p->wfs__BaseRequestType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__DescribeFeatureTypeType(struct soap *soap, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__DescribeFeatureTypeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__DescribeFeatureTypeType(struct soap *soap, const char *URL, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__DescribeFeatureTypeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__DescribeFeatureTypeType(struct soap *soap, const char *URL, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__DescribeFeatureTypeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__DescribeFeatureTypeType(struct soap *soap, const char *URL, wfs__DescribeFeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:DescribeFeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__DescribeFeatureTypeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__DescribeFeatureTypeType * SOAP_FMAC4 soap_get_wfs__DescribeFeatureTypeType(struct soap*, wfs__DescribeFeatureTypeType *, const char*, const char*);

inline int soap_read_wfs__DescribeFeatureTypeType(struct soap *soap, wfs__DescribeFeatureTypeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__DescribeFeatureTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__DescribeFeatureTypeType(struct soap *soap, const char *URL, wfs__DescribeFeatureTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__DescribeFeatureTypeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__DescribeFeatureTypeType(struct soap *soap, wfs__DescribeFeatureTypeType *p)
{
	if (::soap_read_wfs__DescribeFeatureTypeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ValueListType_DEFINED
#define SOAP_TYPE_wfs__ValueListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ValueListType(struct soap*, const char*, int, const wfs__ValueListType *, const char*);
SOAP_FMAC3 wfs__ValueListType * SOAP_FMAC4 soap_in_wfs__ValueListType(struct soap*, const char*, wfs__ValueListType *, const char*);
SOAP_FMAC1 wfs__ValueListType * SOAP_FMAC2 soap_instantiate_wfs__ValueListType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ValueListType * soap_new_wfs__ValueListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ValueListType(soap, n, NULL, NULL, NULL);
}

inline wfs__ValueListType * soap_new_req_wfs__ValueListType(
	struct soap *soap)
{
	wfs__ValueListType *_p = ::soap_new_wfs__ValueListType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__ValueListType * soap_new_set_wfs__ValueListType(
	struct soap *soap,
	const std::vector<struct __wfs__ValueListType_sequence> & __ValueListType_sequence,
	char *__item__1)
{
	wfs__ValueListType *_p = ::soap_new_wfs__ValueListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ValueListType::__ValueListType_sequence = __ValueListType_sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ValueListType(struct soap *soap, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueListType", p->soap_type() == SOAP_TYPE_wfs__ValueListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ValueListType(struct soap *soap, const char *URL, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueListType", p->soap_type() == SOAP_TYPE_wfs__ValueListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ValueListType(struct soap *soap, const char *URL, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueListType", p->soap_type() == SOAP_TYPE_wfs__ValueListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ValueListType(struct soap *soap, const char *URL, wfs__ValueListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ValueListType", p->soap_type() == SOAP_TYPE_wfs__ValueListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ValueListType * SOAP_FMAC4 soap_get_wfs__ValueListType(struct soap*, wfs__ValueListType *, const char*, const char*);

inline int soap_read_wfs__ValueListType(struct soap *soap, wfs__ValueListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ValueListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ValueListType(struct soap *soap, const char *URL, wfs__ValueListType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ValueListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ValueListType(struct soap *soap, wfs__ValueListType *p)
{
	if (::soap_read_wfs__ValueListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ElementType_DEFINED
#define SOAP_TYPE_wfs__ElementType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ElementType(struct soap*, const char*, int, const wfs__ElementType *, const char*);
SOAP_FMAC3 wfs__ElementType * SOAP_FMAC4 soap_in_wfs__ElementType(struct soap*, const char*, wfs__ElementType *, const char*);
SOAP_FMAC1 wfs__ElementType * SOAP_FMAC2 soap_instantiate_wfs__ElementType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ElementType * soap_new_wfs__ElementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ElementType(soap, n, NULL, NULL, NULL);
}

inline wfs__ElementType * soap_new_req_wfs__ElementType(
	struct soap *soap,
	ows__MetadataType *ows__Metadata,
	wfs__ValueListType *ValueList,
	const std::string& name,
	char *type)
{
	wfs__ElementType *_p = ::soap_new_wfs__ElementType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ElementType::ows__Metadata = ows__Metadata;
		_p->wfs__ElementType::ValueList = ValueList;
		_p->wfs__ElementType::name = name;
		_p->wfs__ElementType::type = type;
	}
	return _p;
}

inline wfs__ElementType * soap_new_set_wfs__ElementType(
	struct soap *soap,
	ows__MetadataType *ows__Metadata,
	wfs__ValueListType *ValueList,
	const std::string& name,
	char *type,
	char *__item__1)
{
	wfs__ElementType *_p = ::soap_new_wfs__ElementType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ElementType::ows__Metadata = ows__Metadata;
		_p->wfs__ElementType::ValueList = ValueList;
		_p->wfs__ElementType::name = name;
		_p->wfs__ElementType::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ElementType(struct soap *soap, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ElementType", p->soap_type() == SOAP_TYPE_wfs__ElementType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ElementType(struct soap *soap, const char *URL, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ElementType", p->soap_type() == SOAP_TYPE_wfs__ElementType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ElementType(struct soap *soap, const char *URL, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ElementType", p->soap_type() == SOAP_TYPE_wfs__ElementType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ElementType(struct soap *soap, const char *URL, wfs__ElementType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ElementType", p->soap_type() == SOAP_TYPE_wfs__ElementType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ElementType * SOAP_FMAC4 soap_get_wfs__ElementType(struct soap*, wfs__ElementType *, const char*, const char*);

inline int soap_read_wfs__ElementType(struct soap *soap, wfs__ElementType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ElementType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ElementType(struct soap *soap, const char *URL, wfs__ElementType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ElementType(struct soap *soap, wfs__ElementType *p)
{
	if (::soap_read_wfs__ElementType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ExtendedDescriptionType_DEFINED
#define SOAP_TYPE_wfs__ExtendedDescriptionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ExtendedDescriptionType(struct soap*, const char*, int, const wfs__ExtendedDescriptionType *, const char*);
SOAP_FMAC3 wfs__ExtendedDescriptionType * SOAP_FMAC4 soap_in_wfs__ExtendedDescriptionType(struct soap*, const char*, wfs__ExtendedDescriptionType *, const char*);
SOAP_FMAC1 wfs__ExtendedDescriptionType * SOAP_FMAC2 soap_instantiate_wfs__ExtendedDescriptionType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ExtendedDescriptionType * soap_new_wfs__ExtendedDescriptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ExtendedDescriptionType(soap, n, NULL, NULL, NULL);
}

inline wfs__ExtendedDescriptionType * soap_new_req_wfs__ExtendedDescriptionType(
	struct soap *soap,
	const std::vector<wfs__ElementType *> & Element)
{
	wfs__ExtendedDescriptionType *_p = ::soap_new_wfs__ExtendedDescriptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ExtendedDescriptionType::Element = Element;
	}
	return _p;
}

inline wfs__ExtendedDescriptionType * soap_new_set_wfs__ExtendedDescriptionType(
	struct soap *soap,
	const std::vector<wfs__ElementType *> & Element,
	char *__item__1)
{
	wfs__ExtendedDescriptionType *_p = ::soap_new_wfs__ExtendedDescriptionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ExtendedDescriptionType::Element = Element;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ExtendedDescriptionType(struct soap *soap, wfs__ExtendedDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExtendedDescriptionType", p->soap_type() == SOAP_TYPE_wfs__ExtendedDescriptionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ExtendedDescriptionType(struct soap *soap, const char *URL, wfs__ExtendedDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExtendedDescriptionType", p->soap_type() == SOAP_TYPE_wfs__ExtendedDescriptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ExtendedDescriptionType(struct soap *soap, const char *URL, wfs__ExtendedDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExtendedDescriptionType", p->soap_type() == SOAP_TYPE_wfs__ExtendedDescriptionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ExtendedDescriptionType(struct soap *soap, const char *URL, wfs__ExtendedDescriptionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ExtendedDescriptionType", p->soap_type() == SOAP_TYPE_wfs__ExtendedDescriptionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ExtendedDescriptionType * SOAP_FMAC4 soap_get_wfs__ExtendedDescriptionType(struct soap*, wfs__ExtendedDescriptionType *, const char*, const char*);

inline int soap_read_wfs__ExtendedDescriptionType(struct soap *soap, wfs__ExtendedDescriptionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ExtendedDescriptionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ExtendedDescriptionType(struct soap *soap, const char *URL, wfs__ExtendedDescriptionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ExtendedDescriptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ExtendedDescriptionType(struct soap *soap, wfs__ExtendedDescriptionType *p)
{
	if (::soap_read_wfs__ExtendedDescriptionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__MetadataURLType_DEFINED
#define SOAP_TYPE_wfs__MetadataURLType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__MetadataURLType(struct soap*, const char*, int, const wfs__MetadataURLType *, const char*);
SOAP_FMAC3 wfs__MetadataURLType * SOAP_FMAC4 soap_in_wfs__MetadataURLType(struct soap*, const char*, wfs__MetadataURLType *, const char*);
SOAP_FMAC1 wfs__MetadataURLType * SOAP_FMAC2 soap_instantiate_wfs__MetadataURLType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__MetadataURLType * soap_new_wfs__MetadataURLType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__MetadataURLType(soap, n, NULL, NULL, NULL);
}

inline wfs__MetadataURLType * soap_new_req_wfs__MetadataURLType(
	struct soap *soap)
{
	wfs__MetadataURLType *_p = ::soap_new_wfs__MetadataURLType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__MetadataURLType * soap_new_set_wfs__MetadataURLType(
	struct soap *soap,
	char **about,
	enum xlink__typeType xlink__type,
	char **xlink__href,
	char **xlink__role,
	char **xlink__arcrole,
	std::string *xlink__title,
	enum xlink__showType *xlink__show,
	enum xlink__actuateType *xlink__actuate,
	char *__item__1)
{
	wfs__MetadataURLType *_p = ::soap_new_wfs__MetadataURLType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__MetadataURLType::about = about;
		_p->wfs__MetadataURLType::xlink__type = xlink__type;
		_p->wfs__MetadataURLType::xlink__href = xlink__href;
		_p->wfs__MetadataURLType::xlink__role = xlink__role;
		_p->wfs__MetadataURLType::xlink__arcrole = xlink__arcrole;
		_p->wfs__MetadataURLType::xlink__title = xlink__title;
		_p->wfs__MetadataURLType::xlink__show = xlink__show;
		_p->wfs__MetadataURLType::xlink__actuate = xlink__actuate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__MetadataURLType(struct soap *soap, wfs__MetadataURLType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MetadataURLType", p->soap_type() == SOAP_TYPE_wfs__MetadataURLType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__MetadataURLType(struct soap *soap, const char *URL, wfs__MetadataURLType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MetadataURLType", p->soap_type() == SOAP_TYPE_wfs__MetadataURLType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__MetadataURLType(struct soap *soap, const char *URL, wfs__MetadataURLType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MetadataURLType", p->soap_type() == SOAP_TYPE_wfs__MetadataURLType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__MetadataURLType(struct soap *soap, const char *URL, wfs__MetadataURLType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:MetadataURLType", p->soap_type() == SOAP_TYPE_wfs__MetadataURLType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__MetadataURLType * SOAP_FMAC4 soap_get_wfs__MetadataURLType(struct soap*, wfs__MetadataURLType *, const char*, const char*);

inline int soap_read_wfs__MetadataURLType(struct soap *soap, wfs__MetadataURLType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__MetadataURLType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__MetadataURLType(struct soap *soap, const char *URL, wfs__MetadataURLType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__MetadataURLType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__MetadataURLType(struct soap *soap, wfs__MetadataURLType *p)
{
	if (::soap_read_wfs__MetadataURLType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__OutputFormatListType_DEFINED
#define SOAP_TYPE_wfs__OutputFormatListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__OutputFormatListType(struct soap*, const char*, int, const wfs__OutputFormatListType *, const char*);
SOAP_FMAC3 wfs__OutputFormatListType * SOAP_FMAC4 soap_in_wfs__OutputFormatListType(struct soap*, const char*, wfs__OutputFormatListType *, const char*);
SOAP_FMAC1 wfs__OutputFormatListType * SOAP_FMAC2 soap_instantiate_wfs__OutputFormatListType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__OutputFormatListType * soap_new_wfs__OutputFormatListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__OutputFormatListType(soap, n, NULL, NULL, NULL);
}

inline wfs__OutputFormatListType * soap_new_req_wfs__OutputFormatListType(
	struct soap *soap)
{
	wfs__OutputFormatListType *_p = ::soap_new_wfs__OutputFormatListType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__OutputFormatListType * soap_new_set_wfs__OutputFormatListType(
	struct soap *soap,
	const std::vector<struct __wfs__OutputFormatListType_sequence> & __OutputFormatListType_sequence,
	char *__item__1)
{
	wfs__OutputFormatListType *_p = ::soap_new_wfs__OutputFormatListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__OutputFormatListType::__OutputFormatListType_sequence = __OutputFormatListType_sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__OutputFormatListType(struct soap *soap, wfs__OutputFormatListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:OutputFormatListType", p->soap_type() == SOAP_TYPE_wfs__OutputFormatListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__OutputFormatListType(struct soap *soap, const char *URL, wfs__OutputFormatListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:OutputFormatListType", p->soap_type() == SOAP_TYPE_wfs__OutputFormatListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__OutputFormatListType(struct soap *soap, const char *URL, wfs__OutputFormatListType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:OutputFormatListType", p->soap_type() == SOAP_TYPE_wfs__OutputFormatListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__OutputFormatListType(struct soap *soap, const char *URL, wfs__OutputFormatListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:OutputFormatListType", p->soap_type() == SOAP_TYPE_wfs__OutputFormatListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__OutputFormatListType * SOAP_FMAC4 soap_get_wfs__OutputFormatListType(struct soap*, wfs__OutputFormatListType *, const char*, const char*);

inline int soap_read_wfs__OutputFormatListType(struct soap *soap, wfs__OutputFormatListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__OutputFormatListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__OutputFormatListType(struct soap *soap, const char *URL, wfs__OutputFormatListType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__OutputFormatListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__OutputFormatListType(struct soap *soap, wfs__OutputFormatListType *p)
{
	if (::soap_read_wfs__OutputFormatListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__FeatureTypeType_DEFINED
#define SOAP_TYPE_wfs__FeatureTypeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__FeatureTypeType(struct soap*, const char*, int, const wfs__FeatureTypeType *, const char*);
SOAP_FMAC3 wfs__FeatureTypeType * SOAP_FMAC4 soap_in_wfs__FeatureTypeType(struct soap*, const char*, wfs__FeatureTypeType *, const char*);
SOAP_FMAC1 wfs__FeatureTypeType * SOAP_FMAC2 soap_instantiate_wfs__FeatureTypeType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__FeatureTypeType * soap_new_wfs__FeatureTypeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__FeatureTypeType(soap, n, NULL, NULL, NULL);
}

inline wfs__FeatureTypeType * soap_new_req_wfs__FeatureTypeType(
	struct soap *soap,
	char *Name)
{
	wfs__FeatureTypeType *_p = ::soap_new_wfs__FeatureTypeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeatureTypeType::Name = Name;
	}
	return _p;
}

inline wfs__FeatureTypeType * soap_new_set_wfs__FeatureTypeType(
	struct soap *soap,
	char *Name,
	const std::vector<_wfs__Title *> & Title,
	const std::vector<_wfs__Abstract *> & Abstract,
	const std::vector<ows__KeywordsType *> & ows__Keywords,
	char **DefaultCRS,
	const std::vector<char *> & OtherCRS,
	_wfs__FeatureTypeType_NoCRS *NoCRS,
	wfs__OutputFormatListType *OutputFormats,
	const std::vector<ows__WGS84BoundingBoxType *> & ows__WGS84BoundingBox,
	const std::vector<wfs__MetadataURLType *> & MetadataURL,
	wfs__ExtendedDescriptionType *ExtendedDescription,
	char *__item__1)
{
	wfs__FeatureTypeType *_p = ::soap_new_wfs__FeatureTypeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeatureTypeType::Name = Name;
		_p->wfs__FeatureTypeType::Title = Title;
		_p->wfs__FeatureTypeType::Abstract = Abstract;
		_p->wfs__FeatureTypeType::ows__Keywords = ows__Keywords;
		_p->wfs__FeatureTypeType::DefaultCRS = DefaultCRS;
		_p->wfs__FeatureTypeType::OtherCRS = OtherCRS;
		_p->wfs__FeatureTypeType::NoCRS = NoCRS;
		_p->wfs__FeatureTypeType::OutputFormats = OutputFormats;
		_p->wfs__FeatureTypeType::ows__WGS84BoundingBox = ows__WGS84BoundingBox;
		_p->wfs__FeatureTypeType::MetadataURL = MetadataURL;
		_p->wfs__FeatureTypeType::ExtendedDescription = ExtendedDescription;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__FeatureTypeType(struct soap *soap, wfs__FeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__FeatureTypeType(struct soap *soap, const char *URL, wfs__FeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__FeatureTypeType(struct soap *soap, const char *URL, wfs__FeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__FeatureTypeType(struct soap *soap, const char *URL, wfs__FeatureTypeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__FeatureTypeType * SOAP_FMAC4 soap_get_wfs__FeatureTypeType(struct soap*, wfs__FeatureTypeType *, const char*, const char*);

inline int soap_read_wfs__FeatureTypeType(struct soap *soap, wfs__FeatureTypeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__FeatureTypeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__FeatureTypeType(struct soap *soap, const char *URL, wfs__FeatureTypeType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__FeatureTypeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__FeatureTypeType(struct soap *soap, wfs__FeatureTypeType *p)
{
	if (::soap_read_wfs__FeatureTypeType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__FeatureTypeListType_DEFINED
#define SOAP_TYPE_wfs__FeatureTypeListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__FeatureTypeListType(struct soap*, const char*, int, const wfs__FeatureTypeListType *, const char*);
SOAP_FMAC3 wfs__FeatureTypeListType * SOAP_FMAC4 soap_in_wfs__FeatureTypeListType(struct soap*, const char*, wfs__FeatureTypeListType *, const char*);
SOAP_FMAC1 wfs__FeatureTypeListType * SOAP_FMAC2 soap_instantiate_wfs__FeatureTypeListType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__FeatureTypeListType * soap_new_wfs__FeatureTypeListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__FeatureTypeListType(soap, n, NULL, NULL, NULL);
}

inline wfs__FeatureTypeListType * soap_new_req_wfs__FeatureTypeListType(
	struct soap *soap,
	const std::vector<wfs__FeatureTypeType *> & FeatureType)
{
	wfs__FeatureTypeListType *_p = ::soap_new_wfs__FeatureTypeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeatureTypeListType::FeatureType = FeatureType;
	}
	return _p;
}

inline wfs__FeatureTypeListType * soap_new_set_wfs__FeatureTypeListType(
	struct soap *soap,
	const std::vector<wfs__FeatureTypeType *> & FeatureType,
	char *__item__1)
{
	wfs__FeatureTypeListType *_p = ::soap_new_wfs__FeatureTypeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__FeatureTypeListType::FeatureType = FeatureType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__FeatureTypeListType(struct soap *soap, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeListType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__FeatureTypeListType(struct soap *soap, const char *URL, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeListType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__FeatureTypeListType(struct soap *soap, const char *URL, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeListType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__FeatureTypeListType(struct soap *soap, const char *URL, wfs__FeatureTypeListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:FeatureTypeListType", p->soap_type() == SOAP_TYPE_wfs__FeatureTypeListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__FeatureTypeListType * SOAP_FMAC4 soap_get_wfs__FeatureTypeListType(struct soap*, wfs__FeatureTypeListType *, const char*, const char*);

inline int soap_read_wfs__FeatureTypeListType(struct soap *soap, wfs__FeatureTypeListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__FeatureTypeListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__FeatureTypeListType(struct soap *soap, const char *URL, wfs__FeatureTypeListType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__FeatureTypeListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__FeatureTypeListType(struct soap *soap, wfs__FeatureTypeListType *p)
{
	if (::soap_read_wfs__FeatureTypeListType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__WFS_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_wfs__WFS_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__WFS_x005fCapabilitiesType(struct soap*, const char*, int, const wfs__WFS_x005fCapabilitiesType *, const char*);
SOAP_FMAC3 wfs__WFS_x005fCapabilitiesType * SOAP_FMAC4 soap_in_wfs__WFS_x005fCapabilitiesType(struct soap*, const char*, wfs__WFS_x005fCapabilitiesType *, const char*);
SOAP_FMAC1 wfs__WFS_x005fCapabilitiesType * SOAP_FMAC2 soap_instantiate_wfs__WFS_x005fCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__WFS_x005fCapabilitiesType * soap_new_wfs__WFS_x005fCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__WFS_x005fCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline wfs__WFS_x005fCapabilitiesType * soap_new_req_wfs__WFS_x005fCapabilitiesType(
	struct soap *soap,
	const std::string& version__1)
{
	wfs__WFS_x005fCapabilitiesType *_p = ::soap_new_wfs__WFS_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ows__CapabilitiesBaseType::version = version__1;
	}
	return _p;
}

inline wfs__WFS_x005fCapabilitiesType * soap_new_set_wfs__WFS_x005fCapabilitiesType(
	struct soap *soap,
	_wfs__WFS_x005fCapabilitiesType_WSDL *WSDL,
	wfs__FeatureTypeListType *FeatureTypeList,
	_fes__Filter_x005fCapabilities *fes__Filter_x005fCapabilities,
	_ows__ServiceIdentification *ServiceIdentification__1,
	_ows__ServiceProvider *ServiceProvider__1,
	_ows__OperationsMetadata *OperationsMetadata__1,
	const std::string& version__1,
	std::string *updateSequence__1,
	char *__item__2)
{
	wfs__WFS_x005fCapabilitiesType *_p = ::soap_new_wfs__WFS_x005fCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__WFS_x005fCapabilitiesType::WSDL = WSDL;
		_p->wfs__WFS_x005fCapabilitiesType::FeatureTypeList = FeatureTypeList;
		_p->wfs__WFS_x005fCapabilitiesType::fes__Filter_x005fCapabilities = fes__Filter_x005fCapabilities;
		_p->ows__CapabilitiesBaseType::ServiceIdentification = ServiceIdentification__1;
		_p->ows__CapabilitiesBaseType::ServiceProvider = ServiceProvider__1;
		_p->ows__CapabilitiesBaseType::OperationsMetadata = OperationsMetadata__1;
		_p->ows__CapabilitiesBaseType::version = version__1;
		_p->ows__CapabilitiesBaseType::updateSequence = updateSequence__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__WFS_x005fCapabilitiesType(struct soap *soap, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__WFS_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__WFS_x005fCapabilitiesType(struct soap *soap, const char *URL, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__WFS_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__WFS_x005fCapabilitiesType(struct soap *soap, const char *URL, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__WFS_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__WFS_x005fCapabilitiesType(struct soap *soap, const char *URL, wfs__WFS_x005fCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:WFS_CapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__WFS_x005fCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__WFS_x005fCapabilitiesType * SOAP_FMAC4 soap_get_wfs__WFS_x005fCapabilitiesType(struct soap*, wfs__WFS_x005fCapabilitiesType *, const char*, const char*);

inline int soap_read_wfs__WFS_x005fCapabilitiesType(struct soap *soap, wfs__WFS_x005fCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__WFS_x005fCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__WFS_x005fCapabilitiesType(struct soap *soap, const char *URL, wfs__WFS_x005fCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__WFS_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__WFS_x005fCapabilitiesType(struct soap *soap, wfs__WFS_x005fCapabilitiesType *p)
{
	if (::soap_read_wfs__WFS_x005fCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__GetCapabilitiesType_DEFINED
#define SOAP_TYPE_wfs__GetCapabilitiesType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__GetCapabilitiesType(struct soap*, const char*, int, const wfs__GetCapabilitiesType *, const char*);
SOAP_FMAC3 wfs__GetCapabilitiesType * SOAP_FMAC4 soap_in_wfs__GetCapabilitiesType(struct soap*, const char*, wfs__GetCapabilitiesType *, const char*);
SOAP_FMAC1 wfs__GetCapabilitiesType * SOAP_FMAC2 soap_instantiate_wfs__GetCapabilitiesType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__GetCapabilitiesType * soap_new_wfs__GetCapabilitiesType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__GetCapabilitiesType(soap, n, NULL, NULL, NULL);
}

inline wfs__GetCapabilitiesType * soap_new_req_wfs__GetCapabilitiesType(
	struct soap *soap,
	const std::string& service)
{
	wfs__GetCapabilitiesType *_p = ::soap_new_wfs__GetCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetCapabilitiesType::service = service;
	}
	return _p;
}

inline wfs__GetCapabilitiesType * soap_new_set_wfs__GetCapabilitiesType(
	struct soap *soap,
	const std::string& service,
	ows__AcceptVersionsType *AcceptVersions__1,
	ows__SectionsType *Sections__1,
	ows__AcceptFormatsType *AcceptFormats__1,
	std::string *updateSequence__1,
	char *__item__2)
{
	wfs__GetCapabilitiesType *_p = ::soap_new_wfs__GetCapabilitiesType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__GetCapabilitiesType::service = service;
		_p->ows__GetCapabilitiesType::AcceptVersions = AcceptVersions__1;
		_p->ows__GetCapabilitiesType::Sections = Sections__1;
		_p->ows__GetCapabilitiesType::AcceptFormats = AcceptFormats__1;
		_p->ows__GetCapabilitiesType::updateSequence = updateSequence__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__GetCapabilitiesType(struct soap *soap, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__GetCapabilitiesType(struct soap *soap, const char *URL, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__GetCapabilitiesType(struct soap *soap, const char *URL, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__GetCapabilitiesType(struct soap *soap, const char *URL, wfs__GetCapabilitiesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:GetCapabilitiesType", p->soap_type() == SOAP_TYPE_wfs__GetCapabilitiesType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__GetCapabilitiesType * SOAP_FMAC4 soap_get_wfs__GetCapabilitiesType(struct soap*, wfs__GetCapabilitiesType *, const char*, const char*);

inline int soap_read_wfs__GetCapabilitiesType(struct soap *soap, wfs__GetCapabilitiesType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__GetCapabilitiesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__GetCapabilitiesType(struct soap *soap, const char *URL, wfs__GetCapabilitiesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__GetCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__GetCapabilitiesType(struct soap *soap, wfs__GetCapabilitiesType *p)
{
	if (::soap_read_wfs__GetCapabilitiesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__ParameterType_DEFINED
#define SOAP_TYPE_wfs__ParameterType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__ParameterType(struct soap*, const char*, int, const wfs__ParameterType *, const char*);
SOAP_FMAC3 wfs__ParameterType * SOAP_FMAC4 soap_in_wfs__ParameterType(struct soap*, const char*, wfs__ParameterType *, const char*);
SOAP_FMAC1 wfs__ParameterType * SOAP_FMAC2 soap_instantiate_wfs__ParameterType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__ParameterType * soap_new_wfs__ParameterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__ParameterType(soap, n, NULL, NULL, NULL);
}

inline wfs__ParameterType * soap_new_req_wfs__ParameterType(
	struct soap *soap,
	const std::string& name)
{
	wfs__ParameterType *_p = ::soap_new_wfs__ParameterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ParameterType::name = name;
	}
	return _p;
}

inline wfs__ParameterType * soap_new_set_wfs__ParameterType(
	struct soap *soap,
	char *__any,
	const std::string& name,
	char *__mixed,
	char *__item__1)
{
	wfs__ParameterType *_p = ::soap_new_wfs__ParameterType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__ParameterType::__any = __any;
		_p->wfs__ParameterType::name = name;
		_p->wfs__ParameterType::__mixed = __mixed;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__ParameterType(struct soap *soap, wfs__ParameterType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterType", p->soap_type() == SOAP_TYPE_wfs__ParameterType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__ParameterType(struct soap *soap, const char *URL, wfs__ParameterType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterType", p->soap_type() == SOAP_TYPE_wfs__ParameterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__ParameterType(struct soap *soap, const char *URL, wfs__ParameterType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterType", p->soap_type() == SOAP_TYPE_wfs__ParameterType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__ParameterType(struct soap *soap, const char *URL, wfs__ParameterType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:ParameterType", p->soap_type() == SOAP_TYPE_wfs__ParameterType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__ParameterType * SOAP_FMAC4 soap_get_wfs__ParameterType(struct soap*, wfs__ParameterType *, const char*, const char*);

inline int soap_read_wfs__ParameterType(struct soap *soap, wfs__ParameterType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__ParameterType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__ParameterType(struct soap *soap, const char *URL, wfs__ParameterType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__ParameterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__ParameterType(struct soap *soap, wfs__ParameterType *p)
{
	if (::soap_read_wfs__ParameterType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__StoredQueryType_DEFINED
#define SOAP_TYPE_wfs__StoredQueryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__StoredQueryType(struct soap*, const char*, int, const wfs__StoredQueryType *, const char*);
SOAP_FMAC3 wfs__StoredQueryType * SOAP_FMAC4 soap_in_wfs__StoredQueryType(struct soap*, const char*, wfs__StoredQueryType *, const char*);
SOAP_FMAC1 wfs__StoredQueryType * SOAP_FMAC2 soap_instantiate_wfs__StoredQueryType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__StoredQueryType * soap_new_wfs__StoredQueryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__StoredQueryType(soap, n, NULL, NULL, NULL);
}

inline wfs__StoredQueryType * soap_new_req_wfs__StoredQueryType(
	struct soap *soap,
	char *id)
{
	wfs__StoredQueryType *_p = ::soap_new_wfs__StoredQueryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StoredQueryType::id = id;
	}
	return _p;
}

inline wfs__StoredQueryType * soap_new_set_wfs__StoredQueryType(
	struct soap *soap,
	const std::vector<wfs__ParameterType *> & Parameter,
	char *id,
	std::string *handle__1,
	char *__item__2)
{
	wfs__StoredQueryType *_p = ::soap_new_wfs__StoredQueryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StoredQueryType::Parameter = Parameter;
		_p->wfs__StoredQueryType::id = id;
		_p->fes__AbstractQueryExpressionType::handle = handle__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_wfs__StoredQueryType(struct soap *soap, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__StoredQueryType(struct soap *soap, const char *URL, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__StoredQueryType(struct soap *soap, const char *URL, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__StoredQueryType(struct soap *soap, const char *URL, wfs__StoredQueryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__StoredQueryType * SOAP_FMAC4 soap_get_wfs__StoredQueryType(struct soap*, wfs__StoredQueryType *, const char*, const char*);

inline int soap_read_wfs__StoredQueryType(struct soap *soap, wfs__StoredQueryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__StoredQueryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__StoredQueryType(struct soap *soap, const char *URL, wfs__StoredQueryType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__StoredQueryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__StoredQueryType(struct soap *soap, wfs__StoredQueryType *p)
{
	if (::soap_read_wfs__StoredQueryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__StoredQueryPropertyType_DEFINED
#define SOAP_TYPE_wfs__StoredQueryPropertyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__StoredQueryPropertyType(struct soap*, const char*, int, const wfs__StoredQueryPropertyType *, const char*);
SOAP_FMAC3 wfs__StoredQueryPropertyType * SOAP_FMAC4 soap_in_wfs__StoredQueryPropertyType(struct soap*, const char*, wfs__StoredQueryPropertyType *, const char*);
SOAP_FMAC1 wfs__StoredQueryPropertyType * SOAP_FMAC2 soap_instantiate_wfs__StoredQueryPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__StoredQueryPropertyType * soap_new_wfs__StoredQueryPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__StoredQueryPropertyType(soap, n, NULL, NULL, NULL);
}

inline wfs__StoredQueryPropertyType * soap_new_req_wfs__StoredQueryPropertyType(
	struct soap *soap)
{
	wfs__StoredQueryPropertyType *_p = ::soap_new_wfs__StoredQueryPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__StoredQueryPropertyType * soap_new_set_wfs__StoredQueryPropertyType(
	struct soap *soap,
	struct __wfs__StoredQueryPropertyType_sequence *__StoredQueryPropertyType_sequence,
	char *__item__1)
{
	wfs__StoredQueryPropertyType *_p = ::soap_new_wfs__StoredQueryPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__StoredQueryPropertyType::__StoredQueryPropertyType_sequence = __StoredQueryPropertyType_sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__StoredQueryPropertyType(struct soap *soap, wfs__StoredQueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__StoredQueryPropertyType(struct soap *soap, const char *URL, wfs__StoredQueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__StoredQueryPropertyType(struct soap *soap, const char *URL, wfs__StoredQueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__StoredQueryPropertyType(struct soap *soap, const char *URL, wfs__StoredQueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:StoredQueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__StoredQueryPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__StoredQueryPropertyType * SOAP_FMAC4 soap_get_wfs__StoredQueryPropertyType(struct soap*, wfs__StoredQueryPropertyType *, const char*, const char*);

inline int soap_read_wfs__StoredQueryPropertyType(struct soap *soap, wfs__StoredQueryPropertyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__StoredQueryPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__StoredQueryPropertyType(struct soap *soap, const char *URL, wfs__StoredQueryPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__StoredQueryPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__StoredQueryPropertyType(struct soap *soap, wfs__StoredQueryPropertyType *p)
{
	if (::soap_read_wfs__StoredQueryPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__QueryType_DEFINED
#define SOAP_TYPE_wfs__QueryType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__QueryType(struct soap*, const char*, int, const wfs__QueryType *, const char*);
SOAP_FMAC3 wfs__QueryType * SOAP_FMAC4 soap_in_wfs__QueryType(struct soap*, const char*, wfs__QueryType *, const char*);
SOAP_FMAC1 wfs__QueryType * SOAP_FMAC2 soap_instantiate_wfs__QueryType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__QueryType * soap_new_wfs__QueryType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__QueryType(soap, n, NULL, NULL, NULL);
}

inline wfs__QueryType * soap_new_req_wfs__QueryType(
	struct soap *soap,
	int __sizeAbstractProjectionClause__1,
	__fes__union_AbstractAdhocQueryExpressionType *__union_AbstractAdhocQueryExpressionType__1,
	const union _fes__union_AbstractAdhocQueryExpressionType_& union_AbstractAdhocQueryExpressionType___1,
	const union _fes__union_AbstractAdhocQueryExpressionType__& union_AbstractAdhocQueryExpressionType____1,
	const std::string& typeNames__1)
{
	wfs__QueryType *_p = ::soap_new_wfs__QueryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->fes__AbstractAdhocQueryExpressionType::__sizeAbstractProjectionClause = __sizeAbstractProjectionClause__1;
		_p->fes__AbstractAdhocQueryExpressionType::__union_AbstractAdhocQueryExpressionType = __union_AbstractAdhocQueryExpressionType__1;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType_ = union_AbstractAdhocQueryExpressionType___1;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType__ = union_AbstractAdhocQueryExpressionType____1;
		_p->fes__AbstractAdhocQueryExpressionType::typeNames = typeNames__1;
	}
	return _p;
}

inline wfs__QueryType * soap_new_set_wfs__QueryType(
	struct soap *soap,
	char **srsName,
	std::string *featureVersion,
	int __sizeAbstractProjectionClause__1,
	__fes__union_AbstractAdhocQueryExpressionType *__union_AbstractAdhocQueryExpressionType__1,
	int __unionAbstractSelectionClause__1,
	const union _fes__union_AbstractAdhocQueryExpressionType_& union_AbstractAdhocQueryExpressionType___1,
	int __unionAbstractSortingClause__1,
	const union _fes__union_AbstractAdhocQueryExpressionType__& union_AbstractAdhocQueryExpressionType____1,
	const std::string& typeNames__1,
	std::string *aliases__1,
	std::string *handle__2,
	char *__item__3)
{
	wfs__QueryType *_p = ::soap_new_wfs__QueryType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__QueryType::srsName = srsName;
		_p->wfs__QueryType::featureVersion = featureVersion;
		_p->fes__AbstractAdhocQueryExpressionType::__sizeAbstractProjectionClause = __sizeAbstractProjectionClause__1;
		_p->fes__AbstractAdhocQueryExpressionType::__union_AbstractAdhocQueryExpressionType = __union_AbstractAdhocQueryExpressionType__1;
		_p->fes__AbstractAdhocQueryExpressionType::__unionAbstractSelectionClause = __unionAbstractSelectionClause__1;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType_ = union_AbstractAdhocQueryExpressionType___1;
		_p->fes__AbstractAdhocQueryExpressionType::__unionAbstractSortingClause = __unionAbstractSortingClause__1;
		_p->fes__AbstractAdhocQueryExpressionType::union_AbstractAdhocQueryExpressionType__ = union_AbstractAdhocQueryExpressionType____1;
		_p->fes__AbstractAdhocQueryExpressionType::typeNames = typeNames__1;
		_p->fes__AbstractAdhocQueryExpressionType::aliases = aliases__1;
		_p->fes__AbstractQueryExpressionType::handle = handle__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_wfs__QueryType(struct soap *soap, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryType", p->soap_type() == SOAP_TYPE_wfs__QueryType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__QueryType(struct soap *soap, const char *URL, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryType", p->soap_type() == SOAP_TYPE_wfs__QueryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__QueryType(struct soap *soap, const char *URL, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryType", p->soap_type() == SOAP_TYPE_wfs__QueryType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__QueryType(struct soap *soap, const char *URL, wfs__QueryType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryType", p->soap_type() == SOAP_TYPE_wfs__QueryType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__QueryType * SOAP_FMAC4 soap_get_wfs__QueryType(struct soap*, wfs__QueryType *, const char*, const char*);

inline int soap_read_wfs__QueryType(struct soap *soap, wfs__QueryType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__QueryType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__QueryType(struct soap *soap, const char *URL, wfs__QueryType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__QueryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__QueryType(struct soap *soap, wfs__QueryType *p)
{
	if (::soap_read_wfs__QueryType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__QueryPropertyType_DEFINED
#define SOAP_TYPE_wfs__QueryPropertyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__QueryPropertyType(struct soap*, const char*, int, const wfs__QueryPropertyType *, const char*);
SOAP_FMAC3 wfs__QueryPropertyType * SOAP_FMAC4 soap_in_wfs__QueryPropertyType(struct soap*, const char*, wfs__QueryPropertyType *, const char*);
SOAP_FMAC1 wfs__QueryPropertyType * SOAP_FMAC2 soap_instantiate_wfs__QueryPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__QueryPropertyType * soap_new_wfs__QueryPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__QueryPropertyType(soap, n, NULL, NULL, NULL);
}

inline wfs__QueryPropertyType * soap_new_req_wfs__QueryPropertyType(
	struct soap *soap)
{
	wfs__QueryPropertyType *_p = ::soap_new_wfs__QueryPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline wfs__QueryPropertyType * soap_new_set_wfs__QueryPropertyType(
	struct soap *soap,
	struct __wfs__QueryPropertyType_sequence *__QueryPropertyType_sequence,
	char *__item__1)
{
	wfs__QueryPropertyType *_p = ::soap_new_wfs__QueryPropertyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__QueryPropertyType::__QueryPropertyType_sequence = __QueryPropertyType_sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__QueryPropertyType(struct soap *soap, wfs__QueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__QueryPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__QueryPropertyType(struct soap *soap, const char *URL, wfs__QueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__QueryPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__QueryPropertyType(struct soap *soap, const char *URL, wfs__QueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__QueryPropertyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__QueryPropertyType(struct soap *soap, const char *URL, wfs__QueryPropertyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:QueryPropertyType", p->soap_type() == SOAP_TYPE_wfs__QueryPropertyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__QueryPropertyType * SOAP_FMAC4 soap_get_wfs__QueryPropertyType(struct soap*, wfs__QueryPropertyType *, const char*, const char*);

inline int soap_read_wfs__QueryPropertyType(struct soap *soap, wfs__QueryPropertyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__QueryPropertyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__QueryPropertyType(struct soap *soap, const char *URL, wfs__QueryPropertyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__QueryPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__QueryPropertyType(struct soap *soap, wfs__QueryPropertyType *p)
{
	if (::soap_read_wfs__QueryPropertyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wfs__BaseRequestType_DEFINED
#define SOAP_TYPE_wfs__BaseRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wfs__BaseRequestType(struct soap*, const char*, int, const wfs__BaseRequestType *, const char*);
SOAP_FMAC3 wfs__BaseRequestType * SOAP_FMAC4 soap_in_wfs__BaseRequestType(struct soap*, const char*, wfs__BaseRequestType *, const char*);
SOAP_FMAC1 wfs__BaseRequestType * SOAP_FMAC2 soap_instantiate_wfs__BaseRequestType(struct soap*, int, const char*, const char*, size_t*);

inline wfs__BaseRequestType * soap_new_wfs__BaseRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wfs__BaseRequestType(soap, n, NULL, NULL, NULL);
}

inline wfs__BaseRequestType * soap_new_req_wfs__BaseRequestType(
	struct soap *soap,
	const std::string& service,
	const std::string& version)
{
	wfs__BaseRequestType *_p = ::soap_new_wfs__BaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service;
		_p->wfs__BaseRequestType::version = version;
	}
	return _p;
}

inline wfs__BaseRequestType * soap_new_set_wfs__BaseRequestType(
	struct soap *soap,
	const std::string& service,
	const std::string& version,
	std::string *handle,
	char *__item__1)
{
	wfs__BaseRequestType *_p = ::soap_new_wfs__BaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->wfs__BaseRequestType::service = service;
		_p->wfs__BaseRequestType::version = version;
		_p->wfs__BaseRequestType::handle = handle;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_wfs__BaseRequestType(struct soap *soap, wfs__BaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:BaseRequestType", p->soap_type() == SOAP_TYPE_wfs__BaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wfs__BaseRequestType(struct soap *soap, const char *URL, wfs__BaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:BaseRequestType", p->soap_type() == SOAP_TYPE_wfs__BaseRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wfs__BaseRequestType(struct soap *soap, const char *URL, wfs__BaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:BaseRequestType", p->soap_type() == SOAP_TYPE_wfs__BaseRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wfs__BaseRequestType(struct soap *soap, const char *URL, wfs__BaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "wfs:BaseRequestType", p->soap_type() == SOAP_TYPE_wfs__BaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 wfs__BaseRequestType * SOAP_FMAC4 soap_get_wfs__BaseRequestType(struct soap*, wfs__BaseRequestType *, const char*, const char*);

inline int soap_read_wfs__BaseRequestType(struct soap *soap, wfs__BaseRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_wfs__BaseRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wfs__BaseRequestType(struct soap *soap, const char *URL, wfs__BaseRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wfs__BaseRequestType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wfs__BaseRequestType(struct soap *soap, wfs__BaseRequestType *p)
{
	if (::soap_read_wfs__BaseRequestType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__hexBinary2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = ::soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (::soap_read_xsd__hexBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = ::soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (::soap_read_xsd__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002etransaction_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002etransaction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002etransaction(struct soap*, struct __f2i_plu__wfs_x002etransaction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002etransaction(struct soap*, const struct __f2i_plu__wfs_x002etransaction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002etransaction(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002etransaction *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002etransaction * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002etransaction(struct soap*, const char*, struct __f2i_plu__wfs_x002etransaction *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002etransaction * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002etransaction(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002etransaction * soap_new___f2i_plu__wfs_x002etransaction(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002etransaction(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002etransaction * soap_new_req___f2i_plu__wfs_x002etransaction(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002etransaction *_p = ::soap_new___f2i_plu__wfs_x002etransaction(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002etransaction(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002etransaction * soap_new_set___f2i_plu__wfs_x002etransaction(
	struct soap *soap,
	wfs__TransactionType *wfs__Transaction)
{
	struct __f2i_plu__wfs_x002etransaction *_p = ::soap_new___f2i_plu__wfs_x002etransaction(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002etransaction(soap, _p);
		_p->wfs__Transaction = wfs__Transaction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002etransaction(struct soap*, const struct __f2i_plu__wfs_x002etransaction *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002etransaction(struct soap *soap, struct __f2i_plu__wfs_x002etransaction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002etransaction(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002etransaction(soap, p, "-f2i-plu:wfs.transaction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002etransaction(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002etransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002etransaction(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002etransaction(soap, p, "-f2i-plu:wfs.transaction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002etransaction(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002etransaction const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002etransaction(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002etransaction(soap, p, "-f2i-plu:wfs.transaction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002etransaction(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002etransaction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002etransaction(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002etransaction(soap, p, "-f2i-plu:wfs.transaction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002etransaction * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002etransaction(struct soap*, struct __f2i_plu__wfs_x002etransaction *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002etransaction(struct soap *soap, struct __f2i_plu__wfs_x002etransaction *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002etransaction(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002etransaction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002etransaction(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002etransaction *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002etransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002etransaction(struct soap *soap, struct __f2i_plu__wfs_x002etransaction *p)
{
	if (::soap_read___f2i_plu__wfs_x002etransaction(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002elockFeature_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002elockFeature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002elockFeature(struct soap*, struct __f2i_plu__wfs_x002elockFeature *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002elockFeature(struct soap*, const struct __f2i_plu__wfs_x002elockFeature *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002elockFeature(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002elockFeature *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002elockFeature * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002elockFeature(struct soap*, const char*, struct __f2i_plu__wfs_x002elockFeature *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002elockFeature * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002elockFeature(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002elockFeature * soap_new___f2i_plu__wfs_x002elockFeature(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002elockFeature(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002elockFeature * soap_new_req___f2i_plu__wfs_x002elockFeature(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002elockFeature *_p = ::soap_new___f2i_plu__wfs_x002elockFeature(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002elockFeature(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002elockFeature * soap_new_set___f2i_plu__wfs_x002elockFeature(
	struct soap *soap,
	wfs__LockFeatureType *wfs__LockFeature)
{
	struct __f2i_plu__wfs_x002elockFeature *_p = ::soap_new___f2i_plu__wfs_x002elockFeature(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002elockFeature(soap, _p);
		_p->wfs__LockFeature = wfs__LockFeature;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002elockFeature(struct soap*, const struct __f2i_plu__wfs_x002elockFeature *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002elockFeature(struct soap *soap, struct __f2i_plu__wfs_x002elockFeature const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002elockFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elockFeature(soap, p, "-f2i-plu:wfs.lockFeature", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002elockFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elockFeature const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002elockFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elockFeature(soap, p, "-f2i-plu:wfs.lockFeature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002elockFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elockFeature const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002elockFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elockFeature(soap, p, "-f2i-plu:wfs.lockFeature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002elockFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elockFeature const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002elockFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elockFeature(soap, p, "-f2i-plu:wfs.lockFeature", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002elockFeature * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002elockFeature(struct soap*, struct __f2i_plu__wfs_x002elockFeature *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002elockFeature(struct soap *soap, struct __f2i_plu__wfs_x002elockFeature *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002elockFeature(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002elockFeature(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002elockFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elockFeature *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002elockFeature(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002elockFeature(struct soap *soap, struct __f2i_plu__wfs_x002elockFeature *p)
{
	if (::soap_read___f2i_plu__wfs_x002elockFeature(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002egetPropertyValue_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002egetPropertyValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002egetPropertyValue(struct soap*, struct __f2i_plu__wfs_x002egetPropertyValue *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002egetPropertyValue(struct soap*, const struct __f2i_plu__wfs_x002egetPropertyValue *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002egetPropertyValue(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002egetPropertyValue *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetPropertyValue * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002egetPropertyValue(struct soap*, const char*, struct __f2i_plu__wfs_x002egetPropertyValue *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002egetPropertyValue * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002egetPropertyValue(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002egetPropertyValue * soap_new___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002egetPropertyValue(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002egetPropertyValue * soap_new_req___f2i_plu__wfs_x002egetPropertyValue(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002egetPropertyValue *_p = ::soap_new___f2i_plu__wfs_x002egetPropertyValue(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetPropertyValue(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002egetPropertyValue * soap_new_set___f2i_plu__wfs_x002egetPropertyValue(
	struct soap *soap,
	wfs__GetPropertyValueType *wfs__GetPropertyValue)
{
	struct __f2i_plu__wfs_x002egetPropertyValue *_p = ::soap_new___f2i_plu__wfs_x002egetPropertyValue(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetPropertyValue(soap, _p);
		_p->wfs__GetPropertyValue = wfs__GetPropertyValue;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002egetPropertyValue(struct soap*, const struct __f2i_plu__wfs_x002egetPropertyValue *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, struct __f2i_plu__wfs_x002egetPropertyValue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002egetPropertyValue(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetPropertyValue(soap, p, "-f2i-plu:wfs.getPropertyValue", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetPropertyValue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetPropertyValue(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetPropertyValue(soap, p, "-f2i-plu:wfs.getPropertyValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetPropertyValue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetPropertyValue(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetPropertyValue(soap, p, "-f2i-plu:wfs.getPropertyValue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetPropertyValue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetPropertyValue(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetPropertyValue(soap, p, "-f2i-plu:wfs.getPropertyValue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetPropertyValue * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002egetPropertyValue(struct soap*, struct __f2i_plu__wfs_x002egetPropertyValue *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, struct __f2i_plu__wfs_x002egetPropertyValue *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002egetPropertyValue(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002egetPropertyValue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetPropertyValue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002egetPropertyValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002egetPropertyValue(struct soap *soap, struct __f2i_plu__wfs_x002egetPropertyValue *p)
{
	if (::soap_read___f2i_plu__wfs_x002egetPropertyValue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002egetFeatureWithLock_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002egetFeatureWithLock_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002egetFeatureWithLock(struct soap*, struct __f2i_plu__wfs_x002egetFeatureWithLock *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002egetFeatureWithLock(struct soap*, const struct __f2i_plu__wfs_x002egetFeatureWithLock *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002egetFeatureWithLock(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002egetFeatureWithLock *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetFeatureWithLock * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002egetFeatureWithLock(struct soap*, const char*, struct __f2i_plu__wfs_x002egetFeatureWithLock *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002egetFeatureWithLock * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002egetFeatureWithLock(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002egetFeatureWithLock * soap_new___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002egetFeatureWithLock(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002egetFeatureWithLock * soap_new_req___f2i_plu__wfs_x002egetFeatureWithLock(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002egetFeatureWithLock *_p = ::soap_new___f2i_plu__wfs_x002egetFeatureWithLock(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetFeatureWithLock(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002egetFeatureWithLock * soap_new_set___f2i_plu__wfs_x002egetFeatureWithLock(
	struct soap *soap,
	wfs__GetFeatureWithLockType *wfs__GetFeatureWithLock)
{
	struct __f2i_plu__wfs_x002egetFeatureWithLock *_p = ::soap_new___f2i_plu__wfs_x002egetFeatureWithLock(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetFeatureWithLock(soap, _p);
		_p->wfs__GetFeatureWithLock = wfs__GetFeatureWithLock;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002egetFeatureWithLock(struct soap*, const struct __f2i_plu__wfs_x002egetFeatureWithLock *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, struct __f2i_plu__wfs_x002egetFeatureWithLock const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002egetFeatureWithLock(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeatureWithLock(soap, p, "-f2i-plu:wfs.getFeatureWithLock", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeatureWithLock const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetFeatureWithLock(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeatureWithLock(soap, p, "-f2i-plu:wfs.getFeatureWithLock", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeatureWithLock const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetFeatureWithLock(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeatureWithLock(soap, p, "-f2i-plu:wfs.getFeatureWithLock", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeatureWithLock const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetFeatureWithLock(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeatureWithLock(soap, p, "-f2i-plu:wfs.getFeatureWithLock", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetFeatureWithLock * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002egetFeatureWithLock(struct soap*, struct __f2i_plu__wfs_x002egetFeatureWithLock *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, struct __f2i_plu__wfs_x002egetFeatureWithLock *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002egetFeatureWithLock(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002egetFeatureWithLock(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeatureWithLock *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002egetFeatureWithLock(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002egetFeatureWithLock(struct soap *soap, struct __f2i_plu__wfs_x002egetFeatureWithLock *p)
{
	if (::soap_read___f2i_plu__wfs_x002egetFeatureWithLock(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002egetCapabilities_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002egetCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002egetCapabilities(struct soap*, struct __f2i_plu__wfs_x002egetCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002egetCapabilities(struct soap*, const struct __f2i_plu__wfs_x002egetCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002egetCapabilities(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002egetCapabilities *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetCapabilities * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002egetCapabilities(struct soap*, const char*, struct __f2i_plu__wfs_x002egetCapabilities *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002egetCapabilities * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002egetCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002egetCapabilities * soap_new___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002egetCapabilities(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002egetCapabilities * soap_new_req___f2i_plu__wfs_x002egetCapabilities(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002egetCapabilities *_p = ::soap_new___f2i_plu__wfs_x002egetCapabilities(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetCapabilities(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002egetCapabilities * soap_new_set___f2i_plu__wfs_x002egetCapabilities(
	struct soap *soap,
	ows__GetCapabilitiesType *ows__GetCapabilities)
{
	struct __f2i_plu__wfs_x002egetCapabilities *_p = ::soap_new___f2i_plu__wfs_x002egetCapabilities(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetCapabilities(soap, _p);
		_p->ows__GetCapabilities = ows__GetCapabilities;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002egetCapabilities(struct soap*, const struct __f2i_plu__wfs_x002egetCapabilities *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, struct __f2i_plu__wfs_x002egetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002egetCapabilities(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetCapabilities(soap, p, "-f2i-plu:wfs.getCapabilities", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetCapabilities(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetCapabilities(soap, p, "-f2i-plu:wfs.getCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetCapabilities(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetCapabilities(soap, p, "-f2i-plu:wfs.getCapabilities", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetCapabilities const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetCapabilities(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetCapabilities(soap, p, "-f2i-plu:wfs.getCapabilities", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetCapabilities * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002egetCapabilities(struct soap*, struct __f2i_plu__wfs_x002egetCapabilities *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, struct __f2i_plu__wfs_x002egetCapabilities *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002egetCapabilities(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002egetCapabilities(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetCapabilities *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002egetCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002egetCapabilities(struct soap *soap, struct __f2i_plu__wfs_x002egetCapabilities *p)
{
	if (::soap_read___f2i_plu__wfs_x002egetCapabilities(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002edropStoredQuery_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002edropStoredQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002edropStoredQuery(struct soap*, struct __f2i_plu__wfs_x002edropStoredQuery *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002edropStoredQuery(struct soap*, const struct __f2i_plu__wfs_x002edropStoredQuery *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002edropStoredQuery(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002edropStoredQuery *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002edropStoredQuery * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002edropStoredQuery(struct soap*, const char*, struct __f2i_plu__wfs_x002edropStoredQuery *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002edropStoredQuery * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002edropStoredQuery(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002edropStoredQuery * soap_new___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002edropStoredQuery(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002edropStoredQuery * soap_new_req___f2i_plu__wfs_x002edropStoredQuery(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002edropStoredQuery *_p = ::soap_new___f2i_plu__wfs_x002edropStoredQuery(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edropStoredQuery(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002edropStoredQuery * soap_new_set___f2i_plu__wfs_x002edropStoredQuery(
	struct soap *soap,
	_wfs__DropStoredQuery *wfs__DropStoredQuery)
{
	struct __f2i_plu__wfs_x002edropStoredQuery *_p = ::soap_new___f2i_plu__wfs_x002edropStoredQuery(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edropStoredQuery(soap, _p);
		_p->wfs__DropStoredQuery = wfs__DropStoredQuery;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002edropStoredQuery(struct soap*, const struct __f2i_plu__wfs_x002edropStoredQuery *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, struct __f2i_plu__wfs_x002edropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002edropStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQuery(soap, p, "-f2i-plu:wfs.dropStoredQuery", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edropStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQuery(soap, p, "-f2i-plu:wfs.dropStoredQuery", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edropStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQuery(soap, p, "-f2i-plu:wfs.dropStoredQuery", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edropStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQuery(soap, p, "-f2i-plu:wfs.dropStoredQuery", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002edropStoredQuery * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002edropStoredQuery(struct soap*, struct __f2i_plu__wfs_x002edropStoredQuery *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, struct __f2i_plu__wfs_x002edropStoredQuery *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002edropStoredQuery(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002edropStoredQuery(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQuery *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002edropStoredQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002edropStoredQuery(struct soap *soap, struct __f2i_plu__wfs_x002edropStoredQuery *p)
{
	if (::soap_read___f2i_plu__wfs_x002edropStoredQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002edropStoredQueryResponse_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002edropStoredQueryResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap*, struct __f2i_plu__wfs_x002edropStoredQueryResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap*, const struct __f2i_plu__wfs_x002edropStoredQueryResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002edropStoredQueryResponse *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002edropStoredQueryResponse * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap*, const char*, struct __f2i_plu__wfs_x002edropStoredQueryResponse *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002edropStoredQueryResponse * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002edropStoredQueryResponse * soap_new___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002edropStoredQueryResponse(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002edropStoredQueryResponse * soap_new_req___f2i_plu__wfs_x002edropStoredQueryResponse(
	struct soap *soap,
	const wfs__ExecutionStatusType& wfs__DropStoredQueryResponse)
{
	struct __f2i_plu__wfs_x002edropStoredQueryResponse *_p = ::soap_new___f2i_plu__wfs_x002edropStoredQueryResponse(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edropStoredQueryResponse(soap, _p);
		_p->wfs__DropStoredQueryResponse = wfs__DropStoredQueryResponse;
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002edropStoredQueryResponse * soap_new_set___f2i_plu__wfs_x002edropStoredQueryResponse(
	struct soap *soap,
	const wfs__ExecutionStatusType& wfs__DropStoredQueryResponse)
{
	struct __f2i_plu__wfs_x002edropStoredQueryResponse *_p = ::soap_new___f2i_plu__wfs_x002edropStoredQueryResponse(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edropStoredQueryResponse(soap, _p);
		_p->wfs__DropStoredQueryResponse = wfs__DropStoredQueryResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap*, const struct __f2i_plu__wfs_x002edropStoredQueryResponse *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, struct __f2i_plu__wfs_x002edropStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p, "-f2i-plu:wfs.dropStoredQueryResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p, "-f2i-plu:wfs.dropStoredQueryResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p, "-f2i-plu:wfs.dropStoredQueryResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p, "-f2i-plu:wfs.dropStoredQueryResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002edropStoredQueryResponse * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap*, struct __f2i_plu__wfs_x002edropStoredQueryResponse *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, struct __f2i_plu__wfs_x002edropStoredQueryResponse *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edropStoredQueryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002edropStoredQueryResponse(struct soap *soap, struct __f2i_plu__wfs_x002edropStoredQueryResponse *p)
{
	if (::soap_read___f2i_plu__wfs_x002edropStoredQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002elistStoredQueries_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002elistStoredQueries_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002elistStoredQueries(struct soap*, struct __f2i_plu__wfs_x002elistStoredQueries *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002elistStoredQueries(struct soap*, const struct __f2i_plu__wfs_x002elistStoredQueries *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002elistStoredQueries(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002elistStoredQueries *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002elistStoredQueries * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002elistStoredQueries(struct soap*, const char*, struct __f2i_plu__wfs_x002elistStoredQueries *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002elistStoredQueries * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002elistStoredQueries(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002elistStoredQueries * soap_new___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002elistStoredQueries(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002elistStoredQueries * soap_new_req___f2i_plu__wfs_x002elistStoredQueries(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002elistStoredQueries *_p = ::soap_new___f2i_plu__wfs_x002elistStoredQueries(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002elistStoredQueries(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002elistStoredQueries * soap_new_set___f2i_plu__wfs_x002elistStoredQueries(
	struct soap *soap,
	wfs__ListStoredQueriesType *wfs__ListStoredQueries)
{
	struct __f2i_plu__wfs_x002elistStoredQueries *_p = ::soap_new___f2i_plu__wfs_x002elistStoredQueries(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002elistStoredQueries(soap, _p);
		_p->wfs__ListStoredQueries = wfs__ListStoredQueries;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002elistStoredQueries(struct soap*, const struct __f2i_plu__wfs_x002elistStoredQueries *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, struct __f2i_plu__wfs_x002elistStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002elistStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elistStoredQueries(soap, p, "-f2i-plu:wfs.listStoredQueries", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elistStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002elistStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elistStoredQueries(soap, p, "-f2i-plu:wfs.listStoredQueries", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elistStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002elistStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elistStoredQueries(soap, p, "-f2i-plu:wfs.listStoredQueries", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elistStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002elistStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002elistStoredQueries(soap, p, "-f2i-plu:wfs.listStoredQueries", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002elistStoredQueries * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002elistStoredQueries(struct soap*, struct __f2i_plu__wfs_x002elistStoredQueries *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, struct __f2i_plu__wfs_x002elistStoredQueries *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002elistStoredQueries(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002elistStoredQueries(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002elistStoredQueries *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002elistStoredQueries(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002elistStoredQueries(struct soap *soap, struct __f2i_plu__wfs_x002elistStoredQueries *p)
{
	if (::soap_read___f2i_plu__wfs_x002elistStoredQueries(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002edescribeStoredQueries_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002edescribeStoredQueries_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002edescribeStoredQueries(struct soap*, struct __f2i_plu__wfs_x002edescribeStoredQueries *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002edescribeStoredQueries(struct soap*, const struct __f2i_plu__wfs_x002edescribeStoredQueries *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002edescribeStoredQueries(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002edescribeStoredQueries *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002edescribeStoredQueries * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002edescribeStoredQueries(struct soap*, const char*, struct __f2i_plu__wfs_x002edescribeStoredQueries *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002edescribeStoredQueries * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002edescribeStoredQueries(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002edescribeStoredQueries * soap_new___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002edescribeStoredQueries(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002edescribeStoredQueries * soap_new_req___f2i_plu__wfs_x002edescribeStoredQueries(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002edescribeStoredQueries *_p = ::soap_new___f2i_plu__wfs_x002edescribeStoredQueries(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edescribeStoredQueries(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002edescribeStoredQueries * soap_new_set___f2i_plu__wfs_x002edescribeStoredQueries(
	struct soap *soap,
	wfs__DescribeStoredQueriesType *wfs__DescribeStoredQueries)
{
	struct __f2i_plu__wfs_x002edescribeStoredQueries *_p = ::soap_new___f2i_plu__wfs_x002edescribeStoredQueries(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edescribeStoredQueries(soap, _p);
		_p->wfs__DescribeStoredQueries = wfs__DescribeStoredQueries;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002edescribeStoredQueries(struct soap*, const struct __f2i_plu__wfs_x002edescribeStoredQueries *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, struct __f2i_plu__wfs_x002edescribeStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002edescribeStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeStoredQueries(soap, p, "-f2i-plu:wfs.describeStoredQueries", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edescribeStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeStoredQueries(soap, p, "-f2i-plu:wfs.describeStoredQueries", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edescribeStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeStoredQueries(soap, p, "-f2i-plu:wfs.describeStoredQueries", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeStoredQueries const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edescribeStoredQueries(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeStoredQueries(soap, p, "-f2i-plu:wfs.describeStoredQueries", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002edescribeStoredQueries * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002edescribeStoredQueries(struct soap*, struct __f2i_plu__wfs_x002edescribeStoredQueries *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, struct __f2i_plu__wfs_x002edescribeStoredQueries *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002edescribeStoredQueries(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002edescribeStoredQueries(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeStoredQueries *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002edescribeStoredQueries(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002edescribeStoredQueries(struct soap *soap, struct __f2i_plu__wfs_x002edescribeStoredQueries *p)
{
	if (::soap_read___f2i_plu__wfs_x002edescribeStoredQueries(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002egetFeature_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002egetFeature_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002egetFeature(struct soap*, struct __f2i_plu__wfs_x002egetFeature *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002egetFeature(struct soap*, const struct __f2i_plu__wfs_x002egetFeature *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002egetFeature(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002egetFeature *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetFeature * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002egetFeature(struct soap*, const char*, struct __f2i_plu__wfs_x002egetFeature *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002egetFeature * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002egetFeature(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002egetFeature * soap_new___f2i_plu__wfs_x002egetFeature(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002egetFeature(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002egetFeature * soap_new_req___f2i_plu__wfs_x002egetFeature(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002egetFeature *_p = ::soap_new___f2i_plu__wfs_x002egetFeature(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetFeature(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002egetFeature * soap_new_set___f2i_plu__wfs_x002egetFeature(
	struct soap *soap,
	wfs__GetFeatureType *wfs__GetFeature)
{
	struct __f2i_plu__wfs_x002egetFeature *_p = ::soap_new___f2i_plu__wfs_x002egetFeature(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002egetFeature(soap, _p);
		_p->wfs__GetFeature = wfs__GetFeature;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002egetFeature(struct soap*, const struct __f2i_plu__wfs_x002egetFeature *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002egetFeature(struct soap *soap, struct __f2i_plu__wfs_x002egetFeature const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002egetFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeature(soap, p, "-f2i-plu:wfs.getFeature", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002egetFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeature const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeature(soap, p, "-f2i-plu:wfs.getFeature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002egetFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeature const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeature(soap, p, "-f2i-plu:wfs.getFeature", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002egetFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeature const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002egetFeature(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002egetFeature(soap, p, "-f2i-plu:wfs.getFeature", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002egetFeature * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002egetFeature(struct soap*, struct __f2i_plu__wfs_x002egetFeature *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002egetFeature(struct soap *soap, struct __f2i_plu__wfs_x002egetFeature *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002egetFeature(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002egetFeature(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002egetFeature(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002egetFeature *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002egetFeature(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002egetFeature(struct soap *soap, struct __f2i_plu__wfs_x002egetFeature *p)
{
	if (::soap_read___f2i_plu__wfs_x002egetFeature(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002edescribeFeatureType_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002edescribeFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002edescribeFeatureType(struct soap*, struct __f2i_plu__wfs_x002edescribeFeatureType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002edescribeFeatureType(struct soap*, const struct __f2i_plu__wfs_x002edescribeFeatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002edescribeFeatureType(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002edescribeFeatureType *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002edescribeFeatureType * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002edescribeFeatureType(struct soap*, const char*, struct __f2i_plu__wfs_x002edescribeFeatureType *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002edescribeFeatureType * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002edescribeFeatureType(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002edescribeFeatureType * soap_new___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002edescribeFeatureType(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002edescribeFeatureType * soap_new_req___f2i_plu__wfs_x002edescribeFeatureType(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002edescribeFeatureType *_p = ::soap_new___f2i_plu__wfs_x002edescribeFeatureType(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edescribeFeatureType(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002edescribeFeatureType * soap_new_set___f2i_plu__wfs_x002edescribeFeatureType(
	struct soap *soap,
	wfs__DescribeFeatureTypeType *wfs__DescribeFeatureType)
{
	struct __f2i_plu__wfs_x002edescribeFeatureType *_p = ::soap_new___f2i_plu__wfs_x002edescribeFeatureType(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002edescribeFeatureType(soap, _p);
		_p->wfs__DescribeFeatureType = wfs__DescribeFeatureType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002edescribeFeatureType(struct soap*, const struct __f2i_plu__wfs_x002edescribeFeatureType *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, struct __f2i_plu__wfs_x002edescribeFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002edescribeFeatureType(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeFeatureType(soap, p, "-f2i-plu:wfs.describeFeatureType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edescribeFeatureType(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeFeatureType(soap, p, "-f2i-plu:wfs.describeFeatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edescribeFeatureType(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeFeatureType(soap, p, "-f2i-plu:wfs.describeFeatureType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeFeatureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002edescribeFeatureType(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002edescribeFeatureType(soap, p, "-f2i-plu:wfs.describeFeatureType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002edescribeFeatureType * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002edescribeFeatureType(struct soap*, struct __f2i_plu__wfs_x002edescribeFeatureType *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, struct __f2i_plu__wfs_x002edescribeFeatureType *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002edescribeFeatureType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002edescribeFeatureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002edescribeFeatureType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002edescribeFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002edescribeFeatureType(struct soap *soap, struct __f2i_plu__wfs_x002edescribeFeatureType *p)
{
	if (::soap_read___f2i_plu__wfs_x002edescribeFeatureType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002ecreateStoredQuery_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002ecreateStoredQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002ecreateStoredQuery(struct soap*, struct __f2i_plu__wfs_x002ecreateStoredQuery *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002ecreateStoredQuery(struct soap*, const struct __f2i_plu__wfs_x002ecreateStoredQuery *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002ecreateStoredQuery(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002ecreateStoredQuery *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002ecreateStoredQuery * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002ecreateStoredQuery(struct soap*, const char*, struct __f2i_plu__wfs_x002ecreateStoredQuery *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002ecreateStoredQuery * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002ecreateStoredQuery(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002ecreateStoredQuery * soap_new___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002ecreateStoredQuery(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002ecreateStoredQuery * soap_new_req___f2i_plu__wfs_x002ecreateStoredQuery(
	struct soap *soap)
{
	struct __f2i_plu__wfs_x002ecreateStoredQuery *_p = ::soap_new___f2i_plu__wfs_x002ecreateStoredQuery(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002ecreateStoredQuery(soap, _p);
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002ecreateStoredQuery * soap_new_set___f2i_plu__wfs_x002ecreateStoredQuery(
	struct soap *soap,
	wfs__CreateStoredQueryType *wfs__CreateStoredQuery)
{
	struct __f2i_plu__wfs_x002ecreateStoredQuery *_p = ::soap_new___f2i_plu__wfs_x002ecreateStoredQuery(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002ecreateStoredQuery(soap, _p);
		_p->wfs__CreateStoredQuery = wfs__CreateStoredQuery;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002ecreateStoredQuery(struct soap*, const struct __f2i_plu__wfs_x002ecreateStoredQuery *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, struct __f2i_plu__wfs_x002ecreateStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQuery(soap, p, "-f2i-plu:wfs.createStoredQuery", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQuery(soap, p, "-f2i-plu:wfs.createStoredQuery", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQuery(soap, p, "-f2i-plu:wfs.createStoredQuery", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQuery const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQuery(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQuery(soap, p, "-f2i-plu:wfs.createStoredQuery", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002ecreateStoredQuery * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002ecreateStoredQuery(struct soap*, struct __f2i_plu__wfs_x002ecreateStoredQuery *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, struct __f2i_plu__wfs_x002ecreateStoredQuery *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002ecreateStoredQuery(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002ecreateStoredQuery(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQuery *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002ecreateStoredQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002ecreateStoredQuery(struct soap *soap, struct __f2i_plu__wfs_x002ecreateStoredQuery *p)
{
	if (::soap_read___f2i_plu__wfs_x002ecreateStoredQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___f2i_plu__wfs_x002ecreateStoredQueryResponse_DEFINED
#define SOAP_TYPE___f2i_plu__wfs_x002ecreateStoredQueryResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap*, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap*, const struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap*, const char*, int, const struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *, const char*);
SOAP_FMAC3 struct __f2i_plu__wfs_x002ecreateStoredQueryResponse * SOAP_FMAC4 soap_in___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap*, const char*, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *, const char*);
SOAP_FMAC1 struct __f2i_plu__wfs_x002ecreateStoredQueryResponse * SOAP_FMAC2 soap_instantiate___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __f2i_plu__wfs_x002ecreateStoredQueryResponse * soap_new___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, n, NULL, NULL, NULL);
}

inline struct __f2i_plu__wfs_x002ecreateStoredQueryResponse * soap_new_req___f2i_plu__wfs_x002ecreateStoredQueryResponse(
	struct soap *soap,
	const wfs__CreateStoredQueryResponseType& wfs__CreateStoredQueryResponse)
{
	struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *_p = ::soap_new___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, _p);
		_p->wfs__CreateStoredQueryResponse = wfs__CreateStoredQueryResponse;
	}
	return _p;
}

inline struct __f2i_plu__wfs_x002ecreateStoredQueryResponse * soap_new_set___f2i_plu__wfs_x002ecreateStoredQueryResponse(
	struct soap *soap,
	const wfs__CreateStoredQueryResponseType& wfs__CreateStoredQueryResponse)
{
	struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *_p = ::soap_new___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap);
	if (_p)
	{	::soap_default___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, _p);
		_p->wfs__CreateStoredQueryResponse = wfs__CreateStoredQueryResponse;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap*, const struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *, const char*, const char*);

inline int soap_write___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p, "-f2i-plu:wfs.createStoredQueryResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p, "-f2i-plu:wfs.createStoredQueryResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p, "-f2i-plu:wfs.createStoredQueryResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p), 0) || ::soap_put___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p, "-f2i-plu:wfs.createStoredQueryResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __f2i_plu__wfs_x002ecreateStoredQueryResponse * SOAP_FMAC4 soap_get___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap*, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *, const char*, const char*);

inline int soap_read___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *p)
{
	if (p)
	{	::soap_default___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, const char *URL, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___f2i_plu__wfs_x002ecreateStoredQueryResponse(struct soap *soap, struct __f2i_plu__wfs_x002ecreateStoredQueryResponse *p)
{
	if (::soap_read___f2i_plu__wfs_x002ecreateStoredQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	_ows__ExceptionReport *ows__ExceptionReport,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ows__ExceptionReport = ows__ExceptionReport;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE____fes__union_UnaryLogicOpType________DEFINED
#define SOAP_TYPE____fes__union_UnaryLogicOpType________DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default____fes__union_UnaryLogicOpType_______(struct soap*, struct ___fes__union_UnaryLogicOpType_______ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize____fes__union_UnaryLogicOpType_______(struct soap*, const struct ___fes__union_UnaryLogicOpType_______ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out____fes__union_UnaryLogicOpType_______(struct soap*, const char*, int, const struct ___fes__union_UnaryLogicOpType_______ *, const char*);
SOAP_FMAC3 struct ___fes__union_UnaryLogicOpType_______ * SOAP_FMAC4 soap_in____fes__union_UnaryLogicOpType_______(struct soap*, const char*, struct ___fes__union_UnaryLogicOpType_______ *, const char*);
SOAP_FMAC1 struct ___fes__union_UnaryLogicOpType_______ * SOAP_FMAC2 soap_instantiate____fes__union_UnaryLogicOpType_______(struct soap*, int, const char*, const char*, size_t*);

inline struct ___fes__union_UnaryLogicOpType_______ * soap_new____fes__union_UnaryLogicOpType_______(struct soap *soap, int n = -1)
{
	return soap_instantiate____fes__union_UnaryLogicOpType_______(soap, n, NULL, NULL, NULL);
}

inline struct ___fes__union_UnaryLogicOpType_______ * soap_new_req____fes__union_UnaryLogicOpType_______(
	struct soap *soap,
	int __size_x005fId,
	__fes__union_UnaryLogicOpType_______ *__union_UnaryLogicOpType_______)
{
	struct ___fes__union_UnaryLogicOpType_______ *_p = ::soap_new____fes__union_UnaryLogicOpType_______(soap);
	if (_p)
	{	::soap_default____fes__union_UnaryLogicOpType_______(soap, _p);
		_p->__size_x005fId = __size_x005fId;
		_p->__union_UnaryLogicOpType_______ = __union_UnaryLogicOpType_______;
	}
	return _p;
}

inline struct ___fes__union_UnaryLogicOpType_______ * soap_new_set____fes__union_UnaryLogicOpType_______(
	struct soap *soap,
	int __size_x005fId,
	__fes__union_UnaryLogicOpType_______ *__union_UnaryLogicOpType_______)
{
	struct ___fes__union_UnaryLogicOpType_______ *_p = ::soap_new____fes__union_UnaryLogicOpType_______(soap);
	if (_p)
	{	::soap_default____fes__union_UnaryLogicOpType_______(soap, _p);
		_p->__size_x005fId = __size_x005fId;
		_p->__union_UnaryLogicOpType_______ = __union_UnaryLogicOpType_______;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put____fes__union_UnaryLogicOpType_______(struct soap*, const struct ___fes__union_UnaryLogicOpType_______ *, const char*, const char*);

inline int soap_write____fes__union_UnaryLogicOpType_______(struct soap *soap, struct ___fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize____fes__union_UnaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_UnaryLogicOpType_______(soap, p, ":fes--union-UnaryLogicOpType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT____fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_UnaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_UnaryLogicOpType_______(soap, p, ":fes--union-UnaryLogicOpType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH____fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_UnaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_UnaryLogicOpType_______(soap, p, ":fes--union-UnaryLogicOpType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send____fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_UnaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_UnaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_UnaryLogicOpType_______(soap, p, ":fes--union-UnaryLogicOpType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ___fes__union_UnaryLogicOpType_______ * SOAP_FMAC4 soap_get____fes__union_UnaryLogicOpType_______(struct soap*, struct ___fes__union_UnaryLogicOpType_______ *, const char*, const char*);

inline int soap_read____fes__union_UnaryLogicOpType_______(struct soap *soap, struct ___fes__union_UnaryLogicOpType_______ *p)
{
	if (p)
	{	::soap_default____fes__union_UnaryLogicOpType_______(soap, p);
		if (soap_begin_recv(soap) || ::soap_get____fes__union_UnaryLogicOpType_______(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET____fes__union_UnaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_UnaryLogicOpType_______ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read____fes__union_UnaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv____fes__union_UnaryLogicOpType_______(struct soap *soap, struct ___fes__union_UnaryLogicOpType_______ *p)
{
	if (::soap_read____fes__union_UnaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE____fes__union_BinaryLogicOpType________DEFINED
#define SOAP_TYPE____fes__union_BinaryLogicOpType________DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default____fes__union_BinaryLogicOpType_______(struct soap*, struct ___fes__union_BinaryLogicOpType_______ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize____fes__union_BinaryLogicOpType_______(struct soap*, const struct ___fes__union_BinaryLogicOpType_______ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out____fes__union_BinaryLogicOpType_______(struct soap*, const char*, int, const struct ___fes__union_BinaryLogicOpType_______ *, const char*);
SOAP_FMAC3 struct ___fes__union_BinaryLogicOpType_______ * SOAP_FMAC4 soap_in____fes__union_BinaryLogicOpType_______(struct soap*, const char*, struct ___fes__union_BinaryLogicOpType_______ *, const char*);
SOAP_FMAC1 struct ___fes__union_BinaryLogicOpType_______ * SOAP_FMAC2 soap_instantiate____fes__union_BinaryLogicOpType_______(struct soap*, int, const char*, const char*, size_t*);

inline struct ___fes__union_BinaryLogicOpType_______ * soap_new____fes__union_BinaryLogicOpType_______(struct soap *soap, int n = -1)
{
	return soap_instantiate____fes__union_BinaryLogicOpType_______(soap, n, NULL, NULL, NULL);
}

inline struct ___fes__union_BinaryLogicOpType_______ * soap_new_req____fes__union_BinaryLogicOpType_______(
	struct soap *soap,
	int __size_x005fId,
	__fes__union_BinaryLogicOpType_______ *__union_BinaryLogicOpType_______)
{
	struct ___fes__union_BinaryLogicOpType_______ *_p = ::soap_new____fes__union_BinaryLogicOpType_______(soap);
	if (_p)
	{	::soap_default____fes__union_BinaryLogicOpType_______(soap, _p);
		_p->__size_x005fId = __size_x005fId;
		_p->__union_BinaryLogicOpType_______ = __union_BinaryLogicOpType_______;
	}
	return _p;
}

inline struct ___fes__union_BinaryLogicOpType_______ * soap_new_set____fes__union_BinaryLogicOpType_______(
	struct soap *soap,
	int __size_x005fId,
	__fes__union_BinaryLogicOpType_______ *__union_BinaryLogicOpType_______)
{
	struct ___fes__union_BinaryLogicOpType_______ *_p = ::soap_new____fes__union_BinaryLogicOpType_______(soap);
	if (_p)
	{	::soap_default____fes__union_BinaryLogicOpType_______(soap, _p);
		_p->__size_x005fId = __size_x005fId;
		_p->__union_BinaryLogicOpType_______ = __union_BinaryLogicOpType_______;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put____fes__union_BinaryLogicOpType_______(struct soap*, const struct ___fes__union_BinaryLogicOpType_______ *, const char*, const char*);

inline int soap_write____fes__union_BinaryLogicOpType_______(struct soap *soap, struct ___fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize____fes__union_BinaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_BinaryLogicOpType_______(soap, p, ":fes--union-BinaryLogicOpType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT____fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_BinaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_BinaryLogicOpType_______(soap, p, ":fes--union-BinaryLogicOpType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH____fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_BinaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_BinaryLogicOpType_______(soap, p, ":fes--union-BinaryLogicOpType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send____fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_BinaryLogicOpType_______ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_BinaryLogicOpType_______(soap, p), 0) || ::soap_put____fes__union_BinaryLogicOpType_______(soap, p, ":fes--union-BinaryLogicOpType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ___fes__union_BinaryLogicOpType_______ * SOAP_FMAC4 soap_get____fes__union_BinaryLogicOpType_______(struct soap*, struct ___fes__union_BinaryLogicOpType_______ *, const char*, const char*);

inline int soap_read____fes__union_BinaryLogicOpType_______(struct soap *soap, struct ___fes__union_BinaryLogicOpType_______ *p)
{
	if (p)
	{	::soap_default____fes__union_BinaryLogicOpType_______(soap, p);
		if (soap_begin_recv(soap) || ::soap_get____fes__union_BinaryLogicOpType_______(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET____fes__union_BinaryLogicOpType_______(struct soap *soap, const char *URL, struct ___fes__union_BinaryLogicOpType_______ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read____fes__union_BinaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv____fes__union_BinaryLogicOpType_______(struct soap *soap, struct ___fes__union_BinaryLogicOpType_______ *p)
{
	if (::soap_read____fes__union_BinaryLogicOpType_______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE____fes__union_FilterType_______DEFINED
#define SOAP_TYPE____fes__union_FilterType_______DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default____fes__union_FilterType______(struct soap*, struct ___fes__union_FilterType______ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize____fes__union_FilterType______(struct soap*, const struct ___fes__union_FilterType______ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out____fes__union_FilterType______(struct soap*, const char*, int, const struct ___fes__union_FilterType______ *, const char*);
SOAP_FMAC3 struct ___fes__union_FilterType______ * SOAP_FMAC4 soap_in____fes__union_FilterType______(struct soap*, const char*, struct ___fes__union_FilterType______ *, const char*);
SOAP_FMAC1 struct ___fes__union_FilterType______ * SOAP_FMAC2 soap_instantiate____fes__union_FilterType______(struct soap*, int, const char*, const char*, size_t*);

inline struct ___fes__union_FilterType______ * soap_new____fes__union_FilterType______(struct soap *soap, int n = -1)
{
	return soap_instantiate____fes__union_FilterType______(soap, n, NULL, NULL, NULL);
}

inline struct ___fes__union_FilterType______ * soap_new_req____fes__union_FilterType______(
	struct soap *soap,
	int __size_x005fId,
	__fes__union_FilterType______ *__union_FilterType______)
{
	struct ___fes__union_FilterType______ *_p = ::soap_new____fes__union_FilterType______(soap);
	if (_p)
	{	::soap_default____fes__union_FilterType______(soap, _p);
		_p->__size_x005fId = __size_x005fId;
		_p->__union_FilterType______ = __union_FilterType______;
	}
	return _p;
}

inline struct ___fes__union_FilterType______ * soap_new_set____fes__union_FilterType______(
	struct soap *soap,
	int __size_x005fId,
	__fes__union_FilterType______ *__union_FilterType______)
{
	struct ___fes__union_FilterType______ *_p = ::soap_new____fes__union_FilterType______(soap);
	if (_p)
	{	::soap_default____fes__union_FilterType______(soap, _p);
		_p->__size_x005fId = __size_x005fId;
		_p->__union_FilterType______ = __union_FilterType______;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put____fes__union_FilterType______(struct soap*, const struct ___fes__union_FilterType______ *, const char*, const char*);

inline int soap_write____fes__union_FilterType______(struct soap *soap, struct ___fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize____fes__union_FilterType______(soap, p), 0) || ::soap_put____fes__union_FilterType______(soap, p, ":fes--union-FilterType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT____fes__union_FilterType______(struct soap *soap, const char *URL, struct ___fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_FilterType______(soap, p), 0) || ::soap_put____fes__union_FilterType______(soap, p, ":fes--union-FilterType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH____fes__union_FilterType______(struct soap *soap, const char *URL, struct ___fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_FilterType______(soap, p), 0) || ::soap_put____fes__union_FilterType______(soap, p, ":fes--union-FilterType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send____fes__union_FilterType______(struct soap *soap, const char *URL, struct ___fes__union_FilterType______ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize____fes__union_FilterType______(soap, p), 0) || ::soap_put____fes__union_FilterType______(soap, p, ":fes--union-FilterType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ___fes__union_FilterType______ * SOAP_FMAC4 soap_get____fes__union_FilterType______(struct soap*, struct ___fes__union_FilterType______ *, const char*, const char*);

inline int soap_read____fes__union_FilterType______(struct soap *soap, struct ___fes__union_FilterType______ *p)
{
	if (p)
	{	::soap_default____fes__union_FilterType______(soap, p);
		if (soap_begin_recv(soap) || ::soap_get____fes__union_FilterType______(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET____fes__union_FilterType______(struct soap *soap, const char *URL, struct ___fes__union_FilterType______ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read____fes__union_FilterType______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv____fes__union_FilterType______(struct soap *soap, struct ___fes__union_FilterType______ *p)
{
	if (::soap_read____fes__union_FilterType______(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__TransactionType_sequence_DEFINED
#define SOAP_TYPE___wfs__TransactionType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__TransactionType_sequence(struct soap*, struct __wfs__TransactionType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__TransactionType_sequence(struct soap*, const struct __wfs__TransactionType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__TransactionType_sequence(struct soap*, const char*, int, const struct __wfs__TransactionType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__TransactionType_sequence * SOAP_FMAC4 soap_in___wfs__TransactionType_sequence(struct soap*, const char*, struct __wfs__TransactionType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__TransactionType_sequence * SOAP_FMAC2 soap_instantiate___wfs__TransactionType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__TransactionType_sequence * soap_new___wfs__TransactionType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__TransactionType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__TransactionType_sequence * soap_new_req___wfs__TransactionType_sequence(
	struct soap *soap,
	const union _wfs__union_TransactionType& union_TransactionType)
{
	struct __wfs__TransactionType_sequence *_p = ::soap_new___wfs__TransactionType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__TransactionType_sequence(soap, _p);
		_p->union_TransactionType = union_TransactionType;
	}
	return _p;
}

inline struct __wfs__TransactionType_sequence * soap_new_set___wfs__TransactionType_sequence(
	struct soap *soap,
	int __unionAbstractTransactionAction,
	const union _wfs__union_TransactionType& union_TransactionType)
{
	struct __wfs__TransactionType_sequence *_p = ::soap_new___wfs__TransactionType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__TransactionType_sequence(soap, _p);
		_p->__unionAbstractTransactionAction = __unionAbstractTransactionAction;
		_p->union_TransactionType = union_TransactionType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__TransactionType_sequence(struct soap*, const struct __wfs__TransactionType_sequence *, const char*, const char*);

inline int soap_write___wfs__TransactionType_sequence(struct soap *soap, struct __wfs__TransactionType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__TransactionType_sequence(soap, p), 0) || ::soap_put___wfs__TransactionType_sequence(soap, p, "-wfs:TransactionType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__TransactionType_sequence(struct soap *soap, const char *URL, struct __wfs__TransactionType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__TransactionType_sequence(soap, p), 0) || ::soap_put___wfs__TransactionType_sequence(soap, p, "-wfs:TransactionType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__TransactionType_sequence(struct soap *soap, const char *URL, struct __wfs__TransactionType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__TransactionType_sequence(soap, p), 0) || ::soap_put___wfs__TransactionType_sequence(soap, p, "-wfs:TransactionType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__TransactionType_sequence(struct soap *soap, const char *URL, struct __wfs__TransactionType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__TransactionType_sequence(soap, p), 0) || ::soap_put___wfs__TransactionType_sequence(soap, p, "-wfs:TransactionType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__TransactionType_sequence * SOAP_FMAC4 soap_get___wfs__TransactionType_sequence(struct soap*, struct __wfs__TransactionType_sequence *, const char*, const char*);

inline int soap_read___wfs__TransactionType_sequence(struct soap *soap, struct __wfs__TransactionType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__TransactionType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__TransactionType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__TransactionType_sequence(struct soap *soap, const char *URL, struct __wfs__TransactionType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__TransactionType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__TransactionType_sequence(struct soap *soap, struct __wfs__TransactionType_sequence *p)
{
	if (::soap_read___wfs__TransactionType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___fes__ComparisonOperatorsType_sequence_DEFINED
#define SOAP_TYPE___fes__ComparisonOperatorsType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___fes__ComparisonOperatorsType_sequence(struct soap*, struct __fes__ComparisonOperatorsType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___fes__ComparisonOperatorsType_sequence(struct soap*, const struct __fes__ComparisonOperatorsType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___fes__ComparisonOperatorsType_sequence(struct soap*, const char*, int, const struct __fes__ComparisonOperatorsType_sequence *, const char*);
SOAP_FMAC3 struct __fes__ComparisonOperatorsType_sequence * SOAP_FMAC4 soap_in___fes__ComparisonOperatorsType_sequence(struct soap*, const char*, struct __fes__ComparisonOperatorsType_sequence *, const char*);
SOAP_FMAC1 struct __fes__ComparisonOperatorsType_sequence * SOAP_FMAC2 soap_instantiate___fes__ComparisonOperatorsType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __fes__ComparisonOperatorsType_sequence * soap_new___fes__ComparisonOperatorsType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___fes__ComparisonOperatorsType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __fes__ComparisonOperatorsType_sequence * soap_new_req___fes__ComparisonOperatorsType_sequence(
	struct soap *soap,
	fes__ComparisonOperatorType *ComparisonOperator)
{
	struct __fes__ComparisonOperatorsType_sequence *_p = ::soap_new___fes__ComparisonOperatorsType_sequence(soap);
	if (_p)
	{	::soap_default___fes__ComparisonOperatorsType_sequence(soap, _p);
		_p->ComparisonOperator = ComparisonOperator;
	}
	return _p;
}

inline struct __fes__ComparisonOperatorsType_sequence * soap_new_set___fes__ComparisonOperatorsType_sequence(
	struct soap *soap,
	fes__ComparisonOperatorType *ComparisonOperator)
{
	struct __fes__ComparisonOperatorsType_sequence *_p = ::soap_new___fes__ComparisonOperatorsType_sequence(soap);
	if (_p)
	{	::soap_default___fes__ComparisonOperatorsType_sequence(soap, _p);
		_p->ComparisonOperator = ComparisonOperator;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___fes__ComparisonOperatorsType_sequence(struct soap*, const struct __fes__ComparisonOperatorsType_sequence *, const char*, const char*);

inline int soap_write___fes__ComparisonOperatorsType_sequence(struct soap *soap, struct __fes__ComparisonOperatorsType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___fes__ComparisonOperatorsType_sequence(soap, p), 0) || ::soap_put___fes__ComparisonOperatorsType_sequence(soap, p, "-fes:ComparisonOperatorsType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___fes__ComparisonOperatorsType_sequence(struct soap *soap, const char *URL, struct __fes__ComparisonOperatorsType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___fes__ComparisonOperatorsType_sequence(soap, p), 0) || ::soap_put___fes__ComparisonOperatorsType_sequence(soap, p, "-fes:ComparisonOperatorsType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___fes__ComparisonOperatorsType_sequence(struct soap *soap, const char *URL, struct __fes__ComparisonOperatorsType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___fes__ComparisonOperatorsType_sequence(soap, p), 0) || ::soap_put___fes__ComparisonOperatorsType_sequence(soap, p, "-fes:ComparisonOperatorsType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___fes__ComparisonOperatorsType_sequence(struct soap *soap, const char *URL, struct __fes__ComparisonOperatorsType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___fes__ComparisonOperatorsType_sequence(soap, p), 0) || ::soap_put___fes__ComparisonOperatorsType_sequence(soap, p, "-fes:ComparisonOperatorsType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __fes__ComparisonOperatorsType_sequence * SOAP_FMAC4 soap_get___fes__ComparisonOperatorsType_sequence(struct soap*, struct __fes__ComparisonOperatorsType_sequence *, const char*, const char*);

inline int soap_read___fes__ComparisonOperatorsType_sequence(struct soap *soap, struct __fes__ComparisonOperatorsType_sequence *p)
{
	if (p)
	{	::soap_default___fes__ComparisonOperatorsType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___fes__ComparisonOperatorsType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___fes__ComparisonOperatorsType_sequence(struct soap *soap, const char *URL, struct __fes__ComparisonOperatorsType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___fes__ComparisonOperatorsType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___fes__ComparisonOperatorsType_sequence(struct soap *soap, struct __fes__ComparisonOperatorsType_sequence *p)
{
	if (::soap_read___fes__ComparisonOperatorsType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__CreatedOrModifiedFeatureType_sequence_DEFINED
#define SOAP_TYPE___wfs__CreatedOrModifiedFeatureType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, struct __wfs__CreatedOrModifiedFeatureType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, const struct __wfs__CreatedOrModifiedFeatureType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, const char*, int, const struct __wfs__CreatedOrModifiedFeatureType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__CreatedOrModifiedFeatureType_sequence * SOAP_FMAC4 soap_in___wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, const char*, struct __wfs__CreatedOrModifiedFeatureType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__CreatedOrModifiedFeatureType_sequence * SOAP_FMAC2 soap_instantiate___wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__CreatedOrModifiedFeatureType_sequence * soap_new___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__CreatedOrModifiedFeatureType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__CreatedOrModifiedFeatureType_sequence * soap_new_req___wfs__CreatedOrModifiedFeatureType_sequence(
	struct soap *soap,
	fes__ResourceIdType *fes__ResourceId)
{
	struct __wfs__CreatedOrModifiedFeatureType_sequence *_p = ::soap_new___wfs__CreatedOrModifiedFeatureType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__CreatedOrModifiedFeatureType_sequence(soap, _p);
		_p->fes__ResourceId = fes__ResourceId;
	}
	return _p;
}

inline struct __wfs__CreatedOrModifiedFeatureType_sequence * soap_new_set___wfs__CreatedOrModifiedFeatureType_sequence(
	struct soap *soap,
	fes__ResourceIdType *fes__ResourceId)
{
	struct __wfs__CreatedOrModifiedFeatureType_sequence *_p = ::soap_new___wfs__CreatedOrModifiedFeatureType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__CreatedOrModifiedFeatureType_sequence(soap, _p);
		_p->fes__ResourceId = fes__ResourceId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, const struct __wfs__CreatedOrModifiedFeatureType_sequence *, const char*, const char*);

inline int soap_write___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, struct __wfs__CreatedOrModifiedFeatureType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__CreatedOrModifiedFeatureType_sequence(soap, p), 0) || ::soap_put___wfs__CreatedOrModifiedFeatureType_sequence(soap, p, "-wfs:CreatedOrModifiedFeatureType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, const char *URL, struct __wfs__CreatedOrModifiedFeatureType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__CreatedOrModifiedFeatureType_sequence(soap, p), 0) || ::soap_put___wfs__CreatedOrModifiedFeatureType_sequence(soap, p, "-wfs:CreatedOrModifiedFeatureType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, const char *URL, struct __wfs__CreatedOrModifiedFeatureType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__CreatedOrModifiedFeatureType_sequence(soap, p), 0) || ::soap_put___wfs__CreatedOrModifiedFeatureType_sequence(soap, p, "-wfs:CreatedOrModifiedFeatureType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, const char *URL, struct __wfs__CreatedOrModifiedFeatureType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__CreatedOrModifiedFeatureType_sequence(soap, p), 0) || ::soap_put___wfs__CreatedOrModifiedFeatureType_sequence(soap, p, "-wfs:CreatedOrModifiedFeatureType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__CreatedOrModifiedFeatureType_sequence * SOAP_FMAC4 soap_get___wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, struct __wfs__CreatedOrModifiedFeatureType_sequence *, const char*, const char*);

inline int soap_read___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, struct __wfs__CreatedOrModifiedFeatureType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__CreatedOrModifiedFeatureType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__CreatedOrModifiedFeatureType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, const char *URL, struct __wfs__CreatedOrModifiedFeatureType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__CreatedOrModifiedFeatureType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, struct __wfs__CreatedOrModifiedFeatureType_sequence *p)
{
	if (::soap_read___wfs__CreatedOrModifiedFeatureType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__FeaturesNotLockedType_sequence_DEFINED
#define SOAP_TYPE___wfs__FeaturesNotLockedType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__FeaturesNotLockedType_sequence(struct soap*, struct __wfs__FeaturesNotLockedType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__FeaturesNotLockedType_sequence(struct soap*, const struct __wfs__FeaturesNotLockedType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__FeaturesNotLockedType_sequence(struct soap*, const char*, int, const struct __wfs__FeaturesNotLockedType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__FeaturesNotLockedType_sequence * SOAP_FMAC4 soap_in___wfs__FeaturesNotLockedType_sequence(struct soap*, const char*, struct __wfs__FeaturesNotLockedType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__FeaturesNotLockedType_sequence * SOAP_FMAC2 soap_instantiate___wfs__FeaturesNotLockedType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__FeaturesNotLockedType_sequence * soap_new___wfs__FeaturesNotLockedType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__FeaturesNotLockedType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__FeaturesNotLockedType_sequence * soap_new_req___wfs__FeaturesNotLockedType_sequence(
	struct soap *soap,
	fes__ResourceIdType *fes__ResourceId)
{
	struct __wfs__FeaturesNotLockedType_sequence *_p = ::soap_new___wfs__FeaturesNotLockedType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__FeaturesNotLockedType_sequence(soap, _p);
		_p->fes__ResourceId = fes__ResourceId;
	}
	return _p;
}

inline struct __wfs__FeaturesNotLockedType_sequence * soap_new_set___wfs__FeaturesNotLockedType_sequence(
	struct soap *soap,
	fes__ResourceIdType *fes__ResourceId)
{
	struct __wfs__FeaturesNotLockedType_sequence *_p = ::soap_new___wfs__FeaturesNotLockedType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__FeaturesNotLockedType_sequence(soap, _p);
		_p->fes__ResourceId = fes__ResourceId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__FeaturesNotLockedType_sequence(struct soap*, const struct __wfs__FeaturesNotLockedType_sequence *, const char*, const char*);

inline int soap_write___wfs__FeaturesNotLockedType_sequence(struct soap *soap, struct __wfs__FeaturesNotLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__FeaturesNotLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesNotLockedType_sequence(soap, p, "-wfs:FeaturesNotLockedType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__FeaturesNotLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesNotLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__FeaturesNotLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesNotLockedType_sequence(soap, p, "-wfs:FeaturesNotLockedType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__FeaturesNotLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesNotLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__FeaturesNotLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesNotLockedType_sequence(soap, p, "-wfs:FeaturesNotLockedType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__FeaturesNotLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesNotLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__FeaturesNotLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesNotLockedType_sequence(soap, p, "-wfs:FeaturesNotLockedType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__FeaturesNotLockedType_sequence * SOAP_FMAC4 soap_get___wfs__FeaturesNotLockedType_sequence(struct soap*, struct __wfs__FeaturesNotLockedType_sequence *, const char*, const char*);

inline int soap_read___wfs__FeaturesNotLockedType_sequence(struct soap *soap, struct __wfs__FeaturesNotLockedType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__FeaturesNotLockedType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__FeaturesNotLockedType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__FeaturesNotLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesNotLockedType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__FeaturesNotLockedType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__FeaturesNotLockedType_sequence(struct soap *soap, struct __wfs__FeaturesNotLockedType_sequence *p)
{
	if (::soap_read___wfs__FeaturesNotLockedType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__FeaturesLockedType_sequence_DEFINED
#define SOAP_TYPE___wfs__FeaturesLockedType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__FeaturesLockedType_sequence(struct soap*, struct __wfs__FeaturesLockedType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__FeaturesLockedType_sequence(struct soap*, const struct __wfs__FeaturesLockedType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__FeaturesLockedType_sequence(struct soap*, const char*, int, const struct __wfs__FeaturesLockedType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__FeaturesLockedType_sequence * SOAP_FMAC4 soap_in___wfs__FeaturesLockedType_sequence(struct soap*, const char*, struct __wfs__FeaturesLockedType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__FeaturesLockedType_sequence * SOAP_FMAC2 soap_instantiate___wfs__FeaturesLockedType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__FeaturesLockedType_sequence * soap_new___wfs__FeaturesLockedType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__FeaturesLockedType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__FeaturesLockedType_sequence * soap_new_req___wfs__FeaturesLockedType_sequence(
	struct soap *soap,
	fes__ResourceIdType *fes__ResourceId)
{
	struct __wfs__FeaturesLockedType_sequence *_p = ::soap_new___wfs__FeaturesLockedType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__FeaturesLockedType_sequence(soap, _p);
		_p->fes__ResourceId = fes__ResourceId;
	}
	return _p;
}

inline struct __wfs__FeaturesLockedType_sequence * soap_new_set___wfs__FeaturesLockedType_sequence(
	struct soap *soap,
	fes__ResourceIdType *fes__ResourceId)
{
	struct __wfs__FeaturesLockedType_sequence *_p = ::soap_new___wfs__FeaturesLockedType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__FeaturesLockedType_sequence(soap, _p);
		_p->fes__ResourceId = fes__ResourceId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__FeaturesLockedType_sequence(struct soap*, const struct __wfs__FeaturesLockedType_sequence *, const char*, const char*);

inline int soap_write___wfs__FeaturesLockedType_sequence(struct soap *soap, struct __wfs__FeaturesLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__FeaturesLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesLockedType_sequence(soap, p, "-wfs:FeaturesLockedType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__FeaturesLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__FeaturesLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesLockedType_sequence(soap, p, "-wfs:FeaturesLockedType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__FeaturesLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__FeaturesLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesLockedType_sequence(soap, p, "-wfs:FeaturesLockedType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__FeaturesLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesLockedType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__FeaturesLockedType_sequence(soap, p), 0) || ::soap_put___wfs__FeaturesLockedType_sequence(soap, p, "-wfs:FeaturesLockedType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__FeaturesLockedType_sequence * SOAP_FMAC4 soap_get___wfs__FeaturesLockedType_sequence(struct soap*, struct __wfs__FeaturesLockedType_sequence *, const char*, const char*);

inline int soap_read___wfs__FeaturesLockedType_sequence(struct soap *soap, struct __wfs__FeaturesLockedType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__FeaturesLockedType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__FeaturesLockedType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__FeaturesLockedType_sequence(struct soap *soap, const char *URL, struct __wfs__FeaturesLockedType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__FeaturesLockedType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__FeaturesLockedType_sequence(struct soap *soap, struct __wfs__FeaturesLockedType_sequence *p)
{
	if (::soap_read___wfs__FeaturesLockedType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__ValueListType_sequence_DEFINED
#define SOAP_TYPE___wfs__ValueListType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__ValueListType_sequence(struct soap*, struct __wfs__ValueListType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__ValueListType_sequence(struct soap*, const struct __wfs__ValueListType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__ValueListType_sequence(struct soap*, const char*, int, const struct __wfs__ValueListType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__ValueListType_sequence * SOAP_FMAC4 soap_in___wfs__ValueListType_sequence(struct soap*, const char*, struct __wfs__ValueListType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__ValueListType_sequence * SOAP_FMAC2 soap_instantiate___wfs__ValueListType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__ValueListType_sequence * soap_new___wfs__ValueListType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__ValueListType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__ValueListType_sequence * soap_new_req___wfs__ValueListType_sequence(
	struct soap *soap,
	xsd__anyType *Value)
{
	struct __wfs__ValueListType_sequence *_p = ::soap_new___wfs__ValueListType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__ValueListType_sequence(soap, _p);
		_p->Value = Value;
	}
	return _p;
}

inline struct __wfs__ValueListType_sequence * soap_new_set___wfs__ValueListType_sequence(
	struct soap *soap,
	xsd__anyType *Value)
{
	struct __wfs__ValueListType_sequence *_p = ::soap_new___wfs__ValueListType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__ValueListType_sequence(soap, _p);
		_p->Value = Value;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__ValueListType_sequence(struct soap*, const struct __wfs__ValueListType_sequence *, const char*, const char*);

inline int soap_write___wfs__ValueListType_sequence(struct soap *soap, struct __wfs__ValueListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__ValueListType_sequence(soap, p), 0) || ::soap_put___wfs__ValueListType_sequence(soap, p, "-wfs:ValueListType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__ValueListType_sequence(struct soap *soap, const char *URL, struct __wfs__ValueListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__ValueListType_sequence(soap, p), 0) || ::soap_put___wfs__ValueListType_sequence(soap, p, "-wfs:ValueListType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__ValueListType_sequence(struct soap *soap, const char *URL, struct __wfs__ValueListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__ValueListType_sequence(soap, p), 0) || ::soap_put___wfs__ValueListType_sequence(soap, p, "-wfs:ValueListType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__ValueListType_sequence(struct soap *soap, const char *URL, struct __wfs__ValueListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__ValueListType_sequence(soap, p), 0) || ::soap_put___wfs__ValueListType_sequence(soap, p, "-wfs:ValueListType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__ValueListType_sequence * SOAP_FMAC4 soap_get___wfs__ValueListType_sequence(struct soap*, struct __wfs__ValueListType_sequence *, const char*, const char*);

inline int soap_read___wfs__ValueListType_sequence(struct soap *soap, struct __wfs__ValueListType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__ValueListType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__ValueListType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__ValueListType_sequence(struct soap *soap, const char *URL, struct __wfs__ValueListType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__ValueListType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__ValueListType_sequence(struct soap *soap, struct __wfs__ValueListType_sequence *p)
{
	if (::soap_read___wfs__ValueListType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__OutputFormatListType_sequence_DEFINED
#define SOAP_TYPE___wfs__OutputFormatListType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__OutputFormatListType_sequence(struct soap*, struct __wfs__OutputFormatListType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__OutputFormatListType_sequence(struct soap*, const struct __wfs__OutputFormatListType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__OutputFormatListType_sequence(struct soap*, const char*, int, const struct __wfs__OutputFormatListType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__OutputFormatListType_sequence * SOAP_FMAC4 soap_in___wfs__OutputFormatListType_sequence(struct soap*, const char*, struct __wfs__OutputFormatListType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__OutputFormatListType_sequence * SOAP_FMAC2 soap_instantiate___wfs__OutputFormatListType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__OutputFormatListType_sequence * soap_new___wfs__OutputFormatListType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__OutputFormatListType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__OutputFormatListType_sequence * soap_new_req___wfs__OutputFormatListType_sequence(
	struct soap *soap,
	const std::string& Format)
{
	struct __wfs__OutputFormatListType_sequence *_p = ::soap_new___wfs__OutputFormatListType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__OutputFormatListType_sequence(soap, _p);
		_p->Format = Format;
	}
	return _p;
}

inline struct __wfs__OutputFormatListType_sequence * soap_new_set___wfs__OutputFormatListType_sequence(
	struct soap *soap,
	const std::string& Format)
{
	struct __wfs__OutputFormatListType_sequence *_p = ::soap_new___wfs__OutputFormatListType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__OutputFormatListType_sequence(soap, _p);
		_p->Format = Format;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__OutputFormatListType_sequence(struct soap*, const struct __wfs__OutputFormatListType_sequence *, const char*, const char*);

inline int soap_write___wfs__OutputFormatListType_sequence(struct soap *soap, struct __wfs__OutputFormatListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__OutputFormatListType_sequence(soap, p), 0) || ::soap_put___wfs__OutputFormatListType_sequence(soap, p, "-wfs:OutputFormatListType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__OutputFormatListType_sequence(struct soap *soap, const char *URL, struct __wfs__OutputFormatListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__OutputFormatListType_sequence(soap, p), 0) || ::soap_put___wfs__OutputFormatListType_sequence(soap, p, "-wfs:OutputFormatListType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__OutputFormatListType_sequence(struct soap *soap, const char *URL, struct __wfs__OutputFormatListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__OutputFormatListType_sequence(soap, p), 0) || ::soap_put___wfs__OutputFormatListType_sequence(soap, p, "-wfs:OutputFormatListType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__OutputFormatListType_sequence(struct soap *soap, const char *URL, struct __wfs__OutputFormatListType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__OutputFormatListType_sequence(soap, p), 0) || ::soap_put___wfs__OutputFormatListType_sequence(soap, p, "-wfs:OutputFormatListType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__OutputFormatListType_sequence * SOAP_FMAC4 soap_get___wfs__OutputFormatListType_sequence(struct soap*, struct __wfs__OutputFormatListType_sequence *, const char*, const char*);

inline int soap_read___wfs__OutputFormatListType_sequence(struct soap *soap, struct __wfs__OutputFormatListType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__OutputFormatListType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__OutputFormatListType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__OutputFormatListType_sequence(struct soap *soap, const char *URL, struct __wfs__OutputFormatListType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__OutputFormatListType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__OutputFormatListType_sequence(struct soap *soap, struct __wfs__OutputFormatListType_sequence *p)
{
	if (::soap_read___wfs__OutputFormatListType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__StoredQueryPropertyType_sequence_DEFINED
#define SOAP_TYPE___wfs__StoredQueryPropertyType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__StoredQueryPropertyType_sequence(struct soap*, struct __wfs__StoredQueryPropertyType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__StoredQueryPropertyType_sequence(struct soap*, const struct __wfs__StoredQueryPropertyType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__StoredQueryPropertyType_sequence(struct soap*, const char*, int, const struct __wfs__StoredQueryPropertyType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__StoredQueryPropertyType_sequence * SOAP_FMAC4 soap_in___wfs__StoredQueryPropertyType_sequence(struct soap*, const char*, struct __wfs__StoredQueryPropertyType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__StoredQueryPropertyType_sequence * SOAP_FMAC2 soap_instantiate___wfs__StoredQueryPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__StoredQueryPropertyType_sequence * soap_new___wfs__StoredQueryPropertyType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__StoredQueryPropertyType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__StoredQueryPropertyType_sequence * soap_new_req___wfs__StoredQueryPropertyType_sequence(
	struct soap *soap,
	wfs__StoredQueryType *StoredQuery)
{
	struct __wfs__StoredQueryPropertyType_sequence *_p = ::soap_new___wfs__StoredQueryPropertyType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__StoredQueryPropertyType_sequence(soap, _p);
		_p->StoredQuery = StoredQuery;
	}
	return _p;
}

inline struct __wfs__StoredQueryPropertyType_sequence * soap_new_set___wfs__StoredQueryPropertyType_sequence(
	struct soap *soap,
	wfs__StoredQueryType *StoredQuery)
{
	struct __wfs__StoredQueryPropertyType_sequence *_p = ::soap_new___wfs__StoredQueryPropertyType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__StoredQueryPropertyType_sequence(soap, _p);
		_p->StoredQuery = StoredQuery;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__StoredQueryPropertyType_sequence(struct soap*, const struct __wfs__StoredQueryPropertyType_sequence *, const char*, const char*);

inline int soap_write___wfs__StoredQueryPropertyType_sequence(struct soap *soap, struct __wfs__StoredQueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__StoredQueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__StoredQueryPropertyType_sequence(soap, p, "-wfs:StoredQueryPropertyType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__StoredQueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__StoredQueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__StoredQueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__StoredQueryPropertyType_sequence(soap, p, "-wfs:StoredQueryPropertyType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__StoredQueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__StoredQueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__StoredQueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__StoredQueryPropertyType_sequence(soap, p, "-wfs:StoredQueryPropertyType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__StoredQueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__StoredQueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__StoredQueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__StoredQueryPropertyType_sequence(soap, p, "-wfs:StoredQueryPropertyType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__StoredQueryPropertyType_sequence * SOAP_FMAC4 soap_get___wfs__StoredQueryPropertyType_sequence(struct soap*, struct __wfs__StoredQueryPropertyType_sequence *, const char*, const char*);

inline int soap_read___wfs__StoredQueryPropertyType_sequence(struct soap *soap, struct __wfs__StoredQueryPropertyType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__StoredQueryPropertyType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__StoredQueryPropertyType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__StoredQueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__StoredQueryPropertyType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__StoredQueryPropertyType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__StoredQueryPropertyType_sequence(struct soap *soap, struct __wfs__StoredQueryPropertyType_sequence *p)
{
	if (::soap_read___wfs__StoredQueryPropertyType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___wfs__QueryPropertyType_sequence_DEFINED
#define SOAP_TYPE___wfs__QueryPropertyType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wfs__QueryPropertyType_sequence(struct soap*, struct __wfs__QueryPropertyType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wfs__QueryPropertyType_sequence(struct soap*, const struct __wfs__QueryPropertyType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wfs__QueryPropertyType_sequence(struct soap*, const char*, int, const struct __wfs__QueryPropertyType_sequence *, const char*);
SOAP_FMAC3 struct __wfs__QueryPropertyType_sequence * SOAP_FMAC4 soap_in___wfs__QueryPropertyType_sequence(struct soap*, const char*, struct __wfs__QueryPropertyType_sequence *, const char*);
SOAP_FMAC1 struct __wfs__QueryPropertyType_sequence * SOAP_FMAC2 soap_instantiate___wfs__QueryPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wfs__QueryPropertyType_sequence * soap_new___wfs__QueryPropertyType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate___wfs__QueryPropertyType_sequence(soap, n, NULL, NULL, NULL);
}

inline struct __wfs__QueryPropertyType_sequence * soap_new_req___wfs__QueryPropertyType_sequence(
	struct soap *soap,
	wfs__QueryType *Query)
{
	struct __wfs__QueryPropertyType_sequence *_p = ::soap_new___wfs__QueryPropertyType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__QueryPropertyType_sequence(soap, _p);
		_p->Query = Query;
	}
	return _p;
}

inline struct __wfs__QueryPropertyType_sequence * soap_new_set___wfs__QueryPropertyType_sequence(
	struct soap *soap,
	wfs__QueryType *Query)
{
	struct __wfs__QueryPropertyType_sequence *_p = ::soap_new___wfs__QueryPropertyType_sequence(soap);
	if (_p)
	{	::soap_default___wfs__QueryPropertyType_sequence(soap, _p);
		_p->Query = Query;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___wfs__QueryPropertyType_sequence(struct soap*, const struct __wfs__QueryPropertyType_sequence *, const char*, const char*);

inline int soap_write___wfs__QueryPropertyType_sequence(struct soap *soap, struct __wfs__QueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___wfs__QueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__QueryPropertyType_sequence(soap, p, "-wfs:QueryPropertyType-sequence", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___wfs__QueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__QueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__QueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__QueryPropertyType_sequence(soap, p, "-wfs:QueryPropertyType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___wfs__QueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__QueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__QueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__QueryPropertyType_sequence(soap, p, "-wfs:QueryPropertyType-sequence", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___wfs__QueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__QueryPropertyType_sequence const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___wfs__QueryPropertyType_sequence(soap, p), 0) || ::soap_put___wfs__QueryPropertyType_sequence(soap, p, "-wfs:QueryPropertyType-sequence", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __wfs__QueryPropertyType_sequence * SOAP_FMAC4 soap_get___wfs__QueryPropertyType_sequence(struct soap*, struct __wfs__QueryPropertyType_sequence *, const char*, const char*);

inline int soap_read___wfs__QueryPropertyType_sequence(struct soap *soap, struct __wfs__QueryPropertyType_sequence *p)
{
	if (p)
	{	::soap_default___wfs__QueryPropertyType_sequence(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___wfs__QueryPropertyType_sequence(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___wfs__QueryPropertyType_sequence(struct soap *soap, const char *URL, struct __wfs__QueryPropertyType_sequence *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___wfs__QueryPropertyType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___wfs__QueryPropertyType_sequence(struct soap *soap, struct __wfs__QueryPropertyType_sequence *p)
{
	if (::soap_read___wfs__QueryPropertyType_sequence(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fswe_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fswe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fswe(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fswe *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fswe(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fswe *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fswe * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fswe(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fswe *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fspa_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fspa_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fspa(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fspa *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fspa(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fspa *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fspa * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fspa(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fspa *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fslv_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fslv_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fslv(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslv *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fslv(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslv *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fslv * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fslv(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fslv *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fslo_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fslo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fslo(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fslo(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fslo *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fslo * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fslo(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fslo *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005frum_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005frum_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005frum(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005frum *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005frum(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005frum *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005frum * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005frum(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005frum *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fpor_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fpor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fpor(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fpor(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpor *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fpor * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fpor(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fpor *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fpol_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fpol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fpol(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fpol(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fpol *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fpol * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fpol(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fpol *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fmlt_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fmlt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fmlt(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fmlt *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fmlt(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fmlt *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fmlt * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fmlt(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fmlt *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005flit_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005flit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005flit(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005flit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005flit(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005flit *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005flit * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005flit(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005flit *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005flav_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005flav_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005flav(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005flav *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005flav(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005flav *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005flav * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005flav(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005flav *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fita_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fita_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fita(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fita *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fita(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fita *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fita * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fita(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fita *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fhun_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fhun_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fhun(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fhun *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fhun(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fhun *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fhun * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fhun(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fhun *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fgre_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fgre_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fgre(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgre *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fgre(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgre *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fgre * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fgre(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fgre *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fgle_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fgle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fgle(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgle *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fgle(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fgle *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fgle * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fgle(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fgle *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fger_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fger(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fger *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fger(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fger *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fger * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fger(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fger *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005ffre_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005ffre_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005ffre(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffre *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005ffre(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffre *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005ffre * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005ffre(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005ffre *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005ffin_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005ffin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005ffin(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005ffin(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005ffin *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005ffin * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005ffin(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005ffin *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fest_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fest(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fest(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fest *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fest * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fest(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fest *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005feng_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005feng_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005feng(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005feng *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005feng(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005feng *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005feng * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005feng(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005feng *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fdut_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fdut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fdut(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdut *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fdut(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdut *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fdut * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fdut(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fdut *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fdan_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fdan_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fdan(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdan *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fdan(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fdan *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fdan * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fdan(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fdan *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fcze_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fcze_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fcze(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fcze *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fcze(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fcze *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fcze * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fcze(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fcze *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fbul_DEFINED
#define SOAP_TYPE__icommon__union_citationInspireInteroperabilityRegulation_x005fbul_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationInspireInteroperabilityRegulation_x005fbul(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fbul *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationInspireInteroperabilityRegulation_x005fbul(struct soap*, int, const union _icommon__union_citationInspireInteroperabilityRegulation_x005fbul *);
SOAP_FMAC3 union _icommon__union_citationInspireInteroperabilityRegulation_x005fbul * SOAP_FMAC4 soap_in__icommon__union_citationInspireInteroperabilityRegulation_x005fbul(struct soap*, int*, union _icommon__union_citationInspireInteroperabilityRegulation_x005fbul *);
#endif

#ifndef SOAP_TYPE__icommon__union_originatingControlledVocabularyMD_DEFINED
#define SOAP_TYPE__icommon__union_originatingControlledVocabularyMD_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_originatingControlledVocabularyMD(struct soap*, int, const union _icommon__union_originatingControlledVocabularyMD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_originatingControlledVocabularyMD(struct soap*, int, const union _icommon__union_originatingControlledVocabularyMD *);
SOAP_FMAC3 union _icommon__union_originatingControlledVocabularyMD * SOAP_FMAC4 soap_in__icommon__union_originatingControlledVocabularyMD(struct soap*, int*, union _icommon__union_originatingControlledVocabularyMD *);
#endif

#ifndef SOAP_TYPE__icommon__union_originatingControlledVocabularyGemetInspireThemes_DEFINED
#define SOAP_TYPE__icommon__union_originatingControlledVocabularyGemetInspireThemes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_originatingControlledVocabularyGemetInspireThemes(struct soap*, int, const union _icommon__union_originatingControlledVocabularyGemetInspireThemes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_originatingControlledVocabularyGemetInspireThemes(struct soap*, int, const union _icommon__union_originatingControlledVocabularyGemetInspireThemes *);
SOAP_FMAC3 union _icommon__union_originatingControlledVocabularyGemetInspireThemes * SOAP_FMAC4 soap_in__icommon__union_originatingControlledVocabularyGemetInspireThemes(struct soap*, int*, union _icommon__union_originatingControlledVocabularyGemetInspireThemes *);
#endif

#ifndef SOAP_TYPE__ows__union_ReferenceGroupType_DEFINED
#define SOAP_TYPE__ows__union_ReferenceGroupType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_ReferenceGroupType(struct soap*, int, const union _ows__union_ReferenceGroupType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_ReferenceGroupType(struct soap*, int, const union _ows__union_ReferenceGroupType *);
SOAP_FMAC3 union _ows__union_ReferenceGroupType * SOAP_FMAC4 soap_in__ows__union_ReferenceGroupType(struct soap*, int*, union _ows__union_ReferenceGroupType *);
#endif

#ifndef SOAP_TYPE__ows__union_ServiceReferenceType_DEFINED
#define SOAP_TYPE__ows__union_ServiceReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_ServiceReferenceType(struct soap*, int, const union _ows__union_ServiceReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_ServiceReferenceType(struct soap*, int, const union _ows__union_ServiceReferenceType *);
SOAP_FMAC3 union _ows__union_ServiceReferenceType * SOAP_FMAC4 soap_in__ows__union_ServiceReferenceType(struct soap*, int*, union _ows__union_ServiceReferenceType *);
#endif

#ifndef SOAP_TYPE__ows__union_IdentificationType__DEFINED
#define SOAP_TYPE__ows__union_IdentificationType__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_IdentificationType_(struct soap*, int, const union _ows__union_IdentificationType_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_IdentificationType_(struct soap*, int, const union _ows__union_IdentificationType_ *);
SOAP_FMAC3 union _ows__union_IdentificationType_ * SOAP_FMAC4 soap_in__ows__union_IdentificationType_(struct soap*, int*, union _ows__union_IdentificationType_ *);
#endif

#ifndef SOAP_TYPE__ows__union_IdentificationType_DEFINED
#define SOAP_TYPE__ows__union_IdentificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_IdentificationType(struct soap*, int, const union _ows__union_IdentificationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_IdentificationType(struct soap*, int, const union _ows__union_IdentificationType *);
SOAP_FMAC3 union _ows__union_IdentificationType * SOAP_FMAC4 soap_in__ows__union_IdentificationType(struct soap*, int*, union _ows__union_IdentificationType *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationGEMETInspireThemes_x005feng_DEFINED
#define SOAP_TYPE__icommon__union_citationGEMETInspireThemes_x005feng_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationGEMETInspireThemes_x005feng(struct soap*, int, const union _icommon__union_citationGEMETInspireThemes_x005feng *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationGEMETInspireThemes_x005feng(struct soap*, int, const union _icommon__union_citationGEMETInspireThemes_x005feng *);
SOAP_FMAC3 union _icommon__union_citationGEMETInspireThemes_x005feng * SOAP_FMAC4 soap_in__icommon__union_citationGEMETInspireThemes_x005feng(struct soap*, int*, union _icommon__union_citationGEMETInspireThemes_x005feng *);
#endif

#ifndef SOAP_TYPE__icommon__union_originatingControlledVocabulary_DEFINED
#define SOAP_TYPE__icommon__union_originatingControlledVocabulary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_originatingControlledVocabulary(struct soap*, int, const union _icommon__union_originatingControlledVocabulary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_originatingControlledVocabulary(struct soap*, int, const union _icommon__union_originatingControlledVocabulary *);
SOAP_FMAC3 union _icommon__union_originatingControlledVocabulary * SOAP_FMAC4 soap_in__icommon__union_originatingControlledVocabulary(struct soap*, int*, union _icommon__union_originatingControlledVocabulary *);
#endif

#ifndef SOAP_TYPE__icommon__union_citationConformity_DEFINED
#define SOAP_TYPE__icommon__union_citationConformity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citationConformity(struct soap*, int, const union _icommon__union_citationConformity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citationConformity(struct soap*, int, const union _icommon__union_citationConformity *);
SOAP_FMAC3 union _icommon__union_citationConformity * SOAP_FMAC4 soap_in__icommon__union_citationConformity(struct soap*, int*, union _icommon__union_citationConformity *);
#endif

#ifndef SOAP_TYPE__fes__union_UnaryLogicOpType________DEFINED
#define SOAP_TYPE__fes__union_UnaryLogicOpType________DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_UnaryLogicOpType_______(struct soap*, int, const union _fes__union_UnaryLogicOpType_______ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_UnaryLogicOpType_______(struct soap*, int, const union _fes__union_UnaryLogicOpType_______ *);
SOAP_FMAC3 union _fes__union_UnaryLogicOpType_______ * SOAP_FMAC4 soap_in__fes__union_UnaryLogicOpType_______(struct soap*, int*, union _fes__union_UnaryLogicOpType_______ *);
#endif

#ifndef SOAP_TYPE__fes__union_UnaryLogicOpType__DEFINED
#define SOAP_TYPE__fes__union_UnaryLogicOpType__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_UnaryLogicOpType_(struct soap*, int, const union _fes__union_UnaryLogicOpType_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_UnaryLogicOpType_(struct soap*, int, const union _fes__union_UnaryLogicOpType_ *);
SOAP_FMAC3 union _fes__union_UnaryLogicOpType_ * SOAP_FMAC4 soap_in__fes__union_UnaryLogicOpType_(struct soap*, int*, union _fes__union_UnaryLogicOpType_ *);
#endif

#ifndef SOAP_TYPE__fes__union_BinaryLogicOpType________DEFINED
#define SOAP_TYPE__fes__union_BinaryLogicOpType________DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_BinaryLogicOpType_______(struct soap*, int, const union _fes__union_BinaryLogicOpType_______ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_BinaryLogicOpType_______(struct soap*, int, const union _fes__union_BinaryLogicOpType_______ *);
SOAP_FMAC3 union _fes__union_BinaryLogicOpType_______ * SOAP_FMAC4 soap_in__fes__union_BinaryLogicOpType_______(struct soap*, int*, union _fes__union_BinaryLogicOpType_______ *);
#endif

#ifndef SOAP_TYPE__fes__union_BinaryLogicOpType__DEFINED
#define SOAP_TYPE__fes__union_BinaryLogicOpType__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_BinaryLogicOpType_(struct soap*, int, const union _fes__union_BinaryLogicOpType_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_BinaryLogicOpType_(struct soap*, int, const union _fes__union_BinaryLogicOpType_ *);
SOAP_FMAC3 union _fes__union_BinaryLogicOpType_ * SOAP_FMAC4 soap_in__fes__union_BinaryLogicOpType_(struct soap*, int*, union _fes__union_BinaryLogicOpType_ *);
#endif

#ifndef SOAP_TYPE__fes__union_DistanceBufferType_DEFINED
#define SOAP_TYPE__fes__union_DistanceBufferType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_DistanceBufferType(struct soap*, int, const union _fes__union_DistanceBufferType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_DistanceBufferType(struct soap*, int, const union _fes__union_DistanceBufferType *);
SOAP_FMAC3 union _fes__union_DistanceBufferType * SOAP_FMAC4 soap_in__fes__union_DistanceBufferType(struct soap*, int*, union _fes__union_DistanceBufferType *);
#endif

#ifndef SOAP_TYPE__fes__union_BBOXType_DEFINED
#define SOAP_TYPE__fes__union_BBOXType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_BBOXType(struct soap*, int, const union _fes__union_BBOXType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_BBOXType(struct soap*, int, const union _fes__union_BBOXType *);
SOAP_FMAC3 union _fes__union_BBOXType * SOAP_FMAC4 soap_in__fes__union_BBOXType(struct soap*, int*, union _fes__union_BBOXType *);
#endif

#ifndef SOAP_TYPE__fes__union_BinaryTemporalOpType_DEFINED
#define SOAP_TYPE__fes__union_BinaryTemporalOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_BinaryTemporalOpType(struct soap*, int, const union _fes__union_BinaryTemporalOpType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_BinaryTemporalOpType(struct soap*, int, const union _fes__union_BinaryTemporalOpType *);
SOAP_FMAC3 union _fes__union_BinaryTemporalOpType * SOAP_FMAC4 soap_in__fes__union_BinaryTemporalOpType(struct soap*, int*, union _fes__union_BinaryTemporalOpType *);
#endif

#ifndef SOAP_TYPE__fes__union_BinarySpatialOpType_DEFINED
#define SOAP_TYPE__fes__union_BinarySpatialOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_BinarySpatialOpType(struct soap*, int, const union _fes__union_BinarySpatialOpType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_BinarySpatialOpType(struct soap*, int, const union _fes__union_BinarySpatialOpType *);
SOAP_FMAC3 union _fes__union_BinarySpatialOpType * SOAP_FMAC4 soap_in__fes__union_BinarySpatialOpType(struct soap*, int*, union _fes__union_BinarySpatialOpType *);
#endif

#ifndef SOAP_TYPE__fes__union_PropertyIsBetweenType_DEFINED
#define SOAP_TYPE__fes__union_PropertyIsBetweenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_PropertyIsBetweenType(struct soap*, int, const union _fes__union_PropertyIsBetweenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_PropertyIsBetweenType(struct soap*, int, const union _fes__union_PropertyIsBetweenType *);
SOAP_FMAC3 union _fes__union_PropertyIsBetweenType * SOAP_FMAC4 soap_in__fes__union_PropertyIsBetweenType(struct soap*, int*, union _fes__union_PropertyIsBetweenType *);
#endif

#ifndef SOAP_TYPE__fes__union_PropertyIsNilType_DEFINED
#define SOAP_TYPE__fes__union_PropertyIsNilType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_PropertyIsNilType(struct soap*, int, const union _fes__union_PropertyIsNilType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_PropertyIsNilType(struct soap*, int, const union _fes__union_PropertyIsNilType *);
SOAP_FMAC3 union _fes__union_PropertyIsNilType * SOAP_FMAC4 soap_in__fes__union_PropertyIsNilType(struct soap*, int*, union _fes__union_PropertyIsNilType *);
#endif

#ifndef SOAP_TYPE__fes__union_PropertyIsNullType_DEFINED
#define SOAP_TYPE__fes__union_PropertyIsNullType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_PropertyIsNullType(struct soap*, int, const union _fes__union_PropertyIsNullType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_PropertyIsNullType(struct soap*, int, const union _fes__union_PropertyIsNullType *);
SOAP_FMAC3 union _fes__union_PropertyIsNullType * SOAP_FMAC4 soap_in__fes__union_PropertyIsNullType(struct soap*, int*, union _fes__union_PropertyIsNullType *);
#endif

#ifndef SOAP_TYPE__fes__union_PropertyIsLikeType_DEFINED
#define SOAP_TYPE__fes__union_PropertyIsLikeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_PropertyIsLikeType(struct soap*, int, const union _fes__union_PropertyIsLikeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_PropertyIsLikeType(struct soap*, int, const union _fes__union_PropertyIsLikeType *);
SOAP_FMAC3 union _fes__union_PropertyIsLikeType * SOAP_FMAC4 soap_in__fes__union_PropertyIsLikeType(struct soap*, int*, union _fes__union_PropertyIsLikeType *);
#endif

#ifndef SOAP_TYPE__fes__union_BinaryComparisonOpType_DEFINED
#define SOAP_TYPE__fes__union_BinaryComparisonOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_BinaryComparisonOpType(struct soap*, int, const union _fes__union_BinaryComparisonOpType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_BinaryComparisonOpType(struct soap*, int, const union _fes__union_BinaryComparisonOpType *);
SOAP_FMAC3 union _fes__union_BinaryComparisonOpType * SOAP_FMAC4 soap_in__fes__union_BinaryComparisonOpType(struct soap*, int*, union _fes__union_BinaryComparisonOpType *);
#endif

#ifndef SOAP_TYPE__fes__union_FilterType_______DEFINED
#define SOAP_TYPE__fes__union_FilterType_______DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_FilterType______(struct soap*, int, const union _fes__union_FilterType______ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_FilterType______(struct soap*, int, const union _fes__union_FilterType______ *);
SOAP_FMAC3 union _fes__union_FilterType______ * SOAP_FMAC4 soap_in__fes__union_FilterType______(struct soap*, int*, union _fes__union_FilterType______ *);
#endif

#ifndef SOAP_TYPE__fes__union_FilterType_DEFINED
#define SOAP_TYPE__fes__union_FilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_FilterType(struct soap*, int, const union _fes__union_FilterType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_FilterType(struct soap*, int, const union _fes__union_FilterType *);
SOAP_FMAC3 union _fes__union_FilterType * SOAP_FMAC4 soap_in__fes__union_FilterType(struct soap*, int*, union _fes__union_FilterType *);
#endif

#ifndef SOAP_TYPE__fes__union_AbstractAdhocQueryExpressionType___DEFINED
#define SOAP_TYPE__fes__union_AbstractAdhocQueryExpressionType___DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_AbstractAdhocQueryExpressionType__(struct soap*, int, const union _fes__union_AbstractAdhocQueryExpressionType__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_AbstractAdhocQueryExpressionType__(struct soap*, int, const union _fes__union_AbstractAdhocQueryExpressionType__ *);
SOAP_FMAC3 union _fes__union_AbstractAdhocQueryExpressionType__ * SOAP_FMAC4 soap_in__fes__union_AbstractAdhocQueryExpressionType__(struct soap*, int*, union _fes__union_AbstractAdhocQueryExpressionType__ *);
#endif

#ifndef SOAP_TYPE__fes__union_AbstractAdhocQueryExpressionType__DEFINED
#define SOAP_TYPE__fes__union_AbstractAdhocQueryExpressionType__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_AbstractAdhocQueryExpressionType_(struct soap*, int, const union _fes__union_AbstractAdhocQueryExpressionType_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_AbstractAdhocQueryExpressionType_(struct soap*, int, const union _fes__union_AbstractAdhocQueryExpressionType_ *);
SOAP_FMAC3 union _fes__union_AbstractAdhocQueryExpressionType_ * SOAP_FMAC4 soap_in__fes__union_AbstractAdhocQueryExpressionType_(struct soap*, int*, union _fes__union_AbstractAdhocQueryExpressionType_ *);
#endif

#ifndef SOAP_TYPE__fes__union_AbstractAdhocQueryExpressionType_DEFINED
#define SOAP_TYPE__fes__union_AbstractAdhocQueryExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_AbstractAdhocQueryExpressionType(struct soap*, int, const union _fes__union_AbstractAdhocQueryExpressionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_AbstractAdhocQueryExpressionType(struct soap*, int, const union _fes__union_AbstractAdhocQueryExpressionType *);
SOAP_FMAC3 union _fes__union_AbstractAdhocQueryExpressionType * SOAP_FMAC4 soap_in__fes__union_AbstractAdhocQueryExpressionType(struct soap*, int*, union _fes__union_AbstractAdhocQueryExpressionType *);
#endif

#ifndef SOAP_TYPE__ows__union_DatasetDescriptionSummaryBaseType_DEFINED
#define SOAP_TYPE__ows__union_DatasetDescriptionSummaryBaseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, int, const union _ows__union_DatasetDescriptionSummaryBaseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, int, const union _ows__union_DatasetDescriptionSummaryBaseType *);
SOAP_FMAC3 union _ows__union_DatasetDescriptionSummaryBaseType * SOAP_FMAC4 soap_in__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, int*, union _ows__union_DatasetDescriptionSummaryBaseType *);
#endif

#ifndef SOAP_TYPE__wfs__union_TransactionType_DEFINED
#define SOAP_TYPE__wfs__union_TransactionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_TransactionType(struct soap*, int, const union _wfs__union_TransactionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_TransactionType(struct soap*, int, const union _wfs__union_TransactionType *);
SOAP_FMAC3 union _wfs__union_TransactionType * SOAP_FMAC4 soap_in__wfs__union_TransactionType(struct soap*, int*, union _wfs__union_TransactionType *);
#endif

#ifndef SOAP_TYPE__wfs__union_LockFeatureType_DEFINED
#define SOAP_TYPE__wfs__union_LockFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_LockFeatureType(struct soap*, int, const union _wfs__union_LockFeatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_LockFeatureType(struct soap*, int, const union _wfs__union_LockFeatureType *);
SOAP_FMAC3 union _wfs__union_LockFeatureType * SOAP_FMAC4 soap_in__wfs__union_LockFeatureType(struct soap*, int*, union _wfs__union_LockFeatureType *);
#endif

#ifndef SOAP_TYPE__wfs__union_GetFeatureType_DEFINED
#define SOAP_TYPE__wfs__union_GetFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_GetFeatureType(struct soap*, int, const union _wfs__union_GetFeatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_GetFeatureType(struct soap*, int, const union _wfs__union_GetFeatureType *);
SOAP_FMAC3 union _wfs__union_GetFeatureType * SOAP_FMAC4 soap_in__wfs__union_GetFeatureType(struct soap*, int*, union _wfs__union_GetFeatureType *);
#endif

#ifndef SOAP_TYPE__wfs__union_GetPropertyValueType_DEFINED
#define SOAP_TYPE__wfs__union_GetPropertyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_GetPropertyValueType(struct soap*, int, const union _wfs__union_GetPropertyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_GetPropertyValueType(struct soap*, int, const union _wfs__union_GetPropertyValueType *);
SOAP_FMAC3 union _wfs__union_GetPropertyValueType * SOAP_FMAC4 soap_in__wfs__union_GetPropertyValueType(struct soap*, int*, union _wfs__union_GetPropertyValueType *);
#endif

#ifndef SOAP_TYPE__icommon__union_temporalExtent_DEFINED
#define SOAP_TYPE__icommon__union_temporalExtent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_temporalExtent(struct soap*, int, const union _icommon__union_temporalExtent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_temporalExtent(struct soap*, int, const union _icommon__union_temporalExtent *);
SOAP_FMAC3 union _icommon__union_temporalExtent * SOAP_FMAC4 soap_in__icommon__union_temporalExtent(struct soap*, int*, union _icommon__union_temporalExtent *);
#endif

#ifndef SOAP_TYPE__icommon__union_citation_DEFINED
#define SOAP_TYPE__icommon__union_citation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__icommon__union_citation(struct soap*, int, const union _icommon__union_citation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__icommon__union_citation(struct soap*, int, const union _icommon__union_citation *);
SOAP_FMAC3 union _icommon__union_citation * SOAP_FMAC4 soap_in__icommon__union_citation(struct soap*, int*, union _icommon__union_citation *);
#endif

#ifndef SOAP_TYPE__fes__union_FunctionType_DEFINED
#define SOAP_TYPE__fes__union_FunctionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_FunctionType(struct soap*, int, const union _fes__union_FunctionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_FunctionType(struct soap*, int, const union _fes__union_FunctionType *);
SOAP_FMAC3 union _fes__union_FunctionType * SOAP_FMAC4 soap_in__fes__union_FunctionType(struct soap*, int*, union _fes__union_FunctionType *);
#endif

#ifndef SOAP_TYPE__fes__union_UpperBoundaryType_DEFINED
#define SOAP_TYPE__fes__union_UpperBoundaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_UpperBoundaryType(struct soap*, int, const union _fes__union_UpperBoundaryType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_UpperBoundaryType(struct soap*, int, const union _fes__union_UpperBoundaryType *);
SOAP_FMAC3 union _fes__union_UpperBoundaryType * SOAP_FMAC4 soap_in__fes__union_UpperBoundaryType(struct soap*, int*, union _fes__union_UpperBoundaryType *);
#endif

#ifndef SOAP_TYPE__fes__union_LowerBoundaryType_DEFINED
#define SOAP_TYPE__fes__union_LowerBoundaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fes__union_LowerBoundaryType(struct soap*, int, const union _fes__union_LowerBoundaryType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fes__union_LowerBoundaryType(struct soap*, int, const union _fes__union_LowerBoundaryType *);
SOAP_FMAC3 union _fes__union_LowerBoundaryType * SOAP_FMAC4 soap_in__fes__union_LowerBoundaryType(struct soap*, int*, union _fes__union_LowerBoundaryType *);
#endif

#ifndef SOAP_TYPE__xlink__union_arcType_DEFINED
#define SOAP_TYPE__xlink__union_arcType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xlink__union_arcType(struct soap*, int, const union _xlink__union_arcType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xlink__union_arcType(struct soap*, int, const union _xlink__union_arcType *);
SOAP_FMAC3 union _xlink__union_arcType * SOAP_FMAC4 soap_in__xlink__union_arcType(struct soap*, int*, union _xlink__union_arcType *);
#endif

#ifndef SOAP_TYPE__xlink__union_locatorType_DEFINED
#define SOAP_TYPE__xlink__union_locatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xlink__union_locatorType(struct soap*, int, const union _xlink__union_locatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xlink__union_locatorType(struct soap*, int, const union _xlink__union_locatorType *);
SOAP_FMAC3 union _xlink__union_locatorType * SOAP_FMAC4 soap_in__xlink__union_locatorType(struct soap*, int*, union _xlink__union_locatorType *);
#endif

#ifndef SOAP_TYPE__xlink__union_extended_DEFINED
#define SOAP_TYPE__xlink__union_extended_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xlink__union_extended(struct soap*, int, const union _xlink__union_extended *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xlink__union_extended(struct soap*, int, const union _xlink__union_extended *);
SOAP_FMAC3 union _xlink__union_extended * SOAP_FMAC4 soap_in__xlink__union_extended(struct soap*, int*, union _xlink__union_extended *);
#endif

#ifndef SOAP_TYPE__ows__union_AllowedValues_DEFINED
#define SOAP_TYPE__ows__union_AllowedValues_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_AllowedValues(struct soap*, int, const union _ows__union_AllowedValues *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_AllowedValues(struct soap*, int, const union _ows__union_AllowedValues *);
SOAP_FMAC3 union _ows__union_AllowedValues * SOAP_FMAC4 soap_in__ows__union_AllowedValues(struct soap*, int*, union _ows__union_AllowedValues *);
#endif

#ifndef SOAP_TYPE__ows__union_HTTP_DEFINED
#define SOAP_TYPE__ows__union_HTTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_HTTP(struct soap*, int, const union _ows__union_HTTP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_HTTP(struct soap*, int, const union _ows__union_HTTP *);
SOAP_FMAC3 union _ows__union_HTTP * SOAP_FMAC4 soap_in__ows__union_HTTP(struct soap*, int*, union _ows__union_HTTP *);
#endif

#ifndef SOAP_TYPE__ows__union_DCP_DEFINED
#define SOAP_TYPE__ows__union_DCP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_DCP(struct soap*, int, const union _ows__union_DCP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_DCP(struct soap*, int, const union _ows__union_DCP *);
SOAP_FMAC3 union _ows__union_DCP * SOAP_FMAC4 soap_in__ows__union_DCP(struct soap*, int*, union _ows__union_DCP *);
#endif

#ifndef SOAP_TYPE__ows__union_UnNamedDomainType__DEFINED
#define SOAP_TYPE__ows__union_UnNamedDomainType__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_UnNamedDomainType_(struct soap*, int, const union _ows__union_UnNamedDomainType_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_UnNamedDomainType_(struct soap*, int, const union _ows__union_UnNamedDomainType_ *);
SOAP_FMAC3 union _ows__union_UnNamedDomainType_ * SOAP_FMAC4 soap_in__ows__union_UnNamedDomainType_(struct soap*, int*, union _ows__union_UnNamedDomainType_ *);
#endif

#ifndef SOAP_TYPE__ows__union_UnNamedDomainType_DEFINED
#define SOAP_TYPE__ows__union_UnNamedDomainType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_UnNamedDomainType(struct soap*, int, const union _ows__union_UnNamedDomainType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_UnNamedDomainType(struct soap*, int, const union _ows__union_UnNamedDomainType *);
SOAP_FMAC3 union _ows__union_UnNamedDomainType * SOAP_FMAC4 soap_in__ows__union_UnNamedDomainType(struct soap*, int*, union _ows__union_UnNamedDomainType *);
#endif

#ifndef SOAP_TYPE__ows__union_MetadataType_DEFINED
#define SOAP_TYPE__ows__union_MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ows__union_MetadataType(struct soap*, int, const union _ows__union_MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ows__union_MetadataType(struct soap*, int, const union _ows__union_MetadataType *);
SOAP_FMAC3 union _ows__union_MetadataType * SOAP_FMAC4 soap_in__ows__union_MetadataType(struct soap*, int*, union _ows__union_MetadataType *);
#endif

#ifndef SOAP_TYPE__wfs__union_additionalObjects_DEFINED
#define SOAP_TYPE__wfs__union_additionalObjects_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_additionalObjects(struct soap*, int, const union _wfs__union_additionalObjects *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_additionalObjects(struct soap*, int, const union _wfs__union_additionalObjects *);
SOAP_FMAC3 union _wfs__union_additionalObjects * SOAP_FMAC4 soap_in__wfs__union_additionalObjects(struct soap*, int*, union _wfs__union_additionalObjects *);
#endif

#ifndef SOAP_TYPE__wfs__union_additionalValues_DEFINED
#define SOAP_TYPE__wfs__union_additionalValues_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_additionalValues(struct soap*, int, const union _wfs__union_additionalValues *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_additionalValues(struct soap*, int, const union _wfs__union_additionalValues *);
SOAP_FMAC3 union _wfs__union_additionalValues * SOAP_FMAC4 soap_in__wfs__union_additionalValues(struct soap*, int*, union _wfs__union_additionalValues *);
#endif

#ifndef SOAP_TYPE__wfs__union_QueryExpressionTextType_DEFINED
#define SOAP_TYPE__wfs__union_QueryExpressionTextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_QueryExpressionTextType(struct soap*, int, const union _wfs__union_QueryExpressionTextType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_QueryExpressionTextType(struct soap*, int, const union _wfs__union_QueryExpressionTextType *);
SOAP_FMAC3 union _wfs__union_QueryExpressionTextType * SOAP_FMAC4 soap_in__wfs__union_QueryExpressionTextType(struct soap*, int*, union _wfs__union_QueryExpressionTextType *);
#endif

#ifndef SOAP_TYPE__wfs__union_MemberPropertyType_DEFINED
#define SOAP_TYPE__wfs__union_MemberPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wfs__union_MemberPropertyType(struct soap*, int, const union _wfs__union_MemberPropertyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wfs__union_MemberPropertyType(struct soap*, int, const union _wfs__union_MemberPropertyType *);
SOAP_FMAC3 union _wfs__union_MemberPropertyType * SOAP_FMAC4 soap_in__wfs__union_MemberPropertyType(struct soap*, int*, union _wfs__union_MemberPropertyType *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTowfs__TransactionType_DEFINED
#define SOAP_TYPE_PointerTowfs__TransactionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__TransactionType(struct soap*, wfs__TransactionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__TransactionType(struct soap*, const char *, int, wfs__TransactionType *const*, const char *);
SOAP_FMAC3 wfs__TransactionType ** SOAP_FMAC4 soap_in_PointerTowfs__TransactionType(struct soap*, const char*, wfs__TransactionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__TransactionType(struct soap*, wfs__TransactionType *const*, const char*, const char*);
SOAP_FMAC3 wfs__TransactionType ** SOAP_FMAC4 soap_get_PointerTowfs__TransactionType(struct soap*, wfs__TransactionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__LockFeatureType_DEFINED
#define SOAP_TYPE_PointerTowfs__LockFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__LockFeatureType(struct soap*, wfs__LockFeatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__LockFeatureType(struct soap*, const char *, int, wfs__LockFeatureType *const*, const char *);
SOAP_FMAC3 wfs__LockFeatureType ** SOAP_FMAC4 soap_in_PointerTowfs__LockFeatureType(struct soap*, const char*, wfs__LockFeatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__LockFeatureType(struct soap*, wfs__LockFeatureType *const*, const char*, const char*);
SOAP_FMAC3 wfs__LockFeatureType ** SOAP_FMAC4 soap_get_PointerTowfs__LockFeatureType(struct soap*, wfs__LockFeatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__GetPropertyValueType_DEFINED
#define SOAP_TYPE_PointerTowfs__GetPropertyValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__GetPropertyValueType(struct soap*, wfs__GetPropertyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__GetPropertyValueType(struct soap*, const char *, int, wfs__GetPropertyValueType *const*, const char *);
SOAP_FMAC3 wfs__GetPropertyValueType ** SOAP_FMAC4 soap_in_PointerTowfs__GetPropertyValueType(struct soap*, const char*, wfs__GetPropertyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__GetPropertyValueType(struct soap*, wfs__GetPropertyValueType *const*, const char*, const char*);
SOAP_FMAC3 wfs__GetPropertyValueType ** SOAP_FMAC4 soap_get_PointerTowfs__GetPropertyValueType(struct soap*, wfs__GetPropertyValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__GetFeatureWithLockType_DEFINED
#define SOAP_TYPE_PointerTowfs__GetFeatureWithLockType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__GetFeatureWithLockType(struct soap*, wfs__GetFeatureWithLockType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__GetFeatureWithLockType(struct soap*, const char *, int, wfs__GetFeatureWithLockType *const*, const char *);
SOAP_FMAC3 wfs__GetFeatureWithLockType ** SOAP_FMAC4 soap_in_PointerTowfs__GetFeatureWithLockType(struct soap*, const char*, wfs__GetFeatureWithLockType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__GetFeatureWithLockType(struct soap*, wfs__GetFeatureWithLockType *const*, const char*, const char*);
SOAP_FMAC3 wfs__GetFeatureWithLockType ** SOAP_FMAC4 soap_get_PointerTowfs__GetFeatureWithLockType(struct soap*, wfs__GetFeatureWithLockType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__GetCapabilitiesType_DEFINED
#define SOAP_TYPE_PointerToows__GetCapabilitiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__GetCapabilitiesType(struct soap*, ows__GetCapabilitiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__GetCapabilitiesType(struct soap*, const char *, int, ows__GetCapabilitiesType *const*, const char *);
SOAP_FMAC3 ows__GetCapabilitiesType ** SOAP_FMAC4 soap_in_PointerToows__GetCapabilitiesType(struct soap*, const char*, ows__GetCapabilitiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__GetCapabilitiesType(struct soap*, ows__GetCapabilitiesType *const*, const char*, const char*);
SOAP_FMAC3 ows__GetCapabilitiesType ** SOAP_FMAC4 soap_get_PointerToows__GetCapabilitiesType(struct soap*, ows__GetCapabilitiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__DropStoredQuery_DEFINED
#define SOAP_TYPE_PointerTo_wfs__DropStoredQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__DropStoredQuery(struct soap*, _wfs__DropStoredQuery *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__DropStoredQuery(struct soap*, const char *, int, _wfs__DropStoredQuery *const*, const char *);
SOAP_FMAC3 _wfs__DropStoredQuery ** SOAP_FMAC4 soap_in_PointerTo_wfs__DropStoredQuery(struct soap*, const char*, _wfs__DropStoredQuery **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__DropStoredQuery(struct soap*, _wfs__DropStoredQuery *const*, const char*, const char*);
SOAP_FMAC3 _wfs__DropStoredQuery ** SOAP_FMAC4 soap_get_PointerTo_wfs__DropStoredQuery(struct soap*, _wfs__DropStoredQuery **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ListStoredQueriesType_DEFINED
#define SOAP_TYPE_PointerTowfs__ListStoredQueriesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ListStoredQueriesType(struct soap*, wfs__ListStoredQueriesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ListStoredQueriesType(struct soap*, const char *, int, wfs__ListStoredQueriesType *const*, const char *);
SOAP_FMAC3 wfs__ListStoredQueriesType ** SOAP_FMAC4 soap_in_PointerTowfs__ListStoredQueriesType(struct soap*, const char*, wfs__ListStoredQueriesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ListStoredQueriesType(struct soap*, wfs__ListStoredQueriesType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ListStoredQueriesType ** SOAP_FMAC4 soap_get_PointerTowfs__ListStoredQueriesType(struct soap*, wfs__ListStoredQueriesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__DescribeStoredQueriesType_DEFINED
#define SOAP_TYPE_PointerTowfs__DescribeStoredQueriesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__DescribeStoredQueriesType(struct soap*, wfs__DescribeStoredQueriesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__DescribeStoredQueriesType(struct soap*, const char *, int, wfs__DescribeStoredQueriesType *const*, const char *);
SOAP_FMAC3 wfs__DescribeStoredQueriesType ** SOAP_FMAC4 soap_in_PointerTowfs__DescribeStoredQueriesType(struct soap*, const char*, wfs__DescribeStoredQueriesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__DescribeStoredQueriesType(struct soap*, wfs__DescribeStoredQueriesType *const*, const char*, const char*);
SOAP_FMAC3 wfs__DescribeStoredQueriesType ** SOAP_FMAC4 soap_get_PointerTowfs__DescribeStoredQueriesType(struct soap*, wfs__DescribeStoredQueriesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__GetFeatureType_DEFINED
#define SOAP_TYPE_PointerTowfs__GetFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__GetFeatureType(struct soap*, wfs__GetFeatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__GetFeatureType(struct soap*, const char *, int, wfs__GetFeatureType *const*, const char *);
SOAP_FMAC3 wfs__GetFeatureType ** SOAP_FMAC4 soap_in_PointerTowfs__GetFeatureType(struct soap*, const char*, wfs__GetFeatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__GetFeatureType(struct soap*, wfs__GetFeatureType *const*, const char*, const char*);
SOAP_FMAC3 wfs__GetFeatureType ** SOAP_FMAC4 soap_get_PointerTowfs__GetFeatureType(struct soap*, wfs__GetFeatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__DescribeFeatureTypeType_DEFINED
#define SOAP_TYPE_PointerTowfs__DescribeFeatureTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__DescribeFeatureTypeType(struct soap*, wfs__DescribeFeatureTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__DescribeFeatureTypeType(struct soap*, const char *, int, wfs__DescribeFeatureTypeType *const*, const char *);
SOAP_FMAC3 wfs__DescribeFeatureTypeType ** SOAP_FMAC4 soap_in_PointerTowfs__DescribeFeatureTypeType(struct soap*, const char*, wfs__DescribeFeatureTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__DescribeFeatureTypeType(struct soap*, wfs__DescribeFeatureTypeType *const*, const char*, const char*);
SOAP_FMAC3 wfs__DescribeFeatureTypeType ** SOAP_FMAC4 soap_get_PointerTowfs__DescribeFeatureTypeType(struct soap*, wfs__DescribeFeatureTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__CreateStoredQueryType_DEFINED
#define SOAP_TYPE_PointerTowfs__CreateStoredQueryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__CreateStoredQueryType(struct soap*, wfs__CreateStoredQueryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__CreateStoredQueryType(struct soap*, const char *, int, wfs__CreateStoredQueryType *const*, const char *);
SOAP_FMAC3 wfs__CreateStoredQueryType ** SOAP_FMAC4 soap_in_PointerTowfs__CreateStoredQueryType(struct soap*, const char*, wfs__CreateStoredQueryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__CreateStoredQueryType(struct soap*, wfs__CreateStoredQueryType *const*, const char*, const char*);
SOAP_FMAC3 wfs__CreateStoredQueryType ** SOAP_FMAC4 soap_get_PointerTowfs__CreateStoredQueryType(struct soap*, wfs__CreateStoredQueryType **, const char*, const char*);
#endif
/* _idls__crs is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE__idls__crs_DEFINED
#define SOAP_TYPE__idls__crs_DEFINED

#define soap_default__idls__crs soap_default_xsd__anyURI


#define soap_serialize__idls__crs soap_serialize_xsd__anyURI


#define soap__idls__crs2s(soap, a) (a)

#define soap_out__idls__crs soap_out_xsd__anyURI


#define soap_s2_idls__crs(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)

#define soap_in__idls__crs soap_in_xsd__anyURI


#define soap_instantiate__idls__crs soap_instantiate_xsd__anyURI


#define soap_new__idls__crs soap_new_xsd__anyURI


#define soap_put__idls__crs soap_put_xsd__anyURI


#define soap_write__idls__crs soap_write_xsd__anyURI


#define soap_PUT__idls__crs soap_PUT_xsd__anyURI


#define soap_PATCH__idls__crs soap_PATCH_xsd__anyURI


#define soap_POST_send__idls__crs soap_POST_send_xsd__anyURI


#define soap_get__idls__crs soap_get_xsd__anyURI


#define soap_read__idls__crs soap_read_xsd__anyURI


#define soap_GET__idls__crs soap_GET_xsd__anyURI


#define soap_POST_recv__idls__crs soap_POST_recv_xsd__anyURI

#endif
/* _idls__spatial_x005fdataset_x005fidentifier_x005fnamespace is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace_DEFINED
#define SOAP_TYPE__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace_DEFINED

#define soap_default__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_default_xsd__anyURI


#define soap_serialize__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_serialize_xsd__anyURI


#define soap__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace2s(soap, a) (a)

#define soap_out__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_out_xsd__anyURI


#define soap_s2_idls__spatial_x005fdataset_x005fidentifier_x005fnamespace(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)

#define soap_in__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_in_xsd__anyURI


#define soap_instantiate__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_instantiate_xsd__anyURI


#define soap_new__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_new_xsd__anyURI


#define soap_put__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_put_xsd__anyURI


#define soap_write__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_write_xsd__anyURI


#define soap_PUT__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_PUT_xsd__anyURI


#define soap_PATCH__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_PATCH_xsd__anyURI


#define soap_POST_send__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_POST_send_xsd__anyURI


#define soap_get__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_get_xsd__anyURI


#define soap_read__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_read_xsd__anyURI


#define soap_GET__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_GET_xsd__anyURI


#define soap_POST_recv__idls__spatial_x005fdataset_x005fidentifier_x005fnamespace soap_POST_recv_xsd__anyURI

#endif
/* _ows__reference is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE__ows__reference_DEFINED
#define SOAP_TYPE__ows__reference_DEFINED

#define soap_default__ows__reference soap_default_xsd__anyURI


#define soap_serialize__ows__reference soap_serialize_xsd__anyURI


#define soap__ows__reference2s(soap, a) (a)

#define soap_out__ows__reference soap_out_xsd__anyURI


#define soap_s2_ows__reference(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)

#define soap_in__ows__reference soap_in_xsd__anyURI


#define soap_instantiate__ows__reference soap_instantiate_xsd__anyURI


#define soap_new__ows__reference soap_new_xsd__anyURI


#define soap_put__ows__reference soap_put_xsd__anyURI


#define soap_write__ows__reference soap_write_xsd__anyURI


#define soap_PUT__ows__reference soap_PUT_xsd__anyURI


#define soap_PATCH__ows__reference soap_PATCH_xsd__anyURI


#define soap_POST_send__ows__reference soap_POST_send_xsd__anyURI


#define soap_get__ows__reference soap_get_xsd__anyURI


#define soap_read__ows__reference soap_read_xsd__anyURI


#define soap_GET__ows__reference soap_GET_xsd__anyURI


#define soap_POST_recv__ows__reference soap_POST_recv_xsd__anyURI

#endif
/* _ows__Language is a typedef synonym of xsd__language */

#ifndef SOAP_TYPE__ows__Language_DEFINED
#define SOAP_TYPE__ows__Language_DEFINED

#define soap_default__ows__Language soap_default_xsd__language


#define soap_serialize__ows__Language soap_serialize_xsd__language


#define soap__ows__Language2s(soap, a) (a)

#define soap_out__ows__Language soap_out_xsd__language


#define soap_s2_ows__Language(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*")

#define soap_in__ows__Language soap_in_xsd__language


#define soap_instantiate__ows__Language soap_instantiate_xsd__language


#define soap_new__ows__Language soap_new_xsd__language


#define soap_put__ows__Language soap_put_xsd__language


#define soap_write__ows__Language soap_write_xsd__language


#define soap_PUT__ows__Language soap_PUT_xsd__language


#define soap_PATCH__ows__Language soap_PATCH_xsd__language


#define soap_POST_send__ows__Language soap_POST_send_xsd__language


#define soap_get__ows__Language soap_get_xsd__language


#define soap_read__ows__Language soap_read_xsd__language


#define soap_GET__ows__Language soap_GET_xsd__language


#define soap_POST_recv__ows__Language soap_POST_recv_xsd__language

#endif
/* _ows__SupportedCRS is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE__ows__SupportedCRS_DEFINED
#define SOAP_TYPE__ows__SupportedCRS_DEFINED

#define soap_default__ows__SupportedCRS soap_default_xsd__anyURI


#define soap_serialize__ows__SupportedCRS soap_serialize_xsd__anyURI


#define soap__ows__SupportedCRS2s(soap, a) (a)

#define soap_out__ows__SupportedCRS soap_out_xsd__anyURI


#define soap_s2_ows__SupportedCRS(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)

#define soap_in__ows__SupportedCRS soap_in_xsd__anyURI


#define soap_instantiate__ows__SupportedCRS soap_instantiate_xsd__anyURI


#define soap_new__ows__SupportedCRS soap_new_xsd__anyURI


#define soap_put__ows__SupportedCRS soap_put_xsd__anyURI


#define soap_write__ows__SupportedCRS soap_write_xsd__anyURI


#define soap_PUT__ows__SupportedCRS soap_PUT_xsd__anyURI


#define soap_PATCH__ows__SupportedCRS soap_PATCH_xsd__anyURI


#define soap_POST_send__ows__SupportedCRS soap_POST_send_xsd__anyURI


#define soap_get__ows__SupportedCRS soap_get_xsd__anyURI


#define soap_read__ows__SupportedCRS soap_read_xsd__anyURI


#define soap_GET__ows__SupportedCRS soap_GET_xsd__anyURI


#define soap_POST_recv__ows__SupportedCRS soap_POST_recv_xsd__anyURI

#endif
/* _ows__AvailableCRS is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE__ows__AvailableCRS_DEFINED
#define SOAP_TYPE__ows__AvailableCRS_DEFINED

#define soap_default__ows__AvailableCRS soap_default_xsd__anyURI


#define soap_serialize__ows__AvailableCRS soap_serialize_xsd__anyURI


#define soap__ows__AvailableCRS2s(soap, a) (a)

#define soap_out__ows__AvailableCRS soap_out_xsd__anyURI


#define soap_s2_ows__AvailableCRS(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)

#define soap_in__ows__AvailableCRS soap_in_xsd__anyURI


#define soap_instantiate__ows__AvailableCRS soap_instantiate_xsd__anyURI


#define soap_new__ows__AvailableCRS soap_new_xsd__anyURI


#define soap_put__ows__AvailableCRS soap_put_xsd__anyURI


#define soap_write__ows__AvailableCRS soap_write_xsd__anyURI


#define soap_PUT__ows__AvailableCRS soap_PUT_xsd__anyURI


#define soap_PATCH__ows__AvailableCRS soap_PATCH_xsd__anyURI


#define soap_POST_send__ows__AvailableCRS soap_POST_send_xsd__anyURI


#define soap_get__ows__AvailableCRS soap_get_xsd__anyURI


#define soap_read__ows__AvailableCRS soap_read_xsd__anyURI


#define soap_GET__ows__AvailableCRS soap_GET_xsd__anyURI


#define soap_POST_recv__ows__AvailableCRS soap_POST_recv_xsd__anyURI

#endif

#ifndef SOAP_TYPE_PointerToicommon__layers_DEFINED
#define SOAP_TYPE_PointerToicommon__layers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__layers(struct soap*, icommon__layers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__layers(struct soap*, const char *, int, icommon__layers *const*, const char *);
SOAP_FMAC3 icommon__layers ** SOAP_FMAC4 soap_in_PointerToicommon__layers(struct soap*, const char*, icommon__layers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__layers(struct soap*, icommon__layers *const*, const char*, const char*);
SOAP_FMAC3 icommon__layers ** SOAP_FMAC4 soap_get_PointerToicommon__layers(struct soap*, icommon__layers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fswe_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fswe_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fswe *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fswe *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fswe ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fswe **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fswe *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fswe ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fswe(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fswe **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fswe_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fspa_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fspa_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fspa *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fspa *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fspa ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fspa **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fspa *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fspa ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fspa(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fspa **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fspa_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslv_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslv_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslv *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fslv *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslv ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fslv **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslv *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslv ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslv(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslv **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslv_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslo_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fslo *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslo ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fslo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslo *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fslo ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fslo(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fslo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fslo_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005frum_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005frum_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005frum *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005frum *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005frum ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005frum **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005frum *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005frum ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005frum(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005frum **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005frum_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpor_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpor_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fpor *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpor ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fpor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpor *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpor ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpor(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpor **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpor_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpol_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpol *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fpol *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpol ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fpol **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpol *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fpol ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fpol(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fpol **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fpol_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fmlt_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fmlt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fmlt ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fmlt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fmlt *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fmlt ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fmlt(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fmlt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fmlt_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flit_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005flit *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flit ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005flit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flit *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flit ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flit(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flit **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flit_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flav_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flav_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flav *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005flav *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flav ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005flav **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flav *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005flav ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005flav(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005flav **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005flav_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fita_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fita_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fita *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fita *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fita ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fita **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fita *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fita ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fita(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fita **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fita_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fhun_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fhun_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fhun *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fhun *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fhun ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fhun **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fhun *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fhun ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fhun(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fhun **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fhun_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgre_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgre_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgre *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fgre *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgre ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fgre **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgre *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgre ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgre **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgre_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgle_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fgle *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgle ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fgle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgle *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fgle ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fgle(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fgle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fgle_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fger_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fger *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fger *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fger ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fger **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fger *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fger ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fger(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fger **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fger_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffre_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffre_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffre *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005ffre *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffre ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005ffre **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffre *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffre ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffre(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffre **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffre_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffin_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005ffin *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffin ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005ffin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffin *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005ffin ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005ffin(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005ffin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005ffin_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fest_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fest *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fest ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fest *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fest ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fest(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fest_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005feng_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005feng_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005feng *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005feng *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005feng ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005feng **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005feng *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005feng ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005feng(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005feng **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005feng_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdut_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdut_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdut *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fdut *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdut ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fdut **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdut *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdut ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdut(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdut **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdut_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdan_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdan_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdan *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fdan *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdan ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fdan **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdan *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fdan ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fdan(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fdan **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fdan_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fcze_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fcze_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fcze *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fcze *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fcze ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fcze **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fcze *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fcze ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fcze(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fcze **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fcze_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fbul_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fbul_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fbul *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, const char *, int, icommon__resLocInspireInteroperabilityRegulation_x005fbul *const*, const char *);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fbul ** SOAP_FMAC4 soap_in_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, const char*, icommon__resLocInspireInteroperabilityRegulation_x005fbul **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fbul *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocInspireInteroperabilityRegulation_x005fbul ** SOAP_FMAC4 soap_get_PointerToicommon__resLocInspireInteroperabilityRegulation_x005fbul(struct soap*, icommon__resLocInspireInteroperabilityRegulation_x005fbul **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, const char*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication(struct soap*, enum _icommon__citationInspireInteroperabilityRegulation_x005fbul_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__originatingControlledVocabularyMD_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__originatingControlledVocabularyMD_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, const char *, int, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, const char*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyMD_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__originatingControlledVocabularyMD_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyMD_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, const char *, int, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, const char*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication(struct soap*, enum _icommon__originatingControlledVocabularyGemetInspireThemes_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__inspireTheme_DEFINED
#define SOAP_TYPE_PointerToicommon__inspireTheme_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__inspireTheme(struct soap*, icommon__inspireTheme *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__inspireTheme(struct soap*, const char *, int, icommon__inspireTheme *const*, const char *);
SOAP_FMAC3 icommon__inspireTheme ** SOAP_FMAC4 soap_in_PointerToicommon__inspireTheme(struct soap*, const char*, icommon__inspireTheme **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__inspireTheme(struct soap*, icommon__inspireTheme *const*, const char*, const char*);
SOAP_FMAC3 icommon__inspireTheme ** SOAP_FMAC4 soap_get_PointerToicommon__inspireTheme(struct soap*, icommon__inspireTheme **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__ReferenceGroupType_DEFINED
#define SOAP_TYPE_PointerToows__ReferenceGroupType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__ReferenceGroupType(struct soap*, ows__ReferenceGroupType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__ReferenceGroupType(struct soap*, const char *, int, ows__ReferenceGroupType *const*, const char *);
SOAP_FMAC3 ows__ReferenceGroupType ** SOAP_FMAC4 soap_in_PointerToows__ReferenceGroupType(struct soap*, const char*, ows__ReferenceGroupType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__ReferenceGroupType(struct soap*, ows__ReferenceGroupType *const*, const char*, const char*);
SOAP_FMAC3 ows__ReferenceGroupType ** SOAP_FMAC4 soap_get_PointerToows__ReferenceGroupType(struct soap*, ows__ReferenceGroupType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__ows__union_ReferenceGroupType_DEFINED
#define SOAP_TYPE_PointerTo__ows__union_ReferenceGroupType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ows__union_ReferenceGroupType(struct soap*, __ows__union_ReferenceGroupType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ows__union_ReferenceGroupType(struct soap*, const char *, int, __ows__union_ReferenceGroupType *const*, const char *);
SOAP_FMAC3 __ows__union_ReferenceGroupType ** SOAP_FMAC4 soap_in_PointerTo__ows__union_ReferenceGroupType(struct soap*, const char*, __ows__union_ReferenceGroupType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ows__union_ReferenceGroupType(struct soap*, __ows__union_ReferenceGroupType *const*, const char*, const char*);
SOAP_FMAC3 __ows__union_ReferenceGroupType ** SOAP_FMAC4 soap_get_PointerTo__ows__union_ReferenceGroupType(struct soap*, __ows__union_ReferenceGroupType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__ServiceReferenceType_DEFINED
#define SOAP_TYPE_PointerToows__ServiceReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__ServiceReferenceType(struct soap*, ows__ServiceReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__ServiceReferenceType(struct soap*, const char *, int, ows__ServiceReferenceType *const*, const char *);
SOAP_FMAC3 ows__ServiceReferenceType ** SOAP_FMAC4 soap_in_PointerToows__ServiceReferenceType(struct soap*, const char*, ows__ServiceReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__ServiceReferenceType(struct soap*, ows__ServiceReferenceType *const*, const char*, const char*);
SOAP_FMAC3 ows__ServiceReferenceType ** SOAP_FMAC4 soap_get_PointerToows__ServiceReferenceType(struct soap*, ows__ServiceReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__ReferenceType_DEFINED
#define SOAP_TYPE_PointerToows__ReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__ReferenceType(struct soap*, ows__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__ReferenceType(struct soap*, const char *, int, ows__ReferenceType *const*, const char *);
SOAP_FMAC3 ows__ReferenceType ** SOAP_FMAC4 soap_in_PointerToows__ReferenceType(struct soap*, const char*, ows__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__ReferenceType(struct soap*, ows__ReferenceType *const*, const char*, const char*);
SOAP_FMAC3 ows__ReferenceType ** SOAP_FMAC4 soap_get_PointerToows__ReferenceType(struct soap*, ows__ReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__ows__union_IdentificationType__DEFINED
#define SOAP_TYPE_PointerTo__ows__union_IdentificationType__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ows__union_IdentificationType_(struct soap*, __ows__union_IdentificationType_ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ows__union_IdentificationType_(struct soap*, const char *, int, __ows__union_IdentificationType_ *const*, const char *);
SOAP_FMAC3 __ows__union_IdentificationType_ ** SOAP_FMAC4 soap_in_PointerTo__ows__union_IdentificationType_(struct soap*, const char*, __ows__union_IdentificationType_ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ows__union_IdentificationType_(struct soap*, __ows__union_IdentificationType_ *const*, const char*, const char*);
SOAP_FMAC3 __ows__union_IdentificationType_ ** SOAP_FMAC4 soap_get_PointerTo__ows__union_IdentificationType_(struct soap*, __ows__union_IdentificationType_ **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<char *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfxsd__anyURI(struct soap*, const char *, int, std::vector<char *> *const*, const char *);
SOAP_FMAC3 std::vector<char *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<char *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<char *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<char *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<char *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__ows__union_IdentificationType_DEFINED
#define SOAP_TYPE_PointerTo__ows__union_IdentificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ows__union_IdentificationType(struct soap*, __ows__union_IdentificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ows__union_IdentificationType(struct soap*, const char *, int, __ows__union_IdentificationType *const*, const char *);
SOAP_FMAC3 __ows__union_IdentificationType ** SOAP_FMAC4 soap_in_PointerTo__ows__union_IdentificationType(struct soap*, const char*, __ows__union_IdentificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ows__union_IdentificationType(struct soap*, __ows__union_IdentificationType *const*, const char*, const char*);
SOAP_FMAC3 __ows__union_IdentificationType ** SOAP_FMAC4 soap_get_PointerTo__ows__union_IdentificationType(struct soap*, __ows__union_IdentificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resLocGEMETInspireThemes_x005feng_DEFINED
#define SOAP_TYPE_PointerToicommon__resLocGEMETInspireThemes_x005feng_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resLocGEMETInspireThemes_x005feng(struct soap*, icommon__resLocGEMETInspireThemes_x005feng *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resLocGEMETInspireThemes_x005feng(struct soap*, const char *, int, icommon__resLocGEMETInspireThemes_x005feng *const*, const char *);
SOAP_FMAC3 icommon__resLocGEMETInspireThemes_x005feng ** SOAP_FMAC4 soap_in_PointerToicommon__resLocGEMETInspireThemes_x005feng(struct soap*, const char*, icommon__resLocGEMETInspireThemes_x005feng **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resLocGEMETInspireThemes_x005feng(struct soap*, icommon__resLocGEMETInspireThemes_x005feng *const*, const char*, const char*);
SOAP_FMAC3 icommon__resLocGEMETInspireThemes_x005feng ** SOAP_FMAC4 soap_get_PointerToicommon__resLocGEMETInspireThemes_x005feng(struct soap*, icommon__resLocGEMETInspireThemes_x005feng **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication_DEFINED
#define SOAP_TYPE_PointerTo_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, const char *, int, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *const*, const char *);
SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication ** SOAP_FMAC4 soap_in_PointerTo_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, const char*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication *const*, const char*, const char*);
SOAP_FMAC3 enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication ** SOAP_FMAC4 soap_get_PointerTo_icommon__citationGEMETInspireThemes_x005feng_DateOfPublication(struct soap*, enum _icommon__citationGEMETInspireThemes_x005feng_DateOfPublication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__originatingControlledVocabularyGemetInspireThemes_DEFINED
#define SOAP_TYPE_PointerToicommon__originatingControlledVocabularyGemetInspireThemes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, icommon__originatingControlledVocabularyGemetInspireThemes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, const char *, int, icommon__originatingControlledVocabularyGemetInspireThemes *const*, const char *);
SOAP_FMAC3 icommon__originatingControlledVocabularyGemetInspireThemes ** SOAP_FMAC4 soap_in_PointerToicommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, const char*, icommon__originatingControlledVocabularyGemetInspireThemes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, icommon__originatingControlledVocabularyGemetInspireThemes *const*, const char*, const char*);
SOAP_FMAC3 icommon__originatingControlledVocabularyGemetInspireThemes ** SOAP_FMAC4 soap_get_PointerToicommon__originatingControlledVocabularyGemetInspireThemes(struct soap*, icommon__originatingControlledVocabularyGemetInspireThemes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__fes__union_UnaryLogicOpType________DEFINED
#define SOAP_TYPE_PointerTo__fes__union_UnaryLogicOpType________DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__fes__union_UnaryLogicOpType_______(struct soap*, __fes__union_UnaryLogicOpType_______ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__fes__union_UnaryLogicOpType_______(struct soap*, const char *, int, __fes__union_UnaryLogicOpType_______ *const*, const char *);
SOAP_FMAC3 __fes__union_UnaryLogicOpType_______ ** SOAP_FMAC4 soap_in_PointerTo__fes__union_UnaryLogicOpType_______(struct soap*, const char*, __fes__union_UnaryLogicOpType_______ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__fes__union_UnaryLogicOpType_______(struct soap*, __fes__union_UnaryLogicOpType_______ *const*, const char*, const char*);
SOAP_FMAC3 __fes__union_UnaryLogicOpType_______ ** SOAP_FMAC4 soap_get_PointerTo__fes__union_UnaryLogicOpType_______(struct soap*, __fes__union_UnaryLogicOpType_______ **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__fes__union_BinaryLogicOpType________DEFINED
#define SOAP_TYPE_PointerTo__fes__union_BinaryLogicOpType________DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__fes__union_BinaryLogicOpType_______(struct soap*, __fes__union_BinaryLogicOpType_______ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__fes__union_BinaryLogicOpType_______(struct soap*, const char *, int, __fes__union_BinaryLogicOpType_______ *const*, const char *);
SOAP_FMAC3 __fes__union_BinaryLogicOpType_______ ** SOAP_FMAC4 soap_in_PointerTo__fes__union_BinaryLogicOpType_______(struct soap*, const char*, __fes__union_BinaryLogicOpType_______ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__fes__union_BinaryLogicOpType_______(struct soap*, __fes__union_BinaryLogicOpType_______ *const*, const char*, const char*);
SOAP_FMAC3 __fes__union_BinaryLogicOpType_______ ** SOAP_FMAC4 soap_get_PointerTo__fes__union_BinaryLogicOpType_______(struct soap*, __fes__union_BinaryLogicOpType_______ **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__MeasureType_DEFINED
#define SOAP_TYPE_PointerTofes__MeasureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__MeasureType(struct soap*, fes__MeasureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__MeasureType(struct soap*, const char *, int, fes__MeasureType *const*, const char *);
SOAP_FMAC3 fes__MeasureType ** SOAP_FMAC4 soap_in_PointerTofes__MeasureType(struct soap*, const char*, fes__MeasureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__MeasureType(struct soap*, fes__MeasureType *const*, const char*, const char*);
SOAP_FMAC3 fes__MeasureType ** SOAP_FMAC4 soap_get_PointerTofes__MeasureType(struct soap*, fes__MeasureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__UpperBoundaryType_DEFINED
#define SOAP_TYPE_PointerTofes__UpperBoundaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__UpperBoundaryType(struct soap*, fes__UpperBoundaryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__UpperBoundaryType(struct soap*, const char *, int, fes__UpperBoundaryType *const*, const char *);
SOAP_FMAC3 fes__UpperBoundaryType ** SOAP_FMAC4 soap_in_PointerTofes__UpperBoundaryType(struct soap*, const char*, fes__UpperBoundaryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__UpperBoundaryType(struct soap*, fes__UpperBoundaryType *const*, const char*, const char*);
SOAP_FMAC3 fes__UpperBoundaryType ** SOAP_FMAC4 soap_get_PointerTofes__UpperBoundaryType(struct soap*, fes__UpperBoundaryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__LowerBoundaryType_DEFINED
#define SOAP_TYPE_PointerTofes__LowerBoundaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__LowerBoundaryType(struct soap*, fes__LowerBoundaryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__LowerBoundaryType(struct soap*, const char *, int, fes__LowerBoundaryType *const*, const char *);
SOAP_FMAC3 fes__LowerBoundaryType ** SOAP_FMAC4 soap_in_PointerTofes__LowerBoundaryType(struct soap*, const char*, fes__LowerBoundaryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__LowerBoundaryType(struct soap*, fes__LowerBoundaryType *const*, const char*, const char*);
SOAP_FMAC3 fes__LowerBoundaryType ** SOAP_FMAC4 soap_get_PointerTofes__LowerBoundaryType(struct soap*, fes__LowerBoundaryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__fes__union_PropertyIsLikeType_DEFINED
#define SOAP_TYPE_PointerTo__fes__union_PropertyIsLikeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__fes__union_PropertyIsLikeType(struct soap*, __fes__union_PropertyIsLikeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__fes__union_PropertyIsLikeType(struct soap*, const char *, int, __fes__union_PropertyIsLikeType *const*, const char *);
SOAP_FMAC3 __fes__union_PropertyIsLikeType ** SOAP_FMAC4 soap_in_PointerTo__fes__union_PropertyIsLikeType(struct soap*, const char*, __fes__union_PropertyIsLikeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__fes__union_PropertyIsLikeType(struct soap*, __fes__union_PropertyIsLikeType *const*, const char*, const char*);
SOAP_FMAC3 __fes__union_PropertyIsLikeType ** SOAP_FMAC4 soap_get_PointerTo__fes__union_PropertyIsLikeType(struct soap*, __fes__union_PropertyIsLikeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__fes__union_BinaryComparisonOpType_DEFINED
#define SOAP_TYPE_PointerTo__fes__union_BinaryComparisonOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__fes__union_BinaryComparisonOpType(struct soap*, __fes__union_BinaryComparisonOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__fes__union_BinaryComparisonOpType(struct soap*, const char *, int, __fes__union_BinaryComparisonOpType *const*, const char *);
SOAP_FMAC3 __fes__union_BinaryComparisonOpType ** SOAP_FMAC4 soap_in_PointerTo__fes__union_BinaryComparisonOpType(struct soap*, const char*, __fes__union_BinaryComparisonOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__fes__union_BinaryComparisonOpType(struct soap*, __fes__union_BinaryComparisonOpType *const*, const char*, const char*);
SOAP_FMAC3 __fes__union_BinaryComparisonOpType ** SOAP_FMAC4 soap_get_PointerTo__fes__union_BinaryComparisonOpType(struct soap*, __fes__union_BinaryComparisonOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__VersionType_DEFINED
#define SOAP_TYPE_PointerTofes__VersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__VersionType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__VersionType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofes__VersionType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__VersionType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofes__VersionType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__fes__union_FilterType_______DEFINED
#define SOAP_TYPE_PointerTo__fes__union_FilterType_______DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__fes__union_FilterType______(struct soap*, __fes__union_FilterType______ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__fes__union_FilterType______(struct soap*, const char *, int, __fes__union_FilterType______ *const*, const char *);
SOAP_FMAC3 __fes__union_FilterType______ ** SOAP_FMAC4 soap_in_PointerTo__fes__union_FilterType______(struct soap*, const char*, __fes__union_FilterType______ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__fes__union_FilterType______(struct soap*, __fes__union_FilterType______ *const*, const char*, const char*);
SOAP_FMAC3 __fes__union_FilterType______ ** SOAP_FMAC4 soap_get_PointerTo__fes__union_FilterType______(struct soap*, __fes__union_FilterType______ **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__UnaryLogicOpType_DEFINED
#define SOAP_TYPE_PointerTofes__UnaryLogicOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__UnaryLogicOpType(struct soap*, fes__UnaryLogicOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__UnaryLogicOpType(struct soap*, const char *, int, fes__UnaryLogicOpType *const*, const char *);
SOAP_FMAC3 fes__UnaryLogicOpType ** SOAP_FMAC4 soap_in_PointerTofes__UnaryLogicOpType(struct soap*, const char*, fes__UnaryLogicOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__UnaryLogicOpType(struct soap*, fes__UnaryLogicOpType *const*, const char*, const char*);
SOAP_FMAC3 fes__UnaryLogicOpType ** SOAP_FMAC4 soap_get_PointerTofes__UnaryLogicOpType(struct soap*, fes__UnaryLogicOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__BinaryLogicOpType_DEFINED
#define SOAP_TYPE_PointerTofes__BinaryLogicOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__BinaryLogicOpType(struct soap*, fes__BinaryLogicOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__BinaryLogicOpType(struct soap*, const char *, int, fes__BinaryLogicOpType *const*, const char *);
SOAP_FMAC3 fes__BinaryLogicOpType ** SOAP_FMAC4 soap_in_PointerTofes__BinaryLogicOpType(struct soap*, const char*, fes__BinaryLogicOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__BinaryLogicOpType(struct soap*, fes__BinaryLogicOpType *const*, const char*, const char*);
SOAP_FMAC3 fes__BinaryLogicOpType ** SOAP_FMAC4 soap_get_PointerTofes__BinaryLogicOpType(struct soap*, fes__BinaryLogicOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__BinaryTemporalOpType_DEFINED
#define SOAP_TYPE_PointerTofes__BinaryTemporalOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__BinaryTemporalOpType(struct soap*, fes__BinaryTemporalOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__BinaryTemporalOpType(struct soap*, const char *, int, fes__BinaryTemporalOpType *const*, const char *);
SOAP_FMAC3 fes__BinaryTemporalOpType ** SOAP_FMAC4 soap_in_PointerTofes__BinaryTemporalOpType(struct soap*, const char*, fes__BinaryTemporalOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__BinaryTemporalOpType(struct soap*, fes__BinaryTemporalOpType *const*, const char*, const char*);
SOAP_FMAC3 fes__BinaryTemporalOpType ** SOAP_FMAC4 soap_get_PointerTofes__BinaryTemporalOpType(struct soap*, fes__BinaryTemporalOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__BBOXType_DEFINED
#define SOAP_TYPE_PointerTofes__BBOXType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__BBOXType(struct soap*, fes__BBOXType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__BBOXType(struct soap*, const char *, int, fes__BBOXType *const*, const char *);
SOAP_FMAC3 fes__BBOXType ** SOAP_FMAC4 soap_in_PointerTofes__BBOXType(struct soap*, const char*, fes__BBOXType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__BBOXType(struct soap*, fes__BBOXType *const*, const char*, const char*);
SOAP_FMAC3 fes__BBOXType ** SOAP_FMAC4 soap_get_PointerTofes__BBOXType(struct soap*, fes__BBOXType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__DistanceBufferType_DEFINED
#define SOAP_TYPE_PointerTofes__DistanceBufferType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__DistanceBufferType(struct soap*, fes__DistanceBufferType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__DistanceBufferType(struct soap*, const char *, int, fes__DistanceBufferType *const*, const char *);
SOAP_FMAC3 fes__DistanceBufferType ** SOAP_FMAC4 soap_in_PointerTofes__DistanceBufferType(struct soap*, const char*, fes__DistanceBufferType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__DistanceBufferType(struct soap*, fes__DistanceBufferType *const*, const char*, const char*);
SOAP_FMAC3 fes__DistanceBufferType ** SOAP_FMAC4 soap_get_PointerTofes__DistanceBufferType(struct soap*, fes__DistanceBufferType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__BinarySpatialOpType_DEFINED
#define SOAP_TYPE_PointerTofes__BinarySpatialOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__BinarySpatialOpType(struct soap*, fes__BinarySpatialOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__BinarySpatialOpType(struct soap*, const char *, int, fes__BinarySpatialOpType *const*, const char *);
SOAP_FMAC3 fes__BinarySpatialOpType ** SOAP_FMAC4 soap_in_PointerTofes__BinarySpatialOpType(struct soap*, const char*, fes__BinarySpatialOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__BinarySpatialOpType(struct soap*, fes__BinarySpatialOpType *const*, const char*, const char*);
SOAP_FMAC3 fes__BinarySpatialOpType ** SOAP_FMAC4 soap_get_PointerTofes__BinarySpatialOpType(struct soap*, fes__BinarySpatialOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__PropertyIsBetweenType_DEFINED
#define SOAP_TYPE_PointerTofes__PropertyIsBetweenType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__PropertyIsBetweenType(struct soap*, fes__PropertyIsBetweenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__PropertyIsBetweenType(struct soap*, const char *, int, fes__PropertyIsBetweenType *const*, const char *);
SOAP_FMAC3 fes__PropertyIsBetweenType ** SOAP_FMAC4 soap_in_PointerTofes__PropertyIsBetweenType(struct soap*, const char*, fes__PropertyIsBetweenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__PropertyIsBetweenType(struct soap*, fes__PropertyIsBetweenType *const*, const char*, const char*);
SOAP_FMAC3 fes__PropertyIsBetweenType ** SOAP_FMAC4 soap_get_PointerTofes__PropertyIsBetweenType(struct soap*, fes__PropertyIsBetweenType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__PropertyIsNilType_DEFINED
#define SOAP_TYPE_PointerTofes__PropertyIsNilType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__PropertyIsNilType(struct soap*, fes__PropertyIsNilType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__PropertyIsNilType(struct soap*, const char *, int, fes__PropertyIsNilType *const*, const char *);
SOAP_FMAC3 fes__PropertyIsNilType ** SOAP_FMAC4 soap_in_PointerTofes__PropertyIsNilType(struct soap*, const char*, fes__PropertyIsNilType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__PropertyIsNilType(struct soap*, fes__PropertyIsNilType *const*, const char*, const char*);
SOAP_FMAC3 fes__PropertyIsNilType ** SOAP_FMAC4 soap_get_PointerTofes__PropertyIsNilType(struct soap*, fes__PropertyIsNilType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__PropertyIsNullType_DEFINED
#define SOAP_TYPE_PointerTofes__PropertyIsNullType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__PropertyIsNullType(struct soap*, fes__PropertyIsNullType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__PropertyIsNullType(struct soap*, const char *, int, fes__PropertyIsNullType *const*, const char *);
SOAP_FMAC3 fes__PropertyIsNullType ** SOAP_FMAC4 soap_in_PointerTofes__PropertyIsNullType(struct soap*, const char*, fes__PropertyIsNullType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__PropertyIsNullType(struct soap*, fes__PropertyIsNullType *const*, const char*, const char*);
SOAP_FMAC3 fes__PropertyIsNullType ** SOAP_FMAC4 soap_get_PointerTofes__PropertyIsNullType(struct soap*, fes__PropertyIsNullType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__PropertyIsLikeType_DEFINED
#define SOAP_TYPE_PointerTofes__PropertyIsLikeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__PropertyIsLikeType(struct soap*, fes__PropertyIsLikeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__PropertyIsLikeType(struct soap*, const char *, int, fes__PropertyIsLikeType *const*, const char *);
SOAP_FMAC3 fes__PropertyIsLikeType ** SOAP_FMAC4 soap_in_PointerTofes__PropertyIsLikeType(struct soap*, const char*, fes__PropertyIsLikeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__PropertyIsLikeType(struct soap*, fes__PropertyIsLikeType *const*, const char*, const char*);
SOAP_FMAC3 fes__PropertyIsLikeType ** SOAP_FMAC4 soap_get_PointerTofes__PropertyIsLikeType(struct soap*, fes__PropertyIsLikeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__BinaryComparisonOpType_DEFINED
#define SOAP_TYPE_PointerTofes__BinaryComparisonOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__BinaryComparisonOpType(struct soap*, fes__BinaryComparisonOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__BinaryComparisonOpType(struct soap*, const char *, int, fes__BinaryComparisonOpType *const*, const char *);
SOAP_FMAC3 fes__BinaryComparisonOpType ** SOAP_FMAC4 soap_in_PointerTofes__BinaryComparisonOpType(struct soap*, const char*, fes__BinaryComparisonOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__BinaryComparisonOpType(struct soap*, fes__BinaryComparisonOpType *const*, const char*, const char*);
SOAP_FMAC3 fes__BinaryComparisonOpType ** SOAP_FMAC4 soap_get_PointerTofes__BinaryComparisonOpType(struct soap*, fes__BinaryComparisonOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__AliasesType_DEFINED
#define SOAP_TYPE_PointerTofes__AliasesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__AliasesType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__AliasesType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofes__AliasesType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__AliasesType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofes__AliasesType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__SortByType_DEFINED
#define SOAP_TYPE_PointerTofes__SortByType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__SortByType(struct soap*, fes__SortByType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__SortByType(struct soap*, const char *, int, fes__SortByType *const*, const char *);
SOAP_FMAC3 fes__SortByType ** SOAP_FMAC4 soap_in_PointerTofes__SortByType(struct soap*, const char*, fes__SortByType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__SortByType(struct soap*, fes__SortByType *const*, const char*, const char*);
SOAP_FMAC3 fes__SortByType ** SOAP_FMAC4 soap_get_PointerTofes__SortByType(struct soap*, fes__SortByType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__fes__union_AbstractAdhocQueryExpressionType_DEFINED
#define SOAP_TYPE_PointerTo__fes__union_AbstractAdhocQueryExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__fes__union_AbstractAdhocQueryExpressionType(struct soap*, __fes__union_AbstractAdhocQueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__fes__union_AbstractAdhocQueryExpressionType(struct soap*, const char *, int, __fes__union_AbstractAdhocQueryExpressionType *const*, const char *);
SOAP_FMAC3 __fes__union_AbstractAdhocQueryExpressionType ** SOAP_FMAC4 soap_in_PointerTo__fes__union_AbstractAdhocQueryExpressionType(struct soap*, const char*, __fes__union_AbstractAdhocQueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__fes__union_AbstractAdhocQueryExpressionType(struct soap*, __fes__union_AbstractAdhocQueryExpressionType *const*, const char*, const char*);
SOAP_FMAC3 __fes__union_AbstractAdhocQueryExpressionType ** SOAP_FMAC4 soap_get_PointerTo__fes__union_AbstractAdhocQueryExpressionType(struct soap*, __fes__union_AbstractAdhocQueryExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__PropertyName_DEFINED
#define SOAP_TYPE_PointerTo_wfs__PropertyName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__PropertyName(struct soap*, _wfs__PropertyName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__PropertyName(struct soap*, const char *, int, _wfs__PropertyName *const*, const char *);
SOAP_FMAC3 _wfs__PropertyName ** SOAP_FMAC4 soap_in_PointerTo_wfs__PropertyName(struct soap*, const char*, _wfs__PropertyName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__PropertyName(struct soap*, _wfs__PropertyName *const*, const char*, const char*);
SOAP_FMAC3 _wfs__PropertyName ** SOAP_FMAC4 soap_get_PointerTo_wfs__PropertyName(struct soap*, _wfs__PropertyName **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__ows__union_DatasetDescriptionSummaryBaseType_DEFINED
#define SOAP_TYPE_PointerTo__ows__union_DatasetDescriptionSummaryBaseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, __ows__union_DatasetDescriptionSummaryBaseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, const char *, int, __ows__union_DatasetDescriptionSummaryBaseType *const*, const char *);
SOAP_FMAC3 __ows__union_DatasetDescriptionSummaryBaseType ** SOAP_FMAC4 soap_in_PointerTo__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, const char*, __ows__union_DatasetDescriptionSummaryBaseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, __ows__union_DatasetDescriptionSummaryBaseType *const*, const char*, const char*);
SOAP_FMAC3 __ows__union_DatasetDescriptionSummaryBaseType ** SOAP_FMAC4 soap_get_PointerTo__ows__union_DatasetDescriptionSummaryBaseType(struct soap*, __ows__union_DatasetDescriptionSummaryBaseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerToows__BoundingBoxType_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerToows__BoundingBoxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, std::vector<ows__BoundingBoxType *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, const char *, int, std::vector<ows__BoundingBoxType *> *const*, const char *);
SOAP_FMAC3 std::vector<ows__BoundingBoxType *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, const char*, std::vector<ows__BoundingBoxType *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, std::vector<ows__BoundingBoxType *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<ows__BoundingBoxType *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, std::vector<ows__BoundingBoxType *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__BoundingBoxType_DEFINED
#define SOAP_TYPE_PointerToows__BoundingBoxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__BoundingBoxType(struct soap*, ows__BoundingBoxType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__BoundingBoxType(struct soap*, const char *, int, ows__BoundingBoxType *const*, const char *);
SOAP_FMAC3 ows__BoundingBoxType ** SOAP_FMAC4 soap_in_PointerToows__BoundingBoxType(struct soap*, const char*, ows__BoundingBoxType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__BoundingBoxType(struct soap*, ows__BoundingBoxType *const*, const char*, const char*);
SOAP_FMAC3 ows__BoundingBoxType ** SOAP_FMAC4 soap_get_PointerToows__BoundingBoxType(struct soap*, ows__BoundingBoxType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__FilterType_DEFINED
#define SOAP_TYPE_PointerTofes__FilterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__FilterType(struct soap*, fes__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__FilterType(struct soap*, const char *, int, fes__FilterType *const*, const char *);
SOAP_FMAC3 fes__FilterType ** SOAP_FMAC4 soap_in_PointerTofes__FilterType(struct soap*, const char*, fes__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__FilterType(struct soap*, fes__FilterType *const*, const char*, const char*);
SOAP_FMAC3 fes__FilterType ** SOAP_FMAC4 soap_get_PointerTofes__FilterType(struct soap*, fes__FilterType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__PropertyType_DEFINED
#define SOAP_TYPE_PointerTowfs__PropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__PropertyType(struct soap*, wfs__PropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__PropertyType(struct soap*, const char *, int, wfs__PropertyType *const*, const char *);
SOAP_FMAC3 wfs__PropertyType ** SOAP_FMAC4 soap_in_PointerTowfs__PropertyType(struct soap*, const char*, wfs__PropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__PropertyType(struct soap*, wfs__PropertyType *const*, const char*, const char*);
SOAP_FMAC3 wfs__PropertyType ** SOAP_FMAC4 soap_get_PointerTowfs__PropertyType(struct soap*, wfs__PropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__NativeType_DEFINED
#define SOAP_TYPE_PointerTowfs__NativeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__NativeType(struct soap*, wfs__NativeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__NativeType(struct soap*, const char *, int, wfs__NativeType *const*, const char *);
SOAP_FMAC3 wfs__NativeType ** SOAP_FMAC4 soap_in_PointerTowfs__NativeType(struct soap*, const char*, wfs__NativeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__NativeType(struct soap*, wfs__NativeType *const*, const char*, const char*);
SOAP_FMAC3 wfs__NativeType ** SOAP_FMAC4 soap_get_PointerTowfs__NativeType(struct soap*, wfs__NativeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__DeleteType_DEFINED
#define SOAP_TYPE_PointerTowfs__DeleteType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__DeleteType(struct soap*, wfs__DeleteType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__DeleteType(struct soap*, const char *, int, wfs__DeleteType *const*, const char *);
SOAP_FMAC3 wfs__DeleteType ** SOAP_FMAC4 soap_in_PointerTowfs__DeleteType(struct soap*, const char*, wfs__DeleteType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__DeleteType(struct soap*, wfs__DeleteType *const*, const char*, const char*);
SOAP_FMAC3 wfs__DeleteType ** SOAP_FMAC4 soap_get_PointerTowfs__DeleteType(struct soap*, wfs__DeleteType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ReplaceType_DEFINED
#define SOAP_TYPE_PointerTowfs__ReplaceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ReplaceType(struct soap*, wfs__ReplaceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ReplaceType(struct soap*, const char *, int, wfs__ReplaceType *const*, const char *);
SOAP_FMAC3 wfs__ReplaceType ** SOAP_FMAC4 soap_in_PointerTowfs__ReplaceType(struct soap*, const char*, wfs__ReplaceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ReplaceType(struct soap*, wfs__ReplaceType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ReplaceType ** SOAP_FMAC4 soap_get_PointerTowfs__ReplaceType(struct soap*, wfs__ReplaceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__UpdateType_DEFINED
#define SOAP_TYPE_PointerTowfs__UpdateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__UpdateType(struct soap*, wfs__UpdateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__UpdateType(struct soap*, const char *, int, wfs__UpdateType *const*, const char *);
SOAP_FMAC3 wfs__UpdateType ** SOAP_FMAC4 soap_in_PointerTowfs__UpdateType(struct soap*, const char*, wfs__UpdateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__UpdateType(struct soap*, wfs__UpdateType *const*, const char*, const char*);
SOAP_FMAC3 wfs__UpdateType ** SOAP_FMAC4 soap_get_PointerTowfs__UpdateType(struct soap*, wfs__UpdateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__InsertType_DEFINED
#define SOAP_TYPE_PointerTowfs__InsertType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__InsertType(struct soap*, wfs__InsertType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__InsertType(struct soap*, const char *, int, wfs__InsertType *const*, const char *);
SOAP_FMAC3 wfs__InsertType ** SOAP_FMAC4 soap_in_PointerTowfs__InsertType(struct soap*, const char*, wfs__InsertType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__InsertType(struct soap*, wfs__InsertType *const*, const char*, const char*);
SOAP_FMAC3 wfs__InsertType ** SOAP_FMAC4 soap_get_PointerTowfs__InsertType(struct soap*, wfs__InsertType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wfs__union_LockFeatureType_DEFINED
#define SOAP_TYPE_PointerTo__wfs__union_LockFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wfs__union_LockFeatureType(struct soap*, __wfs__union_LockFeatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wfs__union_LockFeatureType(struct soap*, const char *, int, __wfs__union_LockFeatureType *const*, const char *);
SOAP_FMAC3 __wfs__union_LockFeatureType ** SOAP_FMAC4 soap_in_PointerTo__wfs__union_LockFeatureType(struct soap*, const char*, __wfs__union_LockFeatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wfs__union_LockFeatureType(struct soap*, __wfs__union_LockFeatureType *const*, const char*, const char*);
SOAP_FMAC3 __wfs__union_LockFeatureType ** SOAP_FMAC4 soap_get_PointerTo__wfs__union_LockFeatureType(struct soap*, __wfs__union_LockFeatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__additionalObjects_DEFINED
#define SOAP_TYPE_PointerTo_wfs__additionalObjects_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__additionalObjects(struct soap*, _wfs__additionalObjects *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__additionalObjects(struct soap*, const char *, int, _wfs__additionalObjects *const*, const char *);
SOAP_FMAC3 _wfs__additionalObjects ** SOAP_FMAC4 soap_in_PointerTo_wfs__additionalObjects(struct soap*, const char*, _wfs__additionalObjects **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__additionalObjects(struct soap*, _wfs__additionalObjects *const*, const char*, const char*);
SOAP_FMAC3 _wfs__additionalObjects ** SOAP_FMAC4 soap_get_PointerTo_wfs__additionalObjects(struct soap*, _wfs__additionalObjects **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wfs__union_GetFeatureType_DEFINED
#define SOAP_TYPE_PointerTo__wfs__union_GetFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wfs__union_GetFeatureType(struct soap*, __wfs__union_GetFeatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wfs__union_GetFeatureType(struct soap*, const char *, int, __wfs__union_GetFeatureType *const*, const char *);
SOAP_FMAC3 __wfs__union_GetFeatureType ** SOAP_FMAC4 soap_in_PointerTo__wfs__union_GetFeatureType(struct soap*, const char*, __wfs__union_GetFeatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wfs__union_GetFeatureType(struct soap*, __wfs__union_GetFeatureType *const*, const char*, const char*);
SOAP_FMAC3 __wfs__union_GetFeatureType ** SOAP_FMAC4 soap_get_PointerTo__wfs__union_GetFeatureType(struct soap*, __wfs__union_GetFeatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_fes__Filter_x005fCapabilities_DEFINED
#define SOAP_TYPE_PointerTo_fes__Filter_x005fCapabilities_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fes__Filter_x005fCapabilities(struct soap*, _fes__Filter_x005fCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fes__Filter_x005fCapabilities(struct soap*, const char *, int, _fes__Filter_x005fCapabilities *const*, const char *);
SOAP_FMAC3 _fes__Filter_x005fCapabilities ** SOAP_FMAC4 soap_in_PointerTo_fes__Filter_x005fCapabilities(struct soap*, const char*, _fes__Filter_x005fCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fes__Filter_x005fCapabilities(struct soap*, _fes__Filter_x005fCapabilities *const*, const char*, const char*);
SOAP_FMAC3 _fes__Filter_x005fCapabilities ** SOAP_FMAC4 soap_get_PointerTo_fes__Filter_x005fCapabilities(struct soap*, _fes__Filter_x005fCapabilities **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__FeatureTypeListType_DEFINED
#define SOAP_TYPE_PointerTowfs__FeatureTypeListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__FeatureTypeListType(struct soap*, wfs__FeatureTypeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__FeatureTypeListType(struct soap*, const char *, int, wfs__FeatureTypeListType *const*, const char *);
SOAP_FMAC3 wfs__FeatureTypeListType ** SOAP_FMAC4 soap_in_PointerTowfs__FeatureTypeListType(struct soap*, const char*, wfs__FeatureTypeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__FeatureTypeListType(struct soap*, wfs__FeatureTypeListType *const*, const char*, const char*);
SOAP_FMAC3 wfs__FeatureTypeListType ** SOAP_FMAC4 soap_get_PointerTowfs__FeatureTypeListType(struct soap*, wfs__FeatureTypeListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__WFS_x005fCapabilitiesType_WSDL_DEFINED
#define SOAP_TYPE_PointerTo_wfs__WFS_x005fCapabilitiesType_WSDL_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, _wfs__WFS_x005fCapabilitiesType_WSDL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, const char *, int, _wfs__WFS_x005fCapabilitiesType_WSDL *const*, const char *);
SOAP_FMAC3 _wfs__WFS_x005fCapabilitiesType_WSDL ** SOAP_FMAC4 soap_in_PointerTo_wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, const char*, _wfs__WFS_x005fCapabilitiesType_WSDL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, _wfs__WFS_x005fCapabilitiesType_WSDL *const*, const char*, const char*);
SOAP_FMAC3 _wfs__WFS_x005fCapabilitiesType_WSDL ** SOAP_FMAC4 soap_get_PointerTo_wfs__WFS_x005fCapabilitiesType_WSDL(struct soap*, _wfs__WFS_x005fCapabilitiesType_WSDL **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ParameterType_DEFINED
#define SOAP_TYPE_PointerTowfs__ParameterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ParameterType(struct soap*, wfs__ParameterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ParameterType(struct soap*, const char *, int, wfs__ParameterType *const*, const char *);
SOAP_FMAC3 wfs__ParameterType ** SOAP_FMAC4 soap_in_PointerTowfs__ParameterType(struct soap*, const char*, wfs__ParameterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ParameterType(struct soap*, wfs__ParameterType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ParameterType ** SOAP_FMAC4 soap_get_PointerTowfs__ParameterType(struct soap*, wfs__ParameterType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__uniqueResourceIdentifier_DEFINED
#define SOAP_TYPE_PointerToicommon__uniqueResourceIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__uniqueResourceIdentifier(struct soap*, icommon__uniqueResourceIdentifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__uniqueResourceIdentifier(struct soap*, const char *, int, icommon__uniqueResourceIdentifier *const*, const char *);
SOAP_FMAC3 icommon__uniqueResourceIdentifier ** SOAP_FMAC4 soap_in_PointerToicommon__uniqueResourceIdentifier(struct soap*, const char*, icommon__uniqueResourceIdentifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__uniqueResourceIdentifier(struct soap*, icommon__uniqueResourceIdentifier *const*, const char*, const char*);
SOAP_FMAC3 icommon__uniqueResourceIdentifier ** SOAP_FMAC4 soap_get_PointerToicommon__uniqueResourceIdentifier(struct soap*, icommon__uniqueResourceIdentifier **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__classificationOfSpatialDataService_DEFINED
#define SOAP_TYPE_PointerToicommon__classificationOfSpatialDataService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__classificationOfSpatialDataService(struct soap*, icommon__classificationOfSpatialDataService *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__classificationOfSpatialDataService(struct soap*, const char *, int, icommon__classificationOfSpatialDataService *const*, const char *);
SOAP_FMAC3 icommon__classificationOfSpatialDataService ** SOAP_FMAC4 soap_in_PointerToicommon__classificationOfSpatialDataService(struct soap*, const char*, icommon__classificationOfSpatialDataService **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__classificationOfSpatialDataService(struct soap*, icommon__classificationOfSpatialDataService *const*, const char*, const char*);
SOAP_FMAC3 icommon__classificationOfSpatialDataService ** SOAP_FMAC4 soap_get_PointerToicommon__classificationOfSpatialDataService(struct soap*, icommon__classificationOfSpatialDataService **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__spatialDataServiceType_DEFINED
#define SOAP_TYPE_PointerToicommon__spatialDataServiceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__spatialDataServiceType(struct soap*, enum icommon__spatialDataServiceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__spatialDataServiceType(struct soap*, const char *, int, enum icommon__spatialDataServiceType *const*, const char *);
SOAP_FMAC3 enum icommon__spatialDataServiceType ** SOAP_FMAC4 soap_in_PointerToicommon__spatialDataServiceType(struct soap*, const char*, enum icommon__spatialDataServiceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__spatialDataServiceType(struct soap*, enum icommon__spatialDataServiceType *const*, const char*, const char*);
SOAP_FMAC3 enum icommon__spatialDataServiceType ** SOAP_FMAC4 soap_get_PointerToicommon__spatialDataServiceType(struct soap*, enum icommon__spatialDataServiceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__serviceSpatialDataResourceType_DEFINED
#define SOAP_TYPE_PointerToicommon__serviceSpatialDataResourceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__serviceSpatialDataResourceType(struct soap*, enum icommon__serviceSpatialDataResourceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__serviceSpatialDataResourceType(struct soap*, const char *, int, enum icommon__serviceSpatialDataResourceType *const*, const char *);
SOAP_FMAC3 enum icommon__serviceSpatialDataResourceType ** SOAP_FMAC4 soap_in_PointerToicommon__serviceSpatialDataResourceType(struct soap*, const char*, enum icommon__serviceSpatialDataResourceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__serviceSpatialDataResourceType(struct soap*, enum icommon__serviceSpatialDataResourceType *const*, const char*, const char*);
SOAP_FMAC3 enum icommon__serviceSpatialDataResourceType ** SOAP_FMAC4 soap_get_PointerToicommon__serviceSpatialDataResourceType(struct soap*, enum icommon__serviceSpatialDataResourceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__languageElementISO6392B_DEFINED
#define SOAP_TYPE_PointerToicommon__languageElementISO6392B_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__languageElementISO6392B(struct soap*, icommon__languageElementISO6392B *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__languageElementISO6392B(struct soap*, const char *, int, icommon__languageElementISO6392B *const*, const char *);
SOAP_FMAC3 icommon__languageElementISO6392B ** SOAP_FMAC4 soap_in_PointerToicommon__languageElementISO6392B(struct soap*, const char*, icommon__languageElementISO6392B **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__languageElementISO6392B(struct soap*, icommon__languageElementISO6392B *const*, const char*, const char*);
SOAP_FMAC3 icommon__languageElementISO6392B ** SOAP_FMAC4 soap_get_PointerToicommon__languageElementISO6392B(struct soap*, icommon__languageElementISO6392B **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__supportedLanguagesType_DEFINED
#define SOAP_TYPE_PointerToicommon__supportedLanguagesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__supportedLanguagesType(struct soap*, icommon__supportedLanguagesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__supportedLanguagesType(struct soap*, const char *, int, icommon__supportedLanguagesType *const*, const char *);
SOAP_FMAC3 icommon__supportedLanguagesType ** SOAP_FMAC4 soap_in_PointerToicommon__supportedLanguagesType(struct soap*, const char*, icommon__supportedLanguagesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__supportedLanguagesType(struct soap*, icommon__supportedLanguagesType *const*, const char*, const char*);
SOAP_FMAC3 icommon__supportedLanguagesType ** SOAP_FMAC4 soap_get_PointerToicommon__supportedLanguagesType(struct soap*, icommon__supportedLanguagesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTolong_DEFINED
#define SOAP_TYPE_PointerTolong_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolong(struct soap*, long *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolong(struct soap*, const char *, int, long *const*, const char *);
SOAP_FMAC3 long ** SOAP_FMAC4 soap_in_PointerTolong(struct soap*, const char*, long **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolong(struct soap*, long *const*, const char*, const char*);
SOAP_FMAC3 long ** SOAP_FMAC4 soap_get_PointerTolong(struct soap*, long **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__originatingControlledVocabulary_DEFINED
#define SOAP_TYPE_PointerToicommon__originatingControlledVocabulary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__originatingControlledVocabulary(struct soap*, icommon__originatingControlledVocabulary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__originatingControlledVocabulary(struct soap*, const char *, int, icommon__originatingControlledVocabulary *const*, const char *);
SOAP_FMAC3 icommon__originatingControlledVocabulary ** SOAP_FMAC4 soap_in_PointerToicommon__originatingControlledVocabulary(struct soap*, const char*, icommon__originatingControlledVocabulary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__originatingControlledVocabulary(struct soap*, icommon__originatingControlledVocabulary *const*, const char*, const char*);
SOAP_FMAC3 icommon__originatingControlledVocabulary ** SOAP_FMAC4 soap_get_PointerToicommon__originatingControlledVocabulary(struct soap*, icommon__originatingControlledVocabulary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__icommon__union_temporalExtent_DEFINED
#define SOAP_TYPE_PointerTo__icommon__union_temporalExtent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__icommon__union_temporalExtent(struct soap*, __icommon__union_temporalExtent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__icommon__union_temporalExtent(struct soap*, const char *, int, __icommon__union_temporalExtent *const*, const char *);
SOAP_FMAC3 __icommon__union_temporalExtent ** SOAP_FMAC4 soap_in_PointerTo__icommon__union_temporalExtent(struct soap*, const char*, __icommon__union_temporalExtent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__icommon__union_temporalExtent(struct soap*, __icommon__union_temporalExtent *const*, const char*, const char*);
SOAP_FMAC3 __icommon__union_temporalExtent ** SOAP_FMAC4 soap_get_PointerTo__icommon__union_temporalExtent(struct soap*, __icommon__union_temporalExtent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_icommon__IntervalOfDates_DEFINED
#define SOAP_TYPE_PointerTo_icommon__IntervalOfDates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_icommon__IntervalOfDates(struct soap*, _icommon__IntervalOfDates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_icommon__IntervalOfDates(struct soap*, const char *, int, _icommon__IntervalOfDates *const*, const char *);
SOAP_FMAC3 _icommon__IntervalOfDates ** SOAP_FMAC4 soap_in_PointerTo_icommon__IntervalOfDates(struct soap*, const char*, _icommon__IntervalOfDates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_icommon__IntervalOfDates(struct soap*, _icommon__IntervalOfDates *const*, const char*, const char*);
SOAP_FMAC3 _icommon__IntervalOfDates ** SOAP_FMAC4 soap_get_PointerTo_icommon__IntervalOfDates(struct soap*, _icommon__IntervalOfDates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__temporalExtent_DEFINED
#define SOAP_TYPE_PointerToicommon__temporalExtent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__temporalExtent(struct soap*, icommon__temporalExtent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__temporalExtent(struct soap*, const char *, int, icommon__temporalExtent *const*, const char *);
SOAP_FMAC3 icommon__temporalExtent ** SOAP_FMAC4 soap_in_PointerToicommon__temporalExtent(struct soap*, const char*, icommon__temporalExtent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__temporalExtent(struct soap*, icommon__temporalExtent *const*, const char*, const char*);
SOAP_FMAC3 icommon__temporalExtent ** SOAP_FMAC4 soap_get_PointerToicommon__temporalExtent(struct soap*, icommon__temporalExtent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__citationConformity_DEFINED
#define SOAP_TYPE_PointerToicommon__citationConformity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__citationConformity(struct soap*, icommon__citationConformity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__citationConformity(struct soap*, const char *, int, icommon__citationConformity *const*, const char *);
SOAP_FMAC3 icommon__citationConformity ** SOAP_FMAC4 soap_in_PointerToicommon__citationConformity(struct soap*, const char*, icommon__citationConformity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__citationConformity(struct soap*, icommon__citationConformity *const*, const char*, const char*);
SOAP_FMAC3 icommon__citationConformity ** SOAP_FMAC4 soap_get_PointerToicommon__citationConformity(struct soap*, icommon__citationConformity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__iso8601Date_DEFINED
#define SOAP_TYPE_PointerToicommon__iso8601Date_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__iso8601Date(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__iso8601Date(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToicommon__iso8601Date(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__iso8601Date(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToicommon__iso8601Date(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__metadataPointOfContact_DEFINED
#define SOAP_TYPE_PointerToicommon__metadataPointOfContact_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__metadataPointOfContact(struct soap*, icommon__metadataPointOfContact *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__metadataPointOfContact(struct soap*, const char *, int, icommon__metadataPointOfContact *const*, const char *);
SOAP_FMAC3 icommon__metadataPointOfContact ** SOAP_FMAC4 soap_in_PointerToicommon__metadataPointOfContact(struct soap*, const char*, icommon__metadataPointOfContact **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__metadataPointOfContact(struct soap*, icommon__metadataPointOfContact *const*, const char*, const char*);
SOAP_FMAC3 icommon__metadataPointOfContact ** SOAP_FMAC4 soap_get_PointerToicommon__metadataPointOfContact(struct soap*, icommon__metadataPointOfContact **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__responsibleOrganisation_DEFINED
#define SOAP_TYPE_PointerToicommon__responsibleOrganisation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__responsibleOrganisation(struct soap*, icommon__responsibleOrganisation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__responsibleOrganisation(struct soap*, const char *, int, icommon__responsibleOrganisation *const*, const char *);
SOAP_FMAC3 icommon__responsibleOrganisation ** SOAP_FMAC4 soap_in_PointerToicommon__responsibleOrganisation(struct soap*, const char*, icommon__responsibleOrganisation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__responsibleOrganisation(struct soap*, icommon__responsibleOrganisation *const*, const char*, const char*);
SOAP_FMAC3 icommon__responsibleOrganisation ** SOAP_FMAC4 soap_get_PointerToicommon__responsibleOrganisation(struct soap*, icommon__responsibleOrganisation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__conformity_DEFINED
#define SOAP_TYPE_PointerToicommon__conformity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__conformity(struct soap*, icommon__conformity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__conformity(struct soap*, const char *, int, icommon__conformity *const*, const char *);
SOAP_FMAC3 icommon__conformity ** SOAP_FMAC4 soap_in_PointerToicommon__conformity(struct soap*, const char*, icommon__conformity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__conformity(struct soap*, icommon__conformity *const*, const char*, const char*);
SOAP_FMAC3 icommon__conformity ** SOAP_FMAC4 soap_get_PointerToicommon__conformity(struct soap*, icommon__conformity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__spatialResolution_DEFINED
#define SOAP_TYPE_PointerToicommon__spatialResolution_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__spatialResolution(struct soap*, icommon__spatialResolution *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__spatialResolution(struct soap*, const char *, int, icommon__spatialResolution *const*, const char *);
SOAP_FMAC3 icommon__spatialResolution ** SOAP_FMAC4 soap_in_PointerToicommon__spatialResolution(struct soap*, const char*, icommon__spatialResolution **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__spatialResolution(struct soap*, icommon__spatialResolution *const*, const char*, const char*);
SOAP_FMAC3 icommon__spatialResolution ** SOAP_FMAC4 soap_get_PointerToicommon__spatialResolution(struct soap*, icommon__spatialResolution **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__temporalReference_DEFINED
#define SOAP_TYPE_PointerToicommon__temporalReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__temporalReference(struct soap*, icommon__temporalReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__temporalReference(struct soap*, const char *, int, icommon__temporalReference *const*, const char *);
SOAP_FMAC3 icommon__temporalReference ** SOAP_FMAC4 soap_in_PointerToicommon__temporalReference(struct soap*, const char*, icommon__temporalReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__temporalReference(struct soap*, icommon__temporalReference *const*, const char*, const char*);
SOAP_FMAC3 icommon__temporalReference ** SOAP_FMAC4 soap_get_PointerToicommon__temporalReference(struct soap*, icommon__temporalReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__geographicBoundingBox_DEFINED
#define SOAP_TYPE_PointerToicommon__geographicBoundingBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__geographicBoundingBox(struct soap*, icommon__geographicBoundingBox *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__geographicBoundingBox(struct soap*, const char *, int, icommon__geographicBoundingBox *const*, const char *);
SOAP_FMAC3 icommon__geographicBoundingBox ** SOAP_FMAC4 soap_in_PointerToicommon__geographicBoundingBox(struct soap*, const char*, icommon__geographicBoundingBox **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__geographicBoundingBox(struct soap*, icommon__geographicBoundingBox *const*, const char*, const char*);
SOAP_FMAC3 icommon__geographicBoundingBox ** SOAP_FMAC4 soap_get_PointerToicommon__geographicBoundingBox(struct soap*, icommon__geographicBoundingBox **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__keyword_DEFINED
#define SOAP_TYPE_PointerToicommon__keyword_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__keyword(struct soap*, icommon__keyword *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__keyword(struct soap*, const char *, int, icommon__keyword *const*, const char *);
SOAP_FMAC3 icommon__keyword ** SOAP_FMAC4 soap_in_PointerToicommon__keyword(struct soap*, const char*, icommon__keyword **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__keyword(struct soap*, icommon__keyword *const*, const char*, const char*);
SOAP_FMAC3 icommon__keyword ** SOAP_FMAC4 soap_get_PointerToicommon__keyword(struct soap*, icommon__keyword **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToicommon__resourceLocatorType_DEFINED
#define SOAP_TYPE_PointerToicommon__resourceLocatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToicommon__resourceLocatorType(struct soap*, icommon__resourceLocatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToicommon__resourceLocatorType(struct soap*, const char *, int, icommon__resourceLocatorType *const*, const char *);
SOAP_FMAC3 icommon__resourceLocatorType ** SOAP_FMAC4 soap_in_PointerToicommon__resourceLocatorType(struct soap*, const char*, icommon__resourceLocatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToicommon__resourceLocatorType(struct soap*, icommon__resourceLocatorType *const*, const char*, const char*);
SOAP_FMAC3 icommon__resourceLocatorType ** SOAP_FMAC4 soap_get_PointerToicommon__resourceLocatorType(struct soap*, icommon__resourceLocatorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__Extended_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_PointerTofes__Extended_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__Extended_x005fCapabilitiesType(struct soap*, fes__Extended_x005fCapabilitiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__Extended_x005fCapabilitiesType(struct soap*, const char *, int, fes__Extended_x005fCapabilitiesType *const*, const char *);
SOAP_FMAC3 fes__Extended_x005fCapabilitiesType ** SOAP_FMAC4 soap_in_PointerTofes__Extended_x005fCapabilitiesType(struct soap*, const char*, fes__Extended_x005fCapabilitiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__Extended_x005fCapabilitiesType(struct soap*, fes__Extended_x005fCapabilitiesType *const*, const char*, const char*);
SOAP_FMAC3 fes__Extended_x005fCapabilitiesType ** SOAP_FMAC4 soap_get_PointerTofes__Extended_x005fCapabilitiesType(struct soap*, fes__Extended_x005fCapabilitiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__AvailableFunctionsType_DEFINED
#define SOAP_TYPE_PointerTofes__AvailableFunctionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__AvailableFunctionsType(struct soap*, fes__AvailableFunctionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__AvailableFunctionsType(struct soap*, const char *, int, fes__AvailableFunctionsType *const*, const char *);
SOAP_FMAC3 fes__AvailableFunctionsType ** SOAP_FMAC4 soap_in_PointerTofes__AvailableFunctionsType(struct soap*, const char*, fes__AvailableFunctionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__AvailableFunctionsType(struct soap*, fes__AvailableFunctionsType *const*, const char*, const char*);
SOAP_FMAC3 fes__AvailableFunctionsType ** SOAP_FMAC4 soap_get_PointerTofes__AvailableFunctionsType(struct soap*, fes__AvailableFunctionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__Temporal_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_PointerTofes__Temporal_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__Temporal_x005fCapabilitiesType(struct soap*, fes__Temporal_x005fCapabilitiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__Temporal_x005fCapabilitiesType(struct soap*, const char *, int, fes__Temporal_x005fCapabilitiesType *const*, const char *);
SOAP_FMAC3 fes__Temporal_x005fCapabilitiesType ** SOAP_FMAC4 soap_in_PointerTofes__Temporal_x005fCapabilitiesType(struct soap*, const char*, fes__Temporal_x005fCapabilitiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__Temporal_x005fCapabilitiesType(struct soap*, fes__Temporal_x005fCapabilitiesType *const*, const char*, const char*);
SOAP_FMAC3 fes__Temporal_x005fCapabilitiesType ** SOAP_FMAC4 soap_get_PointerTofes__Temporal_x005fCapabilitiesType(struct soap*, fes__Temporal_x005fCapabilitiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__Spatial_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_PointerTofes__Spatial_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__Spatial_x005fCapabilitiesType(struct soap*, fes__Spatial_x005fCapabilitiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__Spatial_x005fCapabilitiesType(struct soap*, const char *, int, fes__Spatial_x005fCapabilitiesType *const*, const char *);
SOAP_FMAC3 fes__Spatial_x005fCapabilitiesType ** SOAP_FMAC4 soap_in_PointerTofes__Spatial_x005fCapabilitiesType(struct soap*, const char*, fes__Spatial_x005fCapabilitiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__Spatial_x005fCapabilitiesType(struct soap*, fes__Spatial_x005fCapabilitiesType *const*, const char*, const char*);
SOAP_FMAC3 fes__Spatial_x005fCapabilitiesType ** SOAP_FMAC4 soap_get_PointerTofes__Spatial_x005fCapabilitiesType(struct soap*, fes__Spatial_x005fCapabilitiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__Scalar_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_PointerTofes__Scalar_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__Scalar_x005fCapabilitiesType(struct soap*, fes__Scalar_x005fCapabilitiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__Scalar_x005fCapabilitiesType(struct soap*, const char *, int, fes__Scalar_x005fCapabilitiesType *const*, const char *);
SOAP_FMAC3 fes__Scalar_x005fCapabilitiesType ** SOAP_FMAC4 soap_in_PointerTofes__Scalar_x005fCapabilitiesType(struct soap*, const char*, fes__Scalar_x005fCapabilitiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__Scalar_x005fCapabilitiesType(struct soap*, fes__Scalar_x005fCapabilitiesType *const*, const char*, const char*);
SOAP_FMAC3 fes__Scalar_x005fCapabilitiesType ** SOAP_FMAC4 soap_get_PointerTofes__Scalar_x005fCapabilitiesType(struct soap*, fes__Scalar_x005fCapabilitiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__Id_x005fCapabilitiesType_DEFINED
#define SOAP_TYPE_PointerTofes__Id_x005fCapabilitiesType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__Id_x005fCapabilitiesType(struct soap*, fes__Id_x005fCapabilitiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__Id_x005fCapabilitiesType(struct soap*, const char *, int, fes__Id_x005fCapabilitiesType *const*, const char *);
SOAP_FMAC3 fes__Id_x005fCapabilitiesType ** SOAP_FMAC4 soap_in_PointerTofes__Id_x005fCapabilitiesType(struct soap*, const char*, fes__Id_x005fCapabilitiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__Id_x005fCapabilitiesType(struct soap*, fes__Id_x005fCapabilitiesType *const*, const char*, const char*);
SOAP_FMAC3 fes__Id_x005fCapabilitiesType ** SOAP_FMAC4 soap_get_PointerTofes__Id_x005fCapabilitiesType(struct soap*, fes__Id_x005fCapabilitiesType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ConformanceType_DEFINED
#define SOAP_TYPE_PointerTofes__ConformanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ConformanceType(struct soap*, fes__ConformanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ConformanceType(struct soap*, const char *, int, fes__ConformanceType *const*, const char *);
SOAP_FMAC3 fes__ConformanceType ** SOAP_FMAC4 soap_in_PointerTofes__ConformanceType(struct soap*, const char*, fes__ConformanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ConformanceType(struct soap*, fes__ConformanceType *const*, const char*, const char*);
SOAP_FMAC3 fes__ConformanceType ** SOAP_FMAC4 soap_get_PointerTofes__ConformanceType(struct soap*, fes__ConformanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__SortOrderType_DEFINED
#define SOAP_TYPE_PointerTofes__SortOrderType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__SortOrderType(struct soap*, enum fes__SortOrderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__SortOrderType(struct soap*, const char *, int, enum fes__SortOrderType *const*, const char *);
SOAP_FMAC3 enum fes__SortOrderType ** SOAP_FMAC4 soap_in_PointerTofes__SortOrderType(struct soap*, const char*, enum fes__SortOrderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__SortOrderType(struct soap*, enum fes__SortOrderType *const*, const char*, const char*);
SOAP_FMAC3 enum fes__SortOrderType ** SOAP_FMAC4 soap_get_PointerTofes__SortOrderType(struct soap*, enum fes__SortOrderType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__SortPropertyType_DEFINED
#define SOAP_TYPE_PointerTofes__SortPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__SortPropertyType(struct soap*, fes__SortPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__SortPropertyType(struct soap*, const char *, int, fes__SortPropertyType *const*, const char *);
SOAP_FMAC3 fes__SortPropertyType ** SOAP_FMAC4 soap_in_PointerTofes__SortPropertyType(struct soap*, const char*, fes__SortPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__SortPropertyType(struct soap*, fes__SortPropertyType *const*, const char*, const char*);
SOAP_FMAC3 fes__SortPropertyType ** SOAP_FMAC4 soap_get_PointerTofes__SortPropertyType(struct soap*, fes__SortPropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ExtensionOperatorType_DEFINED
#define SOAP_TYPE_PointerTofes__ExtensionOperatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ExtensionOperatorType(struct soap*, fes__ExtensionOperatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ExtensionOperatorType(struct soap*, const char *, int, fes__ExtensionOperatorType *const*, const char *);
SOAP_FMAC3 fes__ExtensionOperatorType ** SOAP_FMAC4 soap_in_PointerTofes__ExtensionOperatorType(struct soap*, const char*, fes__ExtensionOperatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ExtensionOperatorType(struct soap*, fes__ExtensionOperatorType *const*, const char*, const char*);
SOAP_FMAC3 fes__ExtensionOperatorType ** SOAP_FMAC4 soap_get_PointerTofes__ExtensionOperatorType(struct soap*, fes__ExtensionOperatorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__AdditionalOperatorsType_DEFINED
#define SOAP_TYPE_PointerTofes__AdditionalOperatorsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__AdditionalOperatorsType(struct soap*, fes__AdditionalOperatorsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__AdditionalOperatorsType(struct soap*, const char *, int, fes__AdditionalOperatorsType *const*, const char *);
SOAP_FMAC3 fes__AdditionalOperatorsType ** SOAP_FMAC4 soap_in_PointerTofes__AdditionalOperatorsType(struct soap*, const char*, fes__AdditionalOperatorsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__AdditionalOperatorsType(struct soap*, fes__AdditionalOperatorsType *const*, const char*, const char*);
SOAP_FMAC3 fes__AdditionalOperatorsType ** SOAP_FMAC4 soap_get_PointerTofes__AdditionalOperatorsType(struct soap*, fes__AdditionalOperatorsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__TemporalOperatorType_DEFINED
#define SOAP_TYPE_PointerTofes__TemporalOperatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__TemporalOperatorType(struct soap*, fes__TemporalOperatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__TemporalOperatorType(struct soap*, const char *, int, fes__TemporalOperatorType *const*, const char *);
SOAP_FMAC3 fes__TemporalOperatorType ** SOAP_FMAC4 soap_in_PointerTofes__TemporalOperatorType(struct soap*, const char*, fes__TemporalOperatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__TemporalOperatorType(struct soap*, fes__TemporalOperatorType *const*, const char*, const char*);
SOAP_FMAC3 fes__TemporalOperatorType ** SOAP_FMAC4 soap_get_PointerTofes__TemporalOperatorType(struct soap*, fes__TemporalOperatorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__TemporalOperatorsType_DEFINED
#define SOAP_TYPE_PointerTofes__TemporalOperatorsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__TemporalOperatorsType(struct soap*, fes__TemporalOperatorsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__TemporalOperatorsType(struct soap*, const char *, int, fes__TemporalOperatorsType *const*, const char *);
SOAP_FMAC3 fes__TemporalOperatorsType ** SOAP_FMAC4 soap_in_PointerTofes__TemporalOperatorsType(struct soap*, const char*, fes__TemporalOperatorsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__TemporalOperatorsType(struct soap*, fes__TemporalOperatorsType *const*, const char*, const char*);
SOAP_FMAC3 fes__TemporalOperatorsType ** SOAP_FMAC4 soap_get_PointerTofes__TemporalOperatorsType(struct soap*, fes__TemporalOperatorsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__TemporalOperandsType_DEFINED
#define SOAP_TYPE_PointerTofes__TemporalOperandsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__TemporalOperandsType(struct soap*, fes__TemporalOperandsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__TemporalOperandsType(struct soap*, const char *, int, fes__TemporalOperandsType *const*, const char *);
SOAP_FMAC3 fes__TemporalOperandsType ** SOAP_FMAC4 soap_in_PointerTofes__TemporalOperandsType(struct soap*, const char*, fes__TemporalOperandsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__TemporalOperandsType(struct soap*, fes__TemporalOperandsType *const*, const char*, const char*);
SOAP_FMAC3 fes__TemporalOperandsType ** SOAP_FMAC4 soap_get_PointerTofes__TemporalOperandsType(struct soap*, fes__TemporalOperandsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__SpatialOperatorNameType_DEFINED
#define SOAP_TYPE_PointerTofes__SpatialOperatorNameType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__SpatialOperatorNameType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__SpatialOperatorNameType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTofes__SpatialOperatorNameType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__SpatialOperatorNameType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTofes__SpatialOperatorNameType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__SpatialOperatorType_DEFINED
#define SOAP_TYPE_PointerTofes__SpatialOperatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__SpatialOperatorType(struct soap*, fes__SpatialOperatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__SpatialOperatorType(struct soap*, const char *, int, fes__SpatialOperatorType *const*, const char *);
SOAP_FMAC3 fes__SpatialOperatorType ** SOAP_FMAC4 soap_in_PointerTofes__SpatialOperatorType(struct soap*, const char*, fes__SpatialOperatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__SpatialOperatorType(struct soap*, fes__SpatialOperatorType *const*, const char*, const char*);
SOAP_FMAC3 fes__SpatialOperatorType ** SOAP_FMAC4 soap_get_PointerTofes__SpatialOperatorType(struct soap*, fes__SpatialOperatorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__SpatialOperatorsType_DEFINED
#define SOAP_TYPE_PointerTofes__SpatialOperatorsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__SpatialOperatorsType(struct soap*, fes__SpatialOperatorsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__SpatialOperatorsType(struct soap*, const char *, int, fes__SpatialOperatorsType *const*, const char *);
SOAP_FMAC3 fes__SpatialOperatorsType ** SOAP_FMAC4 soap_in_PointerTofes__SpatialOperatorsType(struct soap*, const char*, fes__SpatialOperatorsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__SpatialOperatorsType(struct soap*, fes__SpatialOperatorsType *const*, const char*, const char*);
SOAP_FMAC3 fes__SpatialOperatorsType ** SOAP_FMAC4 soap_get_PointerTofes__SpatialOperatorsType(struct soap*, fes__SpatialOperatorsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__GeometryOperandsType_DEFINED
#define SOAP_TYPE_PointerTofes__GeometryOperandsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__GeometryOperandsType(struct soap*, fes__GeometryOperandsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__GeometryOperandsType(struct soap*, const char *, int, fes__GeometryOperandsType *const*, const char *);
SOAP_FMAC3 fes__GeometryOperandsType ** SOAP_FMAC4 soap_in_PointerTofes__GeometryOperandsType(struct soap*, const char*, fes__GeometryOperandsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__GeometryOperandsType(struct soap*, fes__GeometryOperandsType *const*, const char*, const char*);
SOAP_FMAC3 fes__GeometryOperandsType ** SOAP_FMAC4 soap_get_PointerTofes__GeometryOperandsType(struct soap*, fes__GeometryOperandsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ArgumentType_DEFINED
#define SOAP_TYPE_PointerTofes__ArgumentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ArgumentType(struct soap*, fes__ArgumentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ArgumentType(struct soap*, const char *, int, fes__ArgumentType *const*, const char *);
SOAP_FMAC3 fes__ArgumentType ** SOAP_FMAC4 soap_in_PointerTofes__ArgumentType(struct soap*, const char*, fes__ArgumentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ArgumentType(struct soap*, fes__ArgumentType *const*, const char*, const char*);
SOAP_FMAC3 fes__ArgumentType ** SOAP_FMAC4 soap_get_PointerTofes__ArgumentType(struct soap*, fes__ArgumentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ArgumentsType_DEFINED
#define SOAP_TYPE_PointerTofes__ArgumentsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ArgumentsType(struct soap*, fes__ArgumentsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ArgumentsType(struct soap*, const char *, int, fes__ArgumentsType *const*, const char *);
SOAP_FMAC3 fes__ArgumentsType ** SOAP_FMAC4 soap_in_PointerTofes__ArgumentsType(struct soap*, const char*, fes__ArgumentsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ArgumentsType(struct soap*, fes__ArgumentsType *const*, const char*, const char*);
SOAP_FMAC3 fes__ArgumentsType ** SOAP_FMAC4 soap_get_PointerTofes__ArgumentsType(struct soap*, fes__ArgumentsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__AvailableFunctionType_DEFINED
#define SOAP_TYPE_PointerTofes__AvailableFunctionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__AvailableFunctionType(struct soap*, fes__AvailableFunctionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__AvailableFunctionType(struct soap*, const char *, int, fes__AvailableFunctionType *const*, const char *);
SOAP_FMAC3 fes__AvailableFunctionType ** SOAP_FMAC4 soap_in_PointerTofes__AvailableFunctionType(struct soap*, const char*, fes__AvailableFunctionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__AvailableFunctionType(struct soap*, fes__AvailableFunctionType *const*, const char*, const char*);
SOAP_FMAC3 fes__AvailableFunctionType ** SOAP_FMAC4 soap_get_PointerTofes__AvailableFunctionType(struct soap*, fes__AvailableFunctionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ComparisonOperatorType_DEFINED
#define SOAP_TYPE_PointerTofes__ComparisonOperatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ComparisonOperatorType(struct soap*, fes__ComparisonOperatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ComparisonOperatorType(struct soap*, const char *, int, fes__ComparisonOperatorType *const*, const char *);
SOAP_FMAC3 fes__ComparisonOperatorType ** SOAP_FMAC4 soap_in_PointerTofes__ComparisonOperatorType(struct soap*, const char*, fes__ComparisonOperatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ComparisonOperatorType(struct soap*, fes__ComparisonOperatorType *const*, const char*, const char*);
SOAP_FMAC3 fes__ComparisonOperatorType ** SOAP_FMAC4 soap_get_PointerTofes__ComparisonOperatorType(struct soap*, fes__ComparisonOperatorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ComparisonOperatorsType_DEFINED
#define SOAP_TYPE_PointerTofes__ComparisonOperatorsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ComparisonOperatorsType(struct soap*, fes__ComparisonOperatorsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ComparisonOperatorsType(struct soap*, const char *, int, fes__ComparisonOperatorsType *const*, const char *);
SOAP_FMAC3 fes__ComparisonOperatorsType ** SOAP_FMAC4 soap_in_PointerTofes__ComparisonOperatorsType(struct soap*, const char*, fes__ComparisonOperatorsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ComparisonOperatorsType(struct soap*, fes__ComparisonOperatorsType *const*, const char*, const char*);
SOAP_FMAC3 fes__ComparisonOperatorsType ** SOAP_FMAC4 soap_get_PointerTofes__ComparisonOperatorsType(struct soap*, fes__ComparisonOperatorsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_fes__LogicalOperators_DEFINED
#define SOAP_TYPE_PointerTo_fes__LogicalOperators_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fes__LogicalOperators(struct soap*, _fes__LogicalOperators *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fes__LogicalOperators(struct soap*, const char *, int, _fes__LogicalOperators *const*, const char *);
SOAP_FMAC3 _fes__LogicalOperators ** SOAP_FMAC4 soap_in_PointerTo_fes__LogicalOperators(struct soap*, const char*, _fes__LogicalOperators **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fes__LogicalOperators(struct soap*, _fes__LogicalOperators *const*, const char*, const char*);
SOAP_FMAC3 _fes__LogicalOperators ** SOAP_FMAC4 soap_get_PointerTo_fes__LogicalOperators(struct soap*, _fes__LogicalOperators **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ResourceIdentifierType_DEFINED
#define SOAP_TYPE_PointerTofes__ResourceIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ResourceIdentifierType(struct soap*, fes__ResourceIdentifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ResourceIdentifierType(struct soap*, const char *, int, fes__ResourceIdentifierType *const*, const char *);
SOAP_FMAC3 fes__ResourceIdentifierType ** SOAP_FMAC4 soap_in_PointerTofes__ResourceIdentifierType(struct soap*, const char*, fes__ResourceIdentifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ResourceIdentifierType(struct soap*, fes__ResourceIdentifierType *const*, const char*, const char*);
SOAP_FMAC3 fes__ResourceIdentifierType ** SOAP_FMAC4 soap_get_PointerTofes__ResourceIdentifierType(struct soap*, fes__ResourceIdentifierType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__QName_DEFINED
#define SOAP_TYPE_PointerToxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__fes__union_FunctionType_DEFINED
#define SOAP_TYPE_PointerTo__fes__union_FunctionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__fes__union_FunctionType(struct soap*, __fes__union_FunctionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__fes__union_FunctionType(struct soap*, const char *, int, __fes__union_FunctionType *const*, const char *);
SOAP_FMAC3 __fes__union_FunctionType ** SOAP_FMAC4 soap_in_PointerTo__fes__union_FunctionType(struct soap*, const char*, __fes__union_FunctionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__fes__union_FunctionType(struct soap*, __fes__union_FunctionType *const*, const char*, const char*);
SOAP_FMAC3 __fes__union_FunctionType ** SOAP_FMAC4 soap_get_PointerTo__fes__union_FunctionType(struct soap*, __fes__union_FunctionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__LiteralType_DEFINED
#define SOAP_TYPE_PointerTofes__LiteralType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__LiteralType(struct soap*, fes__LiteralType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__LiteralType(struct soap*, const char *, int, fes__LiteralType *const*, const char *);
SOAP_FMAC3 fes__LiteralType ** SOAP_FMAC4 soap_in_PointerTofes__LiteralType(struct soap*, const char*, fes__LiteralType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__LiteralType(struct soap*, fes__LiteralType *const*, const char*, const char*);
SOAP_FMAC3 fes__LiteralType ** SOAP_FMAC4 soap_get_PointerTofes__LiteralType(struct soap*, fes__LiteralType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__FunctionType_DEFINED
#define SOAP_TYPE_PointerTofes__FunctionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__FunctionType(struct soap*, fes__FunctionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__FunctionType(struct soap*, const char *, int, fes__FunctionType *const*, const char *);
SOAP_FMAC3 fes__FunctionType ** SOAP_FMAC4 soap_in_PointerTofes__FunctionType(struct soap*, const char*, fes__FunctionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__FunctionType(struct soap*, fes__FunctionType *const*, const char*, const char*);
SOAP_FMAC3 fes__FunctionType ** SOAP_FMAC4 soap_get_PointerTofes__FunctionType(struct soap*, fes__FunctionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__toType_DEFINED
#define SOAP_TYPE_PointerToxlink__toType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__toType(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__toType(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxlink__toType(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__toType(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxlink__toType(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__fromType_DEFINED
#define SOAP_TYPE_PointerToxlink__fromType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__fromType(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__fromType(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxlink__fromType(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__fromType(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxlink__fromType(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__xlink__union_arcType_DEFINED
#define SOAP_TYPE_PointerTo__xlink__union_arcType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xlink__union_arcType(struct soap*, __xlink__union_arcType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xlink__union_arcType(struct soap*, const char *, int, __xlink__union_arcType *const*, const char *);
SOAP_FMAC3 __xlink__union_arcType ** SOAP_FMAC4 soap_in_PointerTo__xlink__union_arcType(struct soap*, const char*, __xlink__union_arcType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xlink__union_arcType(struct soap*, __xlink__union_arcType *const*, const char*, const char*);
SOAP_FMAC3 __xlink__union_arcType ** SOAP_FMAC4 soap_get_PointerTo__xlink__union_arcType(struct soap*, __xlink__union_arcType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__xlink__union_locatorType_DEFINED
#define SOAP_TYPE_PointerTo__xlink__union_locatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xlink__union_locatorType(struct soap*, __xlink__union_locatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xlink__union_locatorType(struct soap*, const char *, int, __xlink__union_locatorType *const*, const char *);
SOAP_FMAC3 __xlink__union_locatorType ** SOAP_FMAC4 soap_in_PointerTo__xlink__union_locatorType(struct soap*, const char*, __xlink__union_locatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xlink__union_locatorType(struct soap*, __xlink__union_locatorType *const*, const char*, const char*);
SOAP_FMAC3 __xlink__union_locatorType ** SOAP_FMAC4 soap_get_PointerTo__xlink__union_locatorType(struct soap*, __xlink__union_locatorType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__labelType_DEFINED
#define SOAP_TYPE_PointerToxlink__labelType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__labelType(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__labelType(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxlink__labelType(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__labelType(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxlink__labelType(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__RangeType_DEFINED
#define SOAP_TYPE_PointerToows__RangeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__RangeType(struct soap*, ows__RangeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__RangeType(struct soap*, const char *, int, ows__RangeType *const*, const char *);
SOAP_FMAC3 ows__RangeType ** SOAP_FMAC4 soap_in_PointerToows__RangeType(struct soap*, const char*, ows__RangeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__RangeType(struct soap*, ows__RangeType *const*, const char*, const char*);
SOAP_FMAC3 ows__RangeType ** SOAP_FMAC4 soap_get_PointerToows__RangeType(struct soap*, ows__RangeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__RequestMethodType_DEFINED
#define SOAP_TYPE_PointerToows__RequestMethodType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__RequestMethodType(struct soap*, ows__RequestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__RequestMethodType(struct soap*, const char *, int, ows__RequestMethodType *const*, const char *);
SOAP_FMAC3 ows__RequestMethodType ** SOAP_FMAC4 soap_in_PointerToows__RequestMethodType(struct soap*, const char*, ows__RequestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__RequestMethodType(struct soap*, ows__RequestMethodType *const*, const char*, const char*);
SOAP_FMAC3 ows__RequestMethodType ** SOAP_FMAC4 soap_get_PointerToows__RequestMethodType(struct soap*, ows__RequestMethodType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__HTTP_DEFINED
#define SOAP_TYPE_PointerTo_ows__HTTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__HTTP(struct soap*, _ows__HTTP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__HTTP(struct soap*, const char *, int, _ows__HTTP *const*, const char *);
SOAP_FMAC3 _ows__HTTP ** SOAP_FMAC4 soap_in_PointerTo_ows__HTTP(struct soap*, const char*, _ows__HTTP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__HTTP(struct soap*, _ows__HTTP *const*, const char*, const char*);
SOAP_FMAC3 _ows__HTTP ** SOAP_FMAC4 soap_get_PointerTo_ows__HTTP(struct soap*, _ows__HTTP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__DCP_DEFINED
#define SOAP_TYPE_PointerTo_ows__DCP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__DCP(struct soap*, _ows__DCP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__DCP(struct soap*, const char *, int, _ows__DCP *const*, const char *);
SOAP_FMAC3 _ows__DCP ** SOAP_FMAC4 soap_in_PointerTo_ows__DCP(struct soap*, const char*, _ows__DCP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__DCP(struct soap*, _ows__DCP *const*, const char*, const char*);
SOAP_FMAC3 _ows__DCP ** SOAP_FMAC4 soap_get_PointerTo_ows__DCP(struct soap*, _ows__DCP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__DomainType_DEFINED
#define SOAP_TYPE_PointerToows__DomainType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__DomainType(struct soap*, ows__DomainType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__DomainType(struct soap*, const char *, int, ows__DomainType *const*, const char *);
SOAP_FMAC3 ows__DomainType ** SOAP_FMAC4 soap_in_PointerToows__DomainType(struct soap*, const char*, ows__DomainType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__DomainType(struct soap*, ows__DomainType *const*, const char*, const char*);
SOAP_FMAC3 ows__DomainType ** SOAP_FMAC4 soap_get_PointerToows__DomainType(struct soap*, ows__DomainType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__Operation_DEFINED
#define SOAP_TYPE_PointerTo_ows__Operation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__Operation(struct soap*, _ows__Operation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__Operation(struct soap*, const char *, int, _ows__Operation *const*, const char *);
SOAP_FMAC3 _ows__Operation ** SOAP_FMAC4 soap_in_PointerTo_ows__Operation(struct soap*, const char*, _ows__Operation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__Operation(struct soap*, _ows__Operation *const*, const char*, const char*);
SOAP_FMAC3 _ows__Operation ** SOAP_FMAC4 soap_get_PointerTo_ows__Operation(struct soap*, _ows__Operation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__ResponsiblePartySubsetType_DEFINED
#define SOAP_TYPE_PointerToows__ResponsiblePartySubsetType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__ResponsiblePartySubsetType(struct soap*, ows__ResponsiblePartySubsetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__ResponsiblePartySubsetType(struct soap*, const char *, int, ows__ResponsiblePartySubsetType *const*, const char *);
SOAP_FMAC3 ows__ResponsiblePartySubsetType ** SOAP_FMAC4 soap_in_PointerToows__ResponsiblePartySubsetType(struct soap*, const char*, ows__ResponsiblePartySubsetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__ResponsiblePartySubsetType(struct soap*, ows__ResponsiblePartySubsetType *const*, const char*, const char*);
SOAP_FMAC3 ows__ResponsiblePartySubsetType ** SOAP_FMAC4 soap_get_PointerToows__ResponsiblePartySubsetType(struct soap*, ows__ResponsiblePartySubsetType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_xml__lang_DEFINED
#define SOAP_TYPE_PointerTo_xml__lang_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__ExceptionType_DEFINED
#define SOAP_TYPE_PointerToows__ExceptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__ExceptionType(struct soap*, ows__ExceptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__ExceptionType(struct soap*, const char *, int, ows__ExceptionType *const*, const char *);
SOAP_FMAC3 ows__ExceptionType ** SOAP_FMAC4 soap_in_PointerToows__ExceptionType(struct soap*, const char*, ows__ExceptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__ExceptionType(struct soap*, ows__ExceptionType *const*, const char*, const char*);
SOAP_FMAC3 ows__ExceptionType ** SOAP_FMAC4 soap_get_PointerToows__ExceptionType(struct soap*, ows__ExceptionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__DatasetDescriptionSummaryBaseType_DEFINED
#define SOAP_TYPE_PointerToows__DatasetDescriptionSummaryBaseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__DatasetDescriptionSummaryBaseType(struct soap*, ows__DatasetDescriptionSummaryBaseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__DatasetDescriptionSummaryBaseType(struct soap*, const char *, int, ows__DatasetDescriptionSummaryBaseType *const*, const char *);
SOAP_FMAC3 ows__DatasetDescriptionSummaryBaseType ** SOAP_FMAC4 soap_in_PointerToows__DatasetDescriptionSummaryBaseType(struct soap*, const char*, ows__DatasetDescriptionSummaryBaseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__DatasetDescriptionSummaryBaseType(struct soap*, ows__DatasetDescriptionSummaryBaseType *const*, const char*, const char*);
SOAP_FMAC3 ows__DatasetDescriptionSummaryBaseType ** SOAP_FMAC4 soap_get_PointerToows__DatasetDescriptionSummaryBaseType(struct soap*, ows__DatasetDescriptionSummaryBaseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__DomainMetadataType_DEFINED
#define SOAP_TYPE_PointerToows__DomainMetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__DomainMetadataType(struct soap*, ows__DomainMetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__DomainMetadataType(struct soap*, const char *, int, ows__DomainMetadataType *const*, const char *);
SOAP_FMAC3 ows__DomainMetadataType ** SOAP_FMAC4 soap_in_PointerToows__DomainMetadataType(struct soap*, const char*, ows__DomainMetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__DomainMetadataType(struct soap*, ows__DomainMetadataType *const*, const char*, const char*);
SOAP_FMAC3 ows__DomainMetadataType ** SOAP_FMAC4 soap_get_PointerToows__DomainMetadataType(struct soap*, ows__DomainMetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__ValueType_DEFINED
#define SOAP_TYPE_PointerToows__ValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__ValueType(struct soap*, ows__ValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__ValueType(struct soap*, const char *, int, ows__ValueType *const*, const char *);
SOAP_FMAC3 ows__ValueType ** SOAP_FMAC4 soap_in_PointerToows__ValueType(struct soap*, const char*, ows__ValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__ValueType(struct soap*, ows__ValueType *const*, const char*, const char*);
SOAP_FMAC3 ows__ValueType ** SOAP_FMAC4 soap_get_PointerToows__ValueType(struct soap*, ows__ValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__ValuesReference_DEFINED
#define SOAP_TYPE_PointerTo_ows__ValuesReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__ValuesReference(struct soap*, _ows__ValuesReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__ValuesReference(struct soap*, const char *, int, _ows__ValuesReference *const*, const char *);
SOAP_FMAC3 _ows__ValuesReference ** SOAP_FMAC4 soap_in_PointerTo_ows__ValuesReference(struct soap*, const char*, _ows__ValuesReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__ValuesReference(struct soap*, _ows__ValuesReference *const*, const char*, const char*);
SOAP_FMAC3 _ows__ValuesReference ** SOAP_FMAC4 soap_get_PointerTo_ows__ValuesReference(struct soap*, _ows__ValuesReference **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__NoValues_DEFINED
#define SOAP_TYPE_PointerTo_ows__NoValues_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__NoValues(struct soap*, _ows__NoValues *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__NoValues(struct soap*, const char *, int, _ows__NoValues *const*, const char *);
SOAP_FMAC3 _ows__NoValues ** SOAP_FMAC4 soap_in_PointerTo_ows__NoValues(struct soap*, const char*, _ows__NoValues **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__NoValues(struct soap*, _ows__NoValues *const*, const char*, const char*);
SOAP_FMAC3 _ows__NoValues ** SOAP_FMAC4 soap_get_PointerTo_ows__NoValues(struct soap*, _ows__NoValues **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__AnyValue_DEFINED
#define SOAP_TYPE_PointerTo_ows__AnyValue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__AnyValue(struct soap*, _ows__AnyValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__AnyValue(struct soap*, const char *, int, _ows__AnyValue *const*, const char *);
SOAP_FMAC3 _ows__AnyValue ** SOAP_FMAC4 soap_in_PointerTo_ows__AnyValue(struct soap*, const char*, _ows__AnyValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__AnyValue(struct soap*, _ows__AnyValue *const*, const char*, const char*);
SOAP_FMAC3 _ows__AnyValue ** SOAP_FMAC4 soap_get_PointerTo_ows__AnyValue(struct soap*, _ows__AnyValue **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__AllowedValues_DEFINED
#define SOAP_TYPE_PointerTo_ows__AllowedValues_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__AllowedValues(struct soap*, _ows__AllowedValues *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__AllowedValues(struct soap*, const char *, int, _ows__AllowedValues *const*, const char *);
SOAP_FMAC3 _ows__AllowedValues ** SOAP_FMAC4 soap_in_PointerTo_ows__AllowedValues(struct soap*, const char*, _ows__AllowedValues **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__AllowedValues(struct soap*, _ows__AllowedValues *const*, const char*, const char*);
SOAP_FMAC3 _ows__AllowedValues ** SOAP_FMAC4 soap_get_PointerTo_ows__AllowedValues(struct soap*, _ows__AllowedValues **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__AcceptFormatsType_DEFINED
#define SOAP_TYPE_PointerToows__AcceptFormatsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__AcceptFormatsType(struct soap*, ows__AcceptFormatsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__AcceptFormatsType(struct soap*, const char *, int, ows__AcceptFormatsType *const*, const char *);
SOAP_FMAC3 ows__AcceptFormatsType ** SOAP_FMAC4 soap_in_PointerToows__AcceptFormatsType(struct soap*, const char*, ows__AcceptFormatsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__AcceptFormatsType(struct soap*, ows__AcceptFormatsType *const*, const char*, const char*);
SOAP_FMAC3 ows__AcceptFormatsType ** SOAP_FMAC4 soap_get_PointerToows__AcceptFormatsType(struct soap*, ows__AcceptFormatsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__SectionsType_DEFINED
#define SOAP_TYPE_PointerToows__SectionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__SectionsType(struct soap*, ows__SectionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__SectionsType(struct soap*, const char *, int, ows__SectionsType *const*, const char *);
SOAP_FMAC3 ows__SectionsType ** SOAP_FMAC4 soap_in_PointerToows__SectionsType(struct soap*, const char*, ows__SectionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__SectionsType(struct soap*, ows__SectionsType *const*, const char*, const char*);
SOAP_FMAC3 ows__SectionsType ** SOAP_FMAC4 soap_get_PointerToows__SectionsType(struct soap*, ows__SectionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__AcceptVersionsType_DEFINED
#define SOAP_TYPE_PointerToows__AcceptVersionsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__AcceptVersionsType(struct soap*, ows__AcceptVersionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__AcceptVersionsType(struct soap*, const char *, int, ows__AcceptVersionsType *const*, const char *);
SOAP_FMAC3 ows__AcceptVersionsType ** SOAP_FMAC4 soap_in_PointerToows__AcceptVersionsType(struct soap*, const char*, ows__AcceptVersionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__AcceptVersionsType(struct soap*, ows__AcceptVersionsType *const*, const char*, const char*);
SOAP_FMAC3 ows__AcceptVersionsType ** SOAP_FMAC4 soap_get_PointerToows__AcceptVersionsType(struct soap*, ows__AcceptVersionsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__UpdateSequenceType_DEFINED
#define SOAP_TYPE_PointerToows__UpdateSequenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__UpdateSequenceType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__UpdateSequenceType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToows__UpdateSequenceType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__UpdateSequenceType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToows__UpdateSequenceType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__OperationsMetadata_DEFINED
#define SOAP_TYPE_PointerTo_ows__OperationsMetadata_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__OperationsMetadata(struct soap*, _ows__OperationsMetadata *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__OperationsMetadata(struct soap*, const char *, int, _ows__OperationsMetadata *const*, const char *);
SOAP_FMAC3 _ows__OperationsMetadata ** SOAP_FMAC4 soap_in_PointerTo_ows__OperationsMetadata(struct soap*, const char*, _ows__OperationsMetadata **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__OperationsMetadata(struct soap*, _ows__OperationsMetadata *const*, const char*, const char*);
SOAP_FMAC3 _ows__OperationsMetadata ** SOAP_FMAC4 soap_get_PointerTo_ows__OperationsMetadata(struct soap*, _ows__OperationsMetadata **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__ServiceProvider_DEFINED
#define SOAP_TYPE_PointerTo_ows__ServiceProvider_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__ServiceProvider(struct soap*, _ows__ServiceProvider *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__ServiceProvider(struct soap*, const char *, int, _ows__ServiceProvider *const*, const char *);
SOAP_FMAC3 _ows__ServiceProvider ** SOAP_FMAC4 soap_in_PointerTo_ows__ServiceProvider(struct soap*, const char*, _ows__ServiceProvider **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__ServiceProvider(struct soap*, _ows__ServiceProvider *const*, const char*, const char*);
SOAP_FMAC3 _ows__ServiceProvider ** SOAP_FMAC4 soap_get_PointerTo_ows__ServiceProvider(struct soap*, _ows__ServiceProvider **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__ServiceIdentification_DEFINED
#define SOAP_TYPE_PointerTo_ows__ServiceIdentification_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__ServiceIdentification(struct soap*, _ows__ServiceIdentification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__ServiceIdentification(struct soap*, const char *, int, _ows__ServiceIdentification *const*, const char *);
SOAP_FMAC3 _ows__ServiceIdentification ** SOAP_FMAC4 soap_in_PointerTo_ows__ServiceIdentification(struct soap*, const char*, _ows__ServiceIdentification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__ServiceIdentification(struct soap*, _ows__ServiceIdentification *const*, const char*, const char*);
SOAP_FMAC3 _ows__ServiceIdentification ** SOAP_FMAC4 soap_get_PointerTo_ows__ServiceIdentification(struct soap*, _ows__ServiceIdentification **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__OnlineResourceType_DEFINED
#define SOAP_TYPE_PointerToows__OnlineResourceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__OnlineResourceType(struct soap*, ows__OnlineResourceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__OnlineResourceType(struct soap*, const char *, int, ows__OnlineResourceType *const*, const char *);
SOAP_FMAC3 ows__OnlineResourceType ** SOAP_FMAC4 soap_in_PointerToows__OnlineResourceType(struct soap*, const char*, ows__OnlineResourceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__OnlineResourceType(struct soap*, ows__OnlineResourceType *const*, const char*, const char*);
SOAP_FMAC3 ows__OnlineResourceType ** SOAP_FMAC4 soap_get_PointerToows__OnlineResourceType(struct soap*, ows__OnlineResourceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__AddressType_DEFINED
#define SOAP_TYPE_PointerToows__AddressType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__AddressType(struct soap*, ows__AddressType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__AddressType(struct soap*, const char *, int, ows__AddressType *const*, const char *);
SOAP_FMAC3 ows__AddressType ** SOAP_FMAC4 soap_in_PointerToows__AddressType(struct soap*, const char*, ows__AddressType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__AddressType(struct soap*, ows__AddressType *const*, const char*, const char*);
SOAP_FMAC3 ows__AddressType ** SOAP_FMAC4 soap_get_PointerToows__AddressType(struct soap*, ows__AddressType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__TelephoneType_DEFINED
#define SOAP_TYPE_PointerToows__TelephoneType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__TelephoneType(struct soap*, ows__TelephoneType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__TelephoneType(struct soap*, const char *, int, ows__TelephoneType *const*, const char *);
SOAP_FMAC3 ows__TelephoneType ** SOAP_FMAC4 soap_in_PointerToows__TelephoneType(struct soap*, const char*, ows__TelephoneType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__TelephoneType(struct soap*, ows__TelephoneType *const*, const char*, const char*);
SOAP_FMAC3 ows__TelephoneType ** SOAP_FMAC4 soap_get_PointerToows__TelephoneType(struct soap*, ows__TelephoneType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__ContactType_DEFINED
#define SOAP_TYPE_PointerToows__ContactType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__ContactType(struct soap*, ows__ContactType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__ContactType(struct soap*, const char *, int, ows__ContactType *const*, const char *);
SOAP_FMAC3 ows__ContactType ** SOAP_FMAC4 soap_in_PointerToows__ContactType(struct soap*, const char*, ows__ContactType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__ContactType(struct soap*, ows__ContactType *const*, const char*, const char*);
SOAP_FMAC3 ows__ContactType ** SOAP_FMAC4 soap_get_PointerToows__ContactType(struct soap*, ows__ContactType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__CodeType_DEFINED
#define SOAP_TYPE_PointerToows__CodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__CodeType(struct soap*, ows__CodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__CodeType(struct soap*, const char *, int, ows__CodeType *const*, const char *);
SOAP_FMAC3 ows__CodeType ** SOAP_FMAC4 soap_in_PointerToows__CodeType(struct soap*, const char*, ows__CodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__CodeType(struct soap*, ows__CodeType *const*, const char*, const char*);
SOAP_FMAC3 ows__CodeType ** SOAP_FMAC4 soap_get_PointerToows__CodeType(struct soap*, ows__CodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__positiveInteger_DEFINED
#define SOAP_TYPE_PointerToxsd__positiveInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__positiveInteger(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__positiveInteger(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToxsd__positiveInteger(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__positiveInteger(struct soap*, ULONG64 *const*, const char*, const char*);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToxsd__positiveInteger(struct soap*, ULONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__LanguageStringType_DEFINED
#define SOAP_TYPE_PointerToows__LanguageStringType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__LanguageStringType(struct soap*, ows__LanguageStringType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__LanguageStringType(struct soap*, const char *, int, ows__LanguageStringType *const*, const char *);
SOAP_FMAC3 ows__LanguageStringType ** SOAP_FMAC4 soap_in_PointerToows__LanguageStringType(struct soap*, const char*, ows__LanguageStringType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__LanguageStringType(struct soap*, ows__LanguageStringType *const*, const char*, const char*);
SOAP_FMAC3 ows__LanguageStringType ** SOAP_FMAC4 soap_get_PointerToows__LanguageStringType(struct soap*, ows__LanguageStringType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__MimeType_DEFINED
#define SOAP_TYPE_PointerToows__MimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__MimeType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__MimeType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToows__MimeType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__MimeType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToows__MimeType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ows__ExceptionReport_DEFINED
#define SOAP_TYPE_PointerTo_ows__ExceptionReport_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ows__ExceptionReport(struct soap*, _ows__ExceptionReport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ows__ExceptionReport(struct soap*, const char *, int, _ows__ExceptionReport *const*, const char *);
SOAP_FMAC3 _ows__ExceptionReport ** SOAP_FMAC4 soap_in_PointerTo_ows__ExceptionReport(struct soap*, const char*, _ows__ExceptionReport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ows__ExceptionReport(struct soap*, _ows__ExceptionReport *const*, const char*, const char*);
SOAP_FMAC3 _ows__ExceptionReport ** SOAP_FMAC4 soap_get_PointerTo_ows__ExceptionReport(struct soap*, _ows__ExceptionReport **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ValueCollectionType_DEFINED
#define SOAP_TYPE_PointerTowfs__ValueCollectionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ValueCollectionType(struct soap*, wfs__ValueCollectionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ValueCollectionType(struct soap*, const char *, int, wfs__ValueCollectionType *const*, const char *);
SOAP_FMAC3 wfs__ValueCollectionType ** SOAP_FMAC4 soap_in_PointerTowfs__ValueCollectionType(struct soap*, const char*, wfs__ValueCollectionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ValueCollectionType(struct soap*, wfs__ValueCollectionType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ValueCollectionType ** SOAP_FMAC4 soap_get_PointerTowfs__ValueCollectionType(struct soap*, wfs__ValueCollectionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__CreatedOrModifiedFeatureType_DEFINED
#define SOAP_TYPE_PointerTowfs__CreatedOrModifiedFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__CreatedOrModifiedFeatureType(struct soap*, wfs__CreatedOrModifiedFeatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__CreatedOrModifiedFeatureType(struct soap*, const char *, int, wfs__CreatedOrModifiedFeatureType *const*, const char *);
SOAP_FMAC3 wfs__CreatedOrModifiedFeatureType ** SOAP_FMAC4 soap_in_PointerTowfs__CreatedOrModifiedFeatureType(struct soap*, const char*, wfs__CreatedOrModifiedFeatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__CreatedOrModifiedFeatureType(struct soap*, wfs__CreatedOrModifiedFeatureType *const*, const char*, const char*);
SOAP_FMAC3 wfs__CreatedOrModifiedFeatureType ** SOAP_FMAC4 soap_get_PointerTowfs__CreatedOrModifiedFeatureType(struct soap*, wfs__CreatedOrModifiedFeatureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, ULONG64 *const*, const char*, const char*);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, ULONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ActionResultsType_DEFINED
#define SOAP_TYPE_PointerTowfs__ActionResultsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ActionResultsType(struct soap*, wfs__ActionResultsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ActionResultsType(struct soap*, const char *, int, wfs__ActionResultsType *const*, const char *);
SOAP_FMAC3 wfs__ActionResultsType ** SOAP_FMAC4 soap_in_PointerTowfs__ActionResultsType(struct soap*, const char*, wfs__ActionResultsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ActionResultsType(struct soap*, wfs__ActionResultsType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ActionResultsType ** SOAP_FMAC4 soap_get_PointerTowfs__ActionResultsType(struct soap*, wfs__ActionResultsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__TransactionSummaryType_DEFINED
#define SOAP_TYPE_PointerTowfs__TransactionSummaryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__TransactionSummaryType(struct soap*, wfs__TransactionSummaryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__TransactionSummaryType(struct soap*, const char *, int, wfs__TransactionSummaryType *const*, const char *);
SOAP_FMAC3 wfs__TransactionSummaryType ** SOAP_FMAC4 soap_in_PointerTowfs__TransactionSummaryType(struct soap*, const char*, wfs__TransactionSummaryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__TransactionSummaryType(struct soap*, wfs__TransactionSummaryType *const*, const char*, const char*);
SOAP_FMAC3 wfs__TransactionSummaryType ** SOAP_FMAC4 soap_get_PointerTowfs__TransactionSummaryType(struct soap*, wfs__TransactionSummaryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofes__ResourceIdType_DEFINED
#define SOAP_TYPE_PointerTofes__ResourceIdType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofes__ResourceIdType(struct soap*, fes__ResourceIdType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofes__ResourceIdType(struct soap*, const char *, int, fes__ResourceIdType *const*, const char *);
SOAP_FMAC3 fes__ResourceIdType ** SOAP_FMAC4 soap_in_PointerTofes__ResourceIdType(struct soap*, const char*, fes__ResourceIdType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofes__ResourceIdType(struct soap*, fes__ResourceIdType *const*, const char*, const char*);
SOAP_FMAC3 fes__ResourceIdType ** SOAP_FMAC4 soap_get_PointerTofes__ResourceIdType(struct soap*, fes__ResourceIdType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__FeaturesNotLockedType_DEFINED
#define SOAP_TYPE_PointerTowfs__FeaturesNotLockedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__FeaturesNotLockedType(struct soap*, wfs__FeaturesNotLockedType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__FeaturesNotLockedType(struct soap*, const char *, int, wfs__FeaturesNotLockedType *const*, const char *);
SOAP_FMAC3 wfs__FeaturesNotLockedType ** SOAP_FMAC4 soap_in_PointerTowfs__FeaturesNotLockedType(struct soap*, const char*, wfs__FeaturesNotLockedType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__FeaturesNotLockedType(struct soap*, wfs__FeaturesNotLockedType *const*, const char*, const char*);
SOAP_FMAC3 wfs__FeaturesNotLockedType ** SOAP_FMAC4 soap_get_PointerTowfs__FeaturesNotLockedType(struct soap*, wfs__FeaturesNotLockedType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__FeaturesLockedType_DEFINED
#define SOAP_TYPE_PointerTowfs__FeaturesLockedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__FeaturesLockedType(struct soap*, wfs__FeaturesLockedType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__FeaturesLockedType(struct soap*, const char *, int, wfs__FeaturesLockedType *const*, const char *);
SOAP_FMAC3 wfs__FeaturesLockedType ** SOAP_FMAC4 soap_in_PointerTowfs__FeaturesLockedType(struct soap*, const char*, wfs__FeaturesLockedType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__FeaturesLockedType(struct soap*, wfs__FeaturesLockedType *const*, const char*, const char*);
SOAP_FMAC3 wfs__FeaturesLockedType ** SOAP_FMAC4 soap_get_PointerTowfs__FeaturesLockedType(struct soap*, wfs__FeaturesLockedType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_XML(struct soap*, std::vector<char *> *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_XML(struct soap*, const char *, int, std::vector<char *> *const*, const char *);
SOAP_FMAC3 std::vector<char *> ** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_XML(struct soap*, std::vector<char *> *const*, const char*, const char*);
SOAP_FMAC3 std::vector<char *> ** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_XML(struct soap*, std::vector<char *> **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__QueryExpressionTextType_DEFINED
#define SOAP_TYPE_PointerTowfs__QueryExpressionTextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__QueryExpressionTextType(struct soap*, wfs__QueryExpressionTextType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__QueryExpressionTextType(struct soap*, const char *, int, wfs__QueryExpressionTextType *const*, const char *);
SOAP_FMAC3 wfs__QueryExpressionTextType ** SOAP_FMAC4 soap_in_PointerTowfs__QueryExpressionTextType(struct soap*, const char*, wfs__QueryExpressionTextType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__QueryExpressionTextType(struct soap*, wfs__QueryExpressionTextType *const*, const char*, const char*);
SOAP_FMAC3 wfs__QueryExpressionTextType ** SOAP_FMAC4 soap_get_PointerTowfs__QueryExpressionTextType(struct soap*, wfs__QueryExpressionTextType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ParameterExpressionType_DEFINED
#define SOAP_TYPE_PointerTowfs__ParameterExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ParameterExpressionType(struct soap*, wfs__ParameterExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ParameterExpressionType(struct soap*, const char *, int, wfs__ParameterExpressionType *const*, const char *);
SOAP_FMAC3 wfs__ParameterExpressionType ** SOAP_FMAC4 soap_in_PointerTowfs__ParameterExpressionType(struct soap*, const char*, wfs__ParameterExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ParameterExpressionType(struct soap*, wfs__ParameterExpressionType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ParameterExpressionType ** SOAP_FMAC4 soap_get_PointerTowfs__ParameterExpressionType(struct soap*, wfs__ParameterExpressionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__StoredQueryDescriptionType_DEFINED
#define SOAP_TYPE_PointerTowfs__StoredQueryDescriptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__StoredQueryDescriptionType(struct soap*, wfs__StoredQueryDescriptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__StoredQueryDescriptionType(struct soap*, const char *, int, wfs__StoredQueryDescriptionType *const*, const char *);
SOAP_FMAC3 wfs__StoredQueryDescriptionType ** SOAP_FMAC4 soap_in_PointerTowfs__StoredQueryDescriptionType(struct soap*, const char*, wfs__StoredQueryDescriptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__StoredQueryDescriptionType(struct soap*, wfs__StoredQueryDescriptionType *const*, const char*, const char*);
SOAP_FMAC3 wfs__StoredQueryDescriptionType ** SOAP_FMAC4 soap_get_PointerTowfs__StoredQueryDescriptionType(struct soap*, wfs__StoredQueryDescriptionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__StoredQueryListItemType_DEFINED
#define SOAP_TYPE_PointerTowfs__StoredQueryListItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__StoredQueryListItemType(struct soap*, wfs__StoredQueryListItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__StoredQueryListItemType(struct soap*, const char *, int, wfs__StoredQueryListItemType *const*, const char *);
SOAP_FMAC3 wfs__StoredQueryListItemType ** SOAP_FMAC4 soap_in_PointerTowfs__StoredQueryListItemType(struct soap*, const char*, wfs__StoredQueryListItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__StoredQueryListItemType(struct soap*, wfs__StoredQueryListItemType *const*, const char*, const char*);
SOAP_FMAC3 wfs__StoredQueryListItemType ** SOAP_FMAC4 soap_get_PointerTowfs__StoredQueryListItemType(struct soap*, wfs__StoredQueryListItemType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__EnvelopePropertyType_DEFINED
#define SOAP_TYPE_PointerTowfs__EnvelopePropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__EnvelopePropertyType(struct soap*, wfs__EnvelopePropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__EnvelopePropertyType(struct soap*, const char *, int, wfs__EnvelopePropertyType *const*, const char *);
SOAP_FMAC3 wfs__EnvelopePropertyType ** SOAP_FMAC4 soap_in_PointerTowfs__EnvelopePropertyType(struct soap*, const char*, wfs__EnvelopePropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__EnvelopePropertyType(struct soap*, wfs__EnvelopePropertyType *const*, const char*, const char*);
SOAP_FMAC3 wfs__EnvelopePropertyType ** SOAP_FMAC4 soap_get_PointerTowfs__EnvelopePropertyType(struct soap*, wfs__EnvelopePropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__StateValueType_DEFINED
#define SOAP_TYPE_PointerTowfs__StateValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__StateValueType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__StateValueType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowfs__StateValueType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__StateValueType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowfs__StateValueType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__FeatureCollectionType_DEFINED
#define SOAP_TYPE_PointerTowfs__FeatureCollectionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__FeatureCollectionType(struct soap*, wfs__FeatureCollectionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__FeatureCollectionType(struct soap*, const char *, int, wfs__FeatureCollectionType *const*, const char *);
SOAP_FMAC3 wfs__FeatureCollectionType ** SOAP_FMAC4 soap_in_PointerTowfs__FeatureCollectionType(struct soap*, const char*, wfs__FeatureCollectionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__FeatureCollectionType(struct soap*, wfs__FeatureCollectionType *const*, const char*, const char*);
SOAP_FMAC3 wfs__FeatureCollectionType ** SOAP_FMAC4 soap_get_PointerTowfs__FeatureCollectionType(struct soap*, wfs__FeatureCollectionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__SimpleFeatureCollectionType_DEFINED
#define SOAP_TYPE_PointerTowfs__SimpleFeatureCollectionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__SimpleFeatureCollectionType(struct soap*, wfs__SimpleFeatureCollectionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__SimpleFeatureCollectionType(struct soap*, const char *, int, wfs__SimpleFeatureCollectionType *const*, const char *);
SOAP_FMAC3 wfs__SimpleFeatureCollectionType ** SOAP_FMAC4 soap_in_PointerTowfs__SimpleFeatureCollectionType(struct soap*, const char*, wfs__SimpleFeatureCollectionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__SimpleFeatureCollectionType(struct soap*, wfs__SimpleFeatureCollectionType *const*, const char*, const char*);
SOAP_FMAC3 wfs__SimpleFeatureCollectionType ** SOAP_FMAC4 soap_get_PointerTowfs__SimpleFeatureCollectionType(struct soap*, wfs__SimpleFeatureCollectionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__TupleType_DEFINED
#define SOAP_TYPE_PointerTowfs__TupleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__TupleType(struct soap*, wfs__TupleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__TupleType(struct soap*, const char *, int, wfs__TupleType *const*, const char *);
SOAP_FMAC3 wfs__TupleType ** SOAP_FMAC4 soap_in_PointerTowfs__TupleType(struct soap*, const char*, wfs__TupleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__TupleType(struct soap*, wfs__TupleType *const*, const char*, const char*);
SOAP_FMAC3 wfs__TupleType ** SOAP_FMAC4 soap_get_PointerTowfs__TupleType(struct soap*, wfs__TupleType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__truncatedResponse_DEFINED
#define SOAP_TYPE_PointerTo_wfs__truncatedResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__truncatedResponse(struct soap*, _wfs__truncatedResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__truncatedResponse(struct soap*, const char *, int, _wfs__truncatedResponse *const*, const char *);
SOAP_FMAC3 _wfs__truncatedResponse ** SOAP_FMAC4 soap_in_PointerTo_wfs__truncatedResponse(struct soap*, const char*, _wfs__truncatedResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__truncatedResponse(struct soap*, _wfs__truncatedResponse *const*, const char*, const char*);
SOAP_FMAC3 _wfs__truncatedResponse ** SOAP_FMAC4 soap_get_PointerTo_wfs__truncatedResponse(struct soap*, _wfs__truncatedResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__additionalValues_DEFINED
#define SOAP_TYPE_PointerTo_wfs__additionalValues_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__additionalValues(struct soap*, _wfs__additionalValues *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__additionalValues(struct soap*, const char *, int, _wfs__additionalValues *const*, const char *);
SOAP_FMAC3 _wfs__additionalValues ** SOAP_FMAC4 soap_in_PointerTo_wfs__additionalValues(struct soap*, const char*, _wfs__additionalValues **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__additionalValues(struct soap*, _wfs__additionalValues *const*, const char*, const char*);
SOAP_FMAC3 _wfs__additionalValues ** SOAP_FMAC4 soap_get_PointerTo_wfs__additionalValues(struct soap*, _wfs__additionalValues **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__MemberPropertyType_DEFINED
#define SOAP_TYPE_PointerTowfs__MemberPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__MemberPropertyType(struct soap*, wfs__MemberPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__MemberPropertyType(struct soap*, const char *, int, wfs__MemberPropertyType *const*, const char *);
SOAP_FMAC3 wfs__MemberPropertyType ** SOAP_FMAC4 soap_in_PointerTowfs__MemberPropertyType(struct soap*, const char*, wfs__MemberPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__MemberPropertyType(struct soap*, wfs__MemberPropertyType *const*, const char*, const char*);
SOAP_FMAC3 wfs__MemberPropertyType ** SOAP_FMAC4 soap_get_PointerTowfs__MemberPropertyType(struct soap*, wfs__MemberPropertyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyType_DEFINED
#define SOAP_TYPE_PointerToxsd__anyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap*, xsd__anyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap*, const char *, int, xsd__anyType *const*, const char *);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap*, const char*, xsd__anyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap*, xsd__anyType *const*, const char*, const char*);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap*, xsd__anyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ValueListType_DEFINED
#define SOAP_TYPE_PointerTowfs__ValueListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ValueListType(struct soap*, wfs__ValueListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ValueListType(struct soap*, const char *, int, wfs__ValueListType *const*, const char *);
SOAP_FMAC3 wfs__ValueListType ** SOAP_FMAC4 soap_in_PointerTowfs__ValueListType(struct soap*, const char*, wfs__ValueListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ValueListType(struct soap*, wfs__ValueListType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ValueListType ** SOAP_FMAC4 soap_get_PointerTowfs__ValueListType(struct soap*, wfs__ValueListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__MetadataType_DEFINED
#define SOAP_TYPE_PointerToows__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__MetadataType(struct soap*, ows__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__MetadataType(struct soap*, const char *, int, ows__MetadataType *const*, const char *);
SOAP_FMAC3 ows__MetadataType ** SOAP_FMAC4 soap_in_PointerToows__MetadataType(struct soap*, const char*, ows__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__MetadataType(struct soap*, ows__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 ows__MetadataType ** SOAP_FMAC4 soap_get_PointerToows__MetadataType(struct soap*, ows__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ElementType_DEFINED
#define SOAP_TYPE_PointerTowfs__ElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ElementType(struct soap*, wfs__ElementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ElementType(struct soap*, const char *, int, wfs__ElementType *const*, const char *);
SOAP_FMAC3 wfs__ElementType ** SOAP_FMAC4 soap_in_PointerTowfs__ElementType(struct soap*, const char*, wfs__ElementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ElementType(struct soap*, wfs__ElementType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ElementType ** SOAP_FMAC4 soap_get_PointerTowfs__ElementType(struct soap*, wfs__ElementType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__actuateType_DEFINED
#define SOAP_TYPE_PointerToxlink__actuateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__actuateType(struct soap*, enum xlink__actuateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__actuateType(struct soap*, const char *, int, enum xlink__actuateType *const*, const char *);
SOAP_FMAC3 enum xlink__actuateType ** SOAP_FMAC4 soap_in_PointerToxlink__actuateType(struct soap*, const char*, enum xlink__actuateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__actuateType(struct soap*, enum xlink__actuateType *const*, const char*, const char*);
SOAP_FMAC3 enum xlink__actuateType ** SOAP_FMAC4 soap_get_PointerToxlink__actuateType(struct soap*, enum xlink__actuateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__showType_DEFINED
#define SOAP_TYPE_PointerToxlink__showType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__showType(struct soap*, enum xlink__showType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__showType(struct soap*, const char *, int, enum xlink__showType *const*, const char *);
SOAP_FMAC3 enum xlink__showType ** SOAP_FMAC4 soap_in_PointerToxlink__showType(struct soap*, const char*, enum xlink__showType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__showType(struct soap*, enum xlink__showType *const*, const char*, const char*);
SOAP_FMAC3 enum xlink__showType ** SOAP_FMAC4 soap_get_PointerToxlink__showType(struct soap*, enum xlink__showType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__titleAttrType_DEFINED
#define SOAP_TYPE_PointerToxlink__titleAttrType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__titleAttrType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__titleAttrType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxlink__titleAttrType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__titleAttrType(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxlink__titleAttrType(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__arcroleType_DEFINED
#define SOAP_TYPE_PointerToxlink__arcroleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__arcroleType(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__arcroleType(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxlink__arcroleType(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__arcroleType(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxlink__arcroleType(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__roleType_DEFINED
#define SOAP_TYPE_PointerToxlink__roleType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__roleType(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__roleType(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxlink__roleType(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__roleType(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxlink__roleType(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxlink__hrefType_DEFINED
#define SOAP_TYPE_PointerToxlink__hrefType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxlink__hrefType(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxlink__hrefType(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxlink__hrefType(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxlink__hrefType(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxlink__hrefType(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__ExtendedDescriptionType_DEFINED
#define SOAP_TYPE_PointerTowfs__ExtendedDescriptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__ExtendedDescriptionType(struct soap*, wfs__ExtendedDescriptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__ExtendedDescriptionType(struct soap*, const char *, int, wfs__ExtendedDescriptionType *const*, const char *);
SOAP_FMAC3 wfs__ExtendedDescriptionType ** SOAP_FMAC4 soap_in_PointerTowfs__ExtendedDescriptionType(struct soap*, const char*, wfs__ExtendedDescriptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__ExtendedDescriptionType(struct soap*, wfs__ExtendedDescriptionType *const*, const char*, const char*);
SOAP_FMAC3 wfs__ExtendedDescriptionType ** SOAP_FMAC4 soap_get_PointerTowfs__ExtendedDescriptionType(struct soap*, wfs__ExtendedDescriptionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__MetadataURLType_DEFINED
#define SOAP_TYPE_PointerTowfs__MetadataURLType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__MetadataURLType(struct soap*, wfs__MetadataURLType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__MetadataURLType(struct soap*, const char *, int, wfs__MetadataURLType *const*, const char *);
SOAP_FMAC3 wfs__MetadataURLType ** SOAP_FMAC4 soap_in_PointerTowfs__MetadataURLType(struct soap*, const char*, wfs__MetadataURLType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__MetadataURLType(struct soap*, wfs__MetadataURLType *const*, const char*, const char*);
SOAP_FMAC3 wfs__MetadataURLType ** SOAP_FMAC4 soap_get_PointerTowfs__MetadataURLType(struct soap*, wfs__MetadataURLType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__WGS84BoundingBoxType_DEFINED
#define SOAP_TYPE_PointerToows__WGS84BoundingBoxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__WGS84BoundingBoxType(struct soap*, ows__WGS84BoundingBoxType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__WGS84BoundingBoxType(struct soap*, const char *, int, ows__WGS84BoundingBoxType *const*, const char *);
SOAP_FMAC3 ows__WGS84BoundingBoxType ** SOAP_FMAC4 soap_in_PointerToows__WGS84BoundingBoxType(struct soap*, const char*, ows__WGS84BoundingBoxType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__WGS84BoundingBoxType(struct soap*, ows__WGS84BoundingBoxType *const*, const char*, const char*);
SOAP_FMAC3 ows__WGS84BoundingBoxType ** SOAP_FMAC4 soap_get_PointerToows__WGS84BoundingBoxType(struct soap*, ows__WGS84BoundingBoxType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__OutputFormatListType_DEFINED
#define SOAP_TYPE_PointerTowfs__OutputFormatListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__OutputFormatListType(struct soap*, wfs__OutputFormatListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__OutputFormatListType(struct soap*, const char *, int, wfs__OutputFormatListType *const*, const char *);
SOAP_FMAC3 wfs__OutputFormatListType ** SOAP_FMAC4 soap_in_PointerTowfs__OutputFormatListType(struct soap*, const char*, wfs__OutputFormatListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__OutputFormatListType(struct soap*, wfs__OutputFormatListType *const*, const char*, const char*);
SOAP_FMAC3 wfs__OutputFormatListType ** SOAP_FMAC4 soap_get_PointerTowfs__OutputFormatListType(struct soap*, wfs__OutputFormatListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__FeatureTypeType_NoCRS_DEFINED
#define SOAP_TYPE_PointerTo_wfs__FeatureTypeType_NoCRS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__FeatureTypeType_NoCRS(struct soap*, _wfs__FeatureTypeType_NoCRS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__FeatureTypeType_NoCRS(struct soap*, const char *, int, _wfs__FeatureTypeType_NoCRS *const*, const char *);
SOAP_FMAC3 _wfs__FeatureTypeType_NoCRS ** SOAP_FMAC4 soap_in_PointerTo_wfs__FeatureTypeType_NoCRS(struct soap*, const char*, _wfs__FeatureTypeType_NoCRS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__FeatureTypeType_NoCRS(struct soap*, _wfs__FeatureTypeType_NoCRS *const*, const char*, const char*);
SOAP_FMAC3 _wfs__FeatureTypeType_NoCRS ** SOAP_FMAC4 soap_get_PointerTo_wfs__FeatureTypeType_NoCRS(struct soap*, _wfs__FeatureTypeType_NoCRS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyURI_DEFINED
#define SOAP_TYPE_PointerToxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToows__KeywordsType_DEFINED
#define SOAP_TYPE_PointerToows__KeywordsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToows__KeywordsType(struct soap*, ows__KeywordsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToows__KeywordsType(struct soap*, const char *, int, ows__KeywordsType *const*, const char *);
SOAP_FMAC3 ows__KeywordsType ** SOAP_FMAC4 soap_in_PointerToows__KeywordsType(struct soap*, const char*, ows__KeywordsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToows__KeywordsType(struct soap*, ows__KeywordsType *const*, const char*, const char*);
SOAP_FMAC3 ows__KeywordsType ** SOAP_FMAC4 soap_get_PointerToows__KeywordsType(struct soap*, ows__KeywordsType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__Abstract_DEFINED
#define SOAP_TYPE_PointerTo_wfs__Abstract_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__Abstract(struct soap*, _wfs__Abstract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__Abstract(struct soap*, const char *, int, _wfs__Abstract *const*, const char *);
SOAP_FMAC3 _wfs__Abstract ** SOAP_FMAC4 soap_in_PointerTo_wfs__Abstract(struct soap*, const char*, _wfs__Abstract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__Abstract(struct soap*, _wfs__Abstract *const*, const char*, const char*);
SOAP_FMAC3 _wfs__Abstract ** SOAP_FMAC4 soap_get_PointerTo_wfs__Abstract(struct soap*, _wfs__Abstract **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wfs__Title_DEFINED
#define SOAP_TYPE_PointerTo_wfs__Title_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wfs__Title(struct soap*, _wfs__Title *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wfs__Title(struct soap*, const char *, int, _wfs__Title *const*, const char *);
SOAP_FMAC3 _wfs__Title ** SOAP_FMAC4 soap_in_PointerTo_wfs__Title(struct soap*, const char*, _wfs__Title **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wfs__Title(struct soap*, _wfs__Title *const*, const char*, const char*);
SOAP_FMAC3 _wfs__Title ** SOAP_FMAC4 soap_get_PointerTo_wfs__Title(struct soap*, _wfs__Title **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__FeatureTypeType_DEFINED
#define SOAP_TYPE_PointerTowfs__FeatureTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__FeatureTypeType(struct soap*, wfs__FeatureTypeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__FeatureTypeType(struct soap*, const char *, int, wfs__FeatureTypeType *const*, const char *);
SOAP_FMAC3 wfs__FeatureTypeType ** SOAP_FMAC4 soap_in_PointerTowfs__FeatureTypeType(struct soap*, const char*, wfs__FeatureTypeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__FeatureTypeType(struct soap*, wfs__FeatureTypeType *const*, const char*, const char*);
SOAP_FMAC3 wfs__FeatureTypeType ** SOAP_FMAC4 soap_get_PointerTowfs__FeatureTypeType(struct soap*, wfs__FeatureTypeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wfs__StoredQueryPropertyType_sequence_DEFINED
#define SOAP_TYPE_PointerTo__wfs__StoredQueryPropertyType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wfs__StoredQueryPropertyType_sequence(struct soap*, struct __wfs__StoredQueryPropertyType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wfs__StoredQueryPropertyType_sequence(struct soap*, const char *, int, struct __wfs__StoredQueryPropertyType_sequence *const*, const char *);
SOAP_FMAC3 struct __wfs__StoredQueryPropertyType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wfs__StoredQueryPropertyType_sequence(struct soap*, const char*, struct __wfs__StoredQueryPropertyType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wfs__StoredQueryPropertyType_sequence(struct soap*, struct __wfs__StoredQueryPropertyType_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __wfs__StoredQueryPropertyType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wfs__StoredQueryPropertyType_sequence(struct soap*, struct __wfs__StoredQueryPropertyType_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__StoredQueryType_DEFINED
#define SOAP_TYPE_PointerTowfs__StoredQueryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__StoredQueryType(struct soap*, wfs__StoredQueryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__StoredQueryType(struct soap*, const char *, int, wfs__StoredQueryType *const*, const char *);
SOAP_FMAC3 wfs__StoredQueryType ** SOAP_FMAC4 soap_in_PointerTowfs__StoredQueryType(struct soap*, const char*, wfs__StoredQueryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__StoredQueryType(struct soap*, wfs__StoredQueryType *const*, const char*, const char*);
SOAP_FMAC3 wfs__StoredQueryType ** SOAP_FMAC4 soap_get_PointerTowfs__StoredQueryType(struct soap*, wfs__StoredQueryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__wfs__QueryPropertyType_sequence_DEFINED
#define SOAP_TYPE_PointerTo__wfs__QueryPropertyType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wfs__QueryPropertyType_sequence(struct soap*, struct __wfs__QueryPropertyType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wfs__QueryPropertyType_sequence(struct soap*, const char *, int, struct __wfs__QueryPropertyType_sequence *const*, const char *);
SOAP_FMAC3 struct __wfs__QueryPropertyType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wfs__QueryPropertyType_sequence(struct soap*, const char*, struct __wfs__QueryPropertyType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wfs__QueryPropertyType_sequence(struct soap*, struct __wfs__QueryPropertyType_sequence *const*, const char*, const char*);
SOAP_FMAC3 struct __wfs__QueryPropertyType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wfs__QueryPropertyType_sequence(struct soap*, struct __wfs__QueryPropertyType_sequence **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowfs__QueryType_DEFINED
#define SOAP_TYPE_PointerTowfs__QueryType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowfs__QueryType(struct soap*, wfs__QueryType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowfs__QueryType(struct soap*, const char *, int, wfs__QueryType *const*, const char *);
SOAP_FMAC3 wfs__QueryType ** SOAP_FMAC4 soap_in_PointerTowfs__QueryType(struct soap*, const char*, wfs__QueryType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowfs__QueryType(struct soap*, wfs__QueryType *const*, const char*, const char*);
SOAP_FMAC3 wfs__QueryType ** SOAP_FMAC4 soap_get_PointerTowfs__QueryType(struct soap*, wfs__QueryType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif
/* icommon__languageIETF is a typedef synonym of xsd__language */

#ifndef SOAP_TYPE_icommon__languageIETF_DEFINED
#define SOAP_TYPE_icommon__languageIETF_DEFINED

#define soap_default_icommon__languageIETF soap_default_xsd__language


#define soap_serialize_icommon__languageIETF soap_serialize_xsd__language


#define soap_icommon__languageIETF2s(soap, a) (a)

#define soap_out_icommon__languageIETF soap_out_xsd__language


#define soap_s2icommon__languageIETF(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*")

#define soap_in_icommon__languageIETF soap_in_xsd__language


#define soap_instantiate_icommon__languageIETF soap_instantiate_xsd__language


#define soap_new_icommon__languageIETF soap_new_xsd__language


#define soap_put_icommon__languageIETF soap_put_xsd__language


#define soap_write_icommon__languageIETF soap_write_xsd__language


#define soap_PUT_icommon__languageIETF soap_PUT_xsd__language


#define soap_PATCH_icommon__languageIETF soap_PATCH_xsd__language


#define soap_POST_send_icommon__languageIETF soap_POST_send_xsd__language


#define soap_get_icommon__languageIETF soap_get_xsd__language


#define soap_read_icommon__languageIETF soap_read_xsd__language


#define soap_GET_icommon__languageIETF soap_GET_xsd__language


#define soap_POST_recv_icommon__languageIETF soap_POST_recv_xsd__language

#endif
/* fes__UomURI is a typedef restriction of xsd__anyURI */

#ifndef SOAP_TYPE_fes__UomURI_DEFINED
#define SOAP_TYPE_fes__UomURI_DEFINED

#define soap_default_fes__UomURI soap_default_xsd__anyURI


#define soap_serialize_fes__UomURI soap_serialize_xsd__anyURI


#define soap_fes__UomURI2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fes__UomURI(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2fes__UomURI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, "([a-zA-Z][a-zA-Z0-9\\-\\+\\.]*:|\\.\\./|\\./|#).*")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_fes__UomURI(struct soap*, const char*, char **, const char*);

#define soap_instantiate_fes__UomURI soap_instantiate_xsd__anyURI


#define soap_new_fes__UomURI soap_new_xsd__anyURI

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fes__UomURI(struct soap*, char *const*, const char*, const char*);

inline int soap_write_fes__UomURI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_fes__UomURI(soap, p, "fes:UomURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_fes__UomURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomURI(soap, p, "fes:UomURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_fes__UomURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomURI(soap, p, "fes:UomURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_fes__UomURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_fes__UomURI(soap, p, "fes:UomURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_fes__UomURI(struct soap*, char **, const char*, const char*);

inline int soap_read_fes__UomURI(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_fes__UomURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_fes__UomURI(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_fes__UomURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_fes__UomURI(struct soap *soap, char **p)
{
	if (::soap_read_fes__UomURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* xlink__toType is a typedef synonym of xsd__NCName */

#ifndef SOAP_TYPE_xlink__toType_DEFINED
#define SOAP_TYPE_xlink__toType_DEFINED

#define soap_default_xlink__toType soap_default_xsd__NCName


#define soap_serialize_xlink__toType soap_serialize_xsd__NCName


#define soap_xlink__toType2s(soap, a) (a)

#define soap_out_xlink__toType soap_out_xsd__NCName


#define soap_s2xlink__toType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")

#define soap_in_xlink__toType soap_in_xsd__NCName


#define soap_instantiate_xlink__toType soap_instantiate_xsd__NCName


#define soap_new_xlink__toType soap_new_xsd__NCName


#define soap_put_xlink__toType soap_put_xsd__NCName


#define soap_write_xlink__toType soap_write_xsd__NCName


#define soap_PUT_xlink__toType soap_PUT_xsd__NCName


#define soap_PATCH_xlink__toType soap_PATCH_xsd__NCName


#define soap_POST_send_xlink__toType soap_POST_send_xsd__NCName


#define soap_get_xlink__toType soap_get_xsd__NCName


#define soap_read_xlink__toType soap_read_xsd__NCName


#define soap_GET_xlink__toType soap_GET_xsd__NCName


#define soap_POST_recv_xlink__toType soap_POST_recv_xsd__NCName

#endif
/* xlink__fromType is a typedef synonym of xsd__NCName */

#ifndef SOAP_TYPE_xlink__fromType_DEFINED
#define SOAP_TYPE_xlink__fromType_DEFINED

#define soap_default_xlink__fromType soap_default_xsd__NCName


#define soap_serialize_xlink__fromType soap_serialize_xsd__NCName


#define soap_xlink__fromType2s(soap, a) (a)

#define soap_out_xlink__fromType soap_out_xsd__NCName


#define soap_s2xlink__fromType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")

#define soap_in_xlink__fromType soap_in_xsd__NCName


#define soap_instantiate_xlink__fromType soap_instantiate_xsd__NCName


#define soap_new_xlink__fromType soap_new_xsd__NCName


#define soap_put_xlink__fromType soap_put_xsd__NCName


#define soap_write_xlink__fromType soap_write_xsd__NCName


#define soap_PUT_xlink__fromType soap_PUT_xsd__NCName


#define soap_PATCH_xlink__fromType soap_PATCH_xsd__NCName


#define soap_POST_send_xlink__fromType soap_POST_send_xsd__NCName


#define soap_get_xlink__fromType soap_get_xsd__NCName


#define soap_read_xlink__fromType soap_read_xsd__NCName


#define soap_GET_xlink__fromType soap_GET_xsd__NCName


#define soap_POST_recv_xlink__fromType soap_POST_recv_xsd__NCName

#endif
/* xlink__labelType is a typedef synonym of xsd__NCName */

#ifndef SOAP_TYPE_xlink__labelType_DEFINED
#define SOAP_TYPE_xlink__labelType_DEFINED

#define soap_default_xlink__labelType soap_default_xsd__NCName


#define soap_serialize_xlink__labelType soap_serialize_xsd__NCName


#define soap_xlink__labelType2s(soap, a) (a)

#define soap_out_xlink__labelType soap_out_xsd__NCName


#define soap_s2xlink__labelType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")

#define soap_in_xlink__labelType soap_in_xsd__NCName


#define soap_instantiate_xlink__labelType soap_instantiate_xsd__NCName


#define soap_new_xlink__labelType soap_new_xsd__NCName


#define soap_put_xlink__labelType soap_put_xsd__NCName


#define soap_write_xlink__labelType soap_write_xsd__NCName


#define soap_PUT_xlink__labelType soap_PUT_xsd__NCName


#define soap_PATCH_xlink__labelType soap_PATCH_xsd__NCName


#define soap_POST_send_xlink__labelType soap_POST_send_xsd__NCName


#define soap_get_xlink__labelType soap_get_xsd__NCName


#define soap_read_xlink__labelType soap_read_xsd__NCName


#define soap_GET_xlink__labelType soap_GET_xsd__NCName


#define soap_POST_recv_xlink__labelType soap_POST_recv_xsd__NCName

#endif
/* xlink__arcroleType is a typedef restriction of xsd__anyURI */

#ifndef SOAP_TYPE_xlink__arcroleType_DEFINED
#define SOAP_TYPE_xlink__arcroleType_DEFINED

#define soap_default_xlink__arcroleType soap_default_xsd__anyURI


#define soap_serialize_xlink__arcroleType soap_serialize_xsd__anyURI


#define soap_xlink__arcroleType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__arcroleType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xlink__arcroleType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 1, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xlink__arcroleType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xlink__arcroleType soap_instantiate_xsd__anyURI


#define soap_new_xlink__arcroleType soap_new_xsd__anyURI

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xlink__arcroleType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xlink__arcroleType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xlink__arcroleType(soap, p, "xlink:arcroleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xlink__arcroleType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__arcroleType(soap, p, "xlink:arcroleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__arcroleType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__arcroleType(soap, p, "xlink:arcroleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__arcroleType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__arcroleType(soap, p, "xlink:arcroleType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xlink__arcroleType(struct soap*, char **, const char*, const char*);

inline int soap_read_xlink__arcroleType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xlink__arcroleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__arcroleType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__arcroleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__arcroleType(struct soap *soap, char **p)
{
	if (::soap_read_xlink__arcroleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* xlink__roleType is a typedef restriction of xsd__anyURI */

#ifndef SOAP_TYPE_xlink__roleType_DEFINED
#define SOAP_TYPE_xlink__roleType_DEFINED

#define soap_default_xlink__roleType soap_default_xsd__anyURI


#define soap_serialize_xlink__roleType soap_serialize_xsd__anyURI


#define soap_xlink__roleType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xlink__roleType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xlink__roleType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 1, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xlink__roleType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xlink__roleType soap_instantiate_xsd__anyURI


#define soap_new_xlink__roleType soap_new_xsd__anyURI

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xlink__roleType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xlink__roleType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xlink__roleType(soap, p, "xlink:roleType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xlink__roleType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__roleType(soap, p, "xlink:roleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xlink__roleType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__roleType(soap, p, "xlink:roleType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xlink__roleType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xlink__roleType(soap, p, "xlink:roleType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xlink__roleType(struct soap*, char **, const char*, const char*);

inline int soap_read_xlink__roleType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xlink__roleType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xlink__roleType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xlink__roleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xlink__roleType(struct soap *soap, char **p)
{
	if (::soap_read_xlink__roleType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* xlink__hrefType is a typedef synonym of xsd__anyURI */

#ifndef SOAP_TYPE_xlink__hrefType_DEFINED
#define SOAP_TYPE_xlink__hrefType_DEFINED

#define soap_default_xlink__hrefType soap_default_xsd__anyURI


#define soap_serialize_xlink__hrefType soap_serialize_xsd__anyURI


#define soap_xlink__hrefType2s(soap, a) (a)

#define soap_out_xlink__hrefType soap_out_xsd__anyURI


#define soap_s2xlink__hrefType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)

#define soap_in_xlink__hrefType soap_in_xsd__anyURI


#define soap_instantiate_xlink__hrefType soap_instantiate_xsd__anyURI


#define soap_new_xlink__hrefType soap_new_xsd__anyURI


#define soap_put_xlink__hrefType soap_put_xsd__anyURI


#define soap_write_xlink__hrefType soap_write_xsd__anyURI


#define soap_PUT_xlink__hrefType soap_PUT_xsd__anyURI


#define soap_PATCH_xlink__hrefType soap_PATCH_xsd__anyURI


#define soap_POST_send_xlink__hrefType soap_POST_send_xsd__anyURI


#define soap_get_xlink__hrefType soap_get_xsd__anyURI


#define soap_read_xlink__hrefType soap_read_xsd__anyURI


#define soap_GET_xlink__hrefType soap_GET_xsd__anyURI


#define soap_POST_recv_xlink__hrefType soap_POST_recv_xsd__anyURI

#endif
/* wfs__ReturnFeatureTypesListType is a typedef synonym of xsd__QName */

#ifndef SOAP_TYPE_wfs__ReturnFeatureTypesListType_DEFINED
#define SOAP_TYPE_wfs__ReturnFeatureTypesListType_DEFINED

#define soap_default_wfs__ReturnFeatureTypesListType soap_default_xsd__QName


#define soap_serialize_wfs__ReturnFeatureTypesListType soap_serialize_xsd__QName


#define soap_wfs__ReturnFeatureTypesListType2s(soap, a) soap_QName2s(soap, (a))

#define soap_out_wfs__ReturnFeatureTypesListType soap_out_xsd__QName


#define soap_s2wfs__ReturnFeatureTypesListType(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in_wfs__ReturnFeatureTypesListType soap_in_xsd__QName


#define soap_instantiate_wfs__ReturnFeatureTypesListType soap_instantiate_xsd__QName


#define soap_new_wfs__ReturnFeatureTypesListType soap_new_xsd__QName


#define soap_put_wfs__ReturnFeatureTypesListType soap_put_xsd__QName


#define soap_write_wfs__ReturnFeatureTypesListType soap_write_xsd__QName


#define soap_PUT_wfs__ReturnFeatureTypesListType soap_PUT_xsd__QName


#define soap_PATCH_wfs__ReturnFeatureTypesListType soap_PATCH_xsd__QName


#define soap_POST_send_wfs__ReturnFeatureTypesListType soap_POST_send_xsd__QName


#define soap_get_wfs__ReturnFeatureTypesListType soap_get_xsd__QName


#define soap_read_wfs__ReturnFeatureTypesListType soap_read_xsd__QName


#define soap_GET_wfs__ReturnFeatureTypesListType soap_GET_xsd__QName


#define soap_POST_recv_wfs__ReturnFeatureTypesListType soap_POST_recv_xsd__QName

#endif
/* _ows__Resource is a typedef synonym of _XML */

#ifndef SOAP_TYPE__ows__Resource_DEFINED
#define SOAP_TYPE__ows__Resource_DEFINED
#endif
/* _SOAP_ENC__actor is a typedef synonym of string */

#ifndef SOAP_TYPE__SOAP_ENC__actor_DEFINED
#define SOAP_TYPE__SOAP_ENC__actor_DEFINED

#define soap_default__SOAP_ENC__actor soap_default_string


#define soap_serialize__SOAP_ENC__actor soap_serialize_string


#define soap__SOAP_ENC__actor2s(soap, a) (a)

#define soap_out__SOAP_ENC__actor soap_out_string


#define soap_s2_SOAP_ENC__actor(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__SOAP_ENC__actor soap_in_string


#define soap_instantiate__SOAP_ENC__actor soap_instantiate_string


#define soap_new__SOAP_ENC__actor soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__SOAP_ENC__actor(struct soap*, char *const*, const char*, const char*);

inline int soap_write__SOAP_ENC__actor(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__SOAP_ENC__actor(soap, p, "SOAP-ENC:actor", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__SOAP_ENC__actor(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__SOAP_ENC__actor(soap, p, "SOAP-ENC:actor", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__SOAP_ENC__actor(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__SOAP_ENC__actor(soap, p, "SOAP-ENC:actor", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__SOAP_ENC__actor(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__SOAP_ENC__actor(soap, p, "SOAP-ENC:actor", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__SOAP_ENC__actor soap_get_string


#define soap_read__SOAP_ENC__actor soap_read_string


#define soap_GET__SOAP_ENC__actor soap_GET_string


#define soap_POST_recv__SOAP_ENC__actor soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_xsd__token_DEFINED
#define SOAP_TYPE_xsd__token_DEFINED

inline void soap_default_xsd__token(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__token
	*a = SOAP_DEFAULT_xsd__token;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, char *const*);

#define soap_xsd__token2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__token(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__token soap_instantiate_string


#define soap_new_xsd__token soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__token(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__token(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__token(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__token(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__token(soap, p, "xsd:token", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__token(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__token(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__token(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__token(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__token(struct soap *soap, char **p)
{
	if (::soap_read_xsd__token(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__time_DEFINED
#define SOAP_TYPE_xsd__time_DEFINED

inline void soap_default_xsd__time(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__time
	*a = SOAP_DEFAULT_xsd__time;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__time(struct soap*, char *const*);

#define soap_xsd__time2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__time(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__time(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "\\d{2}:\\d{2}:\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__time(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__time soap_instantiate_string


#define soap_new_xsd__time soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__time(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__time(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__time(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__time(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__time(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__time(soap, p, "xsd:time", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__time(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__time(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__time(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__time(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__time(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__time(struct soap *soap, char **p)
{
	if (::soap_read_xsd__time(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED

inline void soap_default_xsd__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__QName
	*a = SOAP_DEFAULT_xsd__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, char *const*);

#define soap_xsd__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__QName soap_instantiate_string


#define soap_new_xsd__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__QName(soap, p, "xsd:QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__QName(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__QName(struct soap *soap, char **p)
{
	if (::soap_read_xsd__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__normalizedString_DEFINED
#define SOAP_TYPE_xsd__normalizedString_DEFINED

inline void soap_default_xsd__normalizedString(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__normalizedString
	*a = SOAP_DEFAULT_xsd__normalizedString;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__normalizedString(struct soap*, char *const*);

#define soap_xsd__normalizedString2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__normalizedString(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__normalizedString(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__normalizedString(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__normalizedString soap_instantiate_string


#define soap_new_xsd__normalizedString soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__normalizedString(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__normalizedString(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__normalizedString(soap, p, "xsd:normalizedString", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__normalizedString(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__normalizedString(soap, p, "xsd:normalizedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__normalizedString(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__normalizedString(soap, p, "xsd:normalizedString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__normalizedString(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__normalizedString(soap, p, "xsd:normalizedString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__normalizedString(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__normalizedString(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__normalizedString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__normalizedString(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__normalizedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__normalizedString(struct soap *soap, char **p)
{
	if (::soap_read_xsd__normalizedString(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__NMTOKEN_DEFINED
#define SOAP_TYPE_xsd__NMTOKEN_DEFINED

inline void soap_default_xsd__NMTOKEN(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__NMTOKEN
	*a = SOAP_DEFAULT_xsd__NMTOKEN;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NMTOKEN(struct soap*, char *const*);

#define soap_xsd__NMTOKEN2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NMTOKEN(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__NMTOKEN(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "\\c+")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__NMTOKEN(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__NMTOKEN soap_instantiate_string


#define soap_new_xsd__NMTOKEN soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NMTOKEN(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__NMTOKEN(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__NMTOKEN(soap, p, "xsd:NMTOKEN", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NMTOKEN(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NMTOKEN(soap, p, "xsd:NMTOKEN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__NMTOKEN(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NMTOKEN(soap, p, "xsd:NMTOKEN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NMTOKEN(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NMTOKEN(soap, p, "xsd:NMTOKEN", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__NMTOKEN(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__NMTOKEN(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__NMTOKEN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NMTOKEN(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__NMTOKEN(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__NMTOKEN(struct soap *soap, char **p)
{
	if (::soap_read_xsd__NMTOKEN(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__NCName_DEFINED
#define SOAP_TYPE_xsd__NCName_DEFINED

inline void soap_default_xsd__NCName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__NCName
	*a = SOAP_DEFAULT_xsd__NCName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, char *const*);

#define soap_xsd__NCName2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__NCName(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__NCName soap_instantiate_string


#define soap_new_xsd__NCName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__NCName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__NCName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__NCName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__NCName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__NCName(soap, p, "xsd:NCName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__NCName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__NCName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__NCName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__NCName(struct soap *soap, char **p)
{
	if (::soap_read_xsd__NCName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__Name_DEFINED
#define SOAP_TYPE_xsd__Name_DEFINED

inline void soap_default_xsd__Name(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__Name
	*a = SOAP_DEFAULT_xsd__Name;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__Name(struct soap*, char *const*);

#define soap_xsd__Name2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__Name(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__Name(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "\\i\\c*")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__Name(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__Name soap_instantiate_string


#define soap_new_xsd__Name soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__Name(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__Name(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__Name(soap, p, "xsd:Name", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__Name(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__Name(soap, p, "xsd:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__Name(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__Name(soap, p, "xsd:Name", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__Name(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__Name(soap, p, "xsd:Name", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__Name(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__Name(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__Name(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__Name(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__Name(struct soap *soap, char **p)
{
	if (::soap_read_xsd__Name(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__language_DEFINED
#define SOAP_TYPE_xsd__language_DEFINED

inline void soap_default_xsd__language(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__language
	*a = SOAP_DEFAULT_xsd__language;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__language(struct soap*, char *const*);

#define soap_xsd__language2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__language(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__language(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__language(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__language soap_instantiate_string


#define soap_new_xsd__language soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__language(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__language(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__language(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__language(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__language(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__language(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__language(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__language(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__language(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__language(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__language(struct soap *soap, char **p)
{
	if (::soap_read_xsd__language(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__ID_DEFINED
#define SOAP_TYPE_xsd__ID_DEFINED

inline void soap_default_xsd__ID(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__ID
	*a = SOAP_DEFAULT_xsd__ID;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, char *const*);

#define soap_xsd__ID2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__ID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[\\i-[:]][\\c-[:]]*")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__ID soap_instantiate_string


#define soap_new_xsd__ID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__ID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__ID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__ID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__ID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__ID(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__ID(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__ID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__ID(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__ID(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__ID(struct soap *soap, char **p)
{
	if (::soap_read_xsd__ID(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED

inline void soap_default_xsd__duration(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__duration
	*a = SOAP_DEFAULT_xsd__duration;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, char *const*);

#define soap_xsd__duration2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__duration(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__duration soap_instantiate_string


#define soap_new_xsd__duration soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__duration(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__duration(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__duration(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__duration(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__duration(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__duration(struct soap *soap, char **p)
{
	if (::soap_read_xsd__duration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__date_DEFINED
#define SOAP_TYPE_xsd__date_DEFINED

inline void soap_default_xsd__date(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__date
	*a = SOAP_DEFAULT_xsd__date;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, char *const*);

#define soap_xsd__date2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__date(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__date soap_instantiate_string


#define soap_new_xsd__date soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__date(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__date(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__date(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__date(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__date(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__date(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__date(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__date(struct soap *soap, char **p)
{
	if (::soap_read_xsd__date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED

inline void soap_default_xsd__anyURI(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__anyURI
	*a = SOAP_DEFAULT_xsd__anyURI;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, char *const*);

#define soap_xsd__anyURI2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 4, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_string


#define soap_new_xsd__anyURI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__anyURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyURI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyURI(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__anyURI(struct soap *soap, char **p)
{
	if (::soap_read_xsd__anyURI(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _xsd__schema is a typedef synonym of string */

#ifndef SOAP_TYPE__xsd__schema_DEFINED
#define SOAP_TYPE__xsd__schema_DEFINED

#define soap_default__xsd__schema soap_default_string


#define soap_serialize__xsd__schema soap_serialize_string


#define soap__xsd__schema2s(soap, a) (a)

#define soap_out__xsd__schema soap_out_string


#define soap_s2_xsd__schema(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__xsd__schema soap_in_string


#define soap_instantiate__xsd__schema soap_instantiate_string


#define soap_new__xsd__schema soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xsd__schema(struct soap*, char *const*, const char*, const char*);

inline int soap_write__xsd__schema(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__xsd__schema(soap, p, "xsd:schema", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__xsd__schema(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xsd__schema(soap, p, "xsd:schema", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xsd__schema(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xsd__schema(soap, p, "xsd:schema", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xsd__schema(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xsd__schema(soap, p, "xsd:schema", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__xsd__schema soap_get_string


#define soap_read__xsd__schema soap_read_string


#define soap_GET__xsd__schema soap_GET_string


#define soap_POST_recv__xsd__schema soap_POST_recv_string

#endif
/* _xml__lang is a typedef synonym of string */

#ifndef SOAP_TYPE__xml__lang_DEFINED
#define SOAP_TYPE__xml__lang_DEFINED

#define soap_default__xml__lang soap_default_string


#define soap_serialize__xml__lang soap_serialize_string


#define soap__xml__lang2s(soap, a) (a)

#define soap_out__xml__lang soap_out_string


#define soap_s2_xml__lang(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__xml__lang soap_in_string


#define soap_instantiate__xml__lang soap_instantiate_string


#define soap_new__xml__lang soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xml__lang(struct soap*, char *const*, const char*, const char*);

inline int soap_write__xml__lang(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__xml__lang(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__xml__lang(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__xml__lang(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__xml__lang(soap, p, "xml:lang", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__xml__lang soap_get_string


#define soap_read__xml__lang soap_read_string


#define soap_GET__xml__lang soap_GET_string


#define soap_POST_recv__xml__lang soap_POST_recv_string

#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__inspireTheme_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__inspireTheme_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__inspireTheme(struct soap*, std::vector<icommon__inspireTheme *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__inspireTheme(struct soap*, const std::vector<icommon__inspireTheme *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__inspireTheme(struct soap*, const char*, int, const std::vector<icommon__inspireTheme *> *, const char*);
SOAP_FMAC3 std::vector<icommon__inspireTheme *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__inspireTheme(struct soap*, const char*, std::vector<icommon__inspireTheme *> *, const char*);
SOAP_FMAC1 std::vector<icommon__inspireTheme *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__inspireTheme(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__inspireTheme *>  * soap_new_std__vectorTemplateOfPointerToicommon__inspireTheme(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__inspireTheme(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__ReferenceGroupType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__ReferenceGroupType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__ReferenceGroupType(struct soap*, std::vector<ows__ReferenceGroupType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__ReferenceGroupType(struct soap*, const std::vector<ows__ReferenceGroupType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__ReferenceGroupType(struct soap*, const char*, int, const std::vector<ows__ReferenceGroupType *> *, const char*);
SOAP_FMAC3 std::vector<ows__ReferenceGroupType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__ReferenceGroupType(struct soap*, const char*, std::vector<ows__ReferenceGroupType *> *, const char*);
SOAP_FMAC1 std::vector<ows__ReferenceGroupType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__ReferenceGroupType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__ReferenceGroupType *>  * soap_new_std__vectorTemplateOfPointerToows__ReferenceGroupType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__ReferenceGroupType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary(struct soap*, std::vector<icommon__originatingControlledVocabulary *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary(struct soap*, const std::vector<icommon__originatingControlledVocabulary *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary(struct soap*, const char*, int, const std::vector<icommon__originatingControlledVocabulary *> *, const char*);
SOAP_FMAC3 std::vector<icommon__originatingControlledVocabulary *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary(struct soap*, const char*, std::vector<icommon__originatingControlledVocabulary *> *, const char*);
SOAP_FMAC1 std::vector<icommon__originatingControlledVocabulary *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__originatingControlledVocabulary *>  * soap_new_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__originatingControlledVocabulary(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOficommon__topicCategory_DEFINED
#define SOAP_TYPE_std__vectorTemplateOficommon__topicCategory_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOficommon__topicCategory(struct soap*, std::vector<enum icommon__topicCategory> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOficommon__topicCategory(struct soap*, const std::vector<enum icommon__topicCategory> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOficommon__topicCategory(struct soap*, const char*, int, const std::vector<enum icommon__topicCategory> *, const char*);
SOAP_FMAC3 std::vector<enum icommon__topicCategory> * SOAP_FMAC4 soap_in_std__vectorTemplateOficommon__topicCategory(struct soap*, const char*, std::vector<enum icommon__topicCategory> *, const char*);
SOAP_FMAC1 std::vector<enum icommon__topicCategory>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOficommon__topicCategory(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum icommon__topicCategory>  * soap_new_std__vectorTemplateOficommon__topicCategory(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOficommon__topicCategory(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOficommon__languageISO6392B_DEFINED
#define SOAP_TYPE_std__vectorTemplateOficommon__languageISO6392B_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOficommon__languageISO6392B(struct soap*, std::vector<enum icommon__languageISO6392B> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOficommon__languageISO6392B(struct soap*, const std::vector<enum icommon__languageISO6392B> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOficommon__languageISO6392B(struct soap*, const char*, int, const std::vector<enum icommon__languageISO6392B> *, const char*);
SOAP_FMAC3 std::vector<enum icommon__languageISO6392B> * SOAP_FMAC4 soap_in_std__vectorTemplateOficommon__languageISO6392B(struct soap*, const char*, std::vector<enum icommon__languageISO6392B> *, const char*);
SOAP_FMAC1 std::vector<enum icommon__languageISO6392B>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOficommon__languageISO6392B(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum icommon__languageISO6392B>  * soap_new_std__vectorTemplateOficommon__languageISO6392B(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOficommon__languageISO6392B(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__fes__union_BinaryLogicOpType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__fes__union_BinaryLogicOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__fes__union_BinaryLogicOpType(struct soap*, std::vector<__fes__union_BinaryLogicOpType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__fes__union_BinaryLogicOpType(struct soap*, const std::vector<__fes__union_BinaryLogicOpType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__fes__union_BinaryLogicOpType(struct soap*, const char*, int, const std::vector<__fes__union_BinaryLogicOpType> *, const char*);
SOAP_FMAC3 std::vector<__fes__union_BinaryLogicOpType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__fes__union_BinaryLogicOpType(struct soap*, const char*, std::vector<__fes__union_BinaryLogicOpType> *, const char*);
SOAP_FMAC1 std::vector<__fes__union_BinaryLogicOpType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__fes__union_BinaryLogicOpType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__fes__union_BinaryLogicOpType>  * soap_new_std__vectorTemplateOf__fes__union_BinaryLogicOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__fes__union_BinaryLogicOpType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__fes__union_DistanceBufferType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__fes__union_DistanceBufferType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__fes__union_DistanceBufferType(struct soap*, std::vector<__fes__union_DistanceBufferType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__fes__union_DistanceBufferType(struct soap*, const std::vector<__fes__union_DistanceBufferType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__fes__union_DistanceBufferType(struct soap*, const char*, int, const std::vector<__fes__union_DistanceBufferType> *, const char*);
SOAP_FMAC3 std::vector<__fes__union_DistanceBufferType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__fes__union_DistanceBufferType(struct soap*, const char*, std::vector<__fes__union_DistanceBufferType> *, const char*);
SOAP_FMAC1 std::vector<__fes__union_DistanceBufferType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__fes__union_DistanceBufferType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__fes__union_DistanceBufferType>  * soap_new_std__vectorTemplateOf__fes__union_DistanceBufferType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__fes__union_DistanceBufferType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__fes__union_BBOXType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__fes__union_BBOXType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__fes__union_BBOXType(struct soap*, std::vector<__fes__union_BBOXType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__fes__union_BBOXType(struct soap*, const std::vector<__fes__union_BBOXType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__fes__union_BBOXType(struct soap*, const char*, int, const std::vector<__fes__union_BBOXType> *, const char*);
SOAP_FMAC3 std::vector<__fes__union_BBOXType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__fes__union_BBOXType(struct soap*, const char*, std::vector<__fes__union_BBOXType> *, const char*);
SOAP_FMAC1 std::vector<__fes__union_BBOXType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__fes__union_BBOXType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__fes__union_BBOXType>  * soap_new_std__vectorTemplateOf__fes__union_BBOXType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__fes__union_BBOXType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__fes__union_BinaryTemporalOpType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__fes__union_BinaryTemporalOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__fes__union_BinaryTemporalOpType(struct soap*, std::vector<__fes__union_BinaryTemporalOpType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__fes__union_BinaryTemporalOpType(struct soap*, const std::vector<__fes__union_BinaryTemporalOpType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__fes__union_BinaryTemporalOpType(struct soap*, const char*, int, const std::vector<__fes__union_BinaryTemporalOpType> *, const char*);
SOAP_FMAC3 std::vector<__fes__union_BinaryTemporalOpType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__fes__union_BinaryTemporalOpType(struct soap*, const char*, std::vector<__fes__union_BinaryTemporalOpType> *, const char*);
SOAP_FMAC1 std::vector<__fes__union_BinaryTemporalOpType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__fes__union_BinaryTemporalOpType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__fes__union_BinaryTemporalOpType>  * soap_new_std__vectorTemplateOf__fes__union_BinaryTemporalOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__fes__union_BinaryTemporalOpType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__fes__union_BinarySpatialOpType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__fes__union_BinarySpatialOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__fes__union_BinarySpatialOpType(struct soap*, std::vector<__fes__union_BinarySpatialOpType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__fes__union_BinarySpatialOpType(struct soap*, const std::vector<__fes__union_BinarySpatialOpType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__fes__union_BinarySpatialOpType(struct soap*, const char*, int, const std::vector<__fes__union_BinarySpatialOpType> *, const char*);
SOAP_FMAC3 std::vector<__fes__union_BinarySpatialOpType> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__fes__union_BinarySpatialOpType(struct soap*, const char*, std::vector<__fes__union_BinarySpatialOpType> *, const char*);
SOAP_FMAC1 std::vector<__fes__union_BinarySpatialOpType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__fes__union_BinarySpatialOpType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__fes__union_BinarySpatialOpType>  * soap_new_std__vectorTemplateOf__fes__union_BinarySpatialOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__fes__union_BinarySpatialOpType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__BoundingBoxType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__BoundingBoxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, std::vector<ows__BoundingBoxType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, const std::vector<ows__BoundingBoxType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, const char*, int, const std::vector<ows__BoundingBoxType *> *, const char*);
SOAP_FMAC3 std::vector<ows__BoundingBoxType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, const char*, std::vector<ows__BoundingBoxType *> *, const char*);
SOAP_FMAC1 std::vector<ows__BoundingBoxType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__BoundingBoxType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__BoundingBoxType *>  * soap_new_std__vectorTemplateOfPointerToows__BoundingBoxType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__BoundingBoxType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__PropertyType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__PropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__PropertyType(struct soap*, std::vector<wfs__PropertyType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__PropertyType(struct soap*, const std::vector<wfs__PropertyType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__PropertyType(struct soap*, const char*, int, const std::vector<wfs__PropertyType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__PropertyType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__PropertyType(struct soap*, const char*, std::vector<wfs__PropertyType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__PropertyType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__PropertyType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__PropertyType *>  * soap_new_std__vectorTemplateOfPointerTowfs__PropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__PropertyType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__wfs__TransactionType_sequence_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__wfs__TransactionType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__wfs__TransactionType_sequence(struct soap*, std::vector<struct __wfs__TransactionType_sequence> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__wfs__TransactionType_sequence(struct soap*, const std::vector<struct __wfs__TransactionType_sequence> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__wfs__TransactionType_sequence(struct soap*, const char*, int, const std::vector<struct __wfs__TransactionType_sequence> *, const char*);
SOAP_FMAC3 std::vector<struct __wfs__TransactionType_sequence> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__wfs__TransactionType_sequence(struct soap*, const char*, std::vector<struct __wfs__TransactionType_sequence> *, const char*);
SOAP_FMAC1 std::vector<struct __wfs__TransactionType_sequence>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__wfs__TransactionType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct __wfs__TransactionType_sequence>  * soap_new_std__vectorTemplateOf__wfs__TransactionType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__wfs__TransactionType_sequence(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__ParameterType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__ParameterType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__ParameterType(struct soap*, std::vector<wfs__ParameterType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__ParameterType(struct soap*, const std::vector<wfs__ParameterType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__ParameterType(struct soap*, const char*, int, const std::vector<wfs__ParameterType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__ParameterType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__ParameterType(struct soap*, const char*, std::vector<wfs__ParameterType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__ParameterType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__ParameterType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__ParameterType *>  * soap_new_std__vectorTemplateOfPointerTowfs__ParameterType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__ParameterType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, const std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, const char*, int, const std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS> *, const char*);
SOAP_FMAC3 std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, const char*, std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS> *, const char*);
SOAP_FMAC1 std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_icommon__layers_Layer_CoordinateReferenceSystems_CRS>  * soap_new_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_icommon__layers_Layer_CoordinateReferenceSystems_CRS(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier(struct soap*, std::vector<icommon__uniqueResourceIdentifier *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier(struct soap*, const std::vector<icommon__uniqueResourceIdentifier *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier(struct soap*, const char*, int, const std::vector<icommon__uniqueResourceIdentifier *> *, const char*);
SOAP_FMAC3 std::vector<icommon__uniqueResourceIdentifier *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier(struct soap*, const char*, std::vector<icommon__uniqueResourceIdentifier *> *, const char*);
SOAP_FMAC1 std::vector<icommon__uniqueResourceIdentifier *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__uniqueResourceIdentifier *>  * soap_new_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__uniqueResourceIdentifier(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__languageElementISO6392B_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__languageElementISO6392B_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__languageElementISO6392B(struct soap*, std::vector<icommon__languageElementISO6392B *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__languageElementISO6392B(struct soap*, const std::vector<icommon__languageElementISO6392B *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__languageElementISO6392B(struct soap*, const char*, int, const std::vector<icommon__languageElementISO6392B *> *, const char*);
SOAP_FMAC3 std::vector<icommon__languageElementISO6392B *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__languageElementISO6392B(struct soap*, const char*, std::vector<icommon__languageElementISO6392B *> *, const char*);
SOAP_FMAC1 std::vector<icommon__languageElementISO6392B *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__languageElementISO6392B(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__languageElementISO6392B *>  * soap_new_std__vectorTemplateOfPointerToicommon__languageElementISO6392B(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__languageElementISO6392B(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService(struct soap*, std::vector<icommon__classificationOfSpatialDataService *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService(struct soap*, const std::vector<icommon__classificationOfSpatialDataService *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService(struct soap*, const char*, int, const std::vector<icommon__classificationOfSpatialDataService *> *, const char*);
SOAP_FMAC3 std::vector<icommon__classificationOfSpatialDataService *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService(struct soap*, const char*, std::vector<icommon__classificationOfSpatialDataService *> *, const char*);
SOAP_FMAC1 std::vector<icommon__classificationOfSpatialDataService *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__classificationOfSpatialDataService *>  * soap_new_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__classificationOfSpatialDataService(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOficommon__mediaType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOficommon__mediaType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOficommon__mediaType(struct soap*, std::vector<enum icommon__mediaType> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOficommon__mediaType(struct soap*, const std::vector<enum icommon__mediaType> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOficommon__mediaType(struct soap*, const char*, int, const std::vector<enum icommon__mediaType> *, const char*);
SOAP_FMAC3 std::vector<enum icommon__mediaType> * SOAP_FMAC4 soap_in_std__vectorTemplateOficommon__mediaType(struct soap*, const char*, std::vector<enum icommon__mediaType> *, const char*);
SOAP_FMAC1 std::vector<enum icommon__mediaType>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOficommon__mediaType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum icommon__mediaType>  * soap_new_std__vectorTemplateOficommon__mediaType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOficommon__mediaType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__temporalExtent_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__temporalExtent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__temporalExtent(struct soap*, std::vector<icommon__temporalExtent *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__temporalExtent(struct soap*, const std::vector<icommon__temporalExtent *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__temporalExtent(struct soap*, const char*, int, const std::vector<icommon__temporalExtent *> *, const char*);
SOAP_FMAC3 std::vector<icommon__temporalExtent *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__temporalExtent(struct soap*, const char*, std::vector<icommon__temporalExtent *> *, const char*);
SOAP_FMAC1 std::vector<icommon__temporalExtent *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__temporalExtent(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__temporalExtent *>  * soap_new_std__vectorTemplateOfPointerToicommon__temporalExtent(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__temporalExtent(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOficommon__iso8601Date_DEFINED
#define SOAP_TYPE_std__vectorTemplateOficommon__iso8601Date_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOficommon__iso8601Date(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOficommon__iso8601Date(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOficommon__iso8601Date(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOficommon__iso8601Date(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOficommon__iso8601Date(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOficommon__iso8601Date(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOficommon__iso8601Date(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__metadataPointOfContact_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__metadataPointOfContact_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__metadataPointOfContact(struct soap*, std::vector<icommon__metadataPointOfContact *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__metadataPointOfContact(struct soap*, const std::vector<icommon__metadataPointOfContact *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__metadataPointOfContact(struct soap*, const char*, int, const std::vector<icommon__metadataPointOfContact *> *, const char*);
SOAP_FMAC3 std::vector<icommon__metadataPointOfContact *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__metadataPointOfContact(struct soap*, const char*, std::vector<icommon__metadataPointOfContact *> *, const char*);
SOAP_FMAC1 std::vector<icommon__metadataPointOfContact *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__metadataPointOfContact(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__metadataPointOfContact *>  * soap_new_std__vectorTemplateOfPointerToicommon__metadataPointOfContact(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__metadataPointOfContact(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__responsibleOrganisation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__responsibleOrganisation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__responsibleOrganisation(struct soap*, std::vector<icommon__responsibleOrganisation *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__responsibleOrganisation(struct soap*, const std::vector<icommon__responsibleOrganisation *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__responsibleOrganisation(struct soap*, const char*, int, const std::vector<icommon__responsibleOrganisation *> *, const char*);
SOAP_FMAC3 std::vector<icommon__responsibleOrganisation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__responsibleOrganisation(struct soap*, const char*, std::vector<icommon__responsibleOrganisation *> *, const char*);
SOAP_FMAC1 std::vector<icommon__responsibleOrganisation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__responsibleOrganisation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__responsibleOrganisation *>  * soap_new_std__vectorTemplateOfPointerToicommon__responsibleOrganisation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__responsibleOrganisation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOficommon__notEmptyString_DEFINED
#define SOAP_TYPE_std__vectorTemplateOficommon__notEmptyString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOficommon__notEmptyString(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOficommon__notEmptyString(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOficommon__notEmptyString(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOficommon__notEmptyString(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOficommon__notEmptyString(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOficommon__notEmptyString(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOficommon__notEmptyString(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__conformity_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__conformity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__conformity(struct soap*, std::vector<icommon__conformity *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__conformity(struct soap*, const std::vector<icommon__conformity *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__conformity(struct soap*, const char*, int, const std::vector<icommon__conformity *> *, const char*);
SOAP_FMAC3 std::vector<icommon__conformity *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__conformity(struct soap*, const char*, std::vector<icommon__conformity *> *, const char*);
SOAP_FMAC1 std::vector<icommon__conformity *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__conformity(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__conformity *>  * soap_new_std__vectorTemplateOfPointerToicommon__conformity(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__conformity(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__spatialResolution_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__spatialResolution_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__spatialResolution(struct soap*, std::vector<icommon__spatialResolution *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__spatialResolution(struct soap*, const std::vector<icommon__spatialResolution *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__spatialResolution(struct soap*, const char*, int, const std::vector<icommon__spatialResolution *> *, const char*);
SOAP_FMAC3 std::vector<icommon__spatialResolution *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__spatialResolution(struct soap*, const char*, std::vector<icommon__spatialResolution *> *, const char*);
SOAP_FMAC1 std::vector<icommon__spatialResolution *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__spatialResolution(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__spatialResolution *>  * soap_new_std__vectorTemplateOfPointerToicommon__spatialResolution(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__spatialResolution(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__temporalReference_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__temporalReference_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__temporalReference(struct soap*, std::vector<icommon__temporalReference *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__temporalReference(struct soap*, const std::vector<icommon__temporalReference *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__temporalReference(struct soap*, const char*, int, const std::vector<icommon__temporalReference *> *, const char*);
SOAP_FMAC3 std::vector<icommon__temporalReference *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__temporalReference(struct soap*, const char*, std::vector<icommon__temporalReference *> *, const char*);
SOAP_FMAC1 std::vector<icommon__temporalReference *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__temporalReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__temporalReference *>  * soap_new_std__vectorTemplateOfPointerToicommon__temporalReference(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__temporalReference(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__geographicBoundingBox_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__geographicBoundingBox_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__geographicBoundingBox(struct soap*, std::vector<icommon__geographicBoundingBox *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__geographicBoundingBox(struct soap*, const std::vector<icommon__geographicBoundingBox *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__geographicBoundingBox(struct soap*, const char*, int, const std::vector<icommon__geographicBoundingBox *> *, const char*);
SOAP_FMAC3 std::vector<icommon__geographicBoundingBox *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__geographicBoundingBox(struct soap*, const char*, std::vector<icommon__geographicBoundingBox *> *, const char*);
SOAP_FMAC1 std::vector<icommon__geographicBoundingBox *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__geographicBoundingBox(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__geographicBoundingBox *>  * soap_new_std__vectorTemplateOfPointerToicommon__geographicBoundingBox(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__geographicBoundingBox(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__keyword_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__keyword_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__keyword(struct soap*, std::vector<icommon__keyword *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__keyword(struct soap*, const std::vector<icommon__keyword *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__keyword(struct soap*, const char*, int, const std::vector<icommon__keyword *> *, const char*);
SOAP_FMAC3 std::vector<icommon__keyword *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__keyword(struct soap*, const char*, std::vector<icommon__keyword *> *, const char*);
SOAP_FMAC1 std::vector<icommon__keyword *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__keyword(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__keyword *>  * soap_new_std__vectorTemplateOfPointerToicommon__keyword(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__keyword(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToicommon__resourceLocatorType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToicommon__resourceLocatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToicommon__resourceLocatorType(struct soap*, std::vector<icommon__resourceLocatorType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToicommon__resourceLocatorType(struct soap*, const std::vector<icommon__resourceLocatorType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToicommon__resourceLocatorType(struct soap*, const char*, int, const std::vector<icommon__resourceLocatorType *> *, const char*);
SOAP_FMAC3 std::vector<icommon__resourceLocatorType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToicommon__resourceLocatorType(struct soap*, const char*, std::vector<icommon__resourceLocatorType *> *, const char*);
SOAP_FMAC1 std::vector<icommon__resourceLocatorType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToicommon__resourceLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<icommon__resourceLocatorType *>  * soap_new_std__vectorTemplateOfPointerToicommon__resourceLocatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToicommon__resourceLocatorType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofes__SortPropertyType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTofes__SortPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofes__SortPropertyType(struct soap*, std::vector<fes__SortPropertyType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofes__SortPropertyType(struct soap*, const std::vector<fes__SortPropertyType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofes__SortPropertyType(struct soap*, const char*, int, const std::vector<fes__SortPropertyType *> *, const char*);
SOAP_FMAC3 std::vector<fes__SortPropertyType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofes__SortPropertyType(struct soap*, const char*, std::vector<fes__SortPropertyType *> *, const char*);
SOAP_FMAC1 std::vector<fes__SortPropertyType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofes__SortPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fes__SortPropertyType *>  * soap_new_std__vectorTemplateOfPointerTofes__SortPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTofes__SortPropertyType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofes__ExtensionOperatorType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTofes__ExtensionOperatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofes__ExtensionOperatorType(struct soap*, std::vector<fes__ExtensionOperatorType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofes__ExtensionOperatorType(struct soap*, const std::vector<fes__ExtensionOperatorType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofes__ExtensionOperatorType(struct soap*, const char*, int, const std::vector<fes__ExtensionOperatorType *> *, const char*);
SOAP_FMAC3 std::vector<fes__ExtensionOperatorType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofes__ExtensionOperatorType(struct soap*, const char*, std::vector<fes__ExtensionOperatorType *> *, const char*);
SOAP_FMAC1 std::vector<fes__ExtensionOperatorType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofes__ExtensionOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fes__ExtensionOperatorType *>  * soap_new_std__vectorTemplateOfPointerTofes__ExtensionOperatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTofes__ExtensionOperatorType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofes__TemporalOperatorType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTofes__TemporalOperatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofes__TemporalOperatorType(struct soap*, std::vector<fes__TemporalOperatorType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofes__TemporalOperatorType(struct soap*, const std::vector<fes__TemporalOperatorType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofes__TemporalOperatorType(struct soap*, const char*, int, const std::vector<fes__TemporalOperatorType *> *, const char*);
SOAP_FMAC3 std::vector<fes__TemporalOperatorType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofes__TemporalOperatorType(struct soap*, const char*, std::vector<fes__TemporalOperatorType *> *, const char*);
SOAP_FMAC1 std::vector<fes__TemporalOperatorType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofes__TemporalOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fes__TemporalOperatorType *>  * soap_new_std__vectorTemplateOfPointerTofes__TemporalOperatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTofes__TemporalOperatorType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand(struct soap*, std::vector<_fes__TemporalOperandsType_TemporalOperand> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand(struct soap*, const std::vector<_fes__TemporalOperandsType_TemporalOperand> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand(struct soap*, const char*, int, const std::vector<_fes__TemporalOperandsType_TemporalOperand> *, const char*);
SOAP_FMAC3 std::vector<_fes__TemporalOperandsType_TemporalOperand> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand(struct soap*, const char*, std::vector<_fes__TemporalOperandsType_TemporalOperand> *, const char*);
SOAP_FMAC1 std::vector<_fes__TemporalOperandsType_TemporalOperand>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_fes__TemporalOperandsType_TemporalOperand>  * soap_new_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_fes__TemporalOperandsType_TemporalOperand(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofes__SpatialOperatorType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTofes__SpatialOperatorType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofes__SpatialOperatorType(struct soap*, std::vector<fes__SpatialOperatorType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofes__SpatialOperatorType(struct soap*, const std::vector<fes__SpatialOperatorType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofes__SpatialOperatorType(struct soap*, const char*, int, const std::vector<fes__SpatialOperatorType *> *, const char*);
SOAP_FMAC3 std::vector<fes__SpatialOperatorType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofes__SpatialOperatorType(struct soap*, const char*, std::vector<fes__SpatialOperatorType *> *, const char*);
SOAP_FMAC1 std::vector<fes__SpatialOperatorType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofes__SpatialOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fes__SpatialOperatorType *>  * soap_new_std__vectorTemplateOfPointerTofes__SpatialOperatorType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTofes__SpatialOperatorType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand(struct soap*, std::vector<_fes__GeometryOperandsType_GeometryOperand> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand(struct soap*, const std::vector<_fes__GeometryOperandsType_GeometryOperand> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand(struct soap*, const char*, int, const std::vector<_fes__GeometryOperandsType_GeometryOperand> *, const char*);
SOAP_FMAC3 std::vector<_fes__GeometryOperandsType_GeometryOperand> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand(struct soap*, const char*, std::vector<_fes__GeometryOperandsType_GeometryOperand> *, const char*);
SOAP_FMAC1 std::vector<_fes__GeometryOperandsType_GeometryOperand>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_fes__GeometryOperandsType_GeometryOperand>  * soap_new_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_fes__GeometryOperandsType_GeometryOperand(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofes__ArgumentType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTofes__ArgumentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofes__ArgumentType(struct soap*, std::vector<fes__ArgumentType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofes__ArgumentType(struct soap*, const std::vector<fes__ArgumentType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofes__ArgumentType(struct soap*, const char*, int, const std::vector<fes__ArgumentType *> *, const char*);
SOAP_FMAC3 std::vector<fes__ArgumentType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofes__ArgumentType(struct soap*, const char*, std::vector<fes__ArgumentType *> *, const char*);
SOAP_FMAC1 std::vector<fes__ArgumentType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofes__ArgumentType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fes__ArgumentType *>  * soap_new_std__vectorTemplateOfPointerTofes__ArgumentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTofes__ArgumentType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofes__AvailableFunctionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTofes__AvailableFunctionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofes__AvailableFunctionType(struct soap*, std::vector<fes__AvailableFunctionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofes__AvailableFunctionType(struct soap*, const std::vector<fes__AvailableFunctionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofes__AvailableFunctionType(struct soap*, const char*, int, const std::vector<fes__AvailableFunctionType *> *, const char*);
SOAP_FMAC3 std::vector<fes__AvailableFunctionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofes__AvailableFunctionType(struct soap*, const char*, std::vector<fes__AvailableFunctionType *> *, const char*);
SOAP_FMAC1 std::vector<fes__AvailableFunctionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofes__AvailableFunctionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fes__AvailableFunctionType *>  * soap_new_std__vectorTemplateOfPointerTofes__AvailableFunctionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTofes__AvailableFunctionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence(struct soap*, std::vector<struct __fes__ComparisonOperatorsType_sequence> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence(struct soap*, const std::vector<struct __fes__ComparisonOperatorsType_sequence> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence(struct soap*, const char*, int, const std::vector<struct __fes__ComparisonOperatorsType_sequence> *, const char*);
SOAP_FMAC3 std::vector<struct __fes__ComparisonOperatorsType_sequence> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence(struct soap*, const char*, std::vector<struct __fes__ComparisonOperatorsType_sequence> *, const char*);
SOAP_FMAC1 std::vector<struct __fes__ComparisonOperatorsType_sequence>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct __fes__ComparisonOperatorsType_sequence>  * soap_new_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__fes__ComparisonOperatorsType_sequence(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofes__ResourceIdentifierType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTofes__ResourceIdentifierType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofes__ResourceIdentifierType(struct soap*, std::vector<fes__ResourceIdentifierType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofes__ResourceIdentifierType(struct soap*, const std::vector<fes__ResourceIdentifierType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofes__ResourceIdentifierType(struct soap*, const char*, int, const std::vector<fes__ResourceIdentifierType *> *, const char*);
SOAP_FMAC3 std::vector<fes__ResourceIdentifierType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofes__ResourceIdentifierType(struct soap*, const char*, std::vector<fes__ResourceIdentifierType *> *, const char*);
SOAP_FMAC1 std::vector<fes__ResourceIdentifierType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofes__ResourceIdentifierType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fes__ResourceIdentifierType *>  * soap_new_std__vectorTemplateOfPointerTofes__ResourceIdentifierType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTofes__ResourceIdentifierType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__xlink__union_extended_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__xlink__union_extended_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__xlink__union_extended(struct soap*, std::vector<__xlink__union_extended> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__xlink__union_extended(struct soap*, const std::vector<__xlink__union_extended> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__xlink__union_extended(struct soap*, const char*, int, const std::vector<__xlink__union_extended> *, const char*);
SOAP_FMAC3 std::vector<__xlink__union_extended> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__xlink__union_extended(struct soap*, const char*, std::vector<__xlink__union_extended> *, const char*);
SOAP_FMAC1 std::vector<__xlink__union_extended>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__xlink__union_extended(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__xlink__union_extended>  * soap_new_std__vectorTemplateOf__xlink__union_extended(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__xlink__union_extended(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__ows__union_AllowedValues_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__ows__union_AllowedValues_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__ows__union_AllowedValues(struct soap*, std::vector<__ows__union_AllowedValues> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__ows__union_AllowedValues(struct soap*, const std::vector<__ows__union_AllowedValues> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__ows__union_AllowedValues(struct soap*, const char*, int, const std::vector<__ows__union_AllowedValues> *, const char*);
SOAP_FMAC3 std::vector<__ows__union_AllowedValues> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__ows__union_AllowedValues(struct soap*, const char*, std::vector<__ows__union_AllowedValues> *, const char*);
SOAP_FMAC1 std::vector<__ows__union_AllowedValues>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__ows__union_AllowedValues(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__ows__union_AllowedValues>  * soap_new_std__vectorTemplateOf__ows__union_AllowedValues(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__ows__union_AllowedValues(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__ows__union_HTTP_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__ows__union_HTTP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__ows__union_HTTP(struct soap*, std::vector<__ows__union_HTTP> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__ows__union_HTTP(struct soap*, const std::vector<__ows__union_HTTP> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__ows__union_HTTP(struct soap*, const char*, int, const std::vector<__ows__union_HTTP> *, const char*);
SOAP_FMAC3 std::vector<__ows__union_HTTP> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__ows__union_HTTP(struct soap*, const char*, std::vector<__ows__union_HTTP> *, const char*);
SOAP_FMAC1 std::vector<__ows__union_HTTP>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__ows__union_HTTP(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<__ows__union_HTTP>  * soap_new_std__vectorTemplateOf__ows__union_HTTP(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__ows__union_HTTP(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_ows__DCP_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_ows__DCP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ows__DCP(struct soap*, std::vector<_ows__DCP *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ows__DCP(struct soap*, const std::vector<_ows__DCP *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ows__DCP(struct soap*, const char*, int, const std::vector<_ows__DCP *> *, const char*);
SOAP_FMAC3 std::vector<_ows__DCP *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ows__DCP(struct soap*, const char*, std::vector<_ows__DCP *> *, const char*);
SOAP_FMAC1 std::vector<_ows__DCP *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ows__DCP(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ows__DCP *>  * soap_new_std__vectorTemplateOfPointerTo_ows__DCP(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTo_ows__DCP(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__DomainType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__DomainType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__DomainType(struct soap*, std::vector<ows__DomainType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__DomainType(struct soap*, const std::vector<ows__DomainType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__DomainType(struct soap*, const char*, int, const std::vector<ows__DomainType *> *, const char*);
SOAP_FMAC3 std::vector<ows__DomainType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__DomainType(struct soap*, const char*, std::vector<ows__DomainType *> *, const char*);
SOAP_FMAC1 std::vector<ows__DomainType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__DomainType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__DomainType *>  * soap_new_std__vectorTemplateOfPointerToows__DomainType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__DomainType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_ows__Operation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_ows__Operation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_ows__Operation(struct soap*, std::vector<_ows__Operation *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_ows__Operation(struct soap*, const std::vector<_ows__Operation *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_ows__Operation(struct soap*, const char*, int, const std::vector<_ows__Operation *> *, const char*);
SOAP_FMAC3 std::vector<_ows__Operation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_ows__Operation(struct soap*, const char*, std::vector<_ows__Operation *> *, const char*);
SOAP_FMAC1 std::vector<_ows__Operation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_ows__Operation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ows__Operation *>  * soap_new_std__vectorTemplateOfPointerTo_ows__Operation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTo_ows__Operation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__ExceptionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__ExceptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__ExceptionType(struct soap*, std::vector<ows__ExceptionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__ExceptionType(struct soap*, const std::vector<ows__ExceptionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__ExceptionType(struct soap*, const char*, int, const std::vector<ows__ExceptionType *> *, const char*);
SOAP_FMAC3 std::vector<ows__ExceptionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__ExceptionType(struct soap*, const char*, std::vector<ows__ExceptionType *> *, const char*);
SOAP_FMAC1 std::vector<ows__ExceptionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__ExceptionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__ExceptionType *>  * soap_new_std__vectorTemplateOfPointerToows__ExceptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__ExceptionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType(struct soap*, std::vector<ows__DatasetDescriptionSummaryBaseType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType(struct soap*, const std::vector<ows__DatasetDescriptionSummaryBaseType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType(struct soap*, const char*, int, const std::vector<ows__DatasetDescriptionSummaryBaseType *> *, const char*);
SOAP_FMAC3 std::vector<ows__DatasetDescriptionSummaryBaseType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType(struct soap*, const char*, std::vector<ows__DatasetDescriptionSummaryBaseType *> *, const char*);
SOAP_FMAC1 std::vector<ows__DatasetDescriptionSummaryBaseType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__DatasetDescriptionSummaryBaseType *>  * soap_new_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__DatasetDescriptionSummaryBaseType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfows__MimeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfows__MimeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfows__MimeType(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfows__MimeType(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfows__MimeType(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfows__MimeType(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfows__MimeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfows__MimeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfows__MimeType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfows__VersionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfows__VersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfows__VersionType(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfows__VersionType(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfows__VersionType(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfows__VersionType(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfows__VersionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfows__VersionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfows__VersionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__LanguageStringType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__LanguageStringType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__LanguageStringType(struct soap*, std::vector<ows__LanguageStringType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__LanguageStringType(struct soap*, const std::vector<ows__LanguageStringType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__LanguageStringType(struct soap*, const char*, int, const std::vector<ows__LanguageStringType *> *, const char*);
SOAP_FMAC3 std::vector<ows__LanguageStringType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__LanguageStringType(struct soap*, const char*, std::vector<ows__LanguageStringType *> *, const char*);
SOAP_FMAC1 std::vector<ows__LanguageStringType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__LanguageStringType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__LanguageStringType *>  * soap_new_std__vectorTemplateOfPointerToows__LanguageStringType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__LanguageStringType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, const std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, const char*, int, const std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence> *, const char*);
SOAP_FMAC3 std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, const char*, std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence> *, const char*);
SOAP_FMAC1 std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct __wfs__CreatedOrModifiedFeatureType_sequence>  * soap_new_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__wfs__CreatedOrModifiedFeatureType_sequence(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType(struct soap*, std::vector<wfs__CreatedOrModifiedFeatureType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType(struct soap*, const std::vector<wfs__CreatedOrModifiedFeatureType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType(struct soap*, const char*, int, const std::vector<wfs__CreatedOrModifiedFeatureType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__CreatedOrModifiedFeatureType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType(struct soap*, const char*, std::vector<wfs__CreatedOrModifiedFeatureType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__CreatedOrModifiedFeatureType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__CreatedOrModifiedFeatureType *>  * soap_new_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__CreatedOrModifiedFeatureType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence(struct soap*, std::vector<struct __wfs__FeaturesNotLockedType_sequence> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence(struct soap*, const std::vector<struct __wfs__FeaturesNotLockedType_sequence> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence(struct soap*, const char*, int, const std::vector<struct __wfs__FeaturesNotLockedType_sequence> *, const char*);
SOAP_FMAC3 std::vector<struct __wfs__FeaturesNotLockedType_sequence> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence(struct soap*, const char*, std::vector<struct __wfs__FeaturesNotLockedType_sequence> *, const char*);
SOAP_FMAC1 std::vector<struct __wfs__FeaturesNotLockedType_sequence>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct __wfs__FeaturesNotLockedType_sequence>  * soap_new_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__wfs__FeaturesNotLockedType_sequence(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence(struct soap*, std::vector<struct __wfs__FeaturesLockedType_sequence> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence(struct soap*, const std::vector<struct __wfs__FeaturesLockedType_sequence> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence(struct soap*, const char*, int, const std::vector<struct __wfs__FeaturesLockedType_sequence> *, const char*);
SOAP_FMAC3 std::vector<struct __wfs__FeaturesLockedType_sequence> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence(struct soap*, const char*, std::vector<struct __wfs__FeaturesLockedType_sequence> *, const char*);
SOAP_FMAC1 std::vector<struct __wfs__FeaturesLockedType_sequence>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct __wfs__FeaturesLockedType_sequence>  * soap_new_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__wfs__FeaturesLockedType_sequence(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType(struct soap*, std::vector<wfs__QueryExpressionTextType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType(struct soap*, const std::vector<wfs__QueryExpressionTextType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType(struct soap*, const char*, int, const std::vector<wfs__QueryExpressionTextType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__QueryExpressionTextType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType(struct soap*, const char*, std::vector<wfs__QueryExpressionTextType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__QueryExpressionTextType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__QueryExpressionTextType *>  * soap_new_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__QueryExpressionTextType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__ParameterExpressionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__ParameterExpressionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__ParameterExpressionType(struct soap*, std::vector<wfs__ParameterExpressionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__ParameterExpressionType(struct soap*, const std::vector<wfs__ParameterExpressionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__ParameterExpressionType(struct soap*, const char*, int, const std::vector<wfs__ParameterExpressionType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__ParameterExpressionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__ParameterExpressionType(struct soap*, const char*, std::vector<wfs__ParameterExpressionType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__ParameterExpressionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__ParameterExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__ParameterExpressionType *>  * soap_new_std__vectorTemplateOfPointerTowfs__ParameterExpressionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__ParameterExpressionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__MetadataType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__MetadataType(struct soap*, std::vector<ows__MetadataType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__MetadataType(struct soap*, const std::vector<ows__MetadataType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__MetadataType(struct soap*, const char*, int, const std::vector<ows__MetadataType *> *, const char*);
SOAP_FMAC3 std::vector<ows__MetadataType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__MetadataType(struct soap*, const char*, std::vector<ows__MetadataType *> *, const char*);
SOAP_FMAC1 std::vector<ows__MetadataType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__MetadataType *>  * soap_new_std__vectorTemplateOfPointerToows__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__MetadataType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType(struct soap*, std::vector<wfs__StoredQueryDescriptionType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType(struct soap*, const std::vector<wfs__StoredQueryDescriptionType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType(struct soap*, const char*, int, const std::vector<wfs__StoredQueryDescriptionType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__StoredQueryDescriptionType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType(struct soap*, const char*, std::vector<wfs__StoredQueryDescriptionType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__StoredQueryDescriptionType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__StoredQueryDescriptionType *>  * soap_new_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__StoredQueryDescriptionType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOfxsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__QName(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType(struct soap*, std::vector<wfs__StoredQueryListItemType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType(struct soap*, const std::vector<wfs__StoredQueryListItemType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType(struct soap*, const char*, int, const std::vector<wfs__StoredQueryListItemType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__StoredQueryListItemType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType(struct soap*, const char*, std::vector<wfs__StoredQueryListItemType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__StoredQueryListItemType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__StoredQueryListItemType *>  * soap_new_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__StoredQueryListItemType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__MemberPropertyType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__MemberPropertyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__MemberPropertyType(struct soap*, std::vector<wfs__MemberPropertyType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__MemberPropertyType(struct soap*, const std::vector<wfs__MemberPropertyType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__MemberPropertyType(struct soap*, const char*, int, const std::vector<wfs__MemberPropertyType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__MemberPropertyType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__MemberPropertyType(struct soap*, const char*, std::vector<wfs__MemberPropertyType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__MemberPropertyType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__MemberPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__MemberPropertyType *>  * soap_new_std__vectorTemplateOfPointerTowfs__MemberPropertyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__MemberPropertyType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__wfs__ValueListType_sequence_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__wfs__ValueListType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__wfs__ValueListType_sequence(struct soap*, std::vector<struct __wfs__ValueListType_sequence> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__wfs__ValueListType_sequence(struct soap*, const std::vector<struct __wfs__ValueListType_sequence> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__wfs__ValueListType_sequence(struct soap*, const char*, int, const std::vector<struct __wfs__ValueListType_sequence> *, const char*);
SOAP_FMAC3 std::vector<struct __wfs__ValueListType_sequence> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__wfs__ValueListType_sequence(struct soap*, const char*, std::vector<struct __wfs__ValueListType_sequence> *, const char*);
SOAP_FMAC1 std::vector<struct __wfs__ValueListType_sequence>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__wfs__ValueListType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct __wfs__ValueListType_sequence>  * soap_new_std__vectorTemplateOf__wfs__ValueListType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__wfs__ValueListType_sequence(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__ElementType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__ElementType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__ElementType(struct soap*, std::vector<wfs__ElementType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__ElementType(struct soap*, const std::vector<wfs__ElementType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__ElementType(struct soap*, const char*, int, const std::vector<wfs__ElementType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__ElementType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__ElementType(struct soap*, const char*, std::vector<wfs__ElementType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__ElementType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__ElementType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__ElementType *>  * soap_new_std__vectorTemplateOfPointerTowfs__ElementType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__ElementType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf__wfs__OutputFormatListType_sequence_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf__wfs__OutputFormatListType_sequence_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf__wfs__OutputFormatListType_sequence(struct soap*, std::vector<struct __wfs__OutputFormatListType_sequence> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf__wfs__OutputFormatListType_sequence(struct soap*, const std::vector<struct __wfs__OutputFormatListType_sequence> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf__wfs__OutputFormatListType_sequence(struct soap*, const char*, int, const std::vector<struct __wfs__OutputFormatListType_sequence> *, const char*);
SOAP_FMAC3 std::vector<struct __wfs__OutputFormatListType_sequence> * SOAP_FMAC4 soap_in_std__vectorTemplateOf__wfs__OutputFormatListType_sequence(struct soap*, const char*, std::vector<struct __wfs__OutputFormatListType_sequence> *, const char*);
SOAP_FMAC1 std::vector<struct __wfs__OutputFormatListType_sequence>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf__wfs__OutputFormatListType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct __wfs__OutputFormatListType_sequence>  * soap_new_std__vectorTemplateOf__wfs__OutputFormatListType_sequence(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf__wfs__OutputFormatListType_sequence(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__MetadataURLType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__MetadataURLType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__MetadataURLType(struct soap*, std::vector<wfs__MetadataURLType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__MetadataURLType(struct soap*, const std::vector<wfs__MetadataURLType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__MetadataURLType(struct soap*, const char*, int, const std::vector<wfs__MetadataURLType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__MetadataURLType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__MetadataURLType(struct soap*, const char*, std::vector<wfs__MetadataURLType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__MetadataURLType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__MetadataURLType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__MetadataURLType *>  * soap_new_std__vectorTemplateOfPointerTowfs__MetadataURLType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__MetadataURLType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType(struct soap*, std::vector<ows__WGS84BoundingBoxType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType(struct soap*, const std::vector<ows__WGS84BoundingBoxType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType(struct soap*, const char*, int, const std::vector<ows__WGS84BoundingBoxType *> *, const char*);
SOAP_FMAC3 std::vector<ows__WGS84BoundingBoxType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType(struct soap*, const char*, std::vector<ows__WGS84BoundingBoxType *> *, const char*);
SOAP_FMAC1 std::vector<ows__WGS84BoundingBoxType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__WGS84BoundingBoxType *>  * soap_new_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__WGS84BoundingBoxType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToows__KeywordsType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToows__KeywordsType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToows__KeywordsType(struct soap*, std::vector<ows__KeywordsType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToows__KeywordsType(struct soap*, const std::vector<ows__KeywordsType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToows__KeywordsType(struct soap*, const char*, int, const std::vector<ows__KeywordsType *> *, const char*);
SOAP_FMAC3 std::vector<ows__KeywordsType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToows__KeywordsType(struct soap*, const char*, std::vector<ows__KeywordsType *> *, const char*);
SOAP_FMAC1 std::vector<ows__KeywordsType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToows__KeywordsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ows__KeywordsType *>  * soap_new_std__vectorTemplateOfPointerToows__KeywordsType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToows__KeywordsType(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_wfs__Abstract_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_wfs__Abstract_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_wfs__Abstract(struct soap*, std::vector<_wfs__Abstract *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_wfs__Abstract(struct soap*, const std::vector<_wfs__Abstract *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_wfs__Abstract(struct soap*, const char*, int, const std::vector<_wfs__Abstract *> *, const char*);
SOAP_FMAC3 std::vector<_wfs__Abstract *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_wfs__Abstract(struct soap*, const char*, std::vector<_wfs__Abstract *> *, const char*);
SOAP_FMAC1 std::vector<_wfs__Abstract *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_wfs__Abstract(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wfs__Abstract *>  * soap_new_std__vectorTemplateOfPointerTo_wfs__Abstract(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTo_wfs__Abstract(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTo_wfs__Title_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTo_wfs__Title_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTo_wfs__Title(struct soap*, std::vector<_wfs__Title *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTo_wfs__Title(struct soap*, const std::vector<_wfs__Title *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTo_wfs__Title(struct soap*, const char*, int, const std::vector<_wfs__Title *> *, const char*);
SOAP_FMAC3 std::vector<_wfs__Title *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTo_wfs__Title(struct soap*, const char*, std::vector<_wfs__Title *> *, const char*);
SOAP_FMAC1 std::vector<_wfs__Title *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTo_wfs__Title(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wfs__Title *>  * soap_new_std__vectorTemplateOfPointerTo_wfs__Title(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTo_wfs__Title(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowfs__FeatureTypeType_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTowfs__FeatureTypeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowfs__FeatureTypeType(struct soap*, std::vector<wfs__FeatureTypeType *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowfs__FeatureTypeType(struct soap*, const std::vector<wfs__FeatureTypeType *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowfs__FeatureTypeType(struct soap*, const char*, int, const std::vector<wfs__FeatureTypeType *> *, const char*);
SOAP_FMAC3 std::vector<wfs__FeatureTypeType *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowfs__FeatureTypeType(struct soap*, const char*, std::vector<wfs__FeatureTypeType *> *, const char*);
SOAP_FMAC1 std::vector<wfs__FeatureTypeType *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowfs__FeatureTypeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wfs__FeatureTypeType *>  * soap_new_std__vectorTemplateOfPointerTowfs__FeatureTypeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTowfs__FeatureTypeType(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
